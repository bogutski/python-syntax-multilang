{
  "_id": "6696c2ca763f0712c198e0e0",
  "name": {
    "en": "How far the cars will travel, taking into account the wind",
    "ru": "Как далеко проедут автомобили c учетом ветра"
  },
  "instruction": {
    "en": "Write a function `distance` that takes three parameters:\n`mpg` - fuel consumption in miles per gallon,\n`tank` - number of gallons in the tank,\n`wind` - percentage of wind assistance. If the number is negative, the wind reduces the distance.\n\nIf `wind` is `10`, it means that the wind increases the distance by `10%`.\nIf `wind` equals `-10`, then it means that the wind decreases the distance by `10%`.\n\nIf `wind` is not specified, consider that `wind` is `-5`. This is the default setting.\n\nThe function should return the distance the car will travel including the wind.\n\n* Create a variable `car1Distance` and assign it the result of calling the `distance` function with arguments `20`, `3` and `0`.\n* Create a variable `car2Distance` and assign it the result of a call to the function `distance` with arguments `30`, `3` and `10`.\n* Create a variable `car3Distance` and assign it the result of a call to the function `distance` with arguments `40`, `3` and `10`.\n* Create a variable `car4Distance` and assign it the result of a call to the function `distance` with arguments `50`, `4`.\n\n\nUse the formula `mpg * tank * (1 + wind / 100)` to calculate the distance.",
    "ru": "Напиши функцию `distance`, которая принимает три параметра:\n`mpg` – расход топлива в милях на галлон,\n`tank` – количество галлонов в баке,\n`wind` – процент помощи ветра. Если отрицательное число, то ветер уменьшает дистанцию.\n\nЕсли `wind` равен `10`, то это означает, что ветер увеличивает дистанцию на `10%`.\nЕсли `wind` равен `-10`, то это означает, что ветер уменьшает дистанцию на `10%`.\n\nЕсли `wind` не указан, то считать, что `wind` равен `-5`. Это параметр по умолчанию.\n\nФункция должна возвращать расстояние, которое проедет автомобиль с учетом ветра.\n\n* Создайте переменную `car1Distance` и присвойте ей результат вызова функции `distance` с аргументами `20`, `3` и `0`.\n* Создайте переменную `car2Distance` и присвойте ей результат вызова функции `distance` с аргументами `30`, `3` и `10`.\n* Создайте переменную `car3Distance` и присвойте ей результат вызова функции `distance` с аргументами `40`, `3` и `-10`.\n* Создайте переменную `car4Distance` и присвойте ей результат вызова функции `distance` с аргументами `50`, `4`.\n\n\nИспользуйте формулу `mpg * tank * (1 + wind / 100)` для расчета дистанции."
  },
  "initialSolution": "fun",
  "completedSolution": "function distance(mpg, tank, wind = -5) {\n  return mpg * tank * (1 + wind / 100);\n}\n\nconst car1Distance = distance(20, 3, 0);\nconst car2Distance = distance(30, 3, 10);\nconst car3Distance = distance(40, 3, -10);\nconst car4Distance = distance(50, 4);",
  "openTest": "it('Created function distance', () => {\n  expect(distance).to.be.a('function');\n});\n\nit('function has 3 parameters', () => {\n  const func = distance.toString();\n  const params = func.match(/\\((.*?)\\)/)[1].split(',').length;\n  expect(params).to.equal(3);\n});\n\nit('distance(10, 10, 0) returns 100', () => {\n  expect(distance(10, 10, 0)).to.equal(100);\n});\n\nit('distance(10, 10, 10) returns 120', () => {\n  expect(distance(10, 10, 20)).to.equal(120);\n});\n\nit('distance(40, 10, 50) returns 600', () => {\n  expect(distance(40, 10, 50)).to.equal(600);\n});\n\nit('distance(10, 10, -10) returns 90', () => {\n  expect(distance(10, 10, -10)).to.equal(90);\n});\n\nit('distance(10, 10, -50) returns 50', () => {\n  expect(distance(10, 10, -50)).to.equal(50);\n});\n\nit('distance(10, 10) returns 90', () => {\n  expect(distance(10, 10)).to.equal(95);\n});\n\n// var car1Distance = distance(20, 3, 0);\nit('car1Distance = distance(20, 3, 0) returns 60', () => {\n  expect(car1Distance).to.equal(distance(20, 3, 0));\n  expect(car1Distance).to.equal(60);\n});\n\n// var car2Distance = distance(30, 3, 10);\nit('car2Distance = distance(30, 3, 10) returns 99', () => {\n  expect(car2Distance).to.equal(distance(30, 3, 10));\n  expect(car2Distance).to.equal(99.00000000000001);\n});\n\n// var car3Distance = distance(40, 3, -10);\nit('car3Distance = distance(40, 3, -10) returns 108', () => {\n  expect(car3Distance).to.equal(distance(40, 3, -10));\n  expect(car3Distance).to.equal(108);\n});\n\n// var car4Distance = distance(50, 4);\nit('car4Distance = distance(50, 4) returns 200', () => {\n  expect(car4Distance).to.equal(distance(50, 4));\n  expect(car4Distance).to.equal(190);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}