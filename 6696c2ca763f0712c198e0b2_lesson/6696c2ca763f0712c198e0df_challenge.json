{
  "_id": "6696c2ca763f0712c198e0df",
  "name": {
    "en": "Area of three rooms",
    "ru": "Площади трех комнат"
  },
  "instruction": {
    "en": "Create a function `roomArea` that takes two parameters `width` and `height` and returns the area of the room.\n\nCreate a variable `kitchenArea` and assign it the result of calling the `roomArea` function with arguments `15` and `14`.\n\nCreate a variable `livingRoomArea` and assign it the result of a call to the function `roomArea` with arguments `15` and `18`.\n\nCreate a variable `bedroomArea` and assign it the result of a call to the function `roomArea` with arguments `12` and `12`.\n\nThe names of the parameters must necessarily be the same as in the condition.",
    "ru": "Создайте функцию `roomArea`, которая принимает два параметра `width` и `height` и возвращает площадь комнаты.\n\nСоздайте переменную `kitchenArea` и присвойте ей результат вызова функции `roomArea` с аргументами `15` и `14`.\n\nСоздайте переменную `livingRoomArea` и присвойте ей результат вызова функции `roomArea` с аргументами `15` и `18`.\n\nСоздайте переменную `bedroomArea` и присвойте ей результат вызова функции `roomArea` с аргументами `12` и `12`.\n\nНазвания параметров должны быть обязательно такими как в условии."
  },
  "initialSolution": "function sum(num1, num2){\n\n}",
  "completedSolution": "function roomArea(width, height) {\n  return width * height;\n}\n\nconst kitchenArea = roomArea(15, 14);\nconst livingRoomArea = roomArea(15, 18);\nconst bedroomArea = roomArea(12, 12);",
  "openTest": "it('Created function roomArea', () => {\n  expect(roomArea).to.be.a('function');\n});\n\nit('function has parameters width and height', () => {\n  const func = roomArea.toString();\n  const params = func.match(/\\((.+?)\\)/)[1];\n  expect(params).to.equal('width, height');\n});\n\nit('Created variable kitchenArea and assigned value from function roomArea 15, 14', () => {\n  expect(kitchenArea).equal(roomArea(15, 14));\n});\n\nit('Created variable livingRoomArea and assigned value from function roomArea 15, 18', () => {\n  expect(livingRoomArea).equal(roomArea(15, 18));\n});\n\nit('Created variable bedroomArea and assigned value from function roomArea 12, 12', () => {\n  expect(bedroomArea).equal(roomArea(12, 12));\n});\n\nit('roomArea(15, 14) returns 210', () => {\n  expect(roomArea(15, 14)).equal(210);\n});\n\nit('roomArea(15, 18) returns 270', () => {\n  expect(roomArea(15, 18)).equal(270);\n});\n\nit('roomArea(12, 12) returns 144', () => {\n  expect(roomArea(12, 12)).equal(144);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}