{
  "_id": "6696c2ca763f0712c198e0dc",
  "name": {
    "en": "The function welcomes two people",
    "ru": "Функция приветствует двух людей"
  },
  "instruction": {
    "en": "Write a function `greetingMessage` that takes two parameters `firstName` and `lastName` and returns a string like `Welcome, firstName lastName!`.\n\nCreate a variable `person1FirstName` and give it the value 'John'.\nCreate a variable `person1LastName` and give it the value 'Doe'.\nCreate a variable `person2FirstName` and give it the value 'Jane'.\nCreate a variable `person2LastName` and give it the value 'Tailor'.\n\nCreate a variable `greetingMessage1` and give it the result of a call to the `greetingMessage` function.\nPass the values of the variables `person1FirstName` and `person1LastName` as an argument.\n\nCreate a variable `greetingMessage2` and give it the result of a call to the `greetingMessage` function.\nPass the values of the variables `person2FirstName` and `person2LastName` as an argument.\n\nA similar example:\n```javascript\nfunction fun(p1, p2) {\n  return 'Go ' + firstName + ' ' + lastName;\n}\n\nconst p1Fn = 'A';\nconst p1Ln = 'B';\nconst p2Fn = 'C';\nconst p2Ln = 'D';\n\nconst res1 = fun(p1Fn, p1Ln);\nconst res2 = fun(p2Fn, p2Ln);\n```",
    "ru": "Напиши функцию `greetingMessage`, которая принимает два параметра `firstName` и `lastName` и возвращает строку вида `Welcome, firstName lastName!`.\n\nСоздайте переменную `person1FirstName` и присвойте ей значение 'John'.\nСоздайте переменную `person1LastName` и присвойте ей значение 'Doe'.\nСоздайте переменную `person2FirstName` и присвойте ей значение 'Jane'.\nСоздайте переменную `person2LastName` и присвойте ей значение 'Tailor'.\n\nСоздайте переменную `greetingMessage1` и присвойте ей результат вызова функции `greetingMessage`.\nВ качестве аргумента передайте значения переменных `person1FirstName` и `person1LastName`.\n\nСоздайте переменную `greetingMessage2` и присвойте ей результат вызова функции `greetingMessage`.\nВ качестве аргумента передайте значения переменных `person2FirstName` и `person2LastName`.\n\nПохожий пример:\n```javascript\nfunction fun(p1, p2) {\n  return 'Go ' + firstName + ' ' + lastName;\n}\n\nconst p1Fn = 'A';\nconst p1Ln = 'B';\nconst p2Fn = 'C';\nconst p2Ln = 'D';\n\nconst res1 = fun(p1Fn, p1Ln);\nconst res2 = fun(p2Fn, p2Ln);\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function greetingMessage(firstName, lastName) {\n  return 'Welcome, ' + firstName + ' ' + lastName + '!';\n}\n\nconst person1FirstName = 'John';\nconst person1LastName = 'Doe';\n\nconst person2FirstName = 'Jane';\nconst person2LastName = 'Tailor';\n\nconst greetingMessage1 = greetingMessage(person1FirstName, person1LastName);\nconst greetingMessage2 = greetingMessage(person2FirstName, person2LastName);",
  "openTest": "it('Created function greetingMessage', () => {\n  expect(greetingMessage).to.be.a('function');\n});\n\nit('Created variable person1FirstName equal to \"John\"', () => {\n  expect(person1FirstName).to.equal('John');\n});\n\nit('Created variable person1LastName equal to \"Doe\"', () => {\n  expect(person1LastName).to.equal('Doe');\n});\n\nit('Created variable person2FirstName equal to \"Jane\"', () => {\n  expect(person2FirstName).to.equal('Jane');\n});\n\nit('Created variable person2LastName equal to \"Tailor\"', () => {\n  expect(person2LastName).to.equal('Tailor');\n});\n\nit('function greetingMessage has two parameters firstName, lastName', () => {\n  const func = greetingMessage.toString();\n  const params = func.match(/\\((.+?)\\)/)[1];\n  expect(params).to.equal('firstName, lastName');\n});\n\nit('greetingMessage(\"John\", \"Doe\") returns \"Welcome, John Doe!\" and message1 is \"Welcome, John Doe!\"', () => {\n  expect(greetingMessage1).to.equal('Welcome, John Doe!');\n});\n\nit('greetingMessage(\"Jane\", \"Tailor\") returns \"Welcome, Jane Tailor!\" and message2 is \"Welcome, Jane Tailor!\"', () => {\n  expect(greetingMessage2).to.equal('Welcome, Jane Tailor!');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}