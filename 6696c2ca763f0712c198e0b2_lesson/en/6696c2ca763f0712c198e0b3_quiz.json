{
  "name": "The result of the function into a variable",
  "questions": {
    "0": {
      "name": "The result of the function can be assigned to a variable",
      "variants": {
        "0": {
          "name": "The statement is true"
        },
        "1": {
          "name": "The statement is false"
        }
      }
    },
    "1": {
      "name": "You can call the function several times and get different results, then assign the results to variables",
      "variants": {
        "0": {
          "name": "The statement is true"
        },
        "1": {
          "name": "The statement is false"
        }
      }
    },
    "2": {
      "name": "If the function returns a value, you can assign the result of the function to a variable",
      "variants": {
        "0": {
          "name": "The statement is true"
        },
        "1": {
          "name": "The statement is false"
        }
      }
    },
    "3": {
      "name": "If there is no return in the function, the result of the function can be assigned to a variable",
      "variants": {
        "0": {
          "name": "There will be an error"
        },
        "1": {
          "name": "Will be assigned undefined"
        },
        "2": {
          "name": "You can't assign it."
        }
      }
    },
    "4": {
      "name": "Is it possible to assign the result of a function to a variable declared with const?",
      "variants": {
        "0": {
          "name": "No. A variable declared with const cannot be changed"
        },
        "1": {
          "name": "Yes. First the variable is declared and then the result of the function is assigned"
        },
        "2": {
          "name": "Yes. The function is called first and then the value is assigned to the variable"
        },
        "3": {
          "name": "There will be an error"
        }
      }
    },
    "5": {
      "name": "When you call a function, you can pass arguments and then assign the result of the function to a variable",
      "variants": {
        "0": {
          "name": "The statement is true"
        },
        "1": {
          "name": "The statement is false"
        },
        "2": {
          "name": "There will be an error"
        }
      }
    },
    "6": {
      "name": "The function can be called as many times as needed",
      "variants": {
        "0": {
          "name": "There is a limit of 128 calls"
        },
        "1": {
          "name": "There is a limit of 1024 calls"
        },
        "2": {
          "name": "There is no limit"
        }
      }
    },
    "7": {
      "name": "The variable can be called in the same way as the function",
      "variants": {
        "0": {
          "name": "Yes. If they have different scopes"
        },
        "1": {
          "name": "Yes. If they have the same scope"
        },
        "2": {
          "name": "No. You can't under any circumstances"
        },
        "3": {
          "name": "Not recommended, as it can be misleading"
        }
      }
    },
    "8": {
      "name": "The variable to which the result of a function is assigned cannot be changed, even if it is declared with the let keyword.",
      "variants": {
        "0": {
          "name": "The statement is true"
        },
        "1": {
          "name": "The statement is false"
        }
      }
    },
    "9": {
      "name": "Which option won't cause an error? Try to answer without running the code",
      "variants": {
        "0": {
          "name": "function f(n) { return '2 * n'; }; const a = f();"
        },
        "1": {
          "name": "function f(n) { return 2 * n; }; const a = f(n);"
        },
        "2": {
          "name": "function f(n) return 2 * n; }; let a = f(2); a = f(3);"
        },
        "3": {
          "name": "function f(n = 1) { return 2 * n; }; let a = f(2) + f();"
        }
      }
    }
  }
}