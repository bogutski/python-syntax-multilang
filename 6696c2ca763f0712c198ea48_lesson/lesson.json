{
  "_id": "6696c2ca763f0712c198ea48",
  "content": {
    "ru": "Создадим цикл, с помощью которого будем делать разные манипуляции с числами\nот min до max, от max до min и будем получать их сумму или разные вариации ряда чисел\n\n```javascript\nconst min = 4;\nconst max = 15;\n\nfor (let i = min; i <= max; i++){\n  console.log(i)\n}\n```\nЦикл создан от значения `min` до значения `max` с шагом итерации единица `i++`\n\nРезультат такого цикла\n```javascript\n// 4 5 6 7 8 9 10 11 12 13 14 15\n```\nКак получить с помощью цикла сумму чисел? \nДля этого необходимо создать переменную - аккумулятор, в которой мы будем накапливать сумму\n```javascript\nlet acc = 0;\n```\nДанную переменную необходимо создать при помощи `let`, так как ее значение будет изменяться. \nНеобходимо присвоить ей первоначальное значение равное нулю `let acc = 0`.\n\n```javascript\nconst min = 4;\nconst max = 15;\nlet acc = 0;\n\nfor (let i = min; i <= max; i++){\n acc += i\n}\nconsole.log(acc)\n```\nВ данном цикле каждое значение `i` будет прибавляться к аккумулятору:\n```javascript\n// acc = 0 + 4 = 4\n// acc = 4 + 5 = 9\n// acc = 9 + 6 = 15\n// acc = 15 + 7 = 22\n```\nи так далее...\nРезультат работы цикла выше \n```javascript\n// 114\n```\n\nТакже при работе в циклах с числами мы можем выполнять другие математические операции. \nНапример, умножение:\n\n```javascript\nconst min = 1;\nconst max = 3;\nlet acc = 1;\n\nfor (let i = min; i <= max; i++){\n acc *= i\n}\nconsole.log(acc)\n\n// 1 * 1 * 2 * 3 = 6\n```\nОбратите внимание, что в данном случае необходимо изменить первоначальное значение аккумулятора `let acc = 1`, иначе произведение ряда чисел всегда будет равняться нулю.\n\nМожно создать цикл, в котором будет виден не только конечный результат сложения чисел (или другой математической операции), но и итог каждой итерации.\nДля этого введем еще одну переменную - пустой массив.\n\nТеперь в теле цикла после прибавления числа к аккумулятору на каждом шаге итерации добавляем полученную промежуточную сумму в массив с помощью команды `push()`:\n\n```javascript\nconst min = 1;\nconst max = 5;\nlet acc = 0;\nconst arr = [];\n\nfor (let i = min; i <= max; i++) {\n  acc += i\n  arr.push(acc)\n}\nconsole.log(arr)\n\n// [1, 3, 5, 10, 15]\n```\n\nИли другой пример:\nЧисла в промежутке от `min` до `max` необходимо возвести в квадрат и вернуть массив из этих чисел.\n\n```javascript\nconst min = 1;\nconst max = 5;\nlet acc = 0;\nconst arr = [];\n\nfor (let i = min; i <= max; i++) {\n  acc += i ** 2\n  arr.push(acc)\n}\nconsole.log(arr)\n\n// [1, 5, 14, 30, 55]\n```\n\nВариаций на такие задачи может быть очень и очень много: складывать числа, возводить в квадрат, делить на какое-либо число, получать строку из чисел, выводить только четные или нечетные числа и т.д.\n\nПройдите в раздел решения задач и попрактикуйтесь на тему \"Сумма чисел от и до\"",
    "en": "Let's create a loop, with which we will do different manipulations with the numbers\nfrom min to max, from max to min and we will get their sum or different variations of a number series\n\n```javascript\nconst min = 4;\nconst max = 15;\n\nfor (let i = min; i <= max; i++){\n  console.log(i)\n}\n```\nThe cycle is created from value `min` to value `max` with iteration step one `i++`\n\nThe result of this cycle\n```javascript\n// 4 5 6 7 8 9 10 11 12 13 14 15\n```\nHow do we get the sum of the numbers with a cycle? \nTo do this, we need to create a variable, an accumulator, in which we will accumulate the sum of\n```javascript\nlet acc = 0;\n```\nThis variable must be created with `let` since its value will change. \nIt must be assigned an initial value of zero `let acc = 0`.\n\n```javascript\nconst min = 4;\nconst max = 15;\nlet acc = 0;\n\nfor (let i = min; i <= max; i++){\n acc += i\n}\nconsole.log(acc)\n```\nIn this cycle each value of `i` will be added to the accumulator:\n```javascript\n// acc = 0 + 4 = 4\n// acc = 4 + 5 = 9\n// acc = 9 + 6 = 15\n// acc = 15 + 7 = 22\n```\nand so on...\nThe result of the cycle above \n```javascript\n// 114\n```\n\nAlso, when working in loops with numbers, we can perform other mathematical operations. \nFor example, multiplication:\n\n```javascript\nconst min = 1;\nconst max = 3;\nlet acc = 1;\n\nfor (let i = min; i <= max; i++){\n acc *= i\n}\nconsole.log(acc)\n\n// 1 * 1 * 2 * 3 = 6\n```\nNote that in this case you must change the original accumulator value `let acc = 1`, otherwise the product of a series of numbers will always be zero.\n\nYou can create a loop that will show not only the final result of adding numbers (or other mathematical operation), but also the total of each iteration.\nTo do this, let's introduce another variable - an empty array.\n\nNow, in the loop body, after adding a number to the accumulator at each iteration step, we add the resulting subtotal to the array using the `push()` command:\n\n```javascript\nconst min = 1;\nconst max = 5;\nlet acc = 0;\nconst arr = [];\n\nfor (let i = min; i <= max; i++) {\n  acc += i\n  arr.push(acc)\n}\nconsole.log(arr)\n\n// [1, 3, 5, 10, 15]\n```\n\nOr another example:\nNumbers between `min` and `max` must be squared and an array of these numbers returned.\n\n```javascript\nconst min = 1;\nconst max = 5;\nlet acc = 0;\nconst arr = [];\n\nfor (let i = min; i <= max; i++) {\n  acc += i ** 2\n  arr.push(acc)\n}\nconsole.log(arr)\n\n// [1, 5, 14, 30, 55]\n```\n\nThere can be many variations on such problems: adding numbers, squaring, dividing by any number, getting a string of numbers, outputting only even or odd numbers, etc.\n\nGo to the problem-solving section and practice \"The sum of numbers from and to",
    "es": "# Сумма чисел от и до language: es"
  },
  "video": {
    "ru": "https://youtu.be/ASXqi14w3es",
    "en": "",
    "es": ""
  }
}