// NAMEEN:
// NAMERU:Количество рядов в отделе супермаркета

/*
INSTRUCTIONENSTART

INSTRUCTIONENEND
*/

/*
INSTRUCTIONRUSTART
Внутри массива могут храниться другие массивы и объекты. Точно так же, внутри объекта могут храниться другие объекты и массивы.

Обращение к элементам массива, вложенным в объект, происходит следующим образом:
```javascript
const object = { array: [10, 20, 30] };
console.log(object.array[0]);  // 10
```
Сперва выполняется обращение к свойству `array` объекта `object`, а затем к элементу с индексом `0` массива, который хранится в свойстве `array`.

Длину массива, вложенного в объект, можно узнать, обратившись к его свойству `length`:
```javascript
const object = { array: [10, 20, 30] };
console.log(object.array.length);  // 3
```

Напишите функцию `getQuantity`, которая принимает на вход два параметра:
* `aisles` – информация о номерах рядов в супермаркете, объект;
* `section` – буквенное обозначение интересующего отдела в супермаркете, строка. Может принимать значения `A`, `B`, `C` и т.д.

Объект `aisles` состоит из массивов и имеет следующую структуру (пример):
```javascript
{
  A: [1, 2, 3, 4, 5, 6, 7, 8],
  B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
  C: [1, 2, 3, 4, 5, 6]
}
```
где свойства `A`, `B`, `C` - это буквенные обозначения отделов в супермаркете, а их значения - это массивы с перечнем рядов в отделе.

Функция должна возвращать количество рядов в интересующем отделе `section`.

Условия:
* Тип возвращаемого значения - число;
* `section` принимает ровно одну букву английского алфавита и может быть в любом регистре. Перед проверкой приведите букву к верхнему регистру;
* Если в супермаркете нет отдела с обозначением `section`, то функция должна вернуть строку `No such section`.

Примеры запуска функции:
```javascript
getQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, "A");  // 3
getQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, "b");  // 7
getQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, "F");  // "No such section"
```
INSTRUCTIONRUEND
*/

/*
INITIALSOLUTIONSTART
fun
INITIALSOLUTIONEND
*/

// SOLUTIONSTART
function getQuantity(aisles, section) {
  if (aisles.hasOwnProperty(section.toUpperCase())) {
    return aisles[section.toUpperCase()].length;
  } else {
    return 'No such section';
  }
}
// SOLUTIONEND


// OPENTESTSSTART
it('Created function `getQuantity`', () => {
  expect(getQuantity).to.be.a('function');
});

it('getQuantity({A: [1, 2, 3, 4, 5, 6, 7, 8]}, "a");  // 8', () => {
  expect(getQuantity({ A: [1, 2, 3, 4, 5, 6, 7, 8] }, 'a')).eq(8);
});

it('getQuantity({A: [1, 2, 3, 4, 5, 6, 7, 8], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}, "B");  // 12', () => {
  expect(getQuantity({ A: [1, 2, 3, 4, 5, 6, 7, 8], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }, 'B')).eq(12);
});

it('getQuantity({A: [1, 2, 3, 4, 5, 6, 7, 8], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}, "C");  // "No such section"', () => {
  expect(getQuantity({ A: [1, 2, 3, 4, 5, 6, 7, 8], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }, 'C')).eq('No such section');
});

it('getQuantity({A: [], B: [], C: [], D: []}, "z");  // 0', () => {
  expect(getQuantity({ A: [], B: [], C: [], D: [] }, 'z')).eq('No such section');
});

it('getQuantity({A: [], B: [], C: [], D: []}, "a");  // 0', () => {
  expect(getQuantity({ A: [], B: [], C: [], D: [] }, 'a')).eq(0);
});

it('getQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], C: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], D: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, "_");  // 10', () => {
  expect(getQuantity({ A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], C: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], D: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] }, '_')).eq('No such section');
});

it('getQuantity({O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0]}, "o");  // 6', () => {
  expect(getQuantity({ O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0] }, 'o')).eq(6);
});

it('getQuantity({O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0]}, "q");  // 9', () => {
  expect(getQuantity({ O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0] }, 'q')).eq(9);
});

it('getQuantity({O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0]}, "r");  // 5', () => {
  expect(getQuantity({ O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0] }, 'r')).eq(5);
});
// OPENTESTSEND

// HIDDENTESTSSTART

// HIDDENTESTSEND
