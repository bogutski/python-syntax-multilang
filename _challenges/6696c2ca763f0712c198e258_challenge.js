// NAMEEN:
// NAMERU:Определить, что 4 точки образуют квадрат

/*
INSTRUCTIONENSTART

INSTRUCTIONENEND
*/

/*
INSTRUCTIONRUSTART
В этой задаче мы будем использовать оси координат.

Ось `x` направлена вправо, ось `y` – вверх.

Точка `(0, 0)` – это начало координат.

Именно в этой задаче мы не используем отрицательные координаты.

Все точки находятся в первой четверти координатной плоскости.

Напишите функцию `isSquare`, которая принимает четыре точки и возвращает `true`, если эти точки образуют квадрат.

Каждая точка задается двумя координатами: `x` и `y`.

Квадрат – это четырехугольник, у которого все стороны равны.

Функция `isSquare` принимает параметры в следующем порядке:
- `x1`, `y1` – координаты первой точки. Нижняя левая точка квадрата.
- `x2`, `y2` – координаты второй точки. Верхняя левая точка квадрата.
- `x3`, `y3` – координаты третьей точки. Верхняя правая точка квадрата.
- `x4`, `y4` – координаты четвертой точки. Нижняя правая точка квадрата.

Всего 4 точки и 8 параметров. Последовательность определения точек важна.

Нижняя грань квадрата параллельна оси `x`, левая грань параллельна оси `y`.

Примеры запуска функции:
```javascript
isSquare(2, 1, 2, 5, 6, 5, 6, 1); // true
isSquare(2, 1, 2, 5, 8, 5, 8, 1) // false
```

Для лучшего понимания, нарисуйте на бумаге эти фигуры. Найдите закономерности в координатах точек.

![](https://course-qa-basics.s3.us-west-1.amazonaws.com/square-diagram.gif)

Наверное, вы заметите, что у точек квадрата есть общие свойства между парами.

Например, `x1` и `x2` всегда равны, и `y1`, и `y4` всегда равны. Найдите остальные закономерности.

Учитывайте, что просто сравнить все параметры между собой не получится, так как в некоторых случаях это будет пропускать прямоугольник.

Обязательно делайте проверку на длину сторон квадрата – горизонтальные и вертикальные стороны должны быть равны.

Используйте `if` и операторы сравнения для решения задачи.


Алгоритм проверки:
1. Проверить, что `x1` равен `x2`
2. Проверить, что `y1` равен `y4`
3. Проверить, что `x3` равен `x4`
4. Проверить, что `y2` равен `y3`
5. Проверить, что `(y2-y1)` равен `(x3 - x2)` – длины перпендикулярных сторон равны.

Если все условия выполняются, то точки образуют квадрат.

INSTRUCTIONRUEND
*/

/*
INITIALSOLUTIONSTART
fun
INITIALSOLUTIONEND
*/

// SOLUTIONSTART
function isSquare(x1, y1, x2, y2, x3, y3, x4, y4) {
  if (x1 === x2 && y1 === y4 && x3 === x4 && y2 === y3 && y2 - y1 === x3 - x2) {
    return true;
  }
  return false;
}
// SOLUTIONEND


// OPENTESTSSTART
it('Created function isSquare', () => {
  expect(isSquare).to.be.a('function');
});

it('isSquare(2,1,2,5,6,5,6,1) === true', () => {
  expect(isSquare(2, 1, 2, 5, 6, 5, 6, 1)).to.be.equal(true);
});

it('isSquare(2,1,2,5,8,5,8,1) === false', () => {
  expect(isSquare(2, 1, 2, 5, 8, 5, 8, 1)).to.be.equal(false);
});

it('isSquare(0, 0, 0, 1, 1, 1, 1, 0) === true', () => {
  expect(isSquare(0, 0, 0, 1, 1, 1, 1, 0)).to.be.equal(true);
});


it('isSquare(2, 2, 2, 3, 3, 3, 3, 2) === true', () => {
  expect(isSquare(2, 2, 2, 3, 3, 3, 3, 2)).to.be.equal(true);
});

it('isSquare(4, 4, 4, 5, 5, 5, 5, 4) === true', () => {
  expect(isSquare(4, 4, 4, 5, 5, 5, 5, 4)).to.be.equal(true);
});

it('isSquare(0, 0, 0, 1, 1, 1, 1, 1) === false', () => {
  expect(isSquare(0, 0, 0, 1, 1, 1, 1, 1)).to.be.equal(false);
});

it('isSquare(0, 0, 0, 1, 1, 1, 0, 1) === false', () => {
  expect(isSquare(0, 0, 0, 1, 1, 1, 0, 1)).to.be.equal(false);
});

it('isSquare(0, 0, 1, 0, 1, 1, 0, 0) === false', () => {
  expect(isSquare(0, 0, 1, 0, 1, 1, 0, 0)).to.be.equal(false);
});

it('isSquare(0, 0, 1, 0, 1, 1, 0, 2) === false', () => {
  expect(isSquare(0, 0, 1, 0, 1, 1, 0, 2)).to.be.equal(false);
});

it('isSquare(0, 0, 1, 0, 1, 1, 0, 3) === false', () => {
  expect(isSquare(0, 0, 1, 0, 1, 1, 0, 3)).to.be.equal(false);
});

it('isSquare(0, 0, 1, 0, 1, 1, 0, 4) === false', () => {
  expect(isSquare(0, 0, 1, 0, 1, 1, 0, 4)).to.be.equal(false);
});

it('isSquare(0, 0, 1, 0, 1, 1, 0, 5) === false', () => {
  expect(isSquare(0, 0, 1, 0, 1, 1, 0, 5)).to.be.equal(false);
});
// OPENTESTSEND

// HIDDENTESTSSTART

// HIDDENTESTSEND
