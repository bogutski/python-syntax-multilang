{
  "_id": "6696c2cb763f0712c198f8e1",
  "name": {
    "en": "/*",
    "ru": "Проверка вложенных объектов на наличие ключа со значением определенного типа"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `areAllNestedObjectsContainKeyWithType`, которая принимает массив объектов, строку (ключ) и строку (тип значения).\n\nФункция должна возвращать `true`, если все объекты содержат указанный ключ со значением указанного типа (включая вложенные объекты), и `false` в противном случае.\n\nОбъекты будут одномерные и двухмерные.\n\n\nПримеры запуска функции:\n```javascript\nareAllNestedObjectsContainKeyWithType([{a: {b: '1'}}, {a: {b: 2}}, {a: {b: 3}}], 'b', 'number'); // false\nareAllNestedObjectsContainKeyWithType([{b: 'hello', y: 'abc'}, {c: 'world', y: 85}], 'y', 'string'); // false\nareAllNestedObjectsContainKeyWithType([{a: 5, c: {b: 1}}, {a: {b: 2}}, {a: {b: 3}}, {b: 10}], 'b', 'number'); // true\nareAllNestedObjectsContainKeyWithType([{a: {b: 'hello', k: '25'}}, {a: 52, m: {k: 'world'}}, {k: 'JS'}], 'k', 'string'); // true\n```"
  },
  "initialSolution": "function areAllNestedObjectsContainKeyWithType(){\n\n}",
  "completedSolution": "function areAllNestedObjectsContainKeyWithType(arr, key, type) {\n  return arr.every(obj => {\n    const properties = Object.keys(obj);\n\n    if(properties.includes(key)) return typeof obj[key] === type\n    else {\n      for(let el of properties){\n        if(typeof obj[el] === 'object' && obj[el].hasOwnProperty(key)) return typeof obj[el][key] === type;\n      }\n    }\n\n    return false\n  });\n}",
  "openTest": "it('Created function areAllNestedObjectsContainKeyWithType', () => {\n  expect(areAllNestedObjectsContainKeyWithType).to.be.a('function');\n});\n\nit('areAllNestedObjectsContainKeyWithType([{a: 5, c: {b: 1}}, {a: {b: 2}}, {a: {b: 3}}, {b: 10}], \"b\", \"number\") should return true', function() {\n  expect(areAllNestedObjectsContainKeyWithType([{a: 5, c: {b: 1}}, {a: {b: 2}}, {a: {b: 3}}, {b: 10}], \"b\", \"number\")).to.equal(true);\n});\n\nit('areAllNestedObjectsContainKeyWithType([{a: {b: \"1\"}}, {a: {b: 2}}, {a: {b: 3}}], \"b\", \"number\") should return false', function() {\n  expect(areAllNestedObjectsContainKeyWithType([{a: {b: \"1\"}}, {a: {b: 2}}, {a: {b: 3}}], \"b\", \"number\")).to.equal(false);\n});\n\nit('areAllNestedObjectsContainKeyWithType([{a: {b: \"hello\", k: \"25\"}}, {a: 52, m: {k: \"world\"}}, {k: \"JS\"}], \"k\", \"string\") should return true', function() {\n  expect(areAllNestedObjectsContainKeyWithType([{a: {b: \"hello\", k: \"25\"}}, {a: 52, m: {k: \"world\"}}, {k: \"JS\"}], \"k\", \"string\")).to.equal(true);\n});\n\nit('areAllNestedObjectsContainKeyWithType([{b: \"hello\", y: \"abc\"}, {c: \"world\", y: 85}], \"y\", \"string\") should return false', function() {\n  expect(areAllNestedObjectsContainKeyWithType([{b: \"hello\", y: \"abc\"}, {c: \"world\", y: 85}], \"y\", \"string\")).to.equal(false);\n});\n\nit('areAllNestedObjectsContainKeyWithType([{a: {x: true}}, {a: {x: false}}, {a: {x: true}}], \"x\", \"boolean\") should return true', function() {\n  expect(areAllNestedObjectsContainKeyWithType([{a: {x: true}}, {a: {x: false}}, {a: {x: true}}], \"x\", \"boolean\")).to.equal(true);\n});\n\nit('areAllNestedObjectsContainKeyWithType([{a: {x: true}}, {a: {x: \"false\"}}, {a: {x: true}}], \"x\", \"boolean\") should return false', function() {\n  expect(areAllNestedObjectsContainKeyWithType([{a: {x: true}}, {a: {x: \"false\"}}, {a: {x: true}}], \"x\", \"boolean\")).to.equal(false);\n});\n\nit('areAllNestedObjectsContainKeyWithType([{a: {y: 10}}, {a: {y: 20}}, {a: {y: 30}}], \"y\", \"number\") should return true', function() {\n  expect(areAllNestedObjectsContainKeyWithType([{a: {y: 10}}, {a: {y: 20}}, {a: {y: 30}}], \"y\", \"number\")).to.equal(true);\n});\n\nit('areAllNestedObjectsContainKeyWithType([{a: {y: 10}}, {a: {y: \"20\"}}, {a: {y: 30}}], \"y\", \"number\") should return false', function() {\n  expect(areAllNestedObjectsContainKeyWithType([{a: {y: 10}}, {a: {y: \"20\"}}, {a: {y: 30}}], \"y\", \"number\")).to.equal(false);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}