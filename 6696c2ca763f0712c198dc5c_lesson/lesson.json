{
  "_id": "6696c2ca763f0712c198dc5c",
  "video": {
    "ru": "https://youtu.be/geBLXK28kbM",
    "en": "https://youtu.be/geBLXK28kbM",
    "es": ""
  },
  "content": {
    "ru": "Строка (string) в JavaScript должна быть заключена в кавычки. В JavaScript существует три типа кавычек.\n```\nlet str ='Hello world';\nlet str2 = \"World\"; \nlet str3 = `Sum  ${1+2}`;\n```\nДвойные или одинарные кавычки являются «простыми», между ними нет разницы в JavaScript.\n\nОбратные кавычки же имеют «расширенный функционал». Они позволяют нам встраивать выражения в строку, заключая их в `${…}`. \n\nНапример,\n```\nlet price = 30;\nlet count = 15;\nconsole.log(`Price of ${count} toys is ${price * count} dollars`); // выведет \"Price of 15 toys is 450 dollars\"\n```\nСвойство `length` позволяет вычислить длину строки, т.е. количество символов в строке. Бывает так, что люди с практикой в других языках случайно пытаются вызвать его, добавляя круглые скобки: они пишут str.length() вместо `str.length`. Это вызовет ошибку. Так как `str.length` — это числовое свойство, а не функция, добавлять скобки не нужно.\n\n```\nlet str ='Hello world';\nconsole.log(str.length); //выведет длину строки str, т.е. 11 \n```\nНумерация символов в строке начинается с нуля.\n\nОбратиться к конкретному символу строки можно по его индексу. Например, `str[0] ` - символ строки str по индексу 0.\n```\nlet str ='I like JavaScript';\nconsole.log(str[0]); //выведет  \"I\";\nconsole.log(str[7]); //выведет  \"J\";\nconsole.log(str[str.length - 1]); //выведет  последний символ строки, т.е. \"t\";\n```\n\nСо строками можно выполнять операцию слияния (операцию конкатенации), которая обозначается знаком `+`.\n```\nlet str1 ='How';\nlet str2 = 'do';\nlet str3 = 'you';\nconsole.log(str1 + ' '  + str2 + ' ' + str3 + ' ' + str2 + '?'); //выведет  \"How do you do?\"\n```\nИногда бывает необходимо в строку вставить специальные символы, такие как перевод строки, кавычки и т.п. Все специальные символы начинаются с обратного слеша, `\\` — так называемого **«символа экранирования»**. Примеры специальных символов:\n- `\\n` - перевод строки\n- `\\\"`, `\\'` - кавычки\n- `\\t` -  знак табуляции\n- `\\\\` - обратный слеш\n\n**Содержимое строки в JavaScript нельзя изменить**.\n\n Нельзя взять символ посередине и заменить его. Как только строка создана — она такая навсегда.\nСтроки в JavaScript **иммутабельны**. Все методы работы со строками предоставляют возможности либо только для чтения, либо возвращают новую строку. Иммутабельность предполагает, что после создания строки она не может быть изменена. \n\n",
    "en": "A string in JavaScript must be enclosed in quotation marks. There are three types of quotes in JavaScript.\n```\nlet str ='Hello world';\nlet str2 = \"World\"; \nlet str3 = `Sum  ${1+2}`;\n```\nDouble or single quotes are \"simple\"; there is no difference between them in JavaScript.\n\nReverse quotes, on the other hand, have \"advanced functionality\". They allow us to embed expressions in a string by enclosing them in `${...}`. \n\nFor example,\n```\nlet price = 30;\nlet count = 15;\nconsole.log(`Price of ${count} toys is ${price * count} dollars`); // print \"Price of 15 toys is 450 dollars\"\n```\nThe `length` property lets you calculate the length of a string, i.e. the number of characters in the string. It happens that people with practice in other languages accidentally try to call it by adding parentheses: they write str.length() instead of `str.length`. This will cause an error. Since `str.length` is a numeric property, not a function, there is no need to add parentheses.\n\n```\nlet str ='Hello world';\nconsole.log(str.length); //displays the length of str, i.e. 11 \n```\nThe numbering of characters in the string starts from zero.\n\nYou can refer to a particular string character by its index. For example, `str[0] ` - str character by index 0.\n```\nlet str ='I like JavaScript';\nconsole.log(str[0]); //will print \"I\";\nconsole.log(str[7]); //will display \"J\";\nconsole.log(str[str.length - 1]); //will display the last character of the string, i.e. \"t\";\n```\n\nWith strings you can perform a merge operation (concatenation operation), which is denoted by `+`.\n```\nlet str1 ='How';\nlet str2 = 'do';\nlet str3 = 'you';\nconsole.log(str1 + ' ' + str2 + ' ' + str3 + ' ' + str2 + '?'); //will print \"How do you do?\"\n```\nSometimes it is necessary to insert special characters into a string, such as line feeds, quotation marks, etc. All special characters begin with a backslash, `\\` - the so-called **\"escape character\"**. Examples of special characters:\n- `\\n` - line translation\n- `\\\"`, `\\'` - quotation marks\n- `\\t` - tab character\n- `\\\\` - backslash\n\n**The content of a line in JavaScript cannot be changed**.\n\n You can't take a character in the middle and replace it. Once a string is created, it is forever.\nStrings in JavaScript are **immutable**. All string methods provide either read-only capabilities or return a new string. Imutability implies that once a string is created, it cannot be changed. \n\n",
    "es": "\n"
  }
}