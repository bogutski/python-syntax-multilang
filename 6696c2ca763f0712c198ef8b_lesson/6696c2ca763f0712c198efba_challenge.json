{
  "_id": "6696c2ca763f0712c198efba",
  "name": {
    "en": "",
    "ru": "Сумма положительных и отрицательных чисел в массиве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sumOfPosAndNeg`, которая принимает массив чисел и возвращает массив из двух сумм.\n\n* Первый элемент возвращаемого массива - это сумма положительных чисел.\n\n* Второй элемент возвращаемого массива - это сумма отрицательных чисел.\n\nЕсли массив пустой, то верните строку 'Array is empty'.\n\n\nПример запуска функции:\n```javascript\nsumOfPosAndNeg([1, 2, 3, -1, -2, -3]) // [6, -6]\nsumOfPosAndNeg([-25, -30, -15])       // [0, -70]\nsumOfPosAndNeg([10, 20, 30])          // [60, 0]\nsumOfPosAndNeg([])                    // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function sumOfPosAndNeg(arr){\n  if(!arr.length) return 'Array is empty';\n    let sumPos = 0;\n    let sumNeg = 0;\n    for (let i = 0; i < arr.length; i++){\n        if (arr[i] > 0)sumPos += arr[i]\n        else sumNeg += arr[i]\n    }\n    return [sumPos, sumNeg]\n}",
  "openTest": "it('Created function sumOfPosAndNeg', () => {\n  expect(sumOfPosAndNeg).to.be.a('function');\n});\n\nit('sumOfPosAndNeg([1,2,3,4,5,6,7,8,9,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) returns [55, -55]', () => {\n  expect(sumOfPosAndNeg([1,2,3,4,5,6,7,8,9,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])).to.deep.equal([55, -55]);\n});\n\nit('sumOfPosAndNeg([10,222,3,44,5,6,71,83,99,1000]) should return [1543, 0]', () => {\n  expect(sumOfPosAndNeg([10,222,3,44,5,6,71,83,99,1000])).to.deep.equal([1543, 0]);\n});\n\nit('sumOfPosAndNeg([-123, -47, -63, -14, -3, -700, -107, -27, -9, -10]) should return [0, -1103]', () => {\n  expect(sumOfPosAndNeg([-123, -47, -63, -14, -3, -700, -107, -27, -9, -10])).to.deep.equal([0, -1103]);\n});\n\nit('sumOfPosAndNeg([100, -42, 57, -369, 500, -1, 0, -999, 1, 2]) should return [660, -1411]', () => {\n  expect(sumOfPosAndNeg([100, -42, 57, -369, 500, -1, 0, -999, 1, 2])).to.deep.equal([660, -1411]);\n});\n\nit(\"sumOfPosAndNeg([]) should return 'Array is empty'\", () => {\n  expect(sumOfPosAndNeg([])).to.deep.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}