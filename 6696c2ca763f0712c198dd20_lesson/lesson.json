{
  "_id": "6696c2ca763f0712c198dd20",
  "video": {
    "ru": "https://youtu.be/eD4ASxvFo_0",
    "en": "https://youtu.be/eD4ASxvFo_0",
    "es": ""
  },
  "content": {
    "ru": "Значение `null` не относится ни к одному из типов, рассмотренных ранее, а образует свой отдельный тип, состоящий из единственного значения `null`:\n```\nlet age = null;\n```\nДля записи в переменную «пустого» или «неизвестного» значения используется **null**.\nВ JavaScript `null` не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках. Это просто специальное значение, которое имеет смысл «ничего» или «значение неизвестно».![](https://course-qa-basics.s3.us-west-1.amazonaws.com/is-null-equal-to-an-empty-string.png)\n\nВ частности, код выше говорит о том, что возраст `age` неизвестен.\n\nИнтересной особенностью этого типа данных является то, что `typeof null` выдает результат \"object\" – это официально признанная ошибка в языке, которая сохраняется для совместимости. На самом деле` null` – это не объект, а отдельный тип данных.\n\nДругой особенностью этого типа данных является то, что `null` строго равен только самому себе и ничему больше.![](https://course-qa-basics.s3.us-west-1.amazonaws.com/is-null-equal-to-itself.png) А точнее:\n```\nconsole.log(null === null); // true\n```\nПри нестрогом сравнении null и undefined получаем true: ![](https://course-qa-basics.s3.us-west-1.amazonaws.com/compare-null-and-undefined.png)\n``` \nconsole.log(null == undefined); // true\n```\n\nЧто же можно делать с `null`, если он равен только самому себе? Какие математические операции можно с ним совершать?  \nТут все довольно прозаично: при выполнении арифметических операций и сравнениях (>, >=, <, <=) `null` становится обычным нулем 0.![](https://course-qa-basics.s3.us-west-1.amazonaws.com/compare-null-with-zero.png)\n```\nconsole.log(null < 1);     // true\nconsole.log(null <= -1);   // false\nconsole.log(null > 5);     // false\nconsole.log(null >= -5);   // true\nconsole.log(null <= 0);    // true\nconsole.log(null >= 0);    // true\nconsole.log(null > 0);     // false\nconsole.log(null == 0);    // false\n```\n\n\n",
    "en": "The `null` value does not belong to any of the types discussed earlier, but forms its own separate type consisting of a single `null` value:\n```\nlet age = null;\n```\nTo assign a \"empty\" or \"unknown\" value to a variable, **null** is used.\nIn JavaScript, `null` is not a \"reference to a non-existent object\" or a \"null pointer\" like in some other languages. It is simply a special value that means \"nothing\" or \"unknown value\".![](https://course-qa-basics.s3.us-west-1.amazonaws.com/is-null-equal-to-an-empty-string.png)\n\nIn particular, the code above says that the `age` is unknown.\n\nAn interesting feature of this data type is that `typeof null` gives the result \"object\" - this is an officially recognized error in the language, which is kept for compatibility. In fact, `null` is not an object, but a separate data type.\n\nAnother feature of this data type is that `null` is strictly equal only to itself and nothing more.![](https://course-qa-basics.s3.us-west-1.amazonaws.com/is-null-equal-to-itself.png) More precisely:\n```\nconsole.log(null === null); // true\n```\nA non-strict comparison of null and undefined yields true: ![](https://course-qa-basics.s3.us-west-1.amazonaws.com/compare-null-and-undefined.png)\n``` \nconsole.log(null == undefined); // true\n```\n\nWhat can be done with `null` if it is equal to itself? What mathematical operations can be performed with it?  \nHere everything is quite prosaic: when performing arithmetic operations and comparisons (>, >=, <, <=), `null` becomes a regular zero 0.![](https://course-qa-basics.s3.us-west-1.amazonaws.com/compare-null-with-zero.png)\n```\nconsole.log(null < 1);     // true\nconsole.log(null <= -1);   // false\nconsole.log(null > 5);     // false\nconsole.log(null >= -5);   // true\nconsole.log(null <= 0);    // true\nconsole.log(null >= 0);    // true\nconsole.log(null > 0);     // false\nconsole.log(null == 0);    // false\n```\n\n\n",
    "es": "\n"
  }
}