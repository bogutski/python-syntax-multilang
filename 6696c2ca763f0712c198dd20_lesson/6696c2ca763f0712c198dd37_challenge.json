{
  "_id": "6696c2ca763f0712c198dd37",
  "name": {
    "en": "What do you get if you add a number to null?",
    "ru": "Что получится, если к null прибавить число?"
  },
  "instruction": {
    "en": "\"Null is emptiness. And if you add something to emptiness, you will get what you added...\" (from \"Tales about numbers\")\n\nCreate a variable named `empty` and assign it the value `null`.\nCreate a variable named `number` and assign it a random number.\nCreate a variable named `sum` and assign it the sum of variables `empty` and `number`.\nCreate a variable named `typeOfSum` and assign it the type of variable `sum`.\n\nLet's provide an example that is fundamentally similar to what needs to be done,\nbut adapt it to the requirements of the task:\n```javascript\nconst money = null;\nconst extra = 1000;\nconst result = money + extra;\nconst type = typeof result;\n```",
    "ru": "\"Null - это пустота. А если что-то прибавить к пустоте, получишь то, что прибавлял...\" (из \"Сказки о цифрах\")\n\nСоздайте переменную с именем `empty` и присвойте ей значение `null`.\nСоздайте переменную с именем `number` и присвойте ей значение произвольного числа.\nСоздайте переменную с именем `sum` и присвойте ей сумму переменных `empty` и `number`.\nСоздайте переменную с именем `typeOfSum` и присвойте ей значение типа переменной `sum`.\n\nПриведем пример, который принципиально похож на то, что нужно сделать,\nно адаптируйте его к требованиям задачи:\n```javascript\nconst money = null;\nconst extra = 1000;\nconst result = money + extra;\nconst type = typeof result;\n```"
  },
  "initialSolution": "",
  "completedSolution": "const empty = null;\nconst number = 1;\nconst sum = empty + number;\nconst typeOfSum = typeof sum;",
  "openTest": "it('Variable `empty` exists and has a value', () => {\n  expect(empty).not.undefined;\n});\n\nit('The `empty` variable is of type object', () => {\n  expect(typeof empty).equal('object');\n});\n\nit('Variable `empty` has value null', () => {\n  expect(empty).equal(null);\n});\n\nit('Variable `number` exists and has a value', () => {\n  expect(number).not.undefined;\n});\n\nit('Variable `number` has type number', () => {\n  expect(number).a('number');\n});\n\nit('Variable `number` is not NaN', () => {\n  expect(isNaN(number)).false;\n});\n\nit('Variable`sum` exists and has a value', () => {\n  expect(sum).not.undefined;\n});\n\nit('Variable`sum` has type number', () => {\n  expect(sum).a('number');\n});\n\nit('Variable`sum` is not equal to NaN', () => {\n  expect(isNaN(sum)).false;\n});\n\nit('Variable`sum` is equal to sum', () => {\n  expect(sum).equal(number);\n});\n\nit('Variable `typeOfSum` exists and has a value', () => {\n  expect(typeOfSum).not.undefined;\n});\n\nit('Variable `typeOfSum` has type string', () => {\n  expect(typeOfSum).a('string');\n});\n\nit('Variable `typeOfSum` has value `number` ', () => {\n  expect(typeOfSum).equal('number');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "```javascript\nconst empty = null;\nconst number = 1;\nconst sum = empty + number;\nconst typeOfSum = typeof sum;\n```",
    "ru": "```javascript\nconst empty = null;\nconst number = 1;\nconst sum = empty + number;\nconst typeOfSum = typeof sum;\n```"
  }
}