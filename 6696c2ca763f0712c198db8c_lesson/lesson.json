{
  "_id": "6696c2ca763f0712c198db8c",
  "video": {
    "ru": "https://youtu.be/bcLZoCFJgKA",
    "en": "",
    "es": ""
  },
  "content": {
    "ru": "Переменные в JS могут начинаться с `буквы`, знака подчеркивания `_` или знака доллара `$`.\n\n```javascript\nconst name = 'Alice';\nconst _age = 20;\nconst $color = 'red';\n```\n\nНазывайте переменные так, чтобы было понятно, что в них хранится.\n\nЧем проще и понятнее имя переменной, тем лучше.\n\nС практикой вы научитесь давать переменным осмысленные имена.\n\n### Несколько примеров переменных про адрес\n\n```javascript\nconst address = '123, Market street'; // Храним адрес\nconst city = 'San Francisco'; // город\nconst state = 'CA'; // штат\nconst zipCode = '94107'; // почтовый индекс\n```\n\nВсе эти переменные хранят что-то про адрес, но названия переменных позволяют понять, что именно в них хранится.\n\nОбратите внимание: в этом примере имена переменных состоят только из одного слова.\n\nНе всегда одним словом можно описать содержимое переменной.\n\nДля более точного описания используются несколько слов.\n\nНапример: переменная, которая хранит имя пользователя, может называться `userName` или `userFirstName`.\n\n### Пример переменных про собаку\n\nМы хотим создать переменные, которые хранят информацию про собаку. Например: имя, возраст, породу и цвет.\n\nМожно сделать так:\n\n```javascript\nconst name = 'Mango';\nconst age = 2;\nconst breed = 'shepherd';\nconst color = 'black';\n```\n\nТакие имена для переменных приемлемы, но не очень информативны.\n\nВариант с префиксом `dog` лучше:\n\n```javascript\nconst dogName = 'Mango';\nconst dogAge = 2;\nconst dogBreed = 'shepherd';\nconst dogColor = 'black';\n```\n\nТак понятно, что в переменных хранится информация про собаку.\n\nЕсли в программе будет еще несколько сущностей, например, `кот`, `рыба`, `птица`, то имена переменных стоит называть так, чтобы было понятно, что в них хранится.\n\n```javascript\nconst catName = 'Poly';\nconst catAge = 3;\nconst catBreed = 'siamese';\nconst catColor = 'white';\n\nconst fishName = 'Nemo';\nconst fishAge = 1;\nconst fishBreed = 'clownfish';\nconst fishColor = 'orange';\n\nconst birdName = 'Tweety';\nconst birdAge = 2;\nconst birdBreed = 'canary';\nconst birdColor = 'yellow';\n```\n\n### Примеры правильного и понятного именования переменных\n\nЕсли мы хотим хранить в переменной количество дней в году, то лучше назвать её `daysInYear`, а не `days`.\n\nПеременные будут хранить в себе данные о пользователе.\n\n`userName` — имя пользователя\n\n`userAge` — возраст пользователя\n\nПредставим, что у нас есть коробка для доставки товаров.\n\nВ переменных будут храниться свойства коробки.\n\n`boxPrice` — цена коробки\n\n`boxColor` — цвет коробки\n\n`boxWeight` — вес коробки\n\n`boxMaterial` — материал коробки\n\n`boxQuantity` — количество коробок\n\n`boxType` — тип коробки\n\n`boxWidth` — ширина коробки\n\n`boxHeight` — высота коробки\n\n`boxLength` — длина коробки\n\n`boxVolume` — объем коробки\n\n`boxCapacity` — вместимость коробки\n\n`boxSize` — размер коробки (например: `small`, `medium`, `large`)\n\nЛюбой, кто посмотрит на эти переменные должен догадаться, что в них хранится.\n\nКогда в имени несколько слов, мы пишем их слитно. Это правило называют `Camel case` как горбы верблюда.\n\n* все слова пишутся слитно\n* первое слово всегда с маленькой буквы\n* каждое следующее слово с большой буквы\n\n### Пример переменной из двух слов\n\n```javascript\nconst zipCode = '987A-987A'; // создана переменная с индексом. Индекс всегда записывают как строку, string\n\nconst priceClient = 100; // создана переменная 'клиентская цена' со значением 100\n```\n\n### Пример имени переменной из нескольких слов\n\n```javascript\nconst distanceFromClientToWarehouse = 456; // создана переменная 'расстояние от клиента до склада' со значением 456\n\nconst deliveryAddressMain = '56 Second st, SF'; // создана переменная 'основной адрес доставки'. Присвоено значение '56 Second st, SF'\n```\n\n### Пример имени с заглавными буквами\n\n```javascript\nconst PI = 3.14; // создана переменная 'пи' со значением 3.14\nconst IP = '192.168.0.10' // создана переменная 'айпи' со значением '192.168.0.10'\nconst DATABASE_LOGIN = 'admin'; // создана переменная 'логин базы данных' со значением 'admin'\n```\n\n### В сложных именах на первое место всегда ставьте сущность, а потом её свойство\n\n```javascript\nconst phoneMain = 5556677; // создана переменная телефон основной со значением 5556677\nconst deliveryDriver = 'Andrew'; // создана переменная 'имя доставщика', со значением 'Andrew'. Доставка тут является основной сущностью\n```\n\n## Ошибки в именах переменных\n\nЕсть несколько правил и ошибок, которые нужно избегать при создании переменных.\n\n### Переменные не могут начинаться с цифры\n\n```javascript\nconst 12month = 'December'; // Плохо. Числа в начале имени переменной не допускается\nconst month12 = 'December'; // Хорошо. Числа могут быть в середине или в конце имени переменной\n```\n\n### Нельзя использовать минус (дефис) в имени\n\n```javascript\nconst time-from-a-to-be; // Плохо. Не используем дефис в имени переменной\nconst time_from_a_to_b; // Хорошо. Используем Snake case\nconst timeFromAToB; // Хорошо. Используем Camel case\n```\n\n### Нельзя использовать пробел в имени\n\n```javascript\nconst value Client; // Плохо. Не используем пробел в имени переменной\nconst valueClient; // Хорошо. Используем Camel case\nconst value_client; // Хорошо. Используем Snake case\n```\n\n## Хороший тон при создании переменных\n\nЭти советы помогут вам создавать переменные, которые будут легко читаться и пониматься другим разработчикам.\n\n### Первая буква всегда маленькая\n\n```javascript\nconst LastName; // Плохо. Не используем заглавные буквы в начале имени переменной\nconst lastName; // Хорошо. Используем маленькие буквы в начале имени переменной\n```\n\n### Имя не должно содержать значение переменной\n\n```javascript\nconst lastNameAlice = 'Smith'; // Плохо. Имя переменной содержит значение переменной\nconst phoneBob = '5556677'; // Плохо. Имя переменной содержит значение переменной\n\nconst lastName = 'Smith'; // Хорошо. Имя переменной не содержит значение переменной\nconst phone = '5556677'; // Хорошо. Имя переменной не содержит значение переменной\n```\n\n### Используйте только английские слова в именах переменных\n\n```javascript\nconst mashina = 'A1R1'; // Плохо. Нужно создать переменную с именем 'car'\n\nconst español = 'Henry'; // Плохо. Используем только английские слова\nconst 你好 = 'Hello'; // Плохо. Используем только английские слова\n\nconst car = 'Volvo' // Хорошо\nconst stop = 'Main St' // Хорошо\n```\n\n### Значением переменной может все что угодно\n\n```javascript\nconst greetingEnglish = 'Hello'; // Переменная greeting содержит строку 'Hello'\nconst greetingChinese = '你好'; // Переменная greeting содержит строку '你好'\nconst greetingSpanish = 'Hola'; // Переменная greeting содержит строку 'Hola'\nconst greetingJapan = 'こんにちは'; // Переменная greeting содержит строку 'こんにちは'\n\nconst smile = '😀'; // Переменная smile содержит строку '😀'\n```\n\n### Избегайте использования однобуквенных имен\n\n```javascript\nconst a = 'Hello'; // Плохо. Не используем однобуквенные имена\nconst q = 123; // Плохо. Не используем однобуквенные имена\nconst firstName = 'John'; // Хорошо. Используем полное имя\n```\n\nЕсли в контексте вашего кода однобуквенное имя, вы можете использовать его, но ставьте себе вопрос, а нужно ли это? В большинстве случаев, нет.\n\nИногда однобуквенные имена могут быть полезны, например, когда вы используете цикл for. Но в большинстве случаев вы должны избегать их.\n\nСокращения в именах переменных не рекомендуется использовать, если они не являются общепринятыми.\n\nПримеры сокращений:\n\n```javascript\nconst num = 123; // Какое-то число\nconst str = 'Hello'; // Некая строка\nconst avg = 3.24; // Среднее значение\nconst neg = -1; // Какое-то отрицательное число\nconst pos = 1; // Какое-то положительное число\n\nconst n1 = 123; // Какое-то число\nconst n2 = 125; // Какое-то число\nconst n3 = 129; // Какое-то число\nconst n4 = 121; // Какое-то число\n\nconst str1 = 'Hello'; // Некая строка\nconst str2 = 'World'; // Некая строка\n```\n\nЗдравый смысл должен помочь вам определить, когда использовать сокращения, а когда нет.\n\n\nНа разных проектах правила именования переменных могут слегка варьироваться, но основные требования, обеспечивающие лучшую \"читаемость кода\" следующие:  \n\n1. Осмысленное название, отображающее суть данных, хранящихся в переменной.  \n2. Использование имен в стиле **camelCase** - стиль написания составных слов, при котором несколько слов пишутся слитно без пробелов, при этом каждое слово внутри фразы пишется с прописной буквы. Стиль получил название **camelCase**, поскольку прописные буквы внутри слова напоминают горбы верблюда.\n\n![](https://course-js-syntax.s3-us-west-1.amazonaws.com/camelcase.PNG)\n\n3. Использование **английского языка** (не транслита!), **цифр** (но не в начале имени!), знака подчеркивания **_** и доллара **$**.  \n4. Нелатинские буквы разрешены, но не рекомендуются. Можно использовать любой язык, включая кириллицу. Имена с использованием русских букв разрешены, но есть международная традиция использовать английский язык в именах переменных. Возможно, ваш код в дальнейшем будут читать люди из разных стран.\n5. Существует также список зарезервированных слов в JavaScript, которые нельзя употреблять в качестве имен переменных. Взять хотя бы ключевое слово **let** – поди разберись в записи типа:\n```\nlet let;\n```\n\nПримеры **неправильного** именования переменных: \n```\nconst const;              // const - зарезервированное слово, его нельзя использовать в качестве переменной\nconst null = 0;           // null - зарезервированное слово, его нельзя использовать в качестве переменной \nlet var = 100.99;         // var - зарезервированное слово, его нельзя использовать в качестве переменной \nlet knigi = 500;          // нельзя использовать транслит в названии переменной\nlet 12month = 'December'; // нельзя начинать имя переменной с цифры\nlet sumofnumbers = a + b; // должен применяться стиль camelCase: когда после первого слова каждое последующее слово пишется с прописной буквы \nlet tov = 100 ;           // давайте переменной понятное имя, таким образом другим разработчикам будет удобно работать с вашим кодом\n```\n\nПримеры **правильного** именования переменных:\n```\nlet numberOfBooks = 500;        // используем только английский язык в названиях переменных\nconst book = 'Treasure Island'; // используем только английский язык в названиях переменных\nlet month12 = 'December';       // цифры допустимы в названиях переменных, если только они стоят не в начале слова \nlet sumOfNumbers = a + b;       // применяется стиль camelCase\nlet totalNumberOfLines = 20;    // давайте переменной понятное название\nconst bug_is_harmful = true;    // можно использовать нижнее подчеркивание в названии переменной, но удобнее и \"экономнее\" использовать стиль camelCase\nconst bugIsHarmful = true;      // применяйте стиль camelCase: когда после первого слова каждое последующее слово пишется с прописной буквы \nlet typeOfVariable = 'string';  // давайте переменной понятное имя\n```\n\n\n\n\n\n",
    "en": "Variables in JS can begin with a `letter`, an underscore `_` or a dollar sign `$`.\n\n```javascript\nconst name = 'Alice';\nconst _age = 20;\nconst $color = 'red';\n```\n\nName the variables in a way that makes it clear what they store.\n\nThe simpler and clearer the variable name, the better.\n\nWith practice you will learn to give variables meaningful names.\n\n### Some examples of variables about the address\n\n```javascript\nconst address = '123, Market street'; // Store the address\nconst city = 'San Francisco'; // city\nconst state = 'CA'; // state\nconst zipCode = '94107'; // zip code\n```\n\nAll of these variables store something about the address, but the names of the variables make it clear what exactly is stored in them.\n\nNote: in this example, the variable names consist of only one word.\n\nIt is not always possible to describe the contents of a variable in one word.\n\nA few words are used to describe it more accurately.\n\nFor example: the variable that stores the user name can be called `userName` or `userFirstName`.\n\n### Example of variables about a dog\n\nWe want to create variables that store information about the dog. For example: name, age, breed and color.\n\nYou can do this:\n\n```javascript\nconst name = 'Mango';\nconst age = 2;\nconst breed = 'shepherd';\nconst color = 'black';\n```\n\nThese names for variables are acceptable, but not very informative.\n\nThe version with the prefix `dog` is better:\n\n```javascript\nconst dogName = 'Mango';\nconst dogAge = 2;\nconst dogBreed = 'shepherd';\nconst dogColor = 'black';\n```\n\nSo it is clear that the variables store information about the dog.\n\nIf there will be more entities in the program, for example, `cat`, `fish`, `bird`, then the names of variables should be named so that it is clear what is stored in them.\n\n```javascript\nconst catName = 'Poly';\nconst catAge = 3;\nconst catBreed = 'siamese';\nconst catColor = 'white';\n\nconst fishName = 'Nemo';\nconst fishAge = 1;\nconst fishBreed = 'clownfish';\nconst fishColor = 'orange';\n\nconst birdName = 'Tweety';\nconst birdAge = 2;\nconst birdBreed = 'canary';\nconst birdColor = 'yellow';\n```\n\n### Examples of correct and understandable variable naming\n\nIf we want to store the number of days in a year in a variable, it is better to call it `daysInYear` rather than `days`.\n\nVariables will store data about the user.\n\n`userName` - user name\n\n`userAge` - user age\n\nLet's imagine that we have a delivery box.\n\nThe variables will store the properties of the box.\n\n`boxPrice` - box price\n\n`boxColor` - box color\n\n`boxWeight` - box weight\n\n`boxMaterial` - box material\n\n`boxQuantity` - number of boxes\n\n`boxType` - box type\n\n`boxWidth` - the width of the box\n\n`boxHeight` - the height of the box\n\n`boxLength` - the length of the box\n\n`boxVolume` - box volume\n\n`boxCapacity` - box capacity\n\n`boxSize` - box size (for example: `small`, `medium`, `large`)\n\nAnyone who looks at these variables should be able to guess what is stored in them.\n\nWhen there are several words in a name, we spell them together. This rule is called `Camel case` like the humps of a camel.\n\n* all words are written together\n* the first word is always with a small letter\n* every next word with a capital letter\n\n### An example of a two-word variable\n\n```javascript\nconst zipCode = '987A-987A'; // an index variable is created. The index is always written as string\n\nconst priceClient = 100; // create a variable 'client price' with the value 100\n```\n\n### An example of a variable name of several words\n\n```javascript\nconst distanceFromClientToWarehouse = 456; // create a variable 'distance from customer to warehouse' with value 456\n\nconst deliveryAddressMain = '56 Second st, SF'; // create a variable 'main delivery address'. Assigned value '56 Second st, SF'.\n```\n\n### Example of a name with capital letters\n\n```javascript\nconst PI = 3.14; // create variable 'pi' with value 3.14\nconst IP = '192.168.0.10' //created variable 'ipi' with value '192.168.0.10'\nconst DATABASE_LOGIN = 'admin'; // created the variable 'database login' with the value 'admin'\n```\n\n### In compound names, always put the entity first, followed by its property\n\n```javascript\nconst phoneMain = 5556677; // create the variable 'main phone' with the value 5556677\nconst deliveryDriver = 'Andrew'; // the variable 'delivery name' was created with the value 'Andrew'. Delivery is the main entity here\n```\n\n## Errors in variable names\n\nThere are a few rules and mistakes to avoid when creating variables.\n\n### Variables cannot begin with a number\n\n```javascript\nconst 12month = 'December'; // Bad. Numbers at the beginning of the variable name are not allowed.\nconst month12 = 'December'; // Good. Numbers may be in the middle or at the end of the variable name\n```\n\n### You cannot use a minus (hyphen) in the name\n\n```javascript.\nconst time-from-a-to-be; // Bad. Do not use a hyphen in the variable name.\nconst time_from_a_to_b; // Good. Use Snake case\nconst timeFromAToB; // Good. Use Camel case\n```\n\n### You cannot use a space in the name\n\n```javascript\nconst value Client; // Bad. Don't use a space in the variable name.\nconst valueClient; // Good. Use Camel case\nconst value_client; // Good. Use Snake case\n```\n\n## A good tone when creating variables\n\nThese tips will help you create variables that are easy for other developers to read and understand.\n\n### The first letter is always small.\n\n```javascript.\nconst LastName; // Bad. We don't use capital letters at the beginning of the variable name.\nconst lastName; // Good. Using small letters at the beginning of the variable name\n```\n\n### The name must not contain the value of the variable\n\n```javascript.\nconst lastNameAlice = 'Smith'; // Bad. The variable's name contains the variable value\nconst phoneBob = '5556677'; // Bad. The variable's name contains the variable's value\n\nconst lastName = 'Smith'; // Good. The variable's name does not contain the variable's value.\nconst phone = '5556677'; // Good. The variable's name does not contain the variable's value\n```\n\n### Use only English words in variable names\n\n```javascript.\nconst mashina = 'A1R1'; // Bad. You need to create a variable named 'car'.\n\nconst español = 'Henry'; // Bad. We use English words only.\nconst 你好 = 'Hello'; // Bad. We use English words only.\n\nconst car = 'Volvo'; // Good\nconst stop = 'Main St' // Good\n```\n\n### The value of a variable can be anything\n\n```javascript\nconst greetingEnglish = 'Hello'; // The variable greeting contains the string 'Hello'\nconst greetingChinese = '你好'; // The greeting variable contains the string '你好'\nconst greetingSpanish = 'Hola'; // The greeting variable contains the string 'Hola'\nconst greetingJapan = 'こんにちは'; // The variable greeting contains the string 'こんにちは'\n\nconst smile = '😀'; // The variable smile contains the string '😀\n```\n\n### Avoid using one-letter names\n\n```javascript\nconst a = 'Hello'; // Bad. Do not use single-letter names.\nconst q = 123; // Bad. Do not use single-letter names.\nconst firstName = 'John'; // Good. We use the full name\n```\n\nIf the context of your code is a one-letter name, you can use it, but ask yourself, is it necessary? In most cases, no.\n\nSometimes single-letter names can be useful, for example when you use a for loop. But in most cases you should avoid them.\n\nIt is not recommended to use abbreviations in variable names unless they are generally accepted.\n\nExamples of abbreviations:\n\n```javascript\nconst num = 123; // Some number\nconst str = 'Hello'; // Some string\nconst avg = 3.24; // Some negative number\nconst neg = -1; // Some negative number\nconst pos = 1; // Some positive number\n\nconst n1 = 123; // Some number\nconst n2 = 125; // Some number\nconst n3 = 129; // Some number\nconst n4 = 121; // Some number\n\nconst str1 = 'Hello'; // Some string\nconst str2 = 'World'; // Some string\n```\n\nCommon sense should help you determine when to use abbreviations and when not to.\n\n\nVariable naming rules may vary slightly from project to project, but the basic requirements for better \"code readability\" are as follows:  \n\n1. A meaningful name that represents the essence of the data stored in the variable.  \n2. Using names in **camelCase** style is a style of writing compound words, in which several words are written together without spaces, while each word within the phrase is written with a capital letter. The style is called **camelCase** because the uppercase letters inside the word resemble the humps of a camel.\n\n![](https://course-js-syntax.s3-us-west-1.amazonaws.com/camelcase.PNG)\n\n3. Using **English** (not transliteration!), **digits** (but not at the beginning of the name!), underscore **_** and dollar **$**.  \n4. Non-Latin letters are allowed, but not recommended. Any language may be used, including Cyrillic. Names using Russian letters are allowed, but there is an international tradition to use English in variable names. It is possible that your code in the future will be read by people from different countries.\n5. There is also a list of reserved words in JavaScript that cannot be used as variable names. Take for example the keyword **let** - how do you figure out how to write a type:\n```\nlet let;\n```\n\nExamples of **wrong** variable naming: \n```\nconst; // const is a reserved word, it cannot be used as a variable\nconst null = 0; // null is a reserved word, it cannot be used as a variable \nlet var = 100.99; // var is a reserved word, it cannot be used as a variable \nlet knigi = 500; // you can not use transliteration in the variable name\nlet 12month = 'December'; // you can not start a variable name with a digit\nlet sumofnumbers = a + b; // we should use camelCase style: when after the first word each subsequent word is capitalized \nlet tov = 100 ; // give the variable a clear name, so other developers will feel comfortable with your code\n```\n\nExamples of **correct** variable naming:\n```\nlet numberOfBooks = 500; // use only English in variable names\nconst book = 'Treasure Island'; // we use English only in variable names\nlet month12 = 'December'; // numbers are allowed in variable names if they are not at the beginning of words \nlet sumOfNumbers = a + b; // camelCase style is applied\nlet totalNumberOfLines = 20; // give the variable a clear name\nconst bug_is_harmful = true; // you can use underscores in the variable name, but it is more convenient and \"economical\" to use the camelCase style\nconst bugIsHarmful = true; // use camelCase style: when after the first word each subsequent word is spelled with a capital letter \nlet typeOfVariable = 'string'; // give the variable a clear name\n```\n\n\n\n\n\n",
    "es": "\n"
  }
}