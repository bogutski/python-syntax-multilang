{
  "_id": "6696c2ca763f0712c198de8f",
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  },
  "content": {
    "ru": "**Оператор взятия остатка %** интересен тем, что, несмотря на обозначение, никакого отношения к процентам не имеет.\n\nЕго результат **a % b** – это остаток от деления a на b.\n```\nconsole.log( 5 % 2 ); // 1, остаток от деления 5 на 2\nconsole.log( 8 % 3 ); // 2, остаток от деления 8 на 3\nconsole.log( 6 % 3 ); // 0, остаток от деления 6 на 3\n```\nОператор % часто используют для нахождения последней цифры числа:\n```\nlet num = 453;\nlet last = num % 10;\nconsole.log(last); // 3\n```\nЕсли у вас есть двузначное число, то цифры числа можно получить так:\n```\nlet num = 34;\nlet secondDigit = num % 10;   //4\nlet firstDigit = (num - secondDigit) / 10;  // (34 - 4) / 10 = 3\n```\n\nТакже оператор взятия остатка % используется для определения делимости одного числа на другое. Число а делится на число b, если остаток от деления a на b равен нулю. Например, число а является четным, если a % 2 === 0.\n```\nlet a = 15;\nlet b = 3;\nlet c = 2;\nconsole.log(a % b === 0);  // true (число 15 делится на число 3 с остатком = 0)\nconsole.log(a % c === 0); // false (число 15 не делится на 2, остаток равен 1)\n```\n* * * * *\n**Оператор возведения в степень **** возвращает результат первого операнда в степень. \n\nДля натурального числа b результатом выражения a ** b будет a умноженное само на себя b раз.\n```\nconsole.log( 2 ** 2 ); // 4  (2 * 2)\nconsole.log( 2 ** 3 ); // 8  (2 * 2 * 2)\nconsole.log( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)\n```\nЭтот оператор работает и с дробными числами. В этом случае он будет извлекать корень указанной степени:\n```\nconsole.log( 4 ** (1/2) ); // 2 (извлечение квадратного корня)\nconsole.log( 8 ** (1/3) ); // 2 (извлечение корня третьей степени)\n```\nВо многих языках оператор возведения в степень ** имеет приоритет выше, чем у унарных операторов, но в JavaScript ситуация обстоит иначе. Из-за таких разночтений в JavaScript невозможно поставить унарный оператор перед базовым числом.\n```\n-2 ** 2;   // Это некорректно в JavaScript\n-(2 ** 2); // -4 в JavaScript\n```\nОткройте ссылку и выполните задание:   https://jsbin.com/fesadidevi/edit?js,console\n\n",
    "en": "**The operator for taking the remainder %** is interesting because, despite its designation, it has nothing to do with percentages.\n\nIts result **a % b** is the remainder of the division of a by b.\n```\nconsole.log( 5 % 2 ); // 1, the remainder of division 5 by 2\nconsole.log( 8 % 3 ); // 2, remainder of division 8 by 3\nconsole.log( 6 % 3 ); // 0, remainder of division 6 by 3\n```\nThe % operator is often used to find the last digit of a number:\n```\nlet num = 453;\nlet last = num % 10;\nconsole.log(last); // 3\n```\nIf you have a two-digit number, you can get the digits of the number this way:\n```\nlet num = 34;\nlet secondDigit = num % 10; //4\nlet firstDigit = (num - secondDigit) / 10; // (34 - 4) / 10 = 3\n```\n\nThe remainder operator % is also used to determine the divisibility of one number by another. A number a is divisible by b if the remainder of a divided by b is zero. For example, the number a is even if a % 2 === 0.\n```\nlet a = 15;\nlet b = 3;\nlet c = 2;\nconsole.log(a % b === 0); // true (number 15 is divisible by number 3 with remainder = 0)\nconsole.log(a % c === 0); // false (number 15 is not divisible by 2, the remainder is 1)\n```\n* * * * *\n**The exponentiation operator**** returns the result of the first operand to the power. \n\nFor a natural number b, the result of the expression a ** b is a multiplied by itself b times.\n```\nconsole.log( 2 ** 2 ); // 4 (2 * 2)\nconsole.log( 2 ** 3 ); // 8 (2 * 2 * 2)\nconsole.log( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)\n```\nThis operator also works with fractional numbers. In this case it will extract the root of the specified degree:\n```\nconsole.log( 4 ** (1/2) ); // 2 (extraction of the square root)\nconsole.log( 8 ** (1/3) ); // 2 (third degree root extraction)\n```\nIn many languages, the exponentiation operator ** has higher precedence than unary operators, but this is not the case in JavaScript. Because of these differences, in JavaScript it is not possible to put a unary operator in front of a base number.\n```\n-2 ** 2; // This is invalid in JavaScript\n-(2 ** 2); // -4 in JavaScript\n```\nOpen the link and complete the task: https://jsbin.com/fesadidevi/edit?js,console\n\n",
    "es": "\n"
  }
}