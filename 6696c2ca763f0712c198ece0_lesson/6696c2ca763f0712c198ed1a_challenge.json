{
  "_id": "6696c2ca763f0712c198ed1a",
  "name": {
    "en": "Count how many times each digit from 0 to 9 occurs in the string",
    "ru": "Посчитать сколько раз каждая цифра от 0 до 9 встречается в строке"
  },
  "instruction": {
    "en": "The `digitsCount` function takes a string `str` consisting of different characters.\nThe function should return an array `result`, in which the number of times each digit from 0 to 9 appears in the string is recorded.\nThe element of the array with index zero should be the number of zeros in the string, the element of the array with index 1 should be the number of ones in the string, and so on.\nIf the string is empty or does not contain any digits, the function should return an array of 10 zeros.\n\nFor example, in the string `\"let a = 10, b = 22, c = 13\"`, the digit `0` appears 1 time, the digit `1` appears 2 times, the digit `2` appears 2 times, the digit `3` appears 1 time, and the other digits from `4` to `9` appear 0 times.\nThe function should return the array [1, 2, 2, 1, 0, 0, 0, 0, 0, 0].\n\nSolution algorithm:\n\n1. Create an array `result` of 10 zeros, which will store the digit counters. The initial values of the counters are 0.\n2. Iterate through all the characters of the string in a loop.\n3. If the current character of the string `str[i]` is a digit, convert it to a number and increment the corresponding counter in the array `result[Number(str[i])]` by 1.\n4. Return the array `result`.\n\nNote that in some ways of checking if a character is a digit, a space can be defined as the digit 0.\n\nFunction call examples:\n```javascript\ndigitsCount(\"const a=10, b=123, c=592\"); // [1, 2, 2, 1, 0, 1, 0, 0, 0, 1]\ndigitsCount(\"Arrow\"); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\ndigitsCount(\"5 plus 6 is 11\"); // [0, 2, 0, 0, 0, 1, 1, 0, 0, 0]\n```",
    "ru": "Функция `digitsCount` принимает строку `str`, состоящую из различных символов.\nФункция должна возвращать массив `result`, в котором записано сколько раз каждая цифра от 0 до 9 встречается в строке.\nВ элементе массива с индексом ноль должно быть количество нулей в строке, в элементе массива с индексом 1 - количество единиц в строке и т.д.\nЕсли строка пустая или в строке нет цифр, то функция должна вернуть массив из 10 нулей.\n\nНапример, в строке `\"let a = 10, b = 22, c = 13\"` цифра `0` встречается 1 раз, цифра `1` - 2 раза, цифра `2` - 2 раза, цифра `3` - 1 раз, а остальные цифры от `4` до `9` - 0 раз.\nФункция должна вернуть массив [1, 2, 2, 1, 0, 0, 0, 0, 0, 0].\n\nАлгоритм решения задачи:\n\n1. Создайте массив `result` из 10 нулей, в нем будут храниться счётчики цифр. Начальные значения счетчиков - 0.\n2. В цикле переберите все символы строки.\n3. Если текущий символ строки `str[i]` является цифрой, то преобразуйте его в число и увеличьте соответствующий счетчик в массиве `result[Number(str[i])]` на 1.\n4. Верните массив `result`.\n\nНе забудьте, что при некоторых способах проверки символа на цифру, пробел может быть определен как цифра 0.\n\nПримеры вызова функции:\n```javascript\ndigitsCount(\"const a=10, b=123, c=592\"); // [1, 2, 2, 1, 0, 1, 0, 0, 0, 1]\ndigitsCount(\"Arrow\"); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\ndigitsCount(\"5 plus 6 is 11\"); // [0, 2, 0, 0, 0, 1, 1, 0, 0, 0]\n```"
  },
  "initialSolution": "func",
  "completedSolution": "function digitsCount(str) {\n  const result = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // массив для хранения количества цифр от 0 до 9\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') { // если текущий символ строки является цифрой, то увеличиваем счетчик в массиве result\n      result[Number(str[i])]++;\n    }\n  }\n  return result;\n}",
  "openTest": "it('Created function digitsCount', () => {\n  expect(digitsCount).to.be.a('function');\n});\n\nit('digitCount(\"const a=10, b=123, c=592\") should return [1, 2, 2, 1, 0, 1, 0, 0, 0, 1]', () => {\n  expect(digitsCount(\"const a=10, b=123, c=592\")).to.deep.equal([1, 2, 2, 1, 0, 1, 0, 0, 0, 1]);\n});\n\nit('digitCount(\"To be or not to be?\") should return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]', () => {\n  expect(digitsCount(\"To be or not to be?\")).to.deep.equal([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n});\n\nit('digitCount(\"5 plus 6 is 11\") should return [0, 2, 0, 0, 0, 1, 1, 0, 0, 0]', () => {\n  expect(digitsCount(\"5 plus 6 is 11\")).to.deep.equal([0, 2, 0, 0, 0, 1, 1, 0, 0, 0]);\n});\n\nit('digitCount(\"1, 2, 3, 4, 5, 6, 7, 8, 9, 0\") should return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', () => {\n  expect(digitsCount(\"1, 2, 3, 4, 5, 6, 7, 8, 9, 0\")).to.deep.equal([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n});\n\nit('digitCount(\"\") should return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]', () => {\n  expect(digitsCount(\"\")).to.deep.equal([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n});\n\nit('digitCount(\"111 222 333 444 555 666 777 888 999 000\") should return [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]', () => {\n  expect(digitsCount(\"111 222 333 444 555 666 777 888 999 000\")).to.deep.equal([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]);\n});\n\nit('digitCount(\"1 2 3 4 5 6 7 8 9 0\") should return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', () => {\n  expect(digitsCount(\"1 2 3 4 5 6 7 8 9 0\")).to.deep.equal([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n});\n\nit('digitCount(\"12 45 78 101\") should return [1, 3, 1, 0, 1, 1, 0, 1, 1, 0]', () => {\n  expect(digitsCount(\"12 45 78 101\")).to.deep.equal([1, 3, 1, 0, 1, 1, 0, 1, 1, 0]);\n});\n\nit('digitCount(\" if( age>=18 ) { isAdult = true;}  \") should return [0, 1, 0, 0, 0, 0, 0, 0, 1, 0]', () => {\n  expect(digitsCount(\" if( age>=18 ) { isAdult = true;}  \")).to.deep.equal([0, 1, 0, 0, 0, 0, 0, 0, 1, 0]);\n});\n\nit('digitCount(\"1\") should return [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]', () => {\n  expect(digitsCount(\"1\")).to.deep.equal([0, 1, 0, 0, 0, 0, 0, 0, 0, 0]);\n});\n\nit('digitCount(\"2\") should return [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]', () => {\n  expect(digitsCount(\"2\")).to.deep.equal([0, 0, 1, 0, 0, 0, 0, 0, 0, 0]);\n});\n\nit('digitCount(\"33333\") should return [0, 0, 0, 5, 0, 0, 0, 0, 0, 0]', () => {\n  expect(digitsCount(\"33333\")).to.deep.equal([0, 0, 0, 5, 0, 0, 0, 0, 0, 0]);\n});\n\nit('digitCount(\"4444444444\") should return [0, 0, 0, 0, 10, 0, 0, 0, 0, 0]', () => {\n  expect(digitsCount(\"4444444444\")).to.deep.equal([0, 0, 0, 0, 10, 0, 0, 0, 0, 0]);\n});\n\nit('digitCount(\"0 0 0 0-0-0-0 00 000 0 0 0 0 0000: 1 22 333 4444 55555 666666 7777777 88888888 -+ 999999999% \") should return [20, 1, 2, 3, 4, 5, 6, 7, 8, 9]', () => {\n  expect(digitsCount(\"0 0 0 0-0-0-0 00 000 0 0 0 0 0000: 1 22 333 4444 55555 666666 7777777 88888888 -+ 999999999% \")).to.deep.equal([20, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}