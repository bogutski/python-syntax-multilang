{
  "_id": "6696c2ca763f0712c198ed18",
  "name": {
    "en": "Calculator - calculate an expression written in a string",
    "ru": "Калькулятор - вычисление выражения, записанного в строке"
  },
  "instruction": {
    "en": "The function `calculateExpression` should take a string that contains 2 numbers and a mathematical operation sign. There are no spaces in the string.\nExample string: `21+39`.\nThe string cannot be empty and will come in the correct format.\nThe mathematical operation signs can be: `+`, `-`, `*`, `/`.\nThe function should return the result of evaluating this expression.\n\nTo solve the problem, also create a second function `calculator`, which will take 3 arguments: the mathematical operation sign and 2 numbers, and be called inside the first function `calculateExpression`.\nThe analysis of the operation sign and the calculation of the result should be implemented in the second function `calculator`.\n\nTo solve the problem, use loops, do not use string functions and array methods.\n\n#### One possible algorithm for solving the problem:\n\nWrite a function `calculator` that takes 3 arguments: the mathematical operation sign and 2 numbers, and returns the result of the calculation.\n\nWrite a function `isOperator` that takes 1 argument - a character, and returns `true` if the argument is a mathematical operation sign, and `false` otherwise.\nIn the `isOperator` function, create a variable `operators` with a string containing all the mathematical operation signs, and use a loop over it to check if the character is a mathematical operation sign.\n\nIn the `calculateExpression` function:\n\n1. Create variables `num1` and `num2` and assign them empty strings.\n2. Create variables `op` and `opIndex` without initial values.\n3. Create a `for` loop that will iterate over all the characters in the `str` string and assign them to the `num1` variable until it encounters a mathematical operation sign.\nTo check if the current character is a mathematical operation sign, use the `isOperator` function you wrote earlier.\nIf the character is a mathematical operation sign, assign its value to the `op` variable, store its index in the `str` string in the `opIndex` variable, and break the loop.\n4. Create a `for` loop that will iterate over all the characters in the `str` string, starting from the index following the operator, and assign them to the `num2` variable.\n5. Convert the `num1` and `num2` strings to numbers.\n6. Call the `calculator` function, passing the operation sign `op` and the 2 numbers `num1` and `num2`.\n7. Return the result of the `calculator` function.\n\nExamples of function calls:\n\n```javascript\ncalculateExpression('21+39');   // 60\ncalculateExpression('21-39');   // -18\ncalculateExpression('20/0');    // Infinity\n```\n\nExamples of function calls from another function:\n```javascript\nfunction hello(name){\n  console.log('Hello, ' + name)\n}\nfunction bye(name){\n  console.log('Goodbye, ' + name)\n}\n\nfunction greetings(name, greeting){\n  if(greeting === 'Hi') return hello(name)\n  if(greeting === 'Bye') return bye(name)\n}\ngreetings('Alice', 'Hi') // Hello, Alice\ngreetings('Alice', 'Bye') // Goodbye, Alice\n```\nIn this example, the `greetings` function takes 2 arguments: a name and a greeting. Depending on the greeting, the function calls either the `hello` function or the `bye` function, passing the name to the called function.\n\nYou can create your own functions and use them to solve different similar problems.\nFor example, you can create a function `isDigit` that takes a single character and checks if it is a digit.\nYou can save this function and insert it into the solution of other problems where you need to check if a character is a digit.\n```javascript\nfunction isDigit(char){\n  if (char >=\"0\" && char <=\"9\") return true;\n  else return false;\n}\n\nfunction onlyDigits(str){ //This function takes a string and returns a string containing only the digits from the original string\n  let result = '';\n  for ( let i=0; i<str.length; i++ ) {\n    if (isDigit(str[i])) result += str[i]; //Call the isDigit function to check the current character\n  }\n  return result;\n}\nconsole.log(onlyDigits('1s0t89r3')); //\"10893\"\nconsole.log(onlyDigits(' t i85u y ')); //\"85\"\nconsole.log(onlyDigits(' no digits ')); // \"\"\n```",
    "ru": "Функция `calculateExpression` должна принимать строку, в которой содержатся 2 числа и знак математической операции. В строке нет пробелов.\nПример строки: `21+39`.\nСтрока не может быть пустой и будет приходить в правильном формате.\nЗнаки математических операций могут быть следующими: `+`, `-`, `*`, `/`.\nФункция должна вернуть результат вычисления этого выражения.\n\nДля решения задачи создайте также вторую функцию `calculator`, которая будет принимать 3 аргумента: знак математической операции и 2 числа и вызываться внутри первой функции `calculateExpression`.\nАнализ знака операции и вычисление результата должны быть реализованы во второй функции `calculator`.\n\nДля решения задачи используйте циклы, не используйте строковые функции и методы массивов.\n\n#### Один из возможных алгоритмов решения задачи:\n\nНапишите функцию `calculator`, которая принимает 3 аргумента: знак математической операции и 2 числа и возвращает результат вычисления.\n\nНапишите функцию `isOperator`, которая принимает 1 аргумент - символ и возвращает `true`, если аргумент является знаком математической операции, и `false` в противном случае.\nВ функции `isOperator` создайте переменную `operators` со строкой, содержащей все знаки математических операций и используйте цикл по ней для проверки того, является ли символ знаком математической операции.\n\nВ функции `calculateExpression`:\n\n1. Создайте переменные `num1` и `num2` и присвойте им пустые строки.\n2. Создайте переменные`op` и `opIndex` без начального значения.\n3. Создайте цикл `for`, который будет перебирать все символы строки `str` и записывать их в переменную `num1` до тех пор, пока не встретит знак математической операции.\nДля проверки того, является ли текущий символ знаком математической операции, используйте функцию `isOperator`, которую вы написали ранее.\nЕсли символ является знаком математической операции, присвойте его значение переменной `op`, запишите в переменную `opIndex` его индекс в строке `str` и прервите выполнение цикла.\n4. Создайте цикл `for`, который будет перебирать все символы строки `str, начиная с индекса, следующего за оператором, и записывать их в переменную `num2`.\n5. Преобразуйте строки `num1` и `num2` в числа.\n6. Вызовите функцию `calculator`, передав в нее знак операции `op` и 2 числа `num1` и `num2`.\n7. верните результат выполнения функции `calculator`.\n\nПримеры вызова функции:\n\n```javascript\ncalculateExpression('21+39');   // 60\ncalculateExpression('21-39');   // -18\ncalculateExpression('20/0');    // Infinity\n```\n\nПримеры вызова функции из другой функции:\n```javascript\nfunction hello(name){\n  console.log('Hello, ' + name)\n}\nfunction bye(name){\n  console.log('Goodbye, ' + name)\n}\n\nfunction greetings(name, greeting){\n  if(greeting === 'Hi') return hello(name)\n  if(greeting === 'Bye') return bye(name)\n}\ngreetings('Alice', 'Hi') // Hello, Alice\ngreetings('Alice', 'Bye') // Goodbye, Alice\n```\nВ этом примере функция `greetings` принимает 2 аргумента: имя и приветствие. В зависимости от приветствия, функция вызывает либо функцию `hello`, либо функцию `bye`, передавая вызванной функции имя.\n\nВы можете создавать свои функции и использовать их в решении разных похожих между собою задач.\nНапример, можно создать функцию `isDigit`, которая будет принимать один символ и проверять, является ли он цифрой.\nВы можете сохранить эту функцию и вставлять ее в решении других задач, в которых нужно проверять, является ли символ цифрой.\n```javascript\nfunction isDigit(char){\n  if (char >=\"0\" && char <=\"9\") return true;\n  else return false;\n}\n\nfunction onlyDigits(str){ //Эта функция принимает строку и возвращает строку, содержащую только цифры из исходной строки\n  let result = '';\n  for ( let i=0; i<str.length; i++ ) {\n    if (isDigit(str[i])) result += str[i]; //Вызов функции isDigit для проверки текущего символа\n  }\n  return result;\n}\nconsole.log(onlyDigits('1s0t89r3')); //\"10893\"\nconsole.log(onlyDigits(' t i85u y ')); //\"85\"\nconsole.log(onlyDigits(' no digits ')); // \"\"\n```"
  },
  "initialSolution": "function calculator(op, num1, num2) {\n}\nfunction calculateExpression(str) {\n}",
  "completedSolution": "function calculator(op, num1, num2) {\n  if (op === '+') return num1 + num2;\n  else if (op === '-') return num1 - num2;\n  else if (op === '*') return num1 * num2;\n  else if (op === '/') return num1 / num2;\n}\n\nfunction isOperator(char) {\n  const operators = '+-*/';\n  for (let i = 0; i < operators.length; i++) {\n    if (char === operators[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction calculateExpression(str) {\n  let num1 = '';\n  let num2 = '';\n  let op;\n  let opIndex = -1;\n\n  for (let i = 0; i < str.length; i++) {\n    if (isOperator(str[i])) {\n      op = str[i];\n      opIndex = i;\n      break;\n    }\n    num1 += str[i];\n  }\n\n  for (let i = opIndex + 1; i < str.length; i++) {\n    num2 += str[i];\n  }\n\n  return calculator(op, +num1, +num2);\n}",
  "openTest": "it('Created function calculator', () => {\n  expect(calculator).to.be.a('function');\n});\n\nit('Created function calculateExpression', () => {\n  expect(calculateExpression).to.be.a('function');\n});\n\nit('calculateExpression() should not contain split() method', () => {\n  expect(calculateExpression.toString()).to.not.contain('.split(');\n});\n\nit('calculateExpression() should not contain indexOf() method', () => {\n  expect(calculateExpression.toString()).to.not.contain('.indexOf(');\n});\n\nit('calculateExpression() should not contain slice() method', () => {\n  expect(calculateExpression.toString()).to.not.contain('.slice(');\n});\n\nit('calculateExpression() should not contain substring() method', () => {\n  expect(calculateExpression.toString()).to.not.contain('.substring(');\n});\n\nit('calculateExpression(\"21+39\") should return 60', () => {\n  expect(calculateExpression('21+39')).to.equal(60);\n});\n\nit('calculateExpression(\"21-39\") should return -18', () => {\n  expect(calculateExpression(' 21 - 39 ')).to.equal(-18);\n});\n\nit('calculateExpression(\"20/5\") should return 4', () => {\n  expect(calculateExpression('20/5')).to.equal(4);\n});\n\nit('calculateExpression(\"20/0\") should return Infinity', () => {\n  expect(calculateExpression('20/0')).to.equal(Infinity);\n});\n\nit('calculateExpression(\"100*200\") should return 20000', () => {\n  expect(calculateExpression('100*200')).to.equal(20000);\n});\n\nit('calculateExpression(\"1+20\") should return 21', () => {\n  expect(calculateExpression('1+20')).to.equal(21);\n});\n\nit('calculateExpression(\"1-0.2\") should return 0.8', () => {\n  expect(calculateExpression('1-0.2')).to.equal(0.8);\n});\n\nit('calculateExpression(\"1*1\") should return 1', () => {\n  expect(calculateExpression('1*1')).to.equal(1);\n});\n\nit('calculateExpression(\"1.5*1\") should return 1.5', () => {\n  expect(calculateExpression('1.5*1')).to.equal(1.5);\n});\n\nit('calculateExpression(\"1.5-0.005\") should return 1.495', () => {\n  expect(calculateExpression('1.5-0.005')).to.equal(1.495);\n});\n\nit('calculateExpression(\"1.5/0.5\") should return 3', () => {\n  expect(calculateExpression('1.5/0.5')).to.equal(3);\n});\n\nit('calculateExpression(\"1*0\") should return 0', () => {\n  expect(calculateExpression('1*0')).to.equal(0);\n});\n\nit('calculateExpression(\"1/1\") should return 1', () => {\n  expect(calculateExpression('1/1')).to.equal(1);\n});\n\nit('calculateExpression(\"00+00000\") should return 0', () => {\n  expect(calculateExpression('00+00000')).to.equal(0);\n});\n\nit('calculateExpression(\"0+20\") should return 20', () => {\n  expect(calculateExpression('0+20')).to.equal(20);\n});\n\nit('calculateExpression(\"0.25+20.05\") should return 20.3', () => {\n  expect(calculateExpression('0.25+20.05')).to.equal(20.3);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}