{
  "_id": "6696c2ca763f0712c198ed17",
  "name": {
    "en": "",
    "ru": "Посчитать сколько четных чисел в строке"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `countEven` должна принимать строку и возвращать количество четных чисел в этой строке.\nСтрока может состоять из различных символов и быть произвольной длины. Числа в строке могут быть как однозначными, так и многозначными.\n\n#### Алгоритм решения задачи:\n\n1. Создайте переменную `count` - счетчик четных чисел - и присвойте ей значение 0.\n2. Создайте переменную - аккумулятор `acc` для хранения текущего числа и присвойте ей значение пустой строки.\n3. Создайте цикл, в котором переберите все символы строки.\n4. В цикле осуществляйте проверку каждого символа: если символ - цифра - он должен добавляться к аккумулятору.\n5. В противном случае, если в аккумуляторе накоплено значение, оно должно быть проверено на четность, и счетчик четных чисел, если нужно, увеличен на 1, после чего аккумулятор сбрасывается - устанавливается равным пустой строке.\n6. После окончания цикла нужно проверить аккумулятор, если он не пустой, то его значение должно быть проверено на четность, и счетчик четных чисел, если нужно, увеличить на 1.\n7. Возвратите значение счетчика четных чисел.\n\nДля проверки является символ цифрой или нет используйте преобразование символа в число с последующей проверкой на `NaN` и `пробел`.\n\nПримеры запуска функции:\n\n```javascript\ncountEven('12 34 56'); // 3\ncountEven('Order number: 135, Item# 779, Amount: 5.'); // 0\ncountEven('Hello, World!'); // 0\ncountEven(''); // 0\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function countEven(str) {\n  let count = 0;\n  let acc = '';\n\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!isNaN(Number(char)) && char !== ' ') {\n      acc += char;\n    } else if (acc) {\n      if (acc % 2 === 0) {\n        count++;\n      }\n      acc = '';\n    }\n  }\n\n  if (acc && acc % 2 === 0) {\n      count++;\n  }\n\n  return count;\n}",
  "openTest": "it('Created function countEven', () => {\n  expect(countEven).to.be.a('function');\n});\n\nit('countEven should not contain includes()', () => {\n  expect(countEven.toString()).to.not.contain('.includes(');\n});\n\nit('countEven should not contain indexOf()', () => {\n  expect(countEven.toString()).to.not.contain('.indexOf(');\n});\n\nit('countEven should not contain split()', () => {\n  expect(countEven.toString()).to.not.contain('.split(');\n});\n\nit('countEven(\"12 34 56 78 90\") should return 5', () => {\n  expect(countEven('12 34 56 78 90')).to.be.equal(5);\n});\n\nit('countEven(\"Hello, World!\") should return 0', () => {\n  expect(countEven('Hello, World!')).to.be.equal(0);\n});\n\nit('countEven(\"Order number: 1035, Item# 0779, Amount: 50.\") should return 1', () => {\n  expect(countEven('Order number: 1035, Item# 0779, Amount: 50.')).to.be.equal(1);\n});\n\nit('countEven(\"Order number: 1135, Item# 1779, Amount: 59.\") should return 0', () => {\n  expect(countEven('Order number: 1135, Item# 1779, Amount: 59.')).to.be.equal(0);\n});\n\nit('countEven(\"0\") should return 1', () => {\n  expect(countEven('0')).to.be.equal(1);\n});\n\nit('countEven(\"1\") should return 0', () => {\n  expect(countEven('1')).to.be.equal(0);\n});\n\nit('countEven(\"  2  \") should return 1', () => {\n  expect(countEven('  2  ')).to.be.equal(1);\n});\n\nit('countEven(\" 3 \") should return 0', () => {\n  expect(countEven(' 3 ')).to.be.equal(0);\n});\n\nit('countEven(\"(978)-479-55-00\") should return 2', () => {\n  expect(countEven('(978)-479-55-00')).to.be.equal(2);\n});\n\nit('countEven(\"  555%7 : 1 ; 9999, 17 error @/? {333}  \") should return 0', () => {\n  expect(countEven('  555%7 : 1 ; 9999, 17 error @/? {333}  ')).to.be.equal(0);\n});\n\nit('countEven(\"  51km 1000m 0\") should return 2', () => {\n  expect(countEven('  51km 1000m 0')).to.be.equal(2);\n});\n\nit('countEven(\"\") should return 0', () => {\n  expect(countEven('')).to.be.equal(0);\n});\n\nit('countEven(\" \") should return 0', () => {\n  expect(countEven(' ')).to.be.equal(0);\n});\n\nit('countEven(\"    \") should return 0', () => {\n  expect(countEven('    ')).to.be.equal(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}