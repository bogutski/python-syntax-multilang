{
  "_id": "6696c2ca763f0712c198ed16",
  "name": {
    "en": "",
    "ru": "Выбрать из строки все числа и записать их в массив"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `numbersToArray` принимает строку, состоящую из различных символов, в том числе - цифр, и возвращает массив чисел, в том порядке, как они встречаются в строке.\n\nЧисло - это последовательность цифр. Оно может состоять из одной цифры, например, 5, или из нескольких, например, 123.\n\n```javascript\nconst digits = '0123456789';\n```\nЧтобы определить, является ли символ цифрой, то есть входит ли он в строку `digits`, используется метод для работы со строками `includes()`.\nМетод `includes()` возвращает `true`, если строка содержит указанную подстроку, и `false`, если не содержит.\n\nПеред добавлением числа в массив оно должно быть преобразовано из строкового представления в числовое. Для этого используется унарный плюс `+`.\n\nИсправьте ошибки в коде функции `numbersToArray`.\n\nПримеры запуска функции:\n```javascript\nnumbersToArray('a bc 12 3'); // [12, 3]\nnumbersToArray('123 45 67 89 10'); // [123, 45, 67, 89, 10]\nnumbersToArray('arr123 $68 07% tax total 505'); // [123, 68, 7, 505]\nnumbersToArray('a b c'); // []\nnumbersToArray(''); // []\n```"
  },
  "initialSolution": "function numberToArray(str) {\n  const digits = 'abcdef0123456789';\n  const numbers = [];\n  const number = '';\n\n  for (let i = 0; i > str.length; i++) {\n    if (digits.includes(str[i])) {  // если символ является цифрой\n      number += str[i];             // добавляем его в текущее число-аккумулятор\n    } else if (number.length > 0) { // если символ не является цифрой и текущее число-аккумулятор не пустое\n      numbers.push(+number);        // добавляем текущее число-аккумулятор в массив чисел\n      number = 0;                   // сбрасываем значение текущего числа-аккумулятора\n    }\n  }\n\n  if (number.length > 0) {    // если строка закончилась числом, то нужно добавить в массив последнее число-аккумулятор\n    numbers.push(-number);    // добавляем его в массив чисел\n  }\n\n  return number;\n}",
  "completedSolution": "function numbersToArray(str) {\n  const digits = '0123456789';\n  const numbers = [];\n  let number = '';\n\n  for (let i = 0; i < str.length; i++) {\n    if (digits.includes(str[i])) {\n      number += str[i];\n    } else if (number.length > 0) {\n      numbers.push(+number);\n      number = '';\n    }\n  }\n\n  if (number.length > 0) {\n    numbers.push(+number);\n  }\n\n  return numbers;\n}",
  "openTest": "it('Created function numbersToArray', () => {\n  expect(numbersToArray).to.be.a('function');\n});\n\nit('Function numbersToArray contains method includes()', () => {\n  expect(numbersToArray.toString()).to.contain('.includes(');\n});\n\nit('numbersToArray(\"a bc 12 3\") should return [12, 3]', () => {\n  expect(numbersToArray('a bc 12 3')).to.deep.equal([12, 3]);\n});\n\nit('numbersToArray(\"a bc 12 30coins\") should return [12, 30]', () => {\n  expect(numbersToArray('a bc 12 30coins')).to.deep.equal([12, 30]);\n});\n\nit('numbersToArray(\" abc 12 3 \") should return [12, 3]', () => {\n  expect(numbersToArray(' abc 12 3 ')).to.deep.equal([12, 3]);\n});\n\nit('numbersToArray(\"123 45 67 89 10\") should return [123, 45, 67, 89, 10]', () => {\n  expect(numbersToArray('123 45 67 89 10')).to.deep.equal([123, 45, 67, 89, 10]);\n});\n\nit('numbersToArray(\"arr123 $68 07% tax total 505\") should return [123, 68, 7, 505]', () => {\n  expect(numbersToArray('arr123 $68 07% tax total 505')).to.deep.equal([123, 68, 7, 505]);\n});\n\nit('numbersToArray(\"a:= b*c;\") should return []', () => {\n  expect(numbersToArray('a:= b*c;')).to.deep.equal([]);\n});\n\nit('numbersToArray(\"\") should return []', () => {\n  expect(numbersToArray('')).to.deep.equal([]);\n});\n\nit('numbersToArray(\"a\") should return []', () => {\n  expect(numbersToArray('a')).to.deep.equal([]);\n});\n\nit('numbersToArray(\"11a99\") should return [11, 99]', () => {\n  expect(numbersToArray('11a99')).to.deep.equal([11, 99]);\n});\n\nit('numbersToArray(\"1\") should return [1]', () => {\n  expect(numbersToArray('1')).to.deep.equal([1]);\n});\n\nit('numbersToArray(\"1234567890\") should return [1234567890]', () => {\n  expect(numbersToArray('1234567890')).to.deep.equal([1234567890]);\n});\n\nit('numbersToArray(\" 1 \") should return [1]', () => {\n  expect(numbersToArray(' 1 ')).to.deep.equal([1]);\n});\n\nit('numbersToArray(\" 1 2 3 are digits!\") should return [1, 2, 3]', () => {\n  expect(numbersToArray(' 1 2 3 are digits!')).to.deep.equal([1, 2, 3]);\n});\n\nit('numbersToArray(\" There are no digits or numbers in this string! \") should return []', () => {\n  expect(numbersToArray(' There are no digits or numbers in this string! ')).to.deep.equal([]);\n});\n\nit('numbersToArray(\"101  and 202 or    303 not   404 nor 505 neither 606!\") should return [101, 202, 303, 404, 505, 606]', () => {\n  expect(numbersToArray('101  and 202 or    303 not   404 nor 505 neither 606!')).to.deep.equal([101, 202, 303, 404, 505, 606]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}