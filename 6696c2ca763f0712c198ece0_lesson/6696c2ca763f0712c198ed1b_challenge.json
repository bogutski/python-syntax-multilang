{
  "_id": "6696c2ca763f0712c198ed1b",
  "name": {
    "en": "Object with information about numbers\n/*",
    "ru": "Объект с информацией о числах\n/*"
  },
  "instruction": {
    "en": "Create a function `getNumbersInfo` that takes a string of numbers separated by spaces and returns an object containing information about the numbers written in the string.\nThe object should include the count of positive, negative, zero, even, and odd numbers in the string. The same numbers can be counted multiple times.\nFor example: -5 is a negative, odd number.\n\nObject structure:\n```javascript\n{\n  negatives: 0, // count of negative numbers\n  positives: 0, // count of positive numbers\n  zeros: 0,     // count of zeros\n  odds: 0,      // count of odd numbers\n  evens: 0      // count of even numbers\n}\n```\nYou can create a counter object with zero values, as shown above, at the beginning of the function and increment the necessary counters in a loop.\nOr you can create 5 counter variables with zero values at the beginning of the function, increment the necessary variables in a loop, and then create an object with the required properties and assign the values of these variables to it.\n\nTo solve the task, it is recommended to use the `split` method for working with strings.\nThe `split` method is called on a string, takes a delimiter, splits the original string into substrings based on the delimiter, and returns an array of substrings.\nFor example:\n\n```javascript\nconst str = '1 2 3 4 5';\nconst arr = str.split(' '); // ['1', '2', '3', '4', '5']\n```\n\nIf the string passed to the function is empty or consists of only spaces, the function should return an error message: `String is empty`.\nAt the very beginning of the function, remove extra spaces from the string and check if the string is empty. If the string is empty, return an error message.\n\nExample function call:\n\n```javascript\ngetNumbersInfo('-2 -1 0 1 2 3 4 55'); // should return\n{\n  negatives: 2,\n  positives: 5,\n  zeros: 1,\n  odds: 4,\n  evens: 3\n}\n\ngetNumbersInfo('      ');  // should return an error message: 'String is empty'\n```",
    "ru": "Создайте функцию `getNumbersInfo`, которая принимает строку из чисел, разделенных пробелами, и возвращает объект, содержащий информацию о числах, записанных в строке.\nВ объекте должно быть записано сколько в строке положительных, отрицательных чисел, нулей, четных, нечетных чисел. Одни и те же числа могут участвовать в нескольких подсчетах.\nНапример: -5 - отрицательное, нечетное число.\n\nСтруктура объекта:\n```javascript\n{\n  negatives: 0, // количество отрицательных чисел\n  positives: 0, // количество положительных чисел\n  zeros: 0,     // количество нулей\n  odds: 0,      // количество нечетных чисел\n  evens: 0      // количество четных чисел\n}\n```\nМожно создать объект счетчиков с нулевыми значениями, как показано выше, в начале функции и увеличивать нужные счетчики в цикле.\nИли можно создать 5 переменных - счетчиков с нулевыми значениями, в начале функции, увеличивать нужные переменные в цикле, а в конце создать объект с нужными свойствами и записать в него значениями этих переменных.\n\nДля решения задачи рекомендуется использовать метод для работы со строками `split`.\nМетод `split` вызывается на строку, принимает разделитель, разбивает исходную строку на подстроки по разделителю и возвращает массив подстрок.\nНапример:\n\n```javascript\nconst str = '1 2 3 4 5';\nconst arr = str.split(' '); // ['1', '2', '3', '4', '5']\n```\n\nЕсли переданная в функцию строка пустая, или состоит из одних пробелов, то функция должна вернуть сообщение об ошибке: `String is empty`.\nВ самом начале функции удалите из строки лишние пробелы и проверьте строку на пустоту и, если строка пустая, то верните сообщение об ошибке.\n\nПример запуска функции:\n\n```javascript\ngetNumbersInfo('-2 -1 0 1 2 3 4 55'); // должна вернуть\n{\n  negatives: 2,\n  positives: 5,\n  zeros: 1,\n  odds: 4,\n  evens: 3\n}\n\ngetNumbersInfo('      ');  // должна вернуть сообщение об ошибке: 'String is empty'\n```"
  },
  "initialSolution": "func",
  "completedSolution": "function getNumbersInfo(str) {\n  str = str.trim();\n  if (str === '') return 'String is empty';\n\n  const obj = {\n    negatives: 0,\n    positives: 0,\n    zeros: 0,\n    odds: 0,\n    evens: 0\n  }\n\n  const numbers = str.split(' ');\n\n  for (let i = 0; i < numbers.length; i += 1) {\n    const number = Number(numbers[i]);\n\n    if (number < 0) obj.negatives++;\n    else if (number > 0) obj.positives++;\n    else obj.zeros++;\n\n    if (number % 2 === 0) obj.evens++;\n    else obj.odds++;\n  }\n\n  return obj;\n}",
  "openTest": "it('Created function getNumbersInfo', () => {\n  expect(getNumbersInfo).to.be.a('function');\n});\n\nit('getNumbersInfo(\"1 2 3 4 5\") should return { negatives: 0, positives: 5, zeros: 0, odds: 3, evens: 2 }', () => {\n  expect(getNumbersInfo('1 2 3 4 5')).to.deep.equal({\n    negatives: 0,\n    positives: 5,\n    zeros: 0,\n    odds: 3,\n    evens: 2\n  });\n});\n\nit('getNumbersInfo(\"-1 -2 -3 -4 -5\") should return { negatives: 5, positives: 0, zeros: 0, odds: 3, evens: 2 }', () => {\n  expect(getNumbersInfo('-1 -2 -3 -4 -5')).to.deep.equal({\n    negatives: 5,\n    positives: 0,\n    zeros: 0,\n    odds: 3,\n    evens: 2\n  });\n});\n\nit('getNumbersInfo(\"-1 20 0 3 -45 -5 0\") should return { negatives: 3, positives: 2, zeros: 2, odds: 4, evens: 3 }', () => {\n  expect(getNumbersInfo('-1 20 0 3 -45 -5 0')).to.deep.equal({\n    negatives: 3,\n    positives: 2,\n    zeros: 2,\n    odds: 4,\n    evens: 3\n  });\n});\n\nit('getNumbersInfo(\"0\") should return { negatives: 0, positives: 0, zeros: 1, odds: 0, evens: 1 }', () => {\n  expect(getNumbersInfo('0')).to.deep.equal({\n    negatives: 0,\n    positives: 0,\n    zeros: 1,\n    odds: 0,\n    evens: 1\n  });\n});\n\nit('getNumbersInfo(\"1\") should return { negatives: 0, positives: 1, zeros: 0, odds: 1, evens: 0 }', () => {\n  expect(getNumbersInfo('1')).to.deep.equal({\n    negatives: 0,\n    positives: 1,\n    zeros: 0,\n    odds: 1,\n    evens: 0\n  });\n});\n\nit('getNumbersInfo(\"\") should return \"String is empty\"', () => {\n  expect(getNumbersInfo('')).to.equal('String is empty');\n});\n\nit('getNumbersInfo(\"      \") should return \"String is empty\"', () => {\n  expect(getNumbersInfo('      ')).to.equal('String is empty');\n});\n\nit('getNumbersInfo(\"  1 3 5 7 9 \") should return { negatives: 0, positives: 5, zeros: 0, odds: 5, evens: 0 }', () => {\n  expect(getNumbersInfo('  1 3 5 7 9 ')).to.deep.equal({\n    negatives: 0,\n    positives: 5,\n    zeros: 0,\n    odds: 5,\n    evens: 0\n  });\n});\n\nit('getNumbersInfo(\"11 21 31 41 51 6 72 8 92 10\") should return { negatives: 0, positives: 10, zeros: 0, odds: 5, evens: 5 }', () => {\n  expect(getNumbersInfo('11 21 31 41 51 6 72 8 92 10')).to.deep.equal({\n    negatives: 0,\n    positives: 10,\n    zeros: 0,\n    odds: 5,\n    evens: 5\n  });\n});\n\nit('getNumbersInfo(\"-11 -21 -31 -41 -51 -6 -72 -8 -92 -10\") should return { negatives: 10, positives: 0, zeros: 0, odds: 5, evens: 5 }', () => {\n  expect(getNumbersInfo('-11 -21 -31 -41 -51 -6 -72 -8 -92 -10')).to.deep.equal({\n    negatives: 10,\n    positives: 0,\n    zeros: 0,\n    odds: 5,\n    evens: 5\n  });\n});\n\nit('getNumbersInfo(\"-1 0 1\") should return { negatives: 1, positives: 1, zeros: 1, odds: 2, evens: 1 }', () => {\n  expect(getNumbersInfo('-1 0 1')).to.deep.equal({\n    negatives: 1,\n    positives: 1,\n    zeros: 1,\n    odds: 2,\n    evens: 1\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}