{
  "_id": "6696c2ca763f0712c198e5d4",
  "name": {
    "en": "Weather. Is it warm or cold?",
    "ru": "Погода. Тепло или холодно?"
  },
  "instruction": {
    "en": "Write a function `currentWeather` that takes one parameter:\n* a `weather` object with weather information.\n\nThe `weather` object has two properties:\n* `temperature` - temperature in degrees Celsius, number,\n* `condition` - weather condition, empty string.\n\nThe function must change the `condition` property in the `weather` object as follows:\n\n* If the temperature is greater than or equal to 20 degrees Celsius, the weather condition should change to `warm`,\n* If the temperature is greater than or equal to 10 degrees Celsius and less than 20 degrees Celsius, the weather state should change to `cool`,\n* If the temperature is less than 10 degrees Celsius, the weather condition should change to `cold`.\n\nThe function must return the updated `weather` object.\n\nAn example of running the function:\n```javascript\ncurrentWeather({temperature: 10, condition: ''});\n// { temperature: 10, condition: 'cool' }\n\ncurrentWeather({temperature: 7, condition: ''});\n// { temperature: 7, condition: 'cold' }\n\ncurrentWeather({temperature: 25, condition: ''});\n// { temperature: 25, condition: 'warm' }\n```",
    "ru": "Напишите функцию `currentWeather`, которая принимает один параметр:\n* объект `weather` с информацией о погоде.\n\nОбъект `weather` имеет два свойства:\n* `temperature` - температура в градусах Цельсия, число,\n* `condition` - состояние погоды, пустая строка.\n\nФункция должна изменить свойство `condition` в объекте `weather` следующим образом:\n\n* Если температура больше или равна 20 градусам Цельсия, то состояние погоды должно измениться на `warm`,\n* Если температура больше или равна 10 и меньше 20 градусов Цельсия, то состояние погоды должно измениться на `cool`,\n* Если температура меньше 10 градусов Цельсия, то состояние погоды должно измениться на `cold`.\n\nФункция должна вернуть обновленный объект `weather`.\n\nПример запуска функции:\n```javascript\ncurrentWeather({temperature: 10, condition: ''});\n// { temperature: 10, condition: 'cool' }\n\ncurrentWeather({temperature: 7, condition: ''});\n// { temperature: 7, condition: 'cold' }\n\ncurrentWeather({temperature: 25, condition: ''});\n// { temperature: 25, condition: 'warm' }\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function currentWeather(weather) {\n  if (weather.temperature >= 20) {\n    weather.condition = 'warm';\n  } else if (weather.temperature >= 10) {\n    weather.condition = 'cool';\n  } else {\n    weather.condition = 'cold';\n  }\n  return weather;\n}",
  "openTest": "it('Created function currentWeather', () => {\n  expect(currentWeather).to.be.a('function');\n});\n\nit(\"currentWeather({temperature: 10, condition: ''}) should return { temperature: 10, condition: 'cool' }\", () => {\n  expect(currentWeather({ temperature: 10, condition: '' })).eql({\n    temperature: 10,\n    condition: 'cool',\n  });\n});\n\nit(\"currentWeather({temperature: 7, condition: ''}) should return { temperature: 7, condition: 'cold' }\", () => {\n  expect(currentWeather({ temperature: 7, condition: '' })).eql({\n    temperature: 7,\n    condition: 'cold',\n  });\n});\n\nit(\"currentWeather({temperature: 25, condition: ''}) should return { temperature: 25, condition: 'warm' }\", () => {\n  expect(currentWeather({ temperature: 25, condition: '' })).eql({\n    temperature: 25,\n    condition: 'warm',\n  });\n});\n\nit(\"currentWeather({temperature: 0, condition: ''}) should return { temperature: 0, condition: 'cold' }\", () => {\n  expect(currentWeather({ temperature: 0, condition: '' })).eql({\n    temperature: 0,\n    condition: 'cold',\n  });\n});\n\nit(\"currentWeather({temperature: 15, condition: ''}) should return { temperature: 15, condition: 'cool' }\", () => {\n  expect(currentWeather({ temperature: 15, condition: '' })).eql({\n    temperature: 15,\n    condition: 'cool',\n  });\n});\n\nit(\"currentWeather({temperature: 20, condition: ''}) should return { temperature: 20, condition: 'warm' }\", () => {\n  expect(currentWeather({ temperature: 20, condition: '' })).eql({\n    temperature: 20,\n    condition: 'warm',\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}