{
  "_id": "6696c2cb763f0712c198f998",
  "name": {
    "en": "/*",
    "ru": "Найти адвокатов с высшим рейтингом"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findTopLawyers`, которая принимает два массива: `lawyerScore` и `lawyerName`.\n\n* Массив `lawyerScore` содержит объекты с идентификатором адвоката и его рейтингом.\n* Массив `lawyerName` содержит объекты с идентификатором адвоката, его именем и штатом.\n\nФункция должна вернуть массив объектов, содержащих информацию о двух адвокатах с наивысшими рейтингами.\n\nЕсли данных недостаточно, функция должна возвращать соответствующее сообщение:\n\n* Если один из массивов пустой - `Missing data`\n* Если id не совпадают - `No matching IDs`\n\n\nПримеры запуска функции:\n```javascript\nconst lawyerScore = [\n  {id: 1, score: 80},\n  {id: 3, score: 32},\n  {id: 4, score: 33},\n  {id: 2, score: 88}\n];\n\nconst lawyerName = [\n  {id: 1, name: 'Mike', state: 'CA'},\n  {id: 3, name: 'Susan', state: 'FL'},\n  {id: 4, name: 'Kevin', state: 'CA'},\n  {id: 2, name: 'John', state: 'TN'}\n];\n\nconsole.log(findTopLawyers(lawyerScore, lawyerName));\n// [\n//   { lawyerId: 2, lawyerName: 'John', lawyerScore: 88, state: 'TN' },\n//   { lawyerId: 1, lawyerName: 'Mike', lawyerScore: 80, state: 'CA' }\n// ]\n\nconsole.log(findTopLawyers([{id: 1, score: 80}], [{id: 1, name: 'Mike', state: 'CA'}]));\n// [ { lawyerId: 1, lawyerName: 'Mike', lawyerScore: 80, state: 'CA' } ]\n\nconsole.log(findTopLawyers(lawyerScore, [])); // \"Missing data\"\nconsole.log(findTopLawyers([], lawyerName));  // \"Missing data\"\nconsole.log(findTopLawyers([{id: 1, score: 80}], [{id: 2, name: 'Mike', state: 'CA'}])); // \"No matching IDs\"\n```"
  },
  "initialSolution": "function findTopLawyers(){\n\n}",
  "completedSolution": "function findTopLawyers(score, name) {\n  if(!score.length || !name.length) return 'Missing data'\n\n  const [firstScore, secondScore] = score.sort((a, b) => b.score - a.score);\n  let firstLawyer\n  let secondLawyer\n\n  for(let obj of name){\n    if(firstScore.id === obj.id) firstLawyer = obj\n    else if(secondScore && secondScore.id === obj.id) secondLawyer = obj\n  }\n\n  let result = []\n\n  if(firstLawyer){\n    result.push({\n      lawyerId: firstScore.id,\n      lawyerName: firstLawyer.name,\n      lawyerScore: firstScore.score,\n      state: firstLawyer.state\n    })\n  }\n\n  if(secondLawyer){\n    result.push({\n      lawyerId: secondScore.id,\n      lawyerName: secondLawyer.name,\n      lawyerScore: secondScore.score,\n      state: secondLawyer.state\n    })\n  }\n\n  return result.length !== 0 ? result : 'No matching IDs';\n}",
  "openTest": "it('Created function findTopLawyers', () => {\n  expect(findTopLawyers).to.be.a('function');\n});\n\nit('findTopLawyers([{id: 1, score: 80}, {id: 3, score: 32}, {id: 4, score: 33}, {id: 2, score: 88}], [{id: 1, name: \"Mike\", state: \"CA\"}, {id: 3, name: \"Susan\", state: \"FL\"}, {id: 4, name: \"Kevin\", state: \"CA\"}, {id: 2, name: \"John\", state: \"TN\"}]) should return [{ lawyerId: 2, lawyerName: \"John\", lawyerScore: 88, state: \"TN\" }, { lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }]', function() {\n  expect(findTopLawyers([{id: 1, score: 80}, {id: 3, score: 32}, {id: 4, score: 33}, {id: 2, score: 88}], [{id: 1, name: \"Mike\", state: \"CA\"}, {id: 3, name: \"Susan\", state: \"FL\"}, {id: 4, name: \"Kevin\", state: \"CA\"}, {id: 2, name: \"John\", state: \"TN\"}])).to.deep.equal([{ lawyerId: 2, lawyerName: \"John\", lawyerScore: 88, state: \"TN\" }, { lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }]);\n});\n\nit('findTopLawyers([{id: 1, score: 80}], [{id: 1, name: \"Mike\", state: \"CA\"}]) should return [{ lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }]', function() {\n  expect(findTopLawyers([{id: 1, score: 80}], [{id: 1, name: \"Mike\", state: \"CA\"}])).to.deep.equal([{ lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }]);\n});\n\nit('findTopLawyers([], [{id: 1, name: \"Mike\", state: \"CA\"}]) should return \"Missing data\"', function() {\n  expect(findTopLawyers([], [{id: 1, name: \"Mike\", state: \"CA\"}])).to.equal(\"Missing data\");\n});\n\nit('findTopLawyers([{id: 1, score: 80}], []) should return \"Missing data\"', function() {\n  expect(findTopLawyers([{id: 1, score: 80}], [])).to.equal(\"Missing data\");\n});\n\nit('findTopLawyers([{id: 1, score: 80}], [{id: 2, name: \"Mike\", state: \"CA\"}]) should return \"No matching IDs\"', function() {\n  expect(findTopLawyers([{id: 1, score: 80}], [{id: 2, name: \"Mike\", state: \"CA\"}])).to.equal(\"No matching IDs\");\n});\n\nit('findTopLawyers([{id: 1, score: 80}, {id: 3, score: 32}], [{id: 1, name: \"Mike\", state: \"CA\"}, {id: 3, name: \"Susan\", state: \"FL\"}]) should return [{ lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }, { lawyerId: 3, lawyerName: \"Susan\", lawyerScore: 32, state: \"FL\" }]', function() {\n  expect(findTopLawyers([{id: 1, score: 80}, {id: 3, score: 32}], [{id: 1, name: \"Mike\", state: \"CA\"}, {id: 3, name: \"Susan\", state: \"FL\"}])).to.deep.equal([{ lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }, { lawyerId: 3, lawyerName: \"Susan\", lawyerScore: 32, state: \"FL\" }]);\n});\n\nit('findTopLawyers([{id: 1, score: 80}, {id: 3, score: 32}, {id: 4, score: 33}], [{id: 1, name: \"Mike\", state: \"CA\"}, {id: 3, name: \"Susan\", state: \"FL\"}, {id: 4, name: \"Kevin\", state: \"CA\"}]) should return [{ lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }, { lawyerId: 4, lawyerName: \"Kevin\", lawyerScore: 33, state: \"CA\" }]', function() {\n  expect(findTopLawyers([{id: 1, score: 80}, {id: 3, score: 32}, {id: 4, score: 33}], [{id: 1, name: \"Mike\", state: \"CA\"}, {id: 3, name: \"Susan\", state: \"FL\"}, {id: 4, name: \"Kevin\", state: \"CA\"}])).to.deep.equal([{ lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }, { lawyerId: 4, lawyerName: \"Kevin\", lawyerScore: 33, state: \"CA\" }]);\n});\n\nit('findTopLawyers([{id: 1, score: 80}, {id: 2, score: 88}], [{id: 1, name: \"Mike\", state: \"CA\"}, {id: 2, name: \"John\", state: \"TN\"}]) should return [{ lawyerId: 2, lawyerName: \"John\", lawyerScore: 88, state: \"TN\" }, { lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }]', function() {\n  expect(findTopLawyers([{id: 1, score: 80}, {id: 2, score: 88}], [{id: 1, name: \"Mike\", state: \"CA\"}, {id: 2, name: \"John\", state: \"TN\"}])).to.deep.equal([{ lawyerId: 2, lawyerName: \"John\", lawyerScore: 88, state: \"TN\" }, { lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }]);\n});\n\nit('findTopLawyers([{id: 2, score: 88}, {id: 1, score: 80}], [{id: 2, name: \"John\", state: \"TN\"}, {id: 1, name: \"Mike\", state: \"CA\"}]) should return [{ lawyerId: 2, lawyerName: \"John\", lawyerScore: 88, state: \"TN\" }, { lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }]', function() {\n  expect(findTopLawyers([{id: 2, score: 88}, {id: 1, score: 80}], [{id: 2, name: \"John\", state: \"TN\"}, {id: 1, name: \"Mike\", state: \"CA\"}])).to.deep.equal([{ lawyerId: 2, lawyerName: \"John\", lawyerScore: 88, state: \"TN\" }, { lawyerId: 1, lawyerName: \"Mike\", lawyerScore: 80, state: \"CA\" }]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}