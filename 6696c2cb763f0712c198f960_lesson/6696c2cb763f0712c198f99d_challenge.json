{
  "_id": "6696c2cb763f0712c198f99d",
  "name": {
    "en": "/*",
    "ru": "Проверка надежности паролей"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `checkPasswordStrength`, которая принимает массив строк (паролей) и массив строк (запрещенных слов).\n\nФункция должна проверять надежность каждого пароля и возвращать массив с оценками `strong` или `weak` для каждого пароля.\n\nПравила для пароля:\n* Пароль не может быть меньше шести символов.\n* Пароль не может состоять только из строчных или только из заглавных букв.\n* Пароль не может полностью или частично совпадать с любым из запрещенных слов.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(checkPasswordStrength([ 'iliketoCoDe', 'teaMAKEsmehappy', 'abracaDabra', 'pasSword', 'blackcoffeeISthebest'], ['coffee', 'coding', 'happy']))\n// [ 'strong', 'weak', 'strong', 'strong', 'weak' ]\n\nconsole.log(checkPasswordStrength(['12345', 'YUIOYES', 'qwertyuiop'], ['ty', 'xyz']))\n// [ 'weak', 'weak', 'weak' ]\n\nconsole.log(checkPasswordStrength([\n      'WPVCX0hbZF', 'igGNgvK5OG',\n      'D22Czf66ow', 'GEOwIzFjhR',\n      'i9t6fmUTOX', 'wOyuKmT0NF',\n      'TcJRDJH5hK', 'JCWytHZFku',\n      'Pha6T6twc6', 'WoSVFVDKmK',\n      'IMFc41arCc', 'cmEa8Yt6YX',\n      'bVMCxZGOSi', 'vvchWGQbof'\n    ],\n    ['149174', 'fhaoigha', 'CX0hbZ', 'GNgvK5', 'VF', 'ggj4Rw6ZHk', 'V6fn3Ev2kw', '5vslIFZoza', 'mWxsQwIUc8', 'T6fTSxOGTj']))\n\n// [\n//   'weak',   'weak',\n//   'strong', 'strong',\n//   'strong', 'strong',\n//   'strong', 'strong',\n//   'strong', 'weak',\n//   'strong', 'strong',\n//   'strong', 'strong'\n// ]\n```"
  },
  "initialSolution": "function checkPasswordStrength(){\n\n}",
  "completedSolution": "function checkPasswordStrength(passwords, commonWords) {\n    let res = []\n\n    const commonWordsCheck = (word => {\n        for(let str of commonWords) {\n            if(word.includes(str)) return true\n        }\n        return false\n    })\n\n    for(let word of passwords) {\n        if(word.length < 6 ||\n            word.toLowerCase() === word ||\n            word.toUpperCase() === word ||\n            commonWordsCheck(word)) {\n            res.push('weak')\n        }else {\n            res.push('strong')\n        }\n    }\n\n    return res\n}",
  "openTest": "it('Created function checkPasswordStrength', () => {\n  expect(checkPasswordStrength).to.be.a('function');\n});\n\nit('checkPasswordStrength([ \"iliketoCoDe\", \"teaMAKEsmehappy\", \"abracaDabra\", \"pasSword\", \"blackcoffeeISthebest\"], [\"coffee\", \"coding\", \"happy\"]) should return [ \"strong\", \"weak\", \"strong\", \"strong\", \"weak\" ]', function() {\n    expect(checkPasswordStrength([ 'iliketoCoDe', 'teaMAKEsmehappy', 'abracaDabra', 'pasSword', 'blackcoffeeISthebest'], ['coffee', 'coding', 'happy'])).to.deep.equal([ 'strong', 'weak', 'strong', 'strong', 'weak' ]);\n});\n\nit('checkPasswordStrength([\"12345\", \"YUIOYES\", \"qwertyuiop\"], [\"ty\", \"xyz\"]) should return [ \"weak\", \"weak\", \"weak\" ]', function() {\n    expect(checkPasswordStrength(['12345', 'YUIOYES', 'qwertyuiop'], ['ty', 'xyz'])).to.deep.equal([ 'weak', 'weak', 'weak' ]);\n});\n\nit('checkPasswordStrength([\"WPVCX0hbZF\", \"igGNgvK5OG\", \"D22Czf66ow\", \"GEOwIzFjhR\", \"i9t6fmUTOX\", \"wOyuKmT0NF\", \"TcJRDJH5hK\", \"JCWytHZFku\", \"Pha6T6twc6\", \"WoSVFVDKmK\", \"IMFc41arCc\", \"cmEa8Yt6YX\", \"bVMCxZGOSi\", \"vvchWGQbof\"], [\"149174\", \"fhaoigha\", \"CX0hbZ\", \"GNgvK5\", \"VF\", \"ggj4Rw6ZHk\", \"V6fn3Ev2kw\", \"5vslIFZoza\", \"mWxsQwIUc8\", \"T6fTSxOGTj\"]) should return [ \"weak\", \"weak\", \"strong\", \"strong\", \"strong\", \"strong\", \"strong\", \"strong\", \"strong\", \"weak\", \"strong\", \"strong\", \"strong\", \"strong\" ]', function() {\n    expect(checkPasswordStrength([\n        'WPVCX0hbZF', 'igGNgvK5OG',\n        'D22Czf66ow', 'GEOwIzFjhR',\n        'i9t6fmUTOX', 'wOyuKmT0NF',\n        'TcJRDJH5hK', 'JCWytHZFku',\n        'Pha6T6twc6', 'WoSVFVDKmK',\n        'IMFc41arCc', 'cmEa8Yt6YX',\n        'bVMCxZGOSi', 'vvchWGQbof'\n    ], ['149174', 'fhaoigha', 'CX0hbZ', 'GNgvK5', 'VF', 'ggj4Rw6ZHk', 'V6fn3Ev2kw', '5vslIFZoza', 'mWxsQwIUc8', 'T6fTSxOGTj'])).to.deep.equal([\n        'weak', 'weak', 'strong', 'strong', 'strong', 'strong',\n        'strong', 'strong', 'strong', 'weak', 'strong', 'strong',\n        'strong', 'strong'\n    ]);\n});\n\nit('checkPasswordStrength([\"short\", \"alllowercase\", \"ALLUPPERCASE\"], [\"forbidden\"]) should return [ \"weak\", \"weak\", \"weak\" ]', function() {\n    expect(checkPasswordStrength([\"short\", \"alllowercase\", \"ALLUPPERCASE\"], [\"forbidden\"])).to.deep.equal([ \"weak\", \"weak\", \"weak\" ]);\n});\n\nit('checkPasswordStrength([\"StrongPass1\", \"AnotherStr0ng\"], [\"weak\"]) should return [ \"strong\", \"strong\" ]', function() {\n    expect(checkPasswordStrength([\"StrongPass1\", \"AnotherStr0ng\"], [\"weak\"])).to.deep.equal([ \"strong\", \"strong\" ]);\n});\n\nit('checkPasswordStrength([\"MixItUp\", \"Numb3r5\", \"Symbo!s\"], [\"Symbo\"]) should return [ \"strong\", \"strong\", \"weak\" ]', function() {\n    expect(checkPasswordStrength([\"MixItUp\", \"Numb3r5\", \"Symbo!s\"], [\"Symbo\"])).to.deep.equal([ \"strong\", \"strong\", \"weak\" ]);\n});\n\nit('checkPasswordStrength([\"MyPass\", \"YourPass\", \"OurPass\"], [\"My\", \"Your\"]) should return [ \"weak\", \"weak\", \"strong\" ]', function() {\n    expect(checkPasswordStrength([\"MyPass\", \"YourPass\", \"OurPass\"], [\"My\", \"Your\"])).to.deep.equal([ \"weak\", \"weak\", \"strong\" ]);\n});\n\nit('checkPasswordStrength([\"Password1\", \"password2\", \"PASSWORD3\"], [\"Password\"]) should return [ \"weak\", \"weak\", \"weak\" ]', function() {\n    expect(checkPasswordStrength([\"Password1\", \"password2\", \"PASSWORD3\"], [\"Password\"])).to.deep.equal([ \"weak\", \"weak\", \"weak\" ]);\n});\n\nit('checkPasswordStrength([\"SafePass\", \"unsafePASS\"], [\"unsafe\"]) should return [ \"strong\", \"weak\" ]', function() {\n    expect(checkPasswordStrength([\"SafePass\", \"unsafePASS\"], [\"unsafe\"])).to.deep.equal([ \"strong\", \"weak\" ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}