{
  "_id": "6696c2cb763f0712c198f996",
  "name": {
    "en": "/*",
    "ru": "Фильтрация анаграмм"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterAnagrams`, которая принимает массив строк.\n\nФункция возвращает массив, содержащий только те строки, которые являются анаграммами хотя бы одной другой строки из исходного массива.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(justTest(['span', 'naps', 'snap'])); // [ 'span', 'naps', 'snap' ]\nconsole.log(justTest(['brag', 'garb', 'brad', 'grab', 'bred'])); // [ 'brag', 'garb', 'grab' ]\nconsole.log(justTest(['stressed', 'street ', 'desserts'])); // [ 'stressed', 'desserts' ]\n```"
  },
  "initialSolution": "function filterAnagrams(){\n\n}",
  "completedSolution": "function filterAnagrams(words) {\n  const modified = words.map(word => word.split('').sort().join(''))\n\n  let notAnagrams = []\n\n  for(let i = 0; i < modified.length; i++) {\n    if(!modified.some((str, index) => index !== i && str === modified[i])) notAnagrams.push(i)\n  }\n\n  if(!notAnagrams.length) return words\n  else return words.filter((_, i) => !notAnagrams.includes(i))\n}",
  "openTest": "it('Created function filterAnagrams', () => {\n  expect(filterAnagrams).to.be.a('function');\n});\n\nit('filterAnagrams([\"span\", \"naps\", \"snap\"]) should return [ \"span\", \"naps\", \"snap\" ]', function() {\n  expect(filterAnagrams(['span', 'naps', 'snap'])).to.deep.equal(['span', 'naps', 'snap']);\n});\n\nit('filterAnagrams([\"brag\", \"garb\", \"brad\", \"grab\", \"bred\"]) should return [ \"brag\", \"garb\", \"grab\" ]', function() {\n  expect(filterAnagrams(['brag', 'garb', 'brad', 'grab', 'bred'])).to.deep.equal(['brag', 'garb', 'grab']);\n});\n\nit('filterAnagrams([\"stressed\", \"street\", \"desserts\"]) should return [ \"stressed\", \"desserts\" ]', function() {\n  expect(filterAnagrams(['stressed', 'street', 'desserts'])).to.deep.equal(['stressed', 'desserts']);\n});\n\nit('filterAnagrams([\"abc\", \"bca\", \"cab\", \"cba\"]) should return [ \"abc\", \"bca\", \"cab\", \"cba\" ]', function() {\n  expect(filterAnagrams(['abc', 'bca', 'cab', 'cba'])).to.deep.equal(['abc', 'bca', 'cab', 'cba']);\n});\n\nit('filterAnagrams([\"a\", \"b\", \"c\"]) should return []', function() {\n  expect(filterAnagrams(['a', 'b', 'c'])).to.deep.equal([]);\n});\n\nit('filterAnagrams([\"hello\", \"world\", \"drowl\", \"olhel\"]) should return [ \"hello\", \"world\", \"drowl\", \"olhel\" ]', function() {\n  expect(filterAnagrams(['hello', 'world', 'drowl', 'olhel'])).to.deep.equal(['hello', 'world', 'drowl', 'olhel']);\n});\n\nit('filterAnagrams([\"aaa\", \"aaa\", \"aaa\"]) should return [ \"aaa\", \"aaa\", \"aaa\" ]', function() {\n  expect(filterAnagrams(['aaa', 'aaa', 'aaa'])).to.deep.equal(['aaa', 'aaa', 'aaa']);\n});\n\nit('filterAnagrams([\"one\", \"two\", \"three\", \"noe\"]) should return [ \"one\", \"noe\" ]', function() {\n  expect(filterAnagrams(['one', 'two', 'three', 'noe'])).to.deep.equal(['one', 'noe']);\n});\n\nit('filterAnagrams([\"xyz\", \"yxz\", \"zyx\", \"zxy\", \"yxz\"]) should return [ \"xyz\", \"yxz\", \"zyx\", \"zxy\", \"yxz\" ]', function() {\n  expect(filterAnagrams(['xyz', 'yxz', 'zyx', 'zxy', 'yxz'])).to.deep.equal(['xyz', 'yxz', 'zyx', 'zxy', 'yxz']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}