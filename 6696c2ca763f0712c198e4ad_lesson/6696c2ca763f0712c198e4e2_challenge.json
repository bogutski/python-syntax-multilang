{
  "_id": "6696c2ca763f0712c198e4e2",
  "name": {
    "en": "Search for an occurrence, starting with the second word",
    "ru": "Искать вхождение начиная со второго слова"
  },
  "instruction": {
    "en": "Write a function `search` that takes two strings and returns the index of the occurrence of the second string in the first, starting the search from the second word.\n\nWords are separated by spaces.\n\nFind the index of the first space in the string and use it as the start of the search.\n\nIf the second line is repeated, the function should return the index of the first occurrence.\n\nExamples of running the function:\n```javascript\nsearch('Hello world', 'o'); // 7\nsearch('Hello world', 'l'); // 9\nsearch('Hello world', 'x'); // -1\n```\n\nIf no string is found, the function should return `-1`.",
    "ru": "Напишите функцию `search`, которая принимает две строки и возвращает индекс вхождения второй строки в первую, начиная поиск со второго слова.\n\nСлова разделяются пробелами.\n\nНайдите индекс первого пробела в строке и используйте его как начало поиска.\n\nЕсли вторая строка повторяется, функция должна возвращать индекс первого вхождения.\n\nПримеры запуска функции:\n```javascript\nsearch('Hello world', 'o'); // 7\nsearch('Hello world', 'l'); // 9\nsearch('Hello world', 'x'); // -1\n```\n\nЕсли строка не найдена, функция должна возвращать `-1`."
  },
  "initialSolution": "fun",
  "completedSolution": "function search(string, substring) {\n  const spaceIndex = string.indexOf(' ');\n  return string.indexOf(substring, spaceIndex);\n}",
  "openTest": "it('Created function search', () => {\n  expect(search).to.be.a('function');\n});\n\nit('search(\"Hello world\", \"o\") should return 7', () => {\n  expect(search('Hello world', 'o')).to.be.equal(7);\n});\n\nit('search(\"Hello world\", \"l\") should return 9', () => {\n  expect(search('Hello world', 'l')).to.be.equal(9);\n});\n\nit('search(\"Hello world\", \"x\") should return -1', () => {\n  expect(search('Hello world', 'x')).to.be.equal(-1);\n});\n\nit('search(\"Hello wooorld\", \"o\") should return 7', () => {\n  expect(search('Hello wooorld', 'o')).to.be.equal(7);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}