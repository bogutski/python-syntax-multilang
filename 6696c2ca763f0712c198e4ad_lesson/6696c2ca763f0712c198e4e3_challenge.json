{
  "_id": "6696c2ca763f0712c198e4e3",
  "name": {
    "en": "Search for an occurrence starting with the third word",
    "ru": "Искать вхождение начиная с третьего слова"
  },
  "instruction": {
    "en": "Write a function `search` that takes two strings and returns the index of the occurrence of the second string in the first, starting the search from the third word.\n\nWords are separated by spaces.\n\nFind the index of the first space in the string and use it as the start of the search to find the index of the second space.\n\nThen use the found index of the second space as the start of the search for the substring.\n\nIt is not necessary to convert strings to a single case.\n\nExamples of running the function:\n```javascript\nsearch('Hello wonderful world', 'o'); // 17\nsearch('Hello wonderful world', 'l'); // 19\nsearch('Hello wonderful world', 'e'); // -1\n```\nIf no string is found, the function should return `-1`.",
    "ru": "Напишите функцию `search`, которая принимает две строки и возвращает индекс вхождения второй строки в первую, начиная поиск с третьего слова.\n\nСлова разделяются пробелами.\n\nНайдите индекс первого пробела в строке и используйте его как начало поиска для поиска индекса второго пробела.\n\nПотом используйте найденный индекс второго пробела как начало поиска для подстроки.\n\nПриводить строки к единому регистру не нужно.\n\nПримеры запуска функции:\n```javascript\nsearch('Hello wonderful world', 'o'); // 17\nsearch('Hello wonderful world', 'l'); // 19\nsearch('Hello wonderful world', 'e'); // -1\n```\nЕсли строка не найдена, функция должна возвращать `-1`."
  },
  "initialSolution": "fun",
  "completedSolution": "function search(string, substring) {\n  const spaceIndex = string.indexOf(' ');\n  const secondSpaceIndex = string.indexOf(' ', spaceIndex + 1);\n  return string.indexOf(substring, secondSpaceIndex);\n}",
  "openTest": "it('Created function search', () => {\n  expect(search).to.be.a('function');\n});\n\nit('search(\"Hello wonderful world\", \"o\") should return 17', () => {\n  expect(search('Hello wonderful world', 'o')).to.be.equal(17);\n});\n\nit('search(\"Hello wonderful world\", \"l\") should return 19', () => {\n  expect(search('Hello wonderful world', 'l')).to.be.equal(19);\n});\n\nit('search(\"Hello wonderful world\", \"e\") should return -1', () => {\n  expect(search('Hello wonderful world', 'e')).to.be.equal(-1);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}