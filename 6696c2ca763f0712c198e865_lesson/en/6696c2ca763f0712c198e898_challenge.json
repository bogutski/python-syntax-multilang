{
  "name": "Number of rows in the supermarket department",
  "instruction": "Inside an array, other arrays and objects can be stored. Similarly, inside an object, other objects and arrays can be stored.\n\nAccessing elements of an array nested inside an object is done as follows:\n```javascript\nconst object = { array: [10, 20, 30] };\nconsole.log(object.array[0]);  // 10\n```\nFirst, access is made to the `array` property of the `object` object, and then to the element with index `0` of the array, which is stored in the `array` property.\n\nThe length of an array nested inside an object can be obtained by accessing its `length` property:\n```javascript\nconst object = { array: [10, 20, 30] };\nconsole.log(object.array.length);  // 3\n```\n\nWrite a function `getQuantity` that takes two parameters:\n* `aisles` - information about the row numbers in the supermarket, an object;\n* `section` - the letter designation of the department of interest in the supermarket, a string. It can take values `A`, `B`, `C`, etc.\n\nThe `aisles` object consists of arrays and has the following structure (example):\n```javascript\n{\n  A: [1, 2, 3, 4, 5, 6, 7, 8],\n  B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n  C: [1, 2, 3, 4, 5, 6]\n}\n```\nwhere the properties `A`, `B`, `C` are the letter designations of the departments in the supermarket, and their values are arrays with a list of rows in the department.\n\nThe function should return the number of rows in the department of interest `section`.\n\nConditions:\n* The type of the return value is a number;\n* `section` takes exactly one letter of the English alphabet and can be in any case. Convert the letter to uppercase before checking;\n* If there is no department with the designation `section` in the supermarket, the function should return the string `No such section`.\n\nFunction execution examples:\n```javascript\ngetQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, \"A\");  // 3\ngetQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, \"b\");  // 7\ngetQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, \"F\");  // \"No such section\"\n```",
  "instructions": {}
}