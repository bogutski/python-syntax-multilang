{
  "_id": "6696c2ca763f0712c198e89c",
  "name": {
    "en": "Morse code",
    "ru": "Код Морзе"
  },
  "instruction": {
    "en": "A table with Morse code for the letters of the English alphabet is given:\n```javascript\nСимвол Код Символ Код Символ Код\nA .- J .--- S ...\nB -... K -.- T -\nC -.-. L .-.. U ..-\nD -.. M -- V ...-\nE . N -. W .--\nF ..-. O --- X -..-\nG --. P .--. Y -.--\nH .... Q --.- Z --..\nI .. R .-.\n```\n\nWrite a function `codeMorse` that encodes text according to Morse code.\n\nConditions:\n* The function takes as input one parameter - a string consisting of exactly 5 characters;\n* The string can only contain letters of the English alphabet, numbers and spaces;\n* The case of the letters is irrelevant;\n* Spaces contained in the string must be ignored during encoding;\n* Digits contained in the string are not encoded and remain in their original form;\n* All encoded characters, including digits, in the resulting string must be separated by a single space.\n\nExamples of function triggers:\n```javascript\ncodeMorse('AbC d'); // '.- -... -.-. -..'\nсodeMorse('B 747'); // '-... 7 4 7'\ncodeMorse(' 1 2'); // '1 2'\n```",
    "ru": "Дана таблица с кодом Морзе для букв английского алфавита:\n```javascript\nСимвол  Код        Символ  Код        Символ  Код\nA       .-         J       .---       S       ...\nB       -...       K       -.-        T       -\nC       -.-.       L       .-..       U       ..-\nD       -..        M       --         V       ...-\nE       .          N       -.         W       .--\nF       ..-.       O       ---        X       -..-\nG       --.        P       .--.       Y       -.--\nH       ....       Q       --.-       Z       --..\nI       ..         R       .-.\n```\n\nНапишите функцию `codeMorse`, которая кодирует текст в соответствии с кодом Морзе.\n\nУсловия:\n* На вход функция принимает один параметр - строку, состоящую ровно из 5 символов;\n* Строка может содержать только буквы английского алфавита, цифры и пробелы;\n* Регистр букв не имеет значения;\n* Пробелы, содержащиеся в строке, при кодировании должны игнорироваться;\n* Цифры, содержащиеся в строке, не кодируются и остаются в исходном виде;\n* Все закодированные символы, в том числе цифры, в результирующей строке должны быть разделены одним пробелом.\n\nПримеры запуска функции:\n```javascript\ncodeMorse('AbC d'); // '.- -... -.-. -..'\nсodeMorse('B 747'); // '-... 7 4 7'\ncodeMorse('  1 2'); // '1 2'\n```"
  },
  "initialSolution": "fun\n  const morse = {\n    A: '.-',\n    B: '-...',\n    C: '-.-.',\n    D: '-..',\n    E: '.',\n    F: '..-.',\n    G: '--.',\n    H: '....',\n    I: '..',\n    J: '.---',\n    K: '-.-',\n    L: '.-..',\n    M: '--',\n    N: '-.',\n    O: '---',\n    P: '.--.',\n    Q: '--.-',\n    R: '.-.',\n    S: '...',\n    T: '-',\n    U: '..-',\n    V: '...-',\n    W: '.--',\n    X: '-..-',\n    Y: '-.--',\n    Z: '--..',\n  };",
  "completedSolution": "function codeMorse(str) {\n  const morse = {\n    A: '.-',\n    B: '-...',\n    C: '-.-.',\n    D: '-..',\n    E: '.',\n    F: '..-.',\n    G: '--.',\n    H: '....',\n    I: '..',\n    J: '.---',\n    K: '-.-',\n    L: '.-..',\n    M: '--',\n    N: '-.',\n    O: '---',\n    P: '.--.',\n    Q: '--.-',\n    R: '.-.',\n    S: '...',\n    T: '-',\n    U: '..-',\n    V: '...-',\n    W: '.--',\n    X: '-..-',\n    Y: '-.--',\n    Z: '--..',\n  };\n\n  str = str.toUpperCase();\n  let strNew = '';\n  if (str[0] !== ' ') {\n    if (str[0] in morse) {\n      strNew += morse[str[0]] + ' ';\n    } else {\n      strNew += str[0] + ' ';\n    }\n  }\n  if (str[1] !== ' ') {\n    if (str[1] in morse) {\n      strNew += morse[str[1]] + ' ';\n    } else {\n      strNew += str[1] + ' ';\n    }\n  }\n  if (str[2] !== ' ') {\n    if (str[2] in morse) {\n      strNew += morse[str[2]] + ' ';\n    } else {\n      strNew += str[2] + ' ';\n    }\n  }\n  if (str[3] !== ' ') {\n    if (str[3] in morse) {\n      strNew += morse[str[3]] + ' ';\n    } else {\n      strNew += str[3] + ' ';\n    }\n  }\n  if (str[4] !== ' ') {\n    if (str[4] in morse) {\n      strNew += morse[str[4]];\n    } else {\n      strNew += str[4];\n    }\n  }\n  return strNew;\n}",
  "openTest": "it('Created function codeMorse', () => {\n  expect(typeof codeMorse).eq('function');\n});\n\nit('codeMorse(\"MarcO\");  // \"-- .- .-. -.-. ---\"', () => {\n  expect(codeMorse('MarcO')).eq('-- .- .-. -.-. ---');\n});\n\nit('codeMorse(\" 94 6\");  // \"9 4 6\"', () => {\n  expect(codeMorse(' 94 6')).eq('9 4 6');\n});\n\nit('codeMorse(\"     \");  // \"\"', () => {\n  expect(codeMorse('     ')).eq('');\n});\n\nit('codeMorse(\"0o0qQ\");  // \"0 --- 0 --.- --.-\"', () => {\n  expect(codeMorse('0o0qQ')).eq('0 --- 0 --.- --.-');\n});\n\nit('codeMorse(\"table\");  // \"- .- -... .-.. .\"', () => {\n  expect(codeMorse('table')).eq('- .- -... .-.. .');\n});\n\nit('codeMorse(\"abcde\");  // \".- -... -.-. -.. .\"', () => {\n  expect(codeMorse('abcde')).eq('.- -... -.-. -.. .');\n});\n\nit('codeMorse(\"FGHIJ\");  // \"..-. --. .... .. .---\"', () => {\n  expect(codeMorse('FGHIJ')).eq('..-. --. .... .. .---');\n});\n\nit('codeMorse(\"klmno\");  // \"-.- .-.. -- -. ---\"', () => {\n  expect(codeMorse('klmno')).eq('-.- .-.. -- -. ---');\n});\n\nit('codeMorse(\"PQRST\");  // \".--. --.- .-. ... -\"', () => {\n  expect(codeMorse('PQRST')).eq('.--. --.- .-. ... -');\n});\n\nit('codeMorse(\"uvwxy\");  // \"..- ...- .-- -..- -.--\"', () => {\n  expect(codeMorse('uvwxy')).eq('..- ...- .-- -..- -.--');\n});\n\nit('codeMorse(\"zZzZz\");  // \"--.. --.. --.. --.. --..\"', () => {\n  expect(codeMorse('zZzZz')).eq('--.. --.. --.. --.. --..');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}