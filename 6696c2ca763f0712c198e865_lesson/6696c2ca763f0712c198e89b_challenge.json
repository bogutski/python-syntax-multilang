{
  "_id": "6696c2ca763f0712c198e89b",
  "name": {
    "en": "Combining modified arrays",
    "ru": "Объединение модифицированных массивов"
  },
  "instruction": {
    "en": "Write a function `arrayModifier` that takes two parameters:\n* `array1` - the array from which the first and last elements will be removed;\n* `array2` - the array to which the first and last elements of the `array1` array will be added.\n\nThe function should return a new array composed as follows:\n* the first and the last elements of the array `array1` are deleted;\n* the separated elements of the array `array1` are added to the beginning and end of the array `array2` respectively;\n* A new array consisting of the combined elements of the modified `array1` and `array2` arrays is created and returned in the specified order.\n\nExamples of running the function:\n```javascript\narrayModifier([\"cat\", \"dog\", \"bird\", \"fish\"], [1, 2, 3]); // [\"dog\", \"bird\", \"cat\", 1, 2, 3, \"fish\"]\narrayModifier([\"First\", \"Second\", \"Third\", \"Fourth\"], [\"A\", \"B\", \"C\"]); // [\"Second\", \"Third\", \"First\", \"A\", \"B\", \"C\", \"Fourth\"]\n```\n\nNote: use `concat()` method.",
    "ru": "Напишите функцию `arrayModifier`, которая принимает два параметра:\n* `array1` – массив, из которого будут удалены первый и последний элементы;\n* `array2` – массив, в который будут добавлены первый и последний элементы массива `array1`.\n\nФункция должна вернуть новый массив, составленный следующим образом:\n* из массива `array1` удаляются первый и последний элементы;\n* уделенные элементы массива `array1` добавляются в начало и конец массива `array2` соответственно;\n* создается и возвращается новый массив, состоящий из объединенных элементов измененных массивов `array1` и `array2` в указанном порядке.\n\nПримеры запуска функции:\n```javascript\narrayModifier([\"cat\", \"dog\", \"bird\", \"fish\"], [1, 2, 3]);  // [\"dog\", \"bird\", \"cat\", 1, 2, 3, \"fish\"]\narrayModifier([\"First\", \"Second\", \"Third\", \"Fourth\"], [\"A\", \"B\", \"C\"]);  // [\"Second\", \"Third\", \"First\", \"A\", \"B\", \"C\", \"Fourth\"]\n```\n\nПримечание: используйте метод `concat()`."
  },
  "initialSolution": "fun",
  "completedSolution": "function arrayModifier(array1, array2) {\n  let array1Modified = array1;\n  let array2Modified = array2;\n  array2Modified.unshift(array1Modified.shift());\n  array2Modified.push(array1Modified.pop());\n  return array1Modified.concat(array2Modified);\n}",
  "openTest": "it('Created function `arrayModifier`', () => {\n  expect(typeof arrayModifier).eq('function');\n});\n\nit('arrayModifier([1, 2, 3, 4, 5], [6, 7, 8, 9]);  // [2, 3, 4, 1, 6, 7, 8, 9, 5]', () => {\n  expect(arrayModifier([1, 2, 3, 4, 5], [6, 7, 8, 9])).deep.eq([2, 3, 4, 1, 6, 7, 8, 9, 5]);\n});\n\nit('arrayModifier([\"black\", \"white\", \"red\", \"green\", \"blue\"], [\"yellow\", \"orange\"]);  // [\"white\", \"red\", \"green\", \"black\", \"yellow\", \"orange\", \"blue\"]', () => {\n  expect(arrayModifier([\"black\", \"white\", \"red\", \"green\", \"blue\"], [\"yellow\", \"orange\"])).deep.eq([\"white\", \"red\", \"green\", \"black\", \"yellow\", \"orange\", \"blue\"]);\n});\n\nit('arrayModifier([\"cat\", \"dog\", \"bird\", \"fish\", \"hamster\"], [1, 2, 3, 4, 5]);  // [\"dog\", \"bird\", \"fish\", \"cat\", 1, 2, 3, 4, 5, \"hamster\"]', () => {\n  expect(arrayModifier([\"cat\", \"dog\", \"bird\", \"fish\", \"hamster\"], [1, 2, 3, 4, 5])).deep.eq([\"dog\", \"bird\", \"fish\", \"cat\", 1, 2, 3, 4, 5, \"hamster\"]);\n});\n\nit('arrayModifier([\"First\", \"Second\"], [\"A\", \"B\", \"C\"]);  // [\"First\", \"A\", \"B\", \"C\", \"Second\"]', () => {\n  expect(arrayModifier([\"First\", \"Second\"], [\"A\", \"B\", \"C\"])).deep.eq([\"First\", \"A\", \"B\", \"C\", \"Second\"]);\n});\n\nit('arrayModifier([\"Plus\", \"Minus\"], []);  // [\"Plus\", \"Minus\"]', () => {\n  expect(arrayModifier([\"Plus\", \"Minus\"], [])).deep.eq([\"Plus\", \"Minus\"]);\n});\n\nit('arrayModifier([\"Hello\", \"World\"], [\"!\"]);  // [\"Hello\", \"!\", \"World\"]', () => {\n  expect(arrayModifier([\"Hello\", \"World\"], [\"!\"])).deep.eq([\"Hello\", \"!\", \"World\"]);\n});\n\nit('arrayModifier([1988, 1999, 2000, 2011, 2012], [2013, 2014, 2015, 2016, 2017]);  // [1999, 2000, 2011, 1988, 2013, 2014, 2015, 2016, 2017, 2012]', () => {\n  expect(arrayModifier([1988, 1999, 2000, 2011, 2012], [2013, 2014, 2015, 2016, 2017])).deep.eq([1999, 2000, 2011, 1988, 2013, 2014, 2015, 2016, 2017, 2012]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}