{
  "_id": "6696c2ca763f0712c198e89d",
  "name": {
    "en": "Creating a three-dimensional array",
    "ru": "Составление трехмерного массива"
  },
  "instruction": {
    "en": "An array whose elements are other arrays is called a multidimensional (nested) array.\nThe most common multidimensional arrays are arrays with two levels of nesting - two-dimensional arrays.\nIf you nest another array in a two-dimensional array, you get a three-dimensional array, and so on.\n\nThe elements of a multidimensional array are accessed in the same way as the properties of nested objects.\nOnly instead of a point, square brackets are always used, and the element index is used instead of the property name.\n\nExample:\n```javascript\nconst array = [1, 2, [3, 4, 5, [6, 7, 8]]];\narray[1]; // 2\narray[2][0]; // 3\narray[2][3][1]; // 7\n```\n\nWrite a function `makeTripleArray` that takes three parameters:\n* `array1` - array;\n* `array2` - array;\n* `array3` - array.\n\nThe function should return an array with three levels of nesting, obtained as follows:\n* An array `array1` must be added to the end of the contents of the first array `array2`;\n* At the end of the contents of the second `array2` array, the `array3` array must be added;\n* The modified `array1` array is returned.\n\nAn example of execution of the function:\n```javascript\nmakeTripleArray([1, 2, 3], [4, 5, 6], [7, 8, 9]); // [1, 2, 3, [4, 5, 6, [7, 8, 9]]]\n```",
    "ru": "Массив, элементами которого являются другие массивы, называется многомерным (вложенным) массивом.\nНаиболее часто встречающимися многомерными массивами являются массивы с двумя уровнями вложенности - двумерные массивы.\nЕсли в двумерный массив вложить еще один массив, то получится трехмерный массив, и так далее.\n\nОбращение к элементам многомерного массива происходит так же, как и к свойствам вложенных объектов.\nТолько вместо точки всегда используется квадратные скобки, и вместо имени свойства - индекс элемента.\n\nПример:\n```javascript\nconst array = [1, 2, [3, 4, 5, [6, 7, 8]]];\narray[1];  // 2\narray[2][0];  // 3\narray[2][3][1];  // 7\n```\n\nНапишите функцию `makeTripleArray`, которая принимает три параметра:\n* `array1` – массив;\n* `array2` – массив;\n* `array3` – массив.\n\nФункция должна возвращать массив с тремя уровнями вложенности, полученный следующим образом:\n* В конец содержимого первого массива `array1` должен быть добавлен массив `array2`;\n* В конец содержимого второго массива `array2` должен быть добавлен массив `array3`;\n* Возвращается измененный массив `array1`.\n\nПример выполнения функции:\n```javascript\nmakeTripleArray([1, 2, 3], [4, 5, 6], [7, 8, 9]);  // [1, 2, 3, [4, 5, 6, [7, 8, 9]]]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function makeTripleArray(array1, array2, array3) {\n  array2.push(array3);\n  array1.push(array2);\n  return array1;\n}",
  "openTest": "it('Created function `makeTripleArray`', () => {\n  expect(makeTripleArray).to.be.a('function');\n});\n\nit('makeTripleArray([1, 2], [3, 4], [5, 6]);  // [1, 2, [3, 4, [5, 6]]]', () => {\n  expect(makeTripleArray([1, 2], [3, 4], [5, 6])).to.deep.equal([1, 2, [3, 4, [5, 6]]]);\n});\n\nit('makeTripleArray([0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [2, 2, 2, 2, 2]);  // [0, 0, 0, 0, 0, [1, 1, 1, 1, 1, [2, 2, 2, 2, 2]]]', () => {\n  expect(makeTripleArray([0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [2, 2, 2, 2, 2])).to.deep.equal([0, 0, 0, 0, 0, [1, 1, 1, 1, 1, [2, 2, 2, 2, 2]]]);\n});\n\nit('makeTripleArray([\" \"], [\" \" , \" \"], [\" \" , \" \" , \" \"]);  // [\" \", [\" \", \" \", [\" \", \" \", \" \"]]]', () => {\n  expect(makeTripleArray([\" \"], [\" \" , \" \"], [\" \" , \" \" , \" \"])).to.deep.equal([\" \", [\" \", \" \", [\" \", \" \", \" \"]]]);\n});\n\nit('makeTripleArray([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"], [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"], [\"Pluto\"]);  // [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", [\"Pluto\"]]]', () => {\n  expect(makeTripleArray([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"], [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"], [\"Pluto\"])).to.deep.equal([\"Mercury\", \"Venus\", \"Earth\", \"Mars\", [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", [\"Pluto\"]]]);\n});\n\nit('makeTripleArray([\"*\"], [\"*\"], [\"*\"]);  // [\"*\", [\"*\", [\"*\"]]]', () => {\n  expect(makeTripleArray([\"*\"], [\"*\"], [\"*\"])).to.deep.equal([\"*\", [\"*\", [\"*\"]]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}