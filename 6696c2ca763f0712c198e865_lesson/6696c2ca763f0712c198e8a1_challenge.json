{
  "_id": "6696c2ca763f0712c198e8a1",
  "name": {
    "en": "List of important things to do",
    "ru": "Список важных дел"
  },
  "instruction": {
    "en": "Write a function `mainTasks` that takes three parameters:\n* `tasks` - a list of strings with the names of all tasks, an array;\n* `toDoFirst` - a string with the name of the first task of interest;\n* `toDoLast` - string with the name of the last task of interest.\n\nThe function must return an object with the properties `toDoFirst` and `toDoLast`, where:\n* the `toDoFirst` value is the `Before task_before` string, where `task_before` is the name of the task following `toDoFirst` in the `tasks` array;\n* The value of `toDoLast` is the string `After task_after`, where `task_after` is the name of the task that precedes `toDoLast` in the `tasks` array.\n\nConditions:\n* `toDoLast` always follows `toDoFirst` in the `tasks` array;\n* Only unique values can be in the `tasks` array;\n* There are always at least two elements in the `tasks` array;\n* strings can include spaces.\n\nExamples of running a function:\n```javascript\nmainTasks([\"Getting up\", \"Working\", \"Eating\", \"Reading\", \"Sleeping\"], \"Getting up\", \"Reading\"); // { \"Getting up\": \"Before Working\", \"Reading\": \"After Eating\" }\nmainTasks([\"Fist\", \"Second\", \"Third\", \"Fourth\", \"Fifth\", \"Sixth\"], \"Third\", \"Fourth\"); // { \"Third\": \"Before Fourth\", \"Fourth\": \"After Third\" }\n```",
    "ru": "Напишите функцию `mainTasks`, которая принимает три параметра:\n* `tasks` - перечень строк с названиями всех задач, массив;\n* `toDoFirst` - строка с названием первой интересующей задачи;\n* `toDoLast` - строка с названием последней интересующей задачи.\n\nФункция должна возвращать объект со свойствами `toDoFirst` и `toDoLast`, где:\n* значением `toDoFirst` является строка `Before task_before`, где `task_before` - это название задачи, следующего за `toDoFirst` в массиве `tasks`;\n* значением `toDoLast` является строка `After task_after`, где `task_after` - это название задачи, предшествующей `toDoLast` в массиве `tasks`.\n\nУсловия:\n* `toDoLast` всегда следует за `toDoFirst` в массиве `tasks`;\n* в массиве `tasks` могут быть только уникальные значения;\n* в массиве `tasks` всегда есть хотя бы два элемента;\n* строки могут включать пробелы.\n\nПримеры запуска функции:\n```javascript\nmainTasks([\"Getting up\", \"Working\", \"Eating\", \"Reading\", \"Sleeping\"], \"Getting up\", \"Reading\");  // { \"Getting up\": \"Before Working\", \"Reading\": \"After Eating\" }\nmainTasks([\"Fist\", \"Second\", \"Third\", \"Fourth\", \"Fifth\", \"Sixth\"], \"Third\", \"Fourth\");  // { \"Third\": \"Before Fourth\", \"Fourth\": \"After Third\" }\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function mainTasks(tasks, toDoFirst, toDoLast) {\n  const toDoFirstIndex = tasks.indexOf(toDoFirst);\n  const toDoLastIndex = tasks.indexOf(toDoLast);\n  const toDoFirstValue = `Before ${tasks[toDoFirstIndex + 1]}`;\n  const toDoLastValue = `After ${tasks[toDoLastIndex - 1]}`;\n  return {\n    [toDoFirst]: toDoFirstValue,\n    [toDoLast]: toDoLastValue,\n  };\n}",
  "openTest": "it('Created function `mainTasks`', () => {\n  expect(mainTasks).to.be.a('function');\n});\n\nit('mainTasks([\"Getting up\", \"Working\", \"Eating\", \"Reading\", \"Sleeping\"], \"Getting up\", \"Reading\");  // { \"Getting up\": \"Before Working\", Reading: \"After Eating\" }', () => {\n  expect(mainTasks([\"Getting up\", \"Working\", \"Eating\", \"Reading\", \"Sleeping\"], \"Getting up\", \"Reading\")).to.deep.equal({ \"Getting up\": \"Before Working\", Reading: \"After Eating\" });\n});\n\nit('mainTasks([\"Fist\", \"Second\", \"Third\", \"Fourth\", \"Fifth\", \"Sixth\"], \"Third\", \"Fourth\");  // { \"Third\": \"Before Fourth\", \"Fourth\": \"After Third\" }', () => {\n  expect(mainTasks([\"Fist\", \"Second\", \"Third\", \"Fourth\", \"Fifth\", \"Sixth\"], \"Third\", \"Fourth\")).to.deep.equal({ \"Third\": \"Before Fourth\", \"Fourth\": \"After Third\" });\n});\n\nit('mainTasks([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"], \"Three\", \"Eight\");  // { \"Three\": \"Before Four\", \"Eight\": \"After Seven\" }', () => {\n  expect(mainTasks([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"], \"Three\", \"Eight\")).to.deep.equal({ \"Three\": \"Before Four\", \"Eight\": \"After Seven\" });\n});\n\nit('mainTasks([\"Playing\", \"More playing\"], \"Playing\", \"More playing\");  // { \"Playing\": \"Before More playing\", \"More playing\": \"After Playing\" }', () => {\n  expect(mainTasks([\"Playing\", \"More playing\"], \"Playing\", \"More playing\")).to.deep.equal({ \"Playing\": \"Before More playing\", \"More playing\": \"After Playing\" });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}