{
  "_id": "6696c2ca763f0712c198e899",
  "name": {
    "en": "Value of an element from the middle of the array",
    "ru": "Значение элемента из середины массива"
  },
  "instruction": {
    "en": "Write a function `getMiddleElement` that takes two parameters as input:\n* `object` - object;\n* `property` - name of the object property of interest, string.\n\nThe object `object` contains arrays and has the following structure (example):\n```javascript\n{\n  numbers: [1, 2, 3, 4, 5, 6, 7, 8],\n  animals: [\"cat\", \"dog\", \"bird\"],\n}\n```\n\nThe function must return the value of an element from the middle of the array.\n\nConditions:\n* The `property` argument is case-sensitive;\n* If the array has an odd number of elements, the function must return the value of the element exactly from the middle of the array;\n* If the array has an even number of elements, there is no middle element. In this case, the function should return the value of the element to the left of the middle of the array;\n* If there are no properties named `property` in the object, the function should return the string `No such property: `property_name`, where `property_name` corresponds to the value of the argument `property`.\n\nExamples of running the function:\n```javascript\ngetMiddleElement({ numbers: [1, 2, 3, 4, 5, 6, 7, 8] }, \"numbers\"); // 4\ngetMiddleElement({ numbers: [1, 2, 3, 4], animals: [\"cat\", \"dog\", \"bird\"] }, \"animals\"); // \"dog\"\n```\n\nNotes:\n* The numbering of array elements begins with zero;\n* Recall how the even/odd number check is done from the previous lectures.",
    "ru": "Напишите функцию `getMiddleElement`, который принимает на вход два параметра:\n* `object` – объект;\n* `property` – наименование интересующего свойства объекта, строка.\n\nОбъект `object` содержит в себе массивы и имеет следующую структуру (пример):\n```javascript\n{\n  numbers: [1, 2, 3, 4, 5, 6, 7, 8],\n  animals: [\"cat\", \"dog\", \"bird\"],\n}\n```\n\nФункция должна возвращать значение элемента из середины массива.\n\nУсловия:\n* Аргумент `property` чувствителен к регистру;\n* Если массив имеет нечетное количество элементов, то функция должна вернуть значение элемента ровно из середины массива;\n* Если массив имеет четное количество элементов, то среднего элемента нет. В это случае функция должна вернуть значение элемента, расположенного левее от середины массива;\n* Если свойств с именем `property` в объекте не существует, то функция должна вернуть строку `No such property: property_name`, где `property_name` соответствует значению аргумента `property`.\n\nПримеры запуска функции:\n```javascript\ngetMiddleElement({ numbers: [1, 2, 3, 4, 5, 6, 7, 8] }, \"numbers\");  // 4\ngetMiddleElement({ numbers: [1, 2, 3, 4], animals: [\"cat\", \"dog\", \"bird\"] }, \"animals\");  // \"dog\"\n```\n\nПримечания:\n* Нумерация элементов массива начинается с нуля;\n* Вспомните, как выполняется проверка на четность/нечетность числа из предыдущих лекций."
  },
  "initialSolution": "fun",
  "completedSolution": "function getMiddleElement(object, property) {\n  if (!object.hasOwnProperty(property)) {\n    return `No such property: ${property}`;\n  }\n  const array = object[property];\n  let middleIndex = (array.length - 1) / 2;\n  if (array.length % 2 === 0) {\n    middleIndex = array.length / 2 - 1;\n  }\n  return array[middleIndex];\n}",
  "openTest": "it('Created function `getMiddleElement`', () => {\n  expect(typeof getMiddleElement).eq('function');\n});\n\nit('getMiddleElement({ numbers1: [1, 2, 3, 4, 5, 6, 7, 8], numbers2: [1, 2, 3, 4, 5, 6, 7, 8, 9] }, \"numbers1\");  // 4', () => {\n  expect(\n    getMiddleElement(\n      { numbers1: [1, 2, 3, 4, 5, 6, 7, 8], numbers2: [1, 2, 3, 4, 5, 6, 7, 8, 9] },\n      'numbers1',\n    ),\n  ).eq(4);\n});\n\nit('getMiddleElement(flowers: [\"rose\", \"tulip\", \"daisy\", \"lily\", \"orchid\"], \"flowers\");  // \"daisy\"', () => {\n  expect(\n    getMiddleElement(\n      { flowers: ['rose', 'tulip', 'daisy', 'lily', 'orchid'] },\n      'flowers',\n    ),\n  ).eq('daisy');\n});\n\nit('getMiddleElement({ ages: [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30] }, \"ages\");  // 24', () => {\n  expect(\n    getMiddleElement(\n      { ages: [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30] },\n      'ages',\n    ),\n  ).eq(24);\n});\n\nit('getMiddleElement({ games: [\"football\", \"basketball\", \"hockey\", \"tennis\", \"volleyball\", \"baseball\"] }, \"cars\");  // \"No such property: cars\"', () => {\n  expect(\n    getMiddleElement(\n      { games: ['football', 'basketball', 'hockey', 'tennis', 'volleyball', 'baseball'] },\n      'cars',\n    ),\n  ).eq('No such property: cars');\n});\n\nit('getMiddleElement({ ghost: [\"\", \"\", \"\"] }, \"ghost\");  // \"\"', () => {\n  expect(getMiddleElement({ ghost: ['', '', ''] }, 'ghost')).eq('');\n});\n\nit('getMiddleElement({ booleans: [true, false, true, false, true, false] }, \"booleans\");  // true', () => {\n  expect(\n    getMiddleElement({ booleans: [true, false, true, false, true, false] }, 'booleans'),\n  ).eq(true);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}