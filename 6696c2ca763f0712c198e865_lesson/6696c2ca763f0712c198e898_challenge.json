{
  "_id": "6696c2ca763f0712c198e898",
  "name": {
    "en": "Number of rows in the supermarket department",
    "ru": "Количество рядов в отделе супермаркета"
  },
  "instruction": {
    "en": "Inside an array, other arrays and objects can be stored. Similarly, inside an object, other objects and arrays can be stored.\n\nAccessing elements of an array nested inside an object is done as follows:\n```javascript\nconst object = { array: [10, 20, 30] };\nconsole.log(object.array[0]);  // 10\n```\nFirst, access is made to the `array` property of the `object` object, and then to the element with index `0` of the array, which is stored in the `array` property.\n\nThe length of an array nested inside an object can be obtained by accessing its `length` property:\n```javascript\nconst object = { array: [10, 20, 30] };\nconsole.log(object.array.length);  // 3\n```\n\nWrite a function `getQuantity` that takes two parameters:\n* `aisles` - information about the row numbers in the supermarket, an object;\n* `section` - the letter designation of the department of interest in the supermarket, a string. It can take values `A`, `B`, `C`, etc.\n\nThe `aisles` object consists of arrays and has the following structure (example):\n```javascript\n{\n  A: [1, 2, 3, 4, 5, 6, 7, 8],\n  B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n  C: [1, 2, 3, 4, 5, 6]\n}\n```\nwhere the properties `A`, `B`, `C` are the letter designations of the departments in the supermarket, and their values are arrays with a list of rows in the department.\n\nThe function should return the number of rows in the department of interest `section`.\n\nConditions:\n* The type of the return value is a number;\n* `section` takes exactly one letter of the English alphabet and can be in any case. Convert the letter to uppercase before checking;\n* If there is no department with the designation `section` in the supermarket, the function should return the string `No such section`.\n\nFunction execution examples:\n```javascript\ngetQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, \"A\");  // 3\ngetQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, \"b\");  // 7\ngetQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, \"F\");  // \"No such section\"\n```",
    "ru": "Внутри массива могут храниться другие массивы и объекты. Точно так же, внутри объекта могут храниться другие объекты и массивы.\n\nОбращение к элементам массива, вложенным в объект, происходит следующим образом:\n```javascript\nconst object = { array: [10, 20, 30] };\nconsole.log(object.array[0]);  // 10\n```\nСперва выполняется обращение к свойству `array` объекта `object`, а затем к элементу с индексом `0` массива, который хранится в свойстве `array`.\n\nДлину массива, вложенного в объект, можно узнать, обратившись к его свойству `length`:\n```javascript\nconst object = { array: [10, 20, 30] };\nconsole.log(object.array.length);  // 3\n```\n\nНапишите функцию `getQuantity`, которая принимает на вход два параметра:\n* `aisles` – информация о номерах рядов в супермаркете, объект;\n* `section` – буквенное обозначение интересующего отдела в супермаркете, строка. Может принимать значения `A`, `B`, `C` и т.д.\n\nОбъект `aisles` состоит из массивов и имеет следующую структуру (пример):\n```javascript\n{\n  A: [1, 2, 3, 4, 5, 6, 7, 8],\n  B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n  C: [1, 2, 3, 4, 5, 6]\n}\n```\nгде свойства `A`, `B`, `C` - это буквенные обозначения отделов в супермаркете, а их значения - это массивы с перечнем рядов в отделе.\n\nФункция должна возвращать количество рядов в интересующем отделе `section`.\n\nУсловия:\n* Тип возвращаемого значения - число;\n* `section` принимает ровно одну букву английского алфавита и может быть в любом регистре. Перед проверкой приведите букву к верхнему регистру;\n* Если в супермаркете нет отдела с обозначением `section`, то функция должна вернуть строку `No such section`.\n\nПримеры запуска функции:\n```javascript\ngetQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, \"A\");  // 3\ngetQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, \"b\");  // 7\ngetQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7], C: [1, 2, 3, 4]}, \"F\");  // \"No such section\"\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function getQuantity(aisles, section) {\n  if (aisles.hasOwnProperty(section.toUpperCase())) {\n    return aisles[section.toUpperCase()].length;\n  } else {\n    return 'No such section';\n  }\n}",
  "openTest": "it('Created function `getQuantity`', () => {\n  expect(getQuantity).to.be.a('function');\n});\n\nit('getQuantity({A: [1, 2, 3, 4, 5, 6, 7, 8]}, \"a\");  // 8', () => {\n  expect(getQuantity({ A: [1, 2, 3, 4, 5, 6, 7, 8] }, 'a')).eq(8);\n});\n\nit('getQuantity({A: [1, 2, 3, 4, 5, 6, 7, 8], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}, \"B\");  // 12', () => {\n  expect(getQuantity({ A: [1, 2, 3, 4, 5, 6, 7, 8], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }, 'B')).eq(12);\n});\n\nit('getQuantity({A: [1, 2, 3, 4, 5, 6, 7, 8], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}, \"C\");  // \"No such section\"', () => {\n  expect(getQuantity({ A: [1, 2, 3, 4, 5, 6, 7, 8], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }, 'C')).eq('No such section');\n});\n\nit('getQuantity({A: [], B: [], C: [], D: []}, \"z\");  // 0', () => {\n  expect(getQuantity({ A: [], B: [], C: [], D: [] }, 'z')).eq('No such section');\n});\n\nit('getQuantity({A: [], B: [], C: [], D: []}, \"a\");  // 0', () => {\n  expect(getQuantity({ A: [], B: [], C: [], D: [] }, 'a')).eq(0);\n});\n\nit('getQuantity({A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], C: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], D: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, \"_\");  // 10', () => {\n  expect(getQuantity({ A: [1, 2, 3], B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], C: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], D: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] }, '_')).eq('No such section');\n});\n\nit('getQuantity({O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0]}, \"o\");  // 6', () => {\n  expect(getQuantity({ O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0] }, 'o')).eq(6);\n});\n\nit('getQuantity({O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0]}, \"q\");  // 9', () => {\n  expect(getQuantity({ O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0] }, 'q')).eq(9);\n});\n\nit('getQuantity({O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0]}, \"r\");  // 5', () => {\n  expect(getQuantity({ O: [99, 88, 77, 55, 33, 11], Q: [9, 8, 7, 6, 5, 4, 3, 2, 1], R: [0, 0, 0, 0, 0] }, 'r')).eq(5);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}