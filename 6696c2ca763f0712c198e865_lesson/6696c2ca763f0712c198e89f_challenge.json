{
  "_id": "6696c2ca763f0712c198e89f",
  "name": {
    "en": "Bug fixes",
    "ru": "Исправление багов"
  },
  "instruction": {
    "en": "Write a function `bugFixer` that takes one parameter:\n* `array` is an array, can contain any number of strings and numbers.\n\nThe `array` array has the following structure (example):\n```javascript\n[1, 2, \"bug\", \"One\", \"Two\", \"Three\", \"bug\", \"bug\"]\n```\n\nThe function should return a corrected `array` array with the `bug` strings replaced with `FIX` strings.\n\nConditions:\n* The `array` array contains no more than three lines of `bug`.\n\nExamples of running a function:\n```javascript\nbugFixer([1, 2, \"bug\", \"One\", \"Two\", \"Three\", \"bug\", \"bug\"]); // [1, 2, \"FIX\", \"One\", \"Two\", \"Three\", \"FIX\", \"FIX\"]\nbugFixer([\"Cat\", \"Dog\", \"bug\", \"Turtle\"]); // [\"Cat\", \"Dog\", \"FIX\", \"Turtle\"]\nbugFixer([\"Flower\", \"Cactus\", \"Mushroom\"]); // [\"Flower\", \"Cactus\", \"Mushroom\"]\n```",
    "ru": "Напишите функцию `bugFixer`, которая принимает один параметр:\n* `array` - массив, может содержать любое количество строк и чисел.\n\nМассив `array` имеет следующую структуру (пример):\n```javascript\n[1, 2, \"bug\", \"One\", \"Two\", \"Three\", \"bug\", \"bug\"]\n```\n\nФункция должна вернуть исправленный массив `array`, в котором строки `bug` заменены на строки `FIX`.\n\nУсловия:\n* Массив `array` содержит не более трех строк `bug`.\n\nПримеры запуска функции:\n```javascript\nbugFixer([1, 2, \"bug\", \"One\", \"Two\", \"Three\", \"bug\", \"bug\"]);  // [1, 2, \"FIX\", \"One\", \"Two\", \"Three\", \"FIX\", \"FIX\"]\nbugFixer([\"Cat\", \"Dog\", \"bug\", \"Turtle\"]);  // [\"Cat\", \"Dog\", \"FIX\", \"Turtle\"]\nbugFixer([\"Flower\", \"Cactus\", \"Mushroom\"]);  // [\"Flower\", \"Cactus\", \"Mushroom\"]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function bugFixer(array) {\n  if (array.includes(\"bug\")) {\n    const firstIndex = array.indexOf(\"bug\");\n    const lastIndex = array.lastIndexOf(\"bug\");\n    if (firstIndex === lastIndex) {\n      array[firstIndex] = \"FIX\";\n    } else if (array.indexOf(\"bug\", firstIndex + 1) === lastIndex) {\n      array[firstIndex] = \"FIX\";\n      array[lastIndex] = \"FIX\";\n    } else {\n      const middleIndex = array.indexOf(\"bug\", firstIndex + 1);\n      array[firstIndex] = \"FIX\";\n      array[middleIndex] = \"FIX\";\n      array[lastIndex] = \"FIX\";\n    }\n  }\n  return array;\n}",
  "openTest": "it('Created function `bugFixer`', () => {\n  expect(typeof bugFixer).eq('function');\n});\n\nit('bugFixer([1, 2, \"bug\", \"One\", \"Two\", \"Three\", \"bug\", \"bug\"]);  // [1, 2, \"FIX\", \"One\", \"Two\", \"Three\", \"FIX\", \"FIX\"]', () => {\n  expect(bugFixer([1, 2, \"bug\", \"One\", \"Two\", \"Three\", \"bug\", \"bug\"])).deep.eq([1, 2, \"FIX\", \"One\", \"Two\", \"Three\", \"FIX\", \"FIX\"]);\n});\n\nit('bugFixer([\"Cat\", \"Dog\", \"bug\", \"Turtle\"]);  // [\"Cat\", \"Dog\", \"FIX\", \"Turtle\"]', () => {\n  expect(bugFixer([\"Cat\", \"Dog\", \"bug\", \"Turtle\"])).deep.eq([\"Cat\", \"Dog\", \"FIX\", \"Turtle\"]);\n});\n\nit('bugFixer([\"Flower\", \"Cactus\", \"Mushroom\"]);  // [\"Flower\", \"Cactus\", \"Mushroom\"]', () => {\n  expect(bugFixer([\"Flower\", \"Cactus\", \"Mushroom\"])).deep.eq([\"Flower\", \"Cactus\", \"Mushroom\"]);\n});\n\nit('bugFixer([\"bug\", \"bug\", \"bug\"]);  // [\"FIX\", \"FIX\", \"FIX\"]', () => {\n  expect(bugFixer([\"bug\", \"bug\", \"bug\"])).deep.eq([\"FIX\", \"FIX\", \"FIX\"]);\n});\n\nit('bugFixer([]);  // []', () => {\n  expect(bugFixer([])).deep.eq([]);\n});\n\nit('bugFixer([\"\", \"\", \"\"]);  // [\"\", \"\", \"\"]', () => {\n  expect(bugFixer([\"\", \"\", \"\"])).deep.eq([\"\", \"\", \"\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}