{
  "_id": "6696c2ca763f0712c198ef83",
  "name": {
    "en": "",
    "ru": "Расшифровать послание"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `getAPhrase` принимает массив в котором содержатся числа и строки.\n\nВ массиве зашифрована фраза, но слова написаны в обратном порядке. Необходимо расшифровать фразу.\n\nФункция возвращает строку, состоящую из элементов массива, у которых тип данный `string`.\nЭлементы должны быть разделены пробелом.\n\nЕсли в массиве нет строковых элементов, функция должна вернуть пустую строку.\n\nПопробуйте использовать метод join() для решения данной задачи\n\nПример запуска функции:\n```javascript\ngetAPhrase([\"JavaScript\", 1, \"study\", 2, \"I\", 3]) // \"I study JavaScript\"\ngetAPhrase([\"cool\", 1, \"is\", 2, \"it\", 3, \"because\", 4, \"JavaScript\", 5, \"like\", 6, \"I\"]) // \"I like JavaScript because it is cool\"\ngetAPhrase([ 1, 2, 3]) // \"\"\n```"
  },
  "initialSolution": "function getAPhrase",
  "completedSolution": "function getAPhrase(array) {\n  let newArr = [];\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (typeof array[i] === 'string') {\n      newArr.push(array[i]);\n    }\n  }\n  return newArr.join(' ');\n}",
  "openTest": "it('Created function getAPhrase', () => {\n  expect(getAPhrase).to.be.a('function');\n});\nit('getAPhrase([\"JavaScript\", 1, \"study\", 2, \"I\", 3]) returns \"I study JavaScript\"', () => {\n  expect(getAPhrase([\"JavaScript\", 1, \"study\", 2, \"I\", 3])).to.equal('I study JavaScript');\n});\n\nit('getAPhrase([\"cool\", 1, \"is\", 2, \"it\", 3, \"because\", 4, \"JavaScript\", 5, \"like\", 6, \"I\"]) returns \"I like JavaScript because it is cool\"', () => {\n  expect(getAPhrase([\"cool\", 1, \"is\", 2, \"it\", 3, \"because\", 4, \"JavaScript\", 5, \"like\", 6, \"I\"])).to.equal('I like JavaScript because it is cool');\n});\n\nit('getAPhrase([\"now\", 1, 2, 3, \"easy\", \"is\", 23, 56, \"JavaScript\"]) returns \"JavaScript is easy now\"', () => {\n  expect(getAPhrase([\"now\", 1, 2, 3, \"easy\", \"is\", 23, 56, \"JavaScript\"])).to.equal('JavaScript is easy now');\n});\n\nit('getAPhrase([ 1, 2, 3]) returns \"\"', () => {\n  expect(getAPhrase([1, 2, 3])).to.equal('');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}