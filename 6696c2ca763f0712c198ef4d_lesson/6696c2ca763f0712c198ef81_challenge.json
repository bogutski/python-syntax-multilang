{
  "_id": "6696c2ca763f0712c198ef81",
  "name": {
    "en": "",
    "ru": "Cумма соседних элементов массива"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `arraySum` принимает массив чисел.\n\nНеобходимо пройтись по массиву в обратном порядке и сложить сумму соседних элементов.\n\nНапример:\n```javascript\narraySum = [1, 2, 3, 4, 5, 6, 7, 8]\nНеобходимо сложить 8 и 7, 6 и 5, 4 и 3, 2 и 1.\n```\n\nЕсли длина массива нечетная, то первый элемент остается без изменений.\n\nЕсли длина массива равна 0, то возвращается пустой массив.\n\nНеобходимо вернуть новый массив в котором будут храниться суммы соседних элементов.\n\nВ данной задаче нельзя использовать метод `push`\n\nПример запуска функции:\n```javascript\narraySum([1, 2, 3, 4, 5, 6, 7, 8]) // 8+7; 6+5; 4+3; 2+1 возвращает массив [3, 7, 11, 15]\narraySum([1, 2, 3, 4, 5, 6, 7, 8, 9]) // 9+8; 7+6; 5+4; 3+2; 1 возвращает массив [1, 5, 9, 13, 17]\narraySum([1]) // [1]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function arraySum(arr) {\n  let sum = 0;\n  const newArr = [];\n  for (let i = arr.length-1; i >= 0; i = i - 2) {\n    if (arr[i] === arr[0]) sum = arr[i]\n    else sum = arr[i] + arr[i - 1];\n    newArr.unshift(sum)\n    sum = 0\n  }\n  return newArr\n}",
  "openTest": "it('Created function arraySum', () => {\n  expect(arraySum).to.be.a('function');\n});\n\nit('function arraySum should not include statement push', () => {\n  expect(arraySum.toString()).to.not.contain('push');\n});\n\nit('arraySum([1, 2, 3, 4, 5, 6, 7, 8]) should return [3, 7, 11, 15]', () => {\n  expect(arraySum([1, 2, 3, 4, 5, 6, 7, 8])).eql([3, 7, 11, 15]);\n});\n\nit('arraySum([1, 2, 3, 4, 5, 6, 7, 8, 9]) should return [1, 5, 9, 13, 17]', () => {\n  expect(arraySum([1, 2, 3, 4, 5, 6, 7, 8, 9])).to.deep.equal([1, 5, 9, 13, 17]);\n});\n\nit('arraySum([1, 2, 3, 4, 5) should return [1, 5, 9]', () => {\n  expect(arraySum([1, 2, 3, 4, 5])).to.deep.equal([1, 5, 9]);\n});\n\nit('arraySum([9, 10]) should return [19]', () => {\n  expect(arraySum([9, 10])).to.deep.equal([19]);\n});\n\nit('arraySum([5]) should return [5]', () => {\n  expect(arraySum([5])).to.deep.equal([5]);\n});\n\nit('arraySum([]) should return []', () => {\n  expect(arraySum([])).to.deep.equal([]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}