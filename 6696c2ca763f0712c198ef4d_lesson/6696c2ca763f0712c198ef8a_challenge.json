{
  "_id": "6696c2ca763f0712c198ef8a",
  "name": {
    "en": "Calculate the number of apartments and the amount of payments. Array with objects",
    "ru": "Посчитать количество квартир и сумму платежей. Массив с объектами"
  },
  "instruction": {
    "en": "In this task, it is necessary to calculate how many apartments are in the block and what amount of payments they make.\n\nThe function `countFees` accepts an array of objects containing information about the building.\nWe are interested in objects that have the following structure (other objects may also be passed to the function):\n* `apartment` - apartment number\n* `condoFee` - payment amount\n\nIt is necessary to return an object with the following properties:\n* `overallApartments` - the number of apartments in the block\n* `sumOfPayments` - the sum of payments for all apartments\n\nExample function call:\n```javascript\ncountFees([{apartment: 1, condoFee: 100}, {apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 100}, {apartment: 4, condoFee: 200}])\n// {overallApartments: 4, sumOfPayments: 600}\n\ncountFees([{room: 1, name: \"Utility room\"},{apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 200}])\n// {overallApartments: 2, sumOfPayments: 400}\n```",
    "ru": "В данной задаче необходимо посчитать сколько квартир находится в квартале и какую сумму платежей они платят.\n\nФункция `countFees` принимает массив объектов, содержащих информацию о доме.\nНас интересуют объекты, имеющие следующую структуру (в функцию могут приходить и другие объекты):\n* `apartment` - номер квартиры\n* `condoFee` - сумма платежа\n\nНеобходимо вернуть объект со следующими свойствами:\n* `overallApartments` - количество квартир в квартале\n* `sumOfPayments` - сумма платежей всех квартир\n\nПример запуска функции:\n```javascript\ncountFees([{apartment: 1, condoFee: 100}, {apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 100}, {apartment: 4, condoFee: 200}])\n// {overallApartments: 4, sumOfPayments: 600}\n\ncountFees([{room: 1, name: \"Utility room\"},{apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 200}])\n// {overallApartments: 2, sumOfPayments: 400}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function countFees(arr) {\n  let obj = {};\n  let count = 0;\n  let result = 0;\n  for (let i = arr.length-1; i >= 0; i--) {\n    if(\"condoFee\" in arr[i]) {\n      count++; result = result + arr[i].condoFee;\n    }\n  }\n  obj.overallApartments = count;\n  obj.sumOfPayments = result\n  return obj;\n}",
  "openTest": "it('Created function countFees', () => {\n  expect(countFees).to.be.a('function');\n});\n\nit('countFees([{apartment: 1, condoFee: 100}, {apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 100}, {apartment: 4, condoFee: 200}]) should returns {overallApartments: 4, sumOfPayments: 600}', () => {\n  expect(countFees([{apartment: 1, condoFee: 100}, {apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 100}, {apartment: 4, condoFee: 200}])).to.deep.equal({overallApartments: 4, sumOfPayments: 600});\n});\n\nit('countFees([{apartment: 1, condoFee: 100}, {apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 100}, {apartment: 4, condoFee: 150}, {apartment: 5, condoFee: 100}, {apartment: 6, condoFee: 80}]) should returns {overallApartments: 6, sumOfPayments: 730}', () => {\n  expect(countFees([{apartment: 1, condoFee: 100}, {apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 100}, {apartment: 4, condoFee: 150}, {apartment: 5, condoFee: 100}, {apartment: 6, condoFee: 80}])).to.deep.equal({overallApartments: 6, sumOfPayments: 730});\n});\n\nit('countFees([{apartment: 1, condoFee: 1000}, {apartment: 2, condoFee: 1200} should return {overallApartments: 2, sumOfPayments:2200}', () => {\n  expect(countFees([{apartment: 1, condoFee: 1000}, {apartment: 2, condoFee: 1200}])).to.deep.equal({overallApartments: 2, sumOfPayments: 2200});\n});\n\nit('countFees([{room: 1, name: \"Utility room\"},{apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 200} ]) should return {overallApartments: 2, sumOfPayments: 400}', () => {\n  expect(countFees([{room: 1, name: \"Utility room\"},{apartment: 2, condoFee: 200}, {apartment: 3, condoFee: 200} ])).to.deep.equal({overallApartments: 2, sumOfPayments: 400});\n});\n\nit('countFees([{building: \"garage\", area: 1500}, {shed: \"1-1\", location: \"backyard\"}]) should return {overallApartments: 0, sumOfPayments: 0}', () => {\n  expect(countFees([{building: \"garage\", area: 1500}, {shed: \"1-1\", location: \"backyard\"}])).to.deep.equal({overallApartments: 0, sumOfPayments: 0});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}