{
  "_id": "6696c2ca763f0712c198ef85",
  "name": {
    "en": "",
    "ru": "Найти в массиве четные и нечетные числа"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `findNumbers` принимает массив в качестве аргумента `arr`. Массив arr может содержать различные типы данных,\nв том числе и числа. Числа расположены в массиве по возрастанию.\n\nФункция должна вернуть массив из двух массивов.\n\nПервый массив содержит только четные числа из массива, а второй массив содержит только нечетные числа из массива.\n\nПри этом числа в этих массивах должны быть расположены в обратном порядке, чем в массиве arr.\n\nПри решении задачи нельзя использовать метод `reverse`.\n\nПример запуска функции:\n```javascript\nfindNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [[10, 8, 6, 4, 2], [9, 7, 5, 3, 1]]\nfindNumbers([1, 3, \"hello\", \"32\", {name: \"Alice\"}, 5, 7, 9]); // [[], [9, 7, 5, 3, 1]]\n```"
  },
  "initialSolution": "function findNumbers",
  "completedSolution": "function findNumbers(arr) {\n  let evenArr = [];\n  let oddArr = [];\n  for (let i = arr.length-1; i >= 0; i--) {\n    if (typeof arr[i] === 'number' && arr[i] % 2 === 0) {\n      evenArr.push(arr[i]);\n    }\n    if (typeof arr[i] === 'number' && arr[i] % 2 !== 0) {\n      oddArr.push(arr[i]);\n    }\n  }\n  return [evenArr, oddArr];\n}",
  "openTest": "it('Created function findNumbers', () => {\n  expect(findNumbers).to.be.a('function');\n});\n\nit('function findNumber do not include statement reverse', () => {\n  expect(findNumbers.toString()).to.not.include('reverse');\n});\n\nit('findNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) returns [[10, 8, 6, 4, 2], [9, 7, 5, 3, 1]]', () => {\n  expect(findNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])).to.deep.equal([[10, 8, 6, 4, 2], [9, 7, 5, 3, 1]]);\n});\n\nit('findNumbers([1, 3, \"hello\", \"32\", {name: \"Alice\"}, 5, 7, 9]) returns [[], [9, 7, 5, 3, 1]]', () => {\n  expect(findNumbers([1, 3, 'hello', '32', {name: \"Alice\"}, 5, 7, 9])).to.deep.equal([[], [9, 7, 5, 3, 1]]);\n});\n\nit('findNumbers([true, -3, 5, 8, \"letter\"]) returns [[8], [-3, 5]]', () => {\n  expect(findNumbers([true, -3, 5, 8, 'letter'])).to.deep.equal([[8], [5, -3]]);\n});\n\nit('findNumbers([\"hello\", \"a\", \"JS\", true]) returns [[], []]', () => {\n  expect(findNumbers([\"hello\", \"a\", \"JS\", true])).to.deep.equal([[], []]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}