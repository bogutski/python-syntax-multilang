{
  "_id": "6696c2ca763f0712c198e6b7",
  "name": {
    "en": "The capacity of the warehouse. The object",
    "ru": "Вместимость склада. Объект"
  },
  "instruction": {
    "en": "There is a warehouse in which various goods are stored. The warehouse has a limited capacity.\n\nCreate a function `warehouseCapacity` that takes three parameters:\n* `capacity` - warehouse capacity, number\n* `productExist` - the amount of product that is already in the warehouse, a number\n* `productIncoming` - amount of goods that arrive in the warehouse, number\n\nYou need to return an object that contains the following properties:\n* `warehouseAvailability` - a number that shows how much free space was in the warehouse before the new item arrived\n* `productIncoming` - the amount of product that arrives in the warehouse, a number\n* `warehouseCapacity` - a number in percentage which shows how much free space is left in the warehouse\n\nUse `Math.round()` to round the percentages.\n\nAn example of running the function:\n``javascript\nwarehouseCapacity(130, 50, 17) // {warehouseAvailability: 80, productIncoming: 17, warehouseCapacity: 48}",
    "ru": "Существует склад, на котором хранятся различные товары. Склад имеет ограниченную вместимость.\n\nСоздайте функцию `warehouseCapacity`, которая принимает три параметра:\n* `capacity` – вместимость склада, число\n* `productExist` – количество товара, которое уже находится на складе, число\n* `productIncoming` – количество товара, которое прибывает на склад, число\n\nНеобходимо вернуть объект, который содержит следующие свойства:\n* `warehouseAvailability` – число, которое показывает, сколько свободного места было на складе до момента поступления нового товара\n* `productIncoming` – количество товара, которое прибывает на склад, число\n* `warehouseCapacity` – число в процентах, которое показывает, сколько свободного места осталось на складе\n\nДля округления процентов используйте `Math.round()`.\n\nПример запуска функции:\n```javascript\nwarehouseCapacity(130, 50, 17) // {warehouseAvailability: 80, productIncoming: 17, warehouseCapacity: 48}"
  },
  "initialSolution": "function\n\n}",
  "completedSolution": "function warehouseCapacity(capacity, productExist, productIncoming) {\n  const warehouseAvailability = capacity - productExist;\n  const updatedAvailable = capacity - (productExist + productIncoming);\n  const warehouseCapacity = Math.round(updatedAvailable / capacity * 100);\n  return {\n    warehouseAvailability,\n    productIncoming,\n    warehouseCapacity,\n  };\n}",
  "openTest": "it('Created function warehouseCapacity', () => {\n  expect(warehouseCapacity).to.be.a('function');\n});\n\nit('warehouseCapacity(100, 50, 10) return { warehouseAvailability: 50, productIncoming: 10, warehouseCapacity: 40}', () => {\n  expect(warehouseCapacity(100, 50, 10)).to.be.eql({\n    warehouseAvailability: 50,\n    productIncoming: 10,\n    warehouseCapacity: 40,\n  });\n});\n\nit('warehouseCapacity(120, 30, 70) return { warehouseAvailability: 90, productIncoming: 70, warehouseCapacity: 17}', () => {\n  expect(warehouseCapacity(120, 30, 70)).to.be.eql({\n    warehouseAvailability: 90,\n    productIncoming: 70,\n    warehouseCapacity: 17,\n  });\n});\n\nit('warehouseCapacity(100, 0, 0) return { warehouseAvailability: 100, productIncoming: 0, warehouseCapacity: 100}', () => {\n  it\n  expect(warehouseCapacity(100, 0, 0)).to.be.eql({\n    warehouseAvailability: 100,\n    productIncoming: 0,\n    warehouseCapacity: 100,\n  });\n});\n\nit('warehouseCapacity(200, 50, 50) return { warehouseAvailability: 150, productIncoming: 50, warehouseCapacity: 50}', () => {\n  expect(warehouseCapacity(200, 50, 50)).to.be.eql({\n    warehouseAvailability: 150,\n    productIncoming: 50,\n    warehouseCapacity: 50,\n  });\n});\n\nit(`warehouseCapacity(130, 50, 17) return { warehouseAvailability: 80, productIncoming: 17, warehouseCapacity: 48}`, () => {\n    expect(warehouseCapacity(130, 50, 17)).to.be.eql({\n        warehouseAvailability: 80,\n        productIncoming: 17,\n        warehouseCapacity: 48,\n    });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}