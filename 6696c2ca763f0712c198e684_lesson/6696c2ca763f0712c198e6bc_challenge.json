{
  "_id": "6696c2ca763f0712c198e6bc",
  "name": {
    "en": "Changing client information. Objects",
    "ru": "Изменение информации о клиенте. Объекты"
  },
  "instruction": {
    "en": "The `clientInfo` function takes three parameters:\n* `obj` - object.\n* `key` - a string with the name of the key.\n* `value` - the value to be checked, can be of any type.\n\nCheck the presence of property `key` in the object `obj`.\n\nIf the `obj` object contains the `key` property, replace the existing value of this property with `value`.\nIf the `obj` object does not contain the `key` property, then add this property with the value of `value`.\n\nThe function should return the `obj` object with the changed properties.\n\nAn example of running the function:\n```javascript\nhasProperty({ name: \"Helen\", lastName: \"Rock\", age: 15 }, \"lastName\", \"Cash\") // {name: \"Helen\", lastName: \"Cash\", age: 15}\nhasProperty({ name: \"Helen\", lastName: \"Rock\", age: 15 }, \"country\", \"USA\") // {name: \"Helen\", lastName: \"Rock\", age: 15, country: USA}\n```",
    "ru": "Функция `clientInfo` принимает три параметра:\n* `obj` – объект.\n* `key` – строка с названием ключа.\n* `value` – значение, которое необходимо проверить, может быть любого типа.\n\nПроверьте наличие свойства `key` в объекте `obj`.\n\nЕсли объект `obj` содержит свойство `key`, то замените существующее значение этого свойства на `value`.\nЕсли объект `obj` не содержит свойство `key`, то добавьте это свойство со значением `value`.\n\nФункция должна вернуть объект `obj` с измененными свойствами.\n\nПример запуска функции:\n```javascript\nhasProperty({ name: \"Helen\", lastName: \"Rock\", age: 15 }, \"lastName\", \"Cash\")  // {name: \"Helen\", lastName: \"Cash\", age: 15}\nhasProperty({ name: \"Helen\", lastName: \"Rock\", age: 15 }, \"country\", \"USA\")  // {name: \"Helen\", lastName: \"Rock\", age: 15, country: USA}\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function clientInfo(obj, key, value) {\n  obj[key] = value;\n  return obj;\n}",
  "openTest": "it('Created function clientInfo', () => {\n    expect(clientInfo).to.be.a('function');\n});\n\nit(`Function clientInfo({ name: \"Helen\", lastName: \"Rock\", age: 15 }, \"lastName\", \"Cash\") should return {name: \"Helen\", lastName: \"Cash\", age: 15}`, () => {\n    expect(clientInfo({name: \"Helen\", lastName: \"Rock\", age: 15}, \"lastName\", \"Cash\")).to.eql({\n        name: \"Helen\",\n        lastName: \"Cash\",\n        age: 15\n    });\n});\n\nit(`Function clientInfo({ name: \"Helen\", lastName: \"Rock\", age: 15 }, \"country\", \"USA\") should return {name: \"Helen\", lastName: \"Rock\", age: 15, country: USA}`, () => {\n    expect(clientInfo({name: \"Helen\", lastName: \"Rock\", age: 15}, \"country\", \"USA\")).to.eql({\n        name: \"Helen\",\n        lastName: \"Rock\",\n        age: 15,\n        country: \"USA\"\n    });\n});\n\nit(`Function clientInfo({ name: \"Helen\", lastName: \"Rock\", age: 15 }, \"age\", 20) should return {name: \"Helen\", lastName: \"Rock\", age: 20}`, () => {\n    expect(clientInfo({name: \"Helen\", lastName: \"Rock\", age: 15}, \"age\", 20)).to.eql({\n        name: \"Helen\",\n        lastName: \"Rock\",\n        age: 20\n    });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}