{
  "_id": "6696c2ca763f0712c198e6b9",
  "name": {
    "en": "Online shopping. Checking the availability of money",
    "ru": "Покупки в интернет магазине. Проверка наличия денег"
  },
  "instruction": {
    "en": "Buying from an online store is easy to exceed the limit of money on your account.\n\nLet's evaluate the basket we've put together at the online store and see if we have enough money to buy.\n\nWrite a function `onlineOrder` that takes four parameters:\n* `product1` - an object containing information about the product\n* `product2` - object containing product information\n* `product3` - object containing product information\n* `moneyAmount` - number, the amount of money the buyer has\n\nEach object of the above has the following structure:\n* `name` - product name, string\n* `price` - price of the item, number\n* `quantity` - the amount of goods, a number.\n\nIf the buyer has enough money for all products, the function should return the string `You can buy all products: product1,\n product2 and product3`.\n\nWhere `product1`, `product2`, `product3` are the names of products the buyer is going to buy.\n\nIf there is not enough money for all products, the function should return the string `You don't have enough money for all products`\n\n\nAn example of running the function:\n```javascript\nonlineOrder({name: 'bread', price: 10, quantity: 2}, \n{name: 'milk', price: 20, quantity: 1},\n{name: 'cheese', price: 30, quantity: 1},\n100) // `You can buy all products: bread, milk and cheese`\n\nonlineOrder({name: 'socks', price: 40, quantity: 10},\n{name: 't-shirt', price: 700, quantity: 1},\n{name: 'pants', price: 1000, quantity: 1},\n500) // `You don't have enough money for all products`\n```",
    "ru": "Покупая в интернет магазине легко превысить лимит денег на счете.\n\nДавайте оценим корзину, которую мы собрали в интернет магазине и проверим, хватит ли нам денег на покупки.\n\nНапишите функцию `onlineOrder`, которая принимает четыре параметра:\n* `product1` – объект, содержащий информацию о товаре\n* `product2` – объект, содержащий информацию о товаре\n* `product3` – объект, содержащий информацию о товаре\n* `moneyAmount` – число, количество денег, которое есть у покупателя\n\nКаждый объект из вышеперечисленных имеет следующую структуру:\n* `name` – название товара, строка\n* `price` – цена товара, число\n* `quantity` – количество товара, число.\n\nЕсли покупателю хватает денег на все товары, то функция должна вернуть строку `You can buy all products: product1,\n product2 and product3`.\n\nГде `product1`, `product2`, `product3` – названия товаров, которые покупатель собирается купить.\n\nЕсли денег не хватает на все товары, то функция должна вернуть строку `You don't have enough money for all products`\n\n\nПример запуска функции:\n```javascript\nonlineOrder({name: 'bread', price: 10, quantity: 2}, \n  {name: 'milk', price: 20, quantity: 1},\n  {name: 'cheese', price: 30, quantity: 1},\n  100) // `You can buy all products: bread, milk and cheese`\n\nonlineOrder({name: 'socks', price: 40, quantity: 10},\n  {name: 't-shirt', price: 700, quantity: 1},\n  {name: 'pants', price: 1000, quantity: 1},\n  500) // `You don't have enough money for all products`\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function onlineOrder(product1, product2, product3, moneyAmount) {\n    const cost1 = product1.price * product1.quantity;\n    const cost2 = product2.price * product2.quantity;\n    const cost3 = product3.price * product3.quantity;\n    if (moneyAmount >= (cost1 + cost2 + cost3)) {\n        return `You can buy all products: ${product1.name}, ${product2.name} and ${product3.name}`;\n    } else {\n        return \"You don't have enough money for all products\";\n    }\n}",
  "openTest": "it(`function onlineOrder`, () => {\n    expect(onlineOrder).to.be.a('function');\n});\n\nit(`onlineOrder({name: 'bread', price: 10, quantity: 2}, {name: 'milk', price: 20, quantity: 1}, {name: 'cheese', price: 30, quantity: 1}, 100) should return 'You can buy all products: bread, milk and cheese'`, () => {\n    expect(onlineOrder({name: 'bread', price: 10, quantity: 2}, {name: 'milk', price: 20, quantity: 1}, {name: 'cheese', price: 30, quantity: 1 }, 100)).eql('You can buy all products: bread, milk and cheese');\n});\n\nit(`onlineOrder({name: 'car', price: 1000, quantity: 1}, {name: 'piano', price: 700, quantity: 1}, {name: 'banana', price: 40, quantity: 10}, 2000) should return 'You don't have enough money for all products'`, () => {\n    expect(onlineOrder({name: 'car', price: 1000, quantity: 1}, {name: 'piano', price: 700, quantity: 1 }, {name: 'banana', price: 40, quantity: 10}, 2000)).eql(\"You don't have enough money for all products\");\n});\n\nit(`onlineOrder({name: 'car', price: 1000, quantity: 1}, {name: 'piano', price: 700, quantity: 1}, {name: 'banana', price: 40, quantity: 10}, 1500) should return 'You don't have enough money for all products'`, () => {\n    expect(onlineOrder({name: 'car', price: 1000, quantity: 1}, {name: 'piano', price: 700, quantity: 1 }, {name: 'banana', price: 40, quantity: 10}, 1500)).eql(\"You don't have enough money for all products\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}