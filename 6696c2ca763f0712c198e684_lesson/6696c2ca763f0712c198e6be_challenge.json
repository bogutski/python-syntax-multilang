{
  "_id": "6696c2ca763f0712c198e6be",
  "name": {
    "en": "Editing a contact in the address book. Object",
    "ru": "Редактирование контакта в адресной книги. Объект"
  },
  "instruction": {
    "en": "The `addressBook` function takes 4 parameters: `name`, `lastName`, `phone`, `email`. All parameters are strings.\n\nThe function must return an object with the following structure:\n* `name` - convert to uppercase, you must remove spaces at the beginning and end of the string\n* `lastName` - convert to uppercase, you need to remove spaces at the beginning and end of the string\n* `phone` - need to remove spaces at the beginning and end of the string, the first character must be `+` (add if missing)\n* `email` - need to remove spaces at the beginning and end of the string, convert to lowercase\n\nExample of start of function:\n```javascript\naddressBook(\"John\", \" Doe\", \"1234567890\", \"Jonny@email.com\")\n// {name: \"JOHN\", lastName: \"DOE\", phone: \"+1234567890\", email: \"jonny@email.com\"}\n\naddressBook(\" ALICE\", \" Wong \", \"+1234567890 \", \"wong@email.COM\")\n// {name: \"ALICE\", lastName: \"WONG\", phone: \"+1234567890\", email: \"wong@email.ccom\"}\n```",
    "ru": "Функция `addressBook` принимает 4 параметра: `name`, `lastName`, `phone`, `email`. Все параметры - строки.\n\nФункция должна вернуть объект со следующей структурой:\n* `name` - перевести в верхний регистр, необходимо удалить пробелы в начале и в конце строки\n* `lastName` - перевести в верхний регистр, необходимо удалить пробелы в начале и в конце строки\n* `phone` - необходимо удалить пробелы в начале и в конце строки, первый символ должен быть `+` (добавить при отсутствии)\n* `email` - необходимо удалить пробелы в начале и в конце строки, перевести в нижний регистр\n\nПример запуска функции:\n```javascript\naddressBook(\"John\", \"  Doe\", \"1234567890\", \"Jonny@email.com\")\n// {name: \"JOHN\", lastName: \"DOE\", phone: \"+1234567890\", email: \"jonny@email.com\"}\n\naddressBook(\"  ALICE\", \" Wong \", \"+1234567890 \", \"wong@email.COM\")\n// {name: \"ALICE\", lastName: \"WONG\", phone: \"+1234567890\", email: \"wong@email.ccom\"}\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function addressBook(name, lastName, phone, email) {\n    phone = phone.trim()\n    if (phone[0] !== '+') {\n        phone = `+${phone}`\n    }\n    return {\n        name: name.trim().toUpperCase(),\n        lastName: lastName.trim().toUpperCase(),\n        phone: phone,\n        email: email.trim().toLowerCase(),\n    }\n}",
  "openTest": "it('Created function addressBook', () => {\n    expect(addressBook).to.be.a('function');\n});\n\nit('addressBook(\"John\", \"  Doe\", \"1234567800\", \"  john@email.com  \") should return {name: \"JOHN\", lastName: \"DOE\", phone: \"+1234567800\", email: \"john@email.com\"}', () => {\n    expect(addressBook(\"John\", \"  Doe\", \"1234567800\", \"  john@email.com  \")).eql({\n        name: \"JOHN\",\n        lastName: \"DOE\",\n        phone: \"+1234567800\",\n        email: \"john@email.com\"\n    });\n});\n\nit('addressBook(\"  ALICE\", \" Wong \", \"1234567890 \", \"wongAlice@email.com\") should return {name: \"ALICE\", lastName: \"WONG\", phone: \"+1234567890\", email: \"wongalice@email.com\"}', () => {\n    expect(addressBook(\"  ALICE\", \" Wong \", \"1234567890 \", \"wongAlice@email.com\")).eql({\n        name: \"ALICE\",\n        lastName: \"WONG\",\n        phone: \"+1234567890\",\n        email: \"wongalice@email.com\"\n    });\n});\n\nit('addressBook(\"Alice \", \"Wong \", \"+1234567890 \", \"Alice@email.com\") should return {name: \"ALICE\", lastName: \"WONG\", phone: \"+1234567890\", email: \"alice@email.com\"}', () => {\n    expect(addressBook(\"Alice \", \"Wong \", \"+1234567890 \", \"Alice@email.com\")).eql({\n        name: \"ALICE\",\n        lastName: \"WONG\",\n        phone: \"+1234567890\",\n        email: \"alice@email.com\"\n    });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}