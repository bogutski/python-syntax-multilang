{
  "_id": "6696c2ca763f0712c198e7ad",
  "name": {
    "en": "Changing the first element in the second nested array",
    "ru": "Изменение во втором вложенном массиве первого элемента"
  },
  "instruction": {
    "en": "Write a function `innerArrChangeFirstEl` that takes one parameter, an array.\n\nThe array contains 2 nested arrays with arbitrary data.\n\nIf the first element (index 0) of the second nested array is a string,\nthen change its value to uppercase.\n\nIf the first element (index 0) of the second nested array is a number,\nraise it to the power of 2.\n\nThe function should return the changed array.\n\n\n```javascript\ninnerArrChangeFirstEl([[1, 2, 3], ['hello', 'umbrella', 'phone']]) // [ [ 1, 2, 3 ], [ 'HELLO', 'umbrella', 'phone' ] ]\ninnerArrChangeFirstEl([[1, 2, 3], [4, 5, 2]]) // [ [ 1, 2, 3 ], [ 16, 5, 2 ] ]\n```",
    "ru": "Напишите функцию `innerArrChangeFirstEl`, которая принимает один параметр - массив.\n\nВ массиве находится 2 вложенных массива с произвольными данными.\n\nЕсли первый элемент (индекс 0) второго вложенного массива - строка,\nто измените его значение на верхний регистр.\n\nЕсли первый элемент (индекс 0) второго вложенного массива - число,\nто возведите его в степень 2.\n\nФункция должна вернуть измененный массив.\n\n\n```javascript\ninnerArrChangeFirstEl([[1, 2, 3], ['hello', 'umbrella', 'phone']]) // [ [ 1, 2, 3 ], [ 'HELLO', 'umbrella', 'phone' ] ]\ninnerArrChangeFirstEl([[1, 2, 3], [4, 5, 2]])   // [ [ 1, 2, 3 ], [ 16, 5, 2 ] ]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function innerArrChangeFirstEl(arr){\n  if(typeof arr[1][0] === 'string'){\n    arr[1][0] = arr[1][0].toUpperCase()\n  }else if(typeof arr[1][0] === 'number'){\n    arr[1][0] = arr[1][0] ** 2\n  }\n  return arr\n}",
  "openTest": "it('Created function innerArrChangeFirstEl', () => {\n  expect(innerArrChangeFirstEl).to.be.a('function');\n});\n\nit('innerArrChangeFirstEl([[1, 2, 3], [4, 5, 2]]) should return [[ 1, 2, 3 ], [ 16, 5, 2 ]]', () => {\n    expect(innerArrChangeFirstEl([[1, 2, 3], [4, 5, 2]])).to.deep.equal([[ 1, 2, 3 ], [ 16, 5, 2 ]]);\n});\n\nit('innerArrChangeFirstEl([[1, 2, 3], [\"hello\", \"umbrella\", \"phone\"]]) should return [[1, 2, 3], [\"HELLO\", \"umbrella\", \"phone\"]]', () => {\n    expect(innerArrChangeFirstEl([[1, 2, 3], [\"hello\", \"umbrella\", \"phone\"]])).to.deep.equal([[1, 2, 3], [\"HELLO\", \"umbrella\", \"phone\"]]);\n});\n\nit('innerArrChangeFirstEl([[1, 2, 3, true, \"cherry\"], [\"red\", \"green\", \"blue\"]]) should return [[1, 2, 3, true, \"cherry\"], [\"RED\", \"green\", \"blue\"]]', () => {\n    expect(innerArrChangeFirstEl([[1, 2, 3, true, \"cherry\"], [\"red\", \"green\", \"blue\"]])).to.deep.equal([[1, 2, 3, true, \"cherry\"], [\"RED\", \"green\", \"blue\"]]);\n});\n\nit('innerArrChangeFirstEl([[1, 2, 3], [\"grape\", 5, \"banana\"]]) should return [[1, 2, 3], [\"GRAPE\", 5, \"banana\"]]', () => {\n    expect(innerArrChangeFirstEl([[1, 2, 3], [\"grape\", 5, \"banana\"]])).to.deep.equal([[1, 2, 3], [\"GRAPE\", 5, \"banana\"]]);\n});\n\nit('innerArrChangeFirstEl([[1, 2, 3], [4, \"apple\", \"banana\"]]) should return [[ 1, 2, 3 ], [ 16, \"apple\", \"banana\" ]]', () => {\n    expect(innerArrChangeFirstEl([[1, 2, 3], [4, \"apple\", \"banana\"]])).to.deep.equal([[ 1, 2, 3 ], [ 16, 'apple', 'banana' ]]);\n});\n\nit('innerArrChangeFirstEl([[1, 2, 3], [-3, 2, \"banana\"]]) should return [[ 1, 2, 3 ], [ 9, 2, \"banana\" ]]', () => {\n    expect(innerArrChangeFirstEl([[1, 2, 3], [-3, 2, \"banana\"]])).to.deep.equal([[ 1, 2, 3 ], [ 9, 2, 'banana' ]]);\n});\n\nit('innerArrChangeFirstEl([[1, 2, 3], [-2, -2, \"banana\"]]) should return [[ 1, 2, 3 ], [ 4, -2, \"banana\" ]]', () => {\n    expect(innerArrChangeFirstEl([[1, 2, 3], [-2, -2, \"banana\"]])).to.deep.equal([[ 1, 2, 3 ], [ 4, -2, 'banana' ]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}