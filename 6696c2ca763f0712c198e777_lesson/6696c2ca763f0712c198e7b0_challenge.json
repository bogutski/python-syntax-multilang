{
  "_id": "6696c2ca763f0712c198e7b0",
  "name": {
    "en": "Replacing an element in a nested array with the lastIndexOf() method",
    "ru": "Замена элемента во вложенном массиве с помощью метода lastIndexOf()"
  },
  "instruction": {
    "en": "Write a function `changeColor` that takes one parameter, an array.\n\nThe array contains two nested arrays with an arbitrary number of lines.\n\nIf the second nested array contains the string `green`, replace it with `yellow`.\n\nIf there is more than one `green` string in the nested object, only the last one will be replaced.\n\nUse the `lastIndexOf()` method to search for the `green` string.\n\nThe function should return the modified array.\n\nAn example of running the function:\n```javascript\nchangeColor([['red', 'green', 'blue'], ['black', 'green', 'white']])\n// [['red', 'green', 'blue'], ['black', 'yellow', 'white']]\nchangeColor([['pink', 'green', 'red'], ['orange', 'green', 'blue', 'green']])\n// [['pink', 'green', 'red'], ['orange', 'green', 'blue', 'yellow']]\n```",
    "ru": "Напишите функцию `changeColor`, которая принимает  один параметр - массив.\n\nМассив содержит в себе два вложенных массива с произвольным количеством строк.\n\nЕсли во втором вложенном массиве есть строка `green`, то замените ее на `yellow`.\n\nЕсли строк `green` во вложенном массиве больше одной, то заменится только последняя.\n\nДля поиска строки `green` используйте метод `lastIndexOf()`.\n\nФункция должна вернуть измененный массив.\n\nПример запуска функции:\n```javascript\nchangeColor([['red', 'green', 'blue'], ['black', 'green', 'white']])\n         // [['red', 'green', 'blue'], ['black', 'yellow', 'white']]\nchangeColor([['pink', 'green', 'red'], ['orange', 'green', 'blue', 'green']])\n         // [['pink', 'green', 'red'], ['orange', 'green', 'blue', 'yellow']]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function changeColor(arr){\n  arr[1][arr[1].lastIndexOf('green')] = 'yellow';\n  return arr\n}",
  "openTest": "it('Created function changeColor', () => {\n  expect(changeColor).to.be.a('function');\n});\n\nit('changeColor([[\"red\", \"green\", \"blue\"], [\"black\", \"green\", \"white\"]]) should return [[\"red\", \"green\", \"blue\"], [\"black\", \"yellow\", \"white\"]]', () => {\n    expect(changeColor([['red', 'green', 'blue'], ['black', 'green', 'white']])).to.deep.equal([['red', 'green', 'blue'], ['black', 'yellow', 'white']]);\n});\n\nit('changeColor([[\"pink\", \"green\", \"red\"], [\"orange\", \"green\", \"blue\", \"green\"]]) should return [[\"pink\", \"green\", \"red\"], [\"orange\", \"green\", \"blue\", \"yellow\"]]', () => {\n    expect(changeColor([['pink', 'green', 'red'], ['orange', 'green', 'blue', 'green']])).to.deep.equal([['pink', 'green', 'red'], ['orange', 'green', 'blue', 'yellow']]);\n});\n\nit('changeColor([[\"red\", \"blue\"], [\"orange\", \"black\", \"green\", \"white\"]]) should return [[\"red\", \"blue\"], [\"orange\", \"black\", \"yellow\", \"white\"]]', () => {\n    expect(changeColor([['red', 'blue'], ['orange', 'black', 'green', 'white']])).to.deep.equal([['red', 'blue'], ['orange', 'black', 'yellow', 'white']]);\n});\n\nit('changeColor([[\"red\"], [\"green\"]]) should return [[\"red\"], [\"yellow\"]]', () => {\n    expect(changeColor([['red'], ['green']])).to.deep.equal([['red'], ['yellow']]);\n});\n\nit('changeColor([[\"blue\"], [\"green\", \"green\", \"green\", \"green\"]]) should return [[\"blue\"], [\"green\", \"green\", \"green\", \"yellow\"]]', () => {\n    expect(changeColor([['blue'], ['green', 'green', 'green', 'green']])).to.deep.equal([['blue'], ['green', 'green', 'green', 'yellow']]);\n});\n\nit('changeColor([[\"red\", \"green\", \"blue\", \"orange\"], [\"green\", \"orange\", \"white\"]]) should return [[\"red\", \"green\", \"blue\", \"orange\"], [\"yellow\", \"orange\", \"white\"]]', () => {\n    expect(changeColor([['red', 'green', 'blue', 'orange'], ['green', 'orange', 'white']])).to.deep.equal([['red', 'green', 'blue', 'orange'], ['yellow', 'orange', 'white']]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}