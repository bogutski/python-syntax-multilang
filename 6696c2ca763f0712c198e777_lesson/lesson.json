{
  "_id": "6696c2ca763f0712c198e777",
  "content": {
    "ru": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/boy-change.png)\n\nКаждый элемент массива имеет свой уникальный индекс, начиная с нуля.\n\nЧтобы изменить элемент массива, нужно обратиться к нему по индексу и присвоить ему новое значение.\n\n```javascript\nconst students = ['Alice', 'Bill', 'Carson'];\n\nstudents[1] = 'Bob';\nconsole.log(students); // ['Alice', 'Bob', 'Carson']\n\n// приведем второй элемент массива в верхний регистр\nstudents[1] = students[1].toUpperCase();\nconsole.log(students); // ['Alice', 'BOB', 'Carson']\n```\n\nЕсли мы хотим поменять местами два элемента в массиве, нам надо ввести дополнительную переменную.\n\nРассмотрим пример:\n\n```javascript\nconst students = ['Alice', 'Bill', 'Carson'];\n\nconst firstEl = students[0];\nstudents[0] = students[1];\nstudents[1] = firstEl;\n\nconsole.log(students); // ['Bill', 'Alice', 'Carson']\n```\n\nКроме того, массивы могут содержать не только примитивные типы данных, такие как числа и строки, но и другие сложные типы данных, такие как объекты.\n\n```javascript\nconst students = [\n  { name: 'Alice', id: 987 }, \n  { name: 'Bob', id: 357 }, \n  { name: 'Carson', id: 753 }\n];\n\nstudents[1].name = 'Bill';\n\nconsole.log(students); // [{ ... }, { name: 'Bill', id: 357 }, { ... }]\n```\n\nВ JavaScript объекты являются ссылочным типом данных, что означает, что переменная, содержащая объект, на самом деле хранит ссылку на объект в памяти, а не сам объект.\n\nПри работе с объектами в массивах следует учитывать, что при изменении свойства объекта, хранящегося в массиве, это изменение будет отражаться везде, где используется этот объект.\n\nЭто может привести к непредсказуемым результатам, если не учитывать эту особенность:\n\n```javascript\nconst student1 = { name: 'Alice', id: 987 }; \nconst student2 = { name: 'Bob', id: 357 };\nconst student3 = { name: 'Carson', id: 753 };\n\nconst students = [student1, student2, student3]\nstudents[1].name = 'Bill';\n\nconsole.log(students); // [{ ... }, { name: 'Bill', id: 357 }, { ... }]\nconsole.log(student2); // { name: 'Bill', id: 357 }\n```\n\nТеперь полностью изменим второй элемент массива :\n\n```javascript\nconst student1 = { name: 'Alice', id: 987 }; \nconst student2 = { name: 'Bob', id: 357 };\nconst student3 = { name: 'Carson', id: 753 };\n\nconst students = [student1, student2, student3]\nstudents[1] = { name: 'Alan', id: 432 };\n\nconsole.log(students); // [{ ... }, { name: 'Alan', id: 432 }, { ... }]\nconsole.log(student2); // { name: 'Bob', id: 357 }\n```\n\nНапишем функцию `tenToZero`, которая принимает массив `arr`, находит элемент `target`, заменяет его на `replacement`, и возвращает измененный массив: \n\n```javascript\nfunction tenToZero(arr, target, replacement) {\n  const targetIndex = arr.indexOf(target);\n  arr[targetIndex] = replacement;\n  return arr;\n}\n\nconsole.log(tenToZero([1, 23, 4, 1, 4, 6], 4, 'four')); // [1, 23, 'four', 1, 4, 6]\n```\n",
    "en": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/boy-change.png)\n\nEach element of the array has its own unique index, starting from zero.\n\nTo change an element of an array, you need to address it by its index and assign it a new value.\n\n```javascript\nconst students = ['Alice', 'Bill', 'Carson'];\n\nstudents[1] = 'Bob';\nconsole.log(students); // ['Alice', 'Bob', 'Carson']\n\n// let's capitalize the second element of the array\nstudents[1] = students[1].toUpperCase();\nconsole.log(students); // ['Alice', 'BOB', 'Carson']\n```\n\nIf we want to swap two elements in an array, we need to enter an additional variable.\n\nLet's look at an example:\n\n```javascript\nconst students = ['Alice', 'Bill', 'Carson'];\n\nconst firstEl = students[0];\nstudents[0] = students[1];\nstudents[1] = firstEl;\n\nconsole.log(students); // ['Bill', 'Alice', 'Carson']\n```\n\nIn addition, arrays can contain not only primitive data types such as numbers and strings, but also other complex data types such as objects.\n\n```javascript\nconst students = [\n  { name: 'Alice', id: 987 }, \n  { name: 'Bob', id: 357 }, \n  { name: 'Carson', id: 753 }\n];\n\nstudents[1].name = 'Bill';\n\nconsole.log(students); // [{ ... }, { name: 'Bill', id: 357 }, { ... }]\n```\n\nIn JavaScript, objects are a reference data type, which means that a variable containing an object actually stores a reference to the object in memory, not the object itself.\n\nWhen working with objects in arrays, keep in mind that if you change a property of an object stored in an array, that change will be reflected wherever that object is used.\n\nThis can lead to unpredictable results if this feature is not taken into account:\n\n```javascript\nconst student1 = { name: 'Alice', id: 987 }; \nconst student2 = { name: 'Bob', id: 357 };\nconst student3 = { name: 'Carson', id: 753 };\n\nconst students = [student1, student2, student3]\nstudents[1].name = 'Bill';\n\nconsole.log(students); // [{ ... }, { name: 'Bill', id: 357 }, { ... }]\nconsole.log(student2); // { name: 'Bill', id: 357 }\n```\n\nNow completely change the second element of the array :\n\n```javascript\nconst student1 = { name: 'Alice', id: 987 }; \nconst student2 = { name: 'Bob', id: 357 };\nconst student3 = { name: 'Carson', id: 753 };\n\nconst students = [student1, student2, student3]\nstudents[1] = { name: 'Alan', id: 432 };\n\nconsole.log(students); // [{ ... }, { name: 'Alan', id: 432 }, { ... }]\nconsole.log(student2); // { name: 'Bob', id: 357 }\n```\n\nLet's write a function `tenToZero` that takes the `arr` array, finds the `target` element, replaces it with `replacement`, and returns the changed array: \n\n```javascript\nfunction tenToZero(arr, target, replacement) {\n  const targetIndex = arr.indexOf(target);\n  arr[targetIndex] = replacement;\n  return arr;\n}\n\nconsole.log(tenToZero([1, 23, 4, 1, 4, 6], 4, 'four')); // [1, 23, 'four', 1, 4, 6]\n```\n",
    "es": "# Изменение элементов массива language: es"
  },
  "video": {
    "ru": "https://youtu.be/nEdAqzkNvM4",
    "en": "",
    "es": ""
  }
}