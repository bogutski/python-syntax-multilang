{
  "_id": "6696c2ca763f0712c198e7ae",
  "name": {
    "en": "Changing an element in an array using the indexOf() method",
    "ru": "Изменение элемента в массиве с помощью метода indexOf()"
  },
  "instruction": {
    "en": "Write a function `onlyFruits` that takes one parameter - an array.\n\nThe array contains any number of lines with fruit names, among which there is only one line with `cucumber`.\nExample array: `['apple', 'banana', 'cucumber', 'orange', 'melon']`\n\nThe function should return an array with `cucumber` changed to `kiwi`.\n\nUse the `indexOf()` method to find the `cucumber` element in the array\n\nAn example of running the function:\n```javascript\nonlyFruits(['banana', 'cucumber', 'orange', 'melon']); // ['banana', 'kiwi', 'orange', 'melon']\n```",
    "ru": "Напишите функцию `onlyFruits`, которая принимает один параметр - массив.\n\nМассив содержит произвольное количество строк с названиями фруктов, среди которых есть только одна строка с `cucumber`.\nПример массива: `['apple', 'banana', 'cucumber', 'orange', 'melon']`\n\nФункция должна вернуть массив, в котором `cucumber` будет изменён на `kiwi`.\n\nДля нахождения элемента `cucumber` в массиве используйте метод `indexOf()`\n\nПример запуска функции:\n```javascript\nonlyFruits(['banana', 'cucumber', 'orange', 'melon']); // ['banana', 'kiwi', 'orange', 'melon']\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function onlyFruits(arr){\n  arr[arr.indexOf('cucumber')] = 'kiwi';\n  return arr\n}",
  "openTest": "it('Created function onlyFruits', () => {\n  expect(onlyFruits).to.be.a('function');\n});\n\nit('onlyFruits([\"banana\", \"cucumber\", \"orange\", \"melon\"]) should return [\"banana\", \"kiwi\", \"orange\", \"melon\"]', () => {\n    expect(onlyFruits(['banana', 'cucumber', 'orange', 'melon'])).to.eql(['banana', 'kiwi', 'orange', 'melon']);\n});\n\nit('onlyFruits([\"cucumber\", \"orange\", \"melon\"]) should return [\"kiwi\", \"orange\", \"melon\"]', () => {\n    expect(onlyFruits(['cucumber', 'orange', 'melon'])).to.eql(['kiwi', 'orange', 'melon']);\n});\n\nit('onlyFruits([\"banana\", \"orange\", \"apricot\", \"grapefruit\", \"mango\", \"cucumber\"]) should return [\"banana\", \"orange\", \"apricot\", \"grapefruit\", \"mango\", \"kiwi\"]', () => {\n    expect(onlyFruits(['banana', 'orange', 'apricot', 'grapefruit', 'mango', 'cucumber'])).to.eql(['banana', 'orange', 'apricot', 'grapefruit', 'mango', 'kiwi']);\n});\n\nit('onlyFruits([\"cucumber\", \"mango\"]) should return [\"kiwi\", \"mango\"]', () => {\n    expect(onlyFruits(['cucumber', 'mango'])).to.eql(['kiwi', 'mango']);\n});\n\nit('onlyFruits([\"cucumber\"]) should return [\"kiwi\"]', () => {\n    expect(onlyFruits(['cucumber'])).to.eql(['kiwi']);\n});\n\nit('onlyFruits([\"orange\", \"apricot\", \"grapefruit\", \"cucumber\", \"mango\", \"plum\", \"pomegranate\"]) should return [\"orange\", \"apricot\", \"grapefruit\", \"kiwi\", \"mango\", \"plum\", \"pomegranate\"]', () => {\n    expect(onlyFruits(['orange', 'apricot', 'grapefruit', 'cucumber', 'mango', 'plum', 'pomegranate'])).to.eql(['orange', 'apricot', 'grapefruit', 'kiwi', 'mango', 'plum', 'pomegranate']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}