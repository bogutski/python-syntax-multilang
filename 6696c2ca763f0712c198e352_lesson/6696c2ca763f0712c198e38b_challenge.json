{
  "_id": "6696c2ca763f0712c198e38b",
  "name": {
    "en": "",
    "ru": "Премия в зависимости от стажа работы в компании"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `bonus`, которая принимает четыре параметра:\n* `name` - имя сотрудника\n* `position` - должность сотрудника\n* `salary` - годовой оклад сотрудника\n* `experience` - стаж работы сотрудника в компании, в годах\n\nФункция должна рассчитать премию сотрудника в зависимости от его стажа работы в компании.\n\n* Если стаж работы менее года, то премия составляет 0% от оклада\n* Если стаж работы от 1 до 3 лет, то премия составляет 2% от оклада\n* Если стаж работы от 3 до 5 лет, то премия составляет 5% от оклада\n* Если стаж работы от 5 до 10 лет, то премия составляет 10% от оклада\n* Если стаж работы более 10 лет, то премия составляет 20% от оклада\n\nФункция должна возвращать строку вида `Name: John, Position: Manager, Salary: 1000, Experience: 5, Bonus: 50. Total: 1050`\n\nЕсли стаж работы отрицательный, то функция должна возвращать строку `Invalid value for experience`"
  },
  "initialSolution": "fun",
  "completedSolution": "function bonus(name, Position, salary, experience) {\n  let bonus = 0;\n\n  if (experience < 0) return 'Invalid value for experience';\n  else if (experience < 1) bonus = salary * 0;\n  else if (experience < 3) bonus = salary * 0.02;\n  else if (experience < 5) bonus = salary * 0.05;\n  else if (experience < 10) bonus = salary * 0.1;\n  else bonus = salary * 0.2;\n\n  return `Name: ${name}, Position: ${Position}, Salary: ${salary}, Experience: ${experience}, Bonus: ${bonus}. Total: ${\n    salary + bonus\n  }`;\n}",
  "openTest": "it('Created function bonus', () => {\n  expect(bonus).to.be.a('function');\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 0) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 0, Bonus: 0. Total: 1000\"', () => {\n  expect(bonus('John', 'Manager', 1000, 0)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 0, Bonus: 0. Total: 1000',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, -1) should return \"Invalid value for experience\"', () => {\n  expect(bonus('John', 'Manager', 1000, -1)).to.equal('Invalid value for experience');\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 1) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 1, Bonus: 20. Total: 1020\"', () => {\n  expect(bonus('John', 'Manager', 1000, 1)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 1, Bonus: 20. Total: 1020',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 2) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 2, Bonus: 20. Total: 1020\"', () => {\n  expect(bonus('John', 'Manager', 1000, 2)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 2, Bonus: 20. Total: 1020',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 3) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 3, Bonus: 50. Total: 1050\"', () => {\n  expect(bonus('John', 'Manager', 1000, 3)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 3, Bonus: 50. Total: 1050',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 4) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 4, Bonus: 50. Total: 1050\"', () => {\n  expect(bonus('John', 'Manager', 1000, 4)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 4, Bonus: 50. Total: 1050',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 6) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 6, Bonus: 100. Total: 1100\"', () => {\n  expect(bonus('John', 'Manager', 1000, 6)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 6, Bonus: 100. Total: 1100',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 7) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 7, Bonus: 100. Total: 1100\"', () => {\n  expect(bonus('John', 'Manager', 1000, 7)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 7, Bonus: 100. Total: 1100',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 8) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 8, Bonus: 100. Total: 1100\"', () => {\n  expect(bonus('John', 'Manager', 1000, 8)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 8, Bonus: 100. Total: 1100',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 9) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 9, Bonus: 100. Total: 1100\"', () => {\n  expect(bonus('John', 'Manager', 1000, 9)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 9, Bonus: 100. Total: 1100',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 10) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 10, Bonus: 200. Total: 1200\"', () => {\n  expect(bonus('John', 'Manager', 1000, 10)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 10, Bonus: 200. Total: 1200',\n  );\n});\n\nit('bonus(\"John\", \"Manager\", 1000, 11) should return \"Name: John, Position: Manager, Salary: 1000, Experience: 11, Bonus: 200. Total: 1200\"', () => {\n  expect(bonus('John', 'Manager', 1000, 11)).to.equal(\n    'Name: John, Position: Manager, Salary: 1000, Experience: 11, Bonus: 200. Total: 1200',\n  );\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}