{
  "_id": "6696c2ca763f0712c198eb72",
  "content": {
    "ru": "\nВ этом уроке мы научимся проверять является ли строка палиндромом.\n\n**Палиндром** - это строка, которая читается справа налево и слева направо одинаково.\n\nПримеры палиндрома\n```javascript\nconst str = '101';\nconst str2 = 'anna';\nconst str3 = 'ono';\nconst str4 = '0 44 0';\n```\nНе является палиндромом\n```javascript\nconst str = 'o 45 0';\nconst str2 = 'abda';\n```\nПредполагается, что для определения палиндрома, регистр не имеет значения, но \nэто лучше уточнять в каждой отдельной ситуации.\n\nКакие есть способы проверки строки на палиндром?\n\n1. Преобразовать строку в массив, перевернуть его, склеить массив и сравнить с исходной строкой.\nДанный способ самый короткий с точки зрения написания, но самый затратный с точки зрения операций.\n\n```javascript\nconst str = 'obbo';\nconst isPalindrome = str.split('').reverse().join('') === str;\n\nconsole.log(isPalindrome); // true\n```\n```javascript\nconst str = 'obqo';\nconst isPalindrome = str.split('').reverse().join('') === str;\n\nconsole.log(isPalindrome); // false\n```\n\n```javascript\nconst str = 'Obbo';\nconst isPalindrome = str.split('').reverse().join('') === str;\n\nconsole.log(isPalindrome); // false\n```\nВ примере выше мы получим результат `false`, так как регистр имеет значение.\n\nЭто можно исправить с помощью приведения к нижнему регистру.\n```javascript\nconst str = 'Obbo';\nconst isPalindrome = str.toLowerCase().split('').reverse().join('') === str.toLowerCase();\n\nconsole.log(isPalindrome); // true\n```\nСпособ написания переменной `isPalindrome` называется `chaining` (цепочка вызовов).\n`str.toLowerCase().split('').reverse().join('')` - сначала мы приводим к нижнему регистру, потом переводим строку в массив с помощью команды\n`split('')`, затем переворачиваем массив с помощью `reverse()` и склеиваем его обратно в строку с помощью `join('')`.\n\nУ данного способа есть некоторые недостатки:\n* split() - пройдется по строке и преобразует ее в массив\n* reverse() - пройдется по всему массиву и перевернет массив\n* join() - пройдется по массиву и склеит его в строку\n* и только после этого мы сможем сравнить две строки.\n  \nПроисходит многократное повторение прохождения по строке/массиву. С точки зрения оценки эффективности алгоритма, данный вариант\nпрактически равен следующему методу, но на собеседовании скорее всего от вас ожидают увидеть способ ниже.\n\n2. **Цикл по массиву**, где мы будем сравнивать первую букву с последней, вторую с предпоследней и т.д. Если хоть одна пара не совпадает, то строка не является палиндромом и работа алгоритма не продолжается.\n\nПлюс данного способа, то что он не использует дополнительных структур\n```javascript\nfunction isPalindrome(str){\n  for (let i = 0; i< str.length; i++){\n  // Как обращаться к индексам с начала строки мы знаем, но как дополнительно идти с конца?\n  // str.length - 1 - i  таким образом мы будем обращаться к индексам с конца строки\n    if (str[i] !== str[str.length - 1 - i]) {  // здесь мы сравниваем, что элементы с начала строки не равны элементам с конца строки\n      return false                             // если они не равны, то строка не является палиндромом\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('obqiiwbo')) // false\n```\n```javascript\nfunction isPalindrome(str) {\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('obiyyibo')) // true\n```\nВ данном примере мы получили результат `true`, но давайте проверим сколько цикл сделал операций.\n\nДля этого выведем `console.log(i)` внутри цикла\n```javascript\nfunction isPalindrome(str) {\n  for (let i = 0; i < str.length; i++) {\n    console.log(i)\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('obiyyibo')) // 0 1 2 3 4 5 6 7 - true\n```\nВывод в консоль показал, что цикл сделал 8 операций, хотя достаточно было сделать 4.\nНеобходимо было проверить только половину строки.\n\nДля этого сделаем небольшую оптимизацию:\n```javascript\nfunction isPalindrome(str){\n  for (let i = 0; i< str.length / 2; i++){    // цикл будет идти только до половины строки\n    console.log(str[i])                       // проверим, какие символы проверяет цикл\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false  \n    }\n  }\n  return true;   \n}\n\nconsole.log(isPalindrome('obiyyibo')) // 'o' 'b' 'i' 'y' - true\n```\nВ данном случае длина строки четная, и цикл берет ровно половину длины строки.\nЧто необходимо делать в случае, если длина строки нечетная?\n\nСредний символ в нечетной строке не важен, но цикл будет включать серединный символ:\n```javascript\nfunction isPalindrome(str){\n  for (let i = 0; i < str.length / 2; i++){\n    console.log(str[i])                     // проверяем, какие символы проверяет цикл\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('obiyRyibo')) // 'o' 'b' 'i' 'y' 'R' - true\n```\nВозьмите этот способ себе на заметку и используйте в дальнейшем при решении задач",
    "en": "\nIn this lesson we will learn how to check if a string is a palindrome.\n\n**Palindrome** is a line that reads from right to left and left to right equally.\n\nExamples of a palindrome\n```javascript\nconst str = '101';\nconst str2 = 'anna';\nconst str3 = 'ono';\nconst str4 = '0 44 0';\n```\nNot a palindrome\n```javascript\nconst str = 'o 45 0';\nconst str2 = 'abda';\n```\nIt is assumed that for the definition of a palindrome, the case does not matter, but \nThis is best specified on a case-by-case basis.\n\nWhat are some ways to check a string for a palindrome?\n\n1. Convert the string to an array, flip it over, glue the array together and compare it to the original string.\nThis method is the shortest in terms of writing, but the most costly in terms of operations.\n\n```javascript\nconst str = 'obbo';\nconst isPalindrome = str.split('').reverse().join('') === str;\n\nconsole.log(isPalindrome); // true\n```\n```javascript\nconst str = 'obqo';\nconst isPalindrome = str.split('').reverse().join('') === str;\n\nconsole.log(isPalindrome); // false\n```\n\n```javascript\nconst str = 'Obbo';\nconst isPalindrome = str.split('').reverse().join('') === str;\n\nconsole.log(isPalindrome); // false\n```\nIn the example above we get the result `false` because the case is relevant.\n\nThis can be corrected by converting to lower case.\n```javascript\nconst str = 'Obbo';\nconst isPalindrome = str.toLowerCase().split('').reverse().join('') === str.toLowerCase();\n\nconsole.log(isPalindrome); // true\n```\nThe way to write a variable `isPalindrome` is called `chaining` (call chain).\n`str.toLowerCase().split('').reverse().join('')` - first we convert the string to lowercase, then convert it to an array with\n`split('')`, then we flip the array with `reverse(')` and glue it back together into a string with `join('')`.\n\nThis method has some disadvantages:\n* split() - walks through the string and converts it to an array\n* reverse() - traverses the entire array and reverses the array\n* join() - walks through the array and glues it into a string\n* and only then will we be able to compare the two strings.\n\nThere is a multiple repetition of passing through the row/array. In terms of evaluating the effectiveness of the algorithm, this option\nis almost equal to the following method, but at the interview you will most likely be expected to see the method below.\n\n2. **Cycle by array**, where we will compare the first letter to the last, the second to the penultimate, etc. If at least one pair does not match, the string is not a palindrome and the algorithm does not continue.\n\nThe advantage of this method is that it does not use additional structures\n```javascript\nfunction isPalindrome(str){\n  for (let i = 0; i< str.length; i++){\n  // We know how to refer to indexes from the beginning of the string, but how to additionally go from the end?\n  // str.length - 1 - i so we will address the indexes from the end of the string\n    if (str[i] !== str[str.length - 1 - i]) { // here we compare if elements from the beginning of the string are not equal to elements from the end of the string\n      return false // if they are not equal then string is not a palindrome\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('obqiiwbo')) // false\n```\n```javascript\nfunction isPalindrome(str) {\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('obiyyibo')) // true\n```\nIn this example we got the result `true`, but let's check how many operations the loop has done.\n\nTo do this, print `console.log(i)` inside the loop\n```javascript\nfunction isPalindrome(str) {\n  for (let i = 0; i < str.length; i++) {\n    console.log(i)\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('obiyyibo')) // 0 1 2 3 4 5 6 7 - true\n```\nOutput to the console showed that the loop made 8 operations, although it was enough to make 4.\nIt was necessary to check only half of the string.\n\nTo do this, let's do a little optimization:\n```javascript\nfunction isPalindrome(str){\n  for (let i = 0; i< str.length / 2; i++){ // the loop will only go to half of the string\n    console.log(str[i]) // check which characters the loop checks\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false  \n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('obiyyibo')) // 'o' 'b' 'i' 'y' - true\n```\nIn this case, the string length is even, and the loop takes exactly half of the string length.\nWhat should you do if the string length is odd?\n\nThe middle character in the odd string is not important, but the loop will include the middle character:\n```javascript\nfunction isPalindrome(str){\n  for (let i = 0; i < str.length / 2; i++){\n    console.log(str[i])                     // check which characters the loop checks\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false\n    }\n  }\n  return true;\n}\n\nconsole.log(isPalindrome('obiyRyibo')) // 'o' 'b' 'i' 'y' 'R' - true\n```\nTake note of this method and use it to solve problems in the future",
    "es": "# Проверить, является ли строка палиндромом language: es"
  },
  "video": {
    "ru": "https://youtu.be/wwWG4DweZ74",
    "en": "",
    "es": ""
  }
}