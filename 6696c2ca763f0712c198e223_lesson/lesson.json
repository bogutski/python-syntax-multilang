{
  "_id": "6696c2ca763f0712c198e223",
  "content": {
    "ru": "### Логический оператор ИЛИ (`||`)\n\nЛогический оператор `ИЛИ` пишется, как двойной символ вертикальной черты `||`.\n\nОператор `ИЛИ` используется с двумя или более значениями и может применяться к значениям любого типа и возвращать также значение любого типа.\n\nЭтот оператор работает следующим образом: если **хотя бы один** из аргументов `true`, то возвращает `true`, иначе – `false`.\n\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/a-and-b.png)\n\nНапример, представим, что мы стоим на остановке и ждём автобус № 1 или № 5.\n\n```javascript\nconst bus = 5;  // автобус № 5\nif(bus === 1 || bus === 5) {  // если автобусы № 1 или № 5\n  console.log('Go');  // Go! т.к. автобус  № 5   \n}\n```\n\nА теперь представим, что мы ждём автобус № 1 или № 5 или № 17.\n\n```javascript\nconst bus = 17;  // автобус № 17\nif(bus === 1 || bus === 5 || bus === 17) {  // если автобусы № 1 или № 5 или № 17\n  console.log('Go');  // Go! т.к. автобус  17\n}\n```\n\nРассмотрим все четыре существующие логические комбинации для оператора `||`:\n\n```javascript\nconsole.log(true || true);  // true, все значения истинны\nconsole.log(false || true);  // true, одно из значений истинно\nconsole.log(true || false);  // true, одно из значений истинно\nconsole.log(false || false);  // false, все значения ложны\n```\n\nЭтот оператор работает следующим образом:\n\n* Вычисляет операнды слева направо\n* Каждый операнд приводит к типу `boolean`\n* Если встретится значение `true`, останавливается и возвращает исходное значение этого операнда.\n* Если все операнды являются ложными `false`, возвращает последний из них.\n\nВ данном примере, число 1 преобразится к `true`, а 0 – к `false`.\n\n```javascript\nconsole.log(1 || 0);  // сработает как (true || false) -> true, в консоль выведет 1\nconsole.log(0 || false || 1);  // 1, возвращает первый `true`\nconsole.log(0 || false || 1 || null);  // 1, возвращает первый `true`\nconsole.log(0 || false || undefined || null);  // null, выведет последнее значение, так как все аргументы `false`\n```\n\nРассмотрим еще один пример: допустим, свет в офисе должен быть включён с 8 до 19.\n\n```javascript\nconst time = 12;\nif(time > 8 || time < 19) {  // первое условие истинно, 12 > 8\n  console.log('Light');  // в консоль выведет Light\n}\n```\n\nА что, если время суток будет 10 вечера (22:00)?\n\nСвет в офисе будет все равно включён, так как первое условие истинно!\n\n```javascript\nconst time = 22;\nif(time > 8 || time < 19) {  // первое условие истинно, 22 > 8\n  console.log('Light');  // в консоль выведет Light\n}\n```\n\nДля решения этой задачи нам понадобится оператор И (`&&`).\n\n### Логический оператор И (`&&`)\n\nЕсли оператор ИЛИ (`||`) работает до тех пор, пока не встретит первый `true`, то оператор И (`&&`), наоборот, работает до тех пор, пока не встретит первый `false`.\n\nЛогический оператор `И` пишется, как два амперсанда `&&`.\n\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/gemini-signs.png)\n\nРассмотрим тот же пример с офисом, свет в офисе должен быть включён с 8 до 19. Это 24-часовой формат времени.\n\n```javascript\nconst time = 12;\nif(time > 8 && time < 19) {  // оба условия истинны (true && true), 12 > 8 И 12 < 19\n  console.log('Light');  // в консоль выведет Light\n}\n```\n\nТеперь попробуем задать время суток: 10 вечера (22:00):\n\n```javascript\nconst time = 22;\nif(time > 8 && time < 19) {  // первое сравнение истинное, второе - ложное (true && false), 22 > 8 И 22 < 19\n  console.log('Light');  // в консоль ничего не выведет\n}\n```\n\nРассмотрим все четыре существующие логические комбинации для оператора `&&`:\n\n```javascript\nconsole.log(true && true);  // true, все значения истинны\nconsole.log(false && true);  // false, одно из значений ложно\nconsole.log(true && false);  // false, одно из значений ложно\nconsole.log(false && false);  // false, все значения ложны\n```\n\nОператор `&&` выполняет следующие действия:\n\n* Вычисляет операнды слева направо.\n* Каждый операнд приводит к типу `boolean`\n* Если встретится значение `false`, останавливается и возвращает исходное значение этого операнда.\n* Если все операнды являются истинными `true`, возвращает последний из них.\n\nВ данном примере, числа 1 и 2, строка 'hello' преобразиться к `true`, а 0 и null – к `false`.\n\n```javascript\nconsole.log(1 && 0);  // сработает, как (true && false) -> false, в консоль выведет 0\nconsole.log(1 && 2);  // 2, возвращает последний true\nconsole.log(false && 2 && '');  // false, возвращает false\nconsole.log(1 && 'hello' && null && 0);  // null, возвращает false\nconsole.log(1 && 'hello' && true && 2);  // 2, выведет последнее значение, так как все аргументы - true\n```\n\nКак и числовые операторы, логические операторы имеют разный приоритет, который влияет на последовательность их выполнения.\n\nЗапомните эту последовательность: первым выполнится оператор (И) `&&`, а затем (ИЛИ) `||`.\n\n```javascript\nconsole.log(1 || 0 && 3);  // 0 && 3 -> 0, затем 1 || 0 -> 1, в консоль выведет 1\n```\n",
    "en": "### OR logical operator (`||`)\n\nThe logical operator `OR` is written as a double vertical slash symbol `||`.\n\nThe `OR` operator is used with two or more values and can be applied to values of any type and return a value of any type as well.\n\nThis operator works as follows: if **at least one** of the arguments is `true` then it returns `true`, otherwise `false`.\n\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/a-and-b.png)\n\nFor example, imagine that we are standing at a bus stop waiting for the No. 1 or No. 5 bus.\n\n```javascript\nconst bus = 5; // bus No 5\nif(bus === 1 || bus === 5) { // if bus is No 1 or No 5\n  console.log('Go'); // Go! because bus is No 5 \n}\n```\n\nNow imagine that we are waiting for the No. 1 or No. 5 or No. 17 bus.\n\n```javascript\nconst bus = 17; // bus No 17\nif(bus === 1 || bus === 5 || bus === 17) { // if bus is No 1 or No 5 or No 17\n  console.log('Go'); // Go! because bus is No 17\n}\n```\n\nConsider all four existing logical combinations for the `||` operator:\n\n```javascript\nconsole.log(true || true); // true, all values are true\nconsole.log(false || true); // true, one of the values is true\nconsole.log(true || false); // true, one of the values is true\nconsole.log(false || false); // false, all values are false\n```\n\nThis operator works as follows:\n\n* Calculates operands from left to right\n* Each operand results in a `boolean` type\n* If `true` is encountered, it stops and returns the original value of that operand.\n* If all operands are false `false`, returns the last of them.\n\nIn this example, the number 1 will convert to `true` and 0 to `false`.\n\n```javascript\nconsole.log(1 || 0); // it will work as (true || false) -> true, the console will print 1\nconsole.log(0 || false || 1); // 1, returns first `true`\nconsole.log(0 || false || 1 || null); // 1, returns first `true`\nconsole.log(0 || false || undefined || null); // null, will print the last value since all arguments `false`\n```\n\nLet's look at another example: let's say the lights in the office are supposed to be on from 8 to 19.\n\n```javascript\nconst time = 12;\nif(time > 8 || time < 19) {  // first condition is true, 12 > 8\n  console.log('Light'); // console will display Light\n}\n```\n\nWhat if the time of day is 10 p.m.?\n\nThe light in the office will still be on because the first condition is true!\n\n```javascript\nconst time = 22;\nif(time > 8 || time < 19) {  // first condition is true, 22 > 8\n  console.log('Light'); // the console will display Light\n}\n```\n\nTo solve this problem, we need the AND operator (`&&`).\n\n### AND (`&&`) logical operator\n\nIf the OR operator (`||`) works until it meets the first `true`, the AND operator(`&&`), by contrast, works until it meets the first `false`.\n\nThe logical operator `AND` is written as two ampersand `&&`.\n\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/gemini-signs.png)\n\nConsider the same office example, the office lights should be on from 8 to 19 (8 a.m - 7 p.m.). This is a 24-hour time format.\n\n```javascript\nconst time = 12;\nif(time > 8 && time < 19) {  //both conditions are true (true && true), 12 > 8 И 12 < 19\n  console.log('Light');  // console will print Light\n}\n```\n\nNow let's try to set the time of day: 10 p.m:\n\n```javascript\nconst time = 22;\nif(time > 8 && time < 19) {  // first condition is true, second condition is false (true && false), 22 > 8 AND 22 < 19\n  console.log('Light');  // nothing will be printed in console\n}\n```\n\nConsider all four existing logical combinations for the `&&` operator:\n\n```javascript\nconsole.log(true && true);  // true, all values are true\nconsole.log(false && true);  // false, one of the values is false\nconsole.log(true && false);  // false, one of the values is false\nconsole.log(false && false);  // false, all values are false\n```\n\nThe `&&` operator does the following:\n\n* Calculates operands from left to right.\n* Each operand results in a `boolean` type\n* If a `false` value is encountered, it stops and returns the original value of that operand.\n* If all operands are `true`, returns the last of them.\n\nIn this example, the numbers 1 and 2, the string 'hello' will transform to `true` and 0 and null will transform to `false`.\n\n```javascript\nconsole.log(1 && 0);  // will work like (true && false) -> false, console will print 0\nconsole.log(1 && 2);  // 2, returns last true\nconsole.log(false && 2 && '');  // false, returns false\nconsole.log(1 && 'hello' && null && 0);  // null, returns false\nconsole.log(1 && 'hello' && true && 2);  // 2, returns the last value, because all arguments - true\n```\n\nLike numeric operators, logical operators have different precedence, which affects the sequence in which they are executed.\n\nRemember this sequence: the (AND) `&&` operator will be executed first, followed by (OR) `||`.\n\n```javascript\nconsole.log(1 || 0 && 3);  // 0 && 3 -> 0, then 1 || 0 -> 1, the console will print 1\n```\n",
    "es": "# Логическое ИЛИ и И. Операторы ||, && language: es"
  },
  "video": {
    "ru": "https://youtu.be/ANpi-v-1x7Y",
    "en": "",
    "es": ""
  }
}