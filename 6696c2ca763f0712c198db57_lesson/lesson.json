{
  "_id": "6696c2ca763f0712c198db57",
  "video": {
    "ru": "https://youtu.be/zBAhgSO_uA8",
    "en": "https://youtu.be/CwwL-jwPHQ0",
    "es": ""
  },
  "content": {
    "ru": "При создании переменных в JavaScript используют 2 ключевых слова: `let` и `const`.\n\nИх применение зависит от того, будет ли меняться значение переменной в ходе выполнения программы.\n\n### Создание переменной с ключевым словом `const`\n\nЕсли значение переменной меняться не будет, предпочтительнее использовать `const`.\n\nПри использовании ключевого слова `const` значение переменной необходимо задавать сразу.\n\n#### Если значение не задано, будет выдана ошибка `SyntaxError`\n\nПроверьте это, запустив каждый из примеров в консоли:\n\n```javascript\nconst number; // SyntaxError, не задано значение переменной\nconst str;          // SyntaxError\nconst isHotWeather; // SyntaxError\nconst line;         // SyntaxError\n```\n\n#### Попытка изменить значение переменной, описанной как  `const`, приведет к ошибке `TypeError`\n\nВыполните в консоли приведенные ниже примеры и убедитесь в этом:\n\n```javascript\nconst number = 12345;\nnumber = 98765; // TypeError, попытка изменить значение с ключевым словом `const`.\n\nconst str = 'How are you doing?';\nstr = 'How are you?'; // TypeError\n```\n\n### Создание переменной с ключевым словом `let`\n\nЕсли значение переменной в процессе выполнения программы будет меняться, необходимо использовать ключевое слово `let`.\n\n`let` позволяет присваивать переменной новое значение.\n\nПри изменении значения переменной слово `let` использовать не нужно.\n\n```javascript\nlet num = 5; // создание переменной с ключевым словом `let`\nconsole.log(num); // 5 - значение переменной\nnum = 10; // изменили значение переменной num\nconsole.log(num); // 10 - новое значение переменной\n```\n\n#### Объявление нескольких переменных в одну строку\n\nДля краткости кода можно объявлять переменные в одну строку. Перечисление переменных происходит через запятую.\n\n```javascript\nlet num = 5, newNum = 15, oldNum = 10; // создали три переменные\nconsole.log(num, newNum, oldNum); // 5, 15, 10 - значения переменных\n```\n\n#### Создание пустой переменной без начального значения\n\nПри использовании ключевого слова `let` можно создать переменную и присвоить ей значение позже.\n\n```javascript\nlet telNumber; // создали переменную\ntelNumber = 15058768956; // присвоили переменной значение\nconsole.log(telNumber);  // 15058768956 - значение переменной\n```\n\n#### Чему равна переменная, если ей не присвоено значение?\n\nОбращение к переменной без значения выдаст `undefined`. Присвоить переменной новое значение можно с помощью оператора\nприсваивания `=`.\n\n```javascript\nlet str; // создали переменную\nconsole.log(str); // undefined, переменная не имеет значения\nstr = 'Hello, QA student!'; // присвоили переменной значение  \nconsole.log(str); // \"Hello, QA student!\" - значение переменной\n```\n\n#### Переопределение значения переменной\n\nЗначение переменной можно переопределить несколько раз. В этом случае переменная будет иметь последнее присвоенное ей\nзначение.\n\n```javascript\nlet line; // создали переменную                  \nline = 'Coding challenge'; // присвоили переменной значение\nline = 100; // изменили значение переменной\nconsole.log(line); // 100, выводится последнее измененное значение\n```\n\nА теперь давайте еще раз повторим основные моменты, которые мы рассмотрели в этом уроке:\n\n#### С помощью ключевого слова let создаются переменные, значения которых можно изменять\n\nЕсли переменная создана с помощью ключевого слова `let`, то ее значение можно переопределить, т.е. присвоить переменной\nновое значение.\nКлючевое слово `let` используется только при создании переменной.\nПри присваивании переменной нового значения ключевое слово `let` использовать не надо.\n\n![](https://course-js-syntax.s3-us-west-1.amazonaws.com/use-const-temperature.jpg)\n\nНапример:\n\n```\nlet num = 5;      // переменной num присвоено значение 5\nconsole.log(num); // в консоль будет выведено 5\nnum = 10;         // переменной num присвоено новое значение 10, в данном случае ключевое слово let не требуется\nconsole.log(num); // в консоль будет выведено 10\n```\n\nДля краткости кода можно объявлять переменные в одну строку, например:\n\n```\nlet num = 5, newNum = 15, oldNum = 10; // переменной num присвоено значение 5, переменной newNum присвоено значение 15, переменной oldNum присвоено значение 10; перечисление переменных происходит через запятую\nconsole.log(num, newNum, oldNum);      // в консоль будет выведено 5, 15 и 10\n```\n\nОбъявление переменных в одну строку не рекомендуется, так как это затрудняет читаемость кода. Объявляйте каждую\nпеременную в отдельной строке.\n\nПеременную можно создать, не присваивая ей значение, например:\n\n```\nlet telNumber;          // задаем переменную telNumber без присваивания ей значения\nconsole.log(telNumber); // в консоль будет выведено undefined\n```\n\nЕсли не присвоить никакого значения, то в переменной по умолчанию будет значение `undefined`.\n\nВ дальнейшем значение переменной можно переписать с помощью оператора присваивания (`=`).\n\n```\nlet telNumber;           // задаем переменную telNumber без присваивания ей значения\ntelNumber = 15058768956; // значение переменной telNumber изменено  \nconsole.log(telNumber);  // в консоль будет выведено 15058768956\n\nlet str;                    // задаем переменную str без присваивания ей значения\nconsole.log(str);           // в консоль будет выведено undefined\nstr = 'Hello, QA student!'; // значение переменной str изменено  \nconsole.log(str);           // в консоль будет выведено \"Hello, QA student!\"\n\nlet line;                   // задаем переменную line без присваивания ей значения\nline = 'Coding challenge';  // значение переменной line изменено  \nline = 100;                 // значение переменной line изменено  \nconsole.log(line);          // в консоль будет выведено 100\n```\n\n##### Переменные, созданные с помощью ключевого слова const, не могут быть изменены\n\nЧтобы объявить константу, т.е. неизменяемую переменную (read only), используют `const` вместо `let`. **Константы нельзя\nизменить**. Попытка изменить константу приведёт к ошибке.\n\nПри создании константы значение переменной присваивается сразу. Например:\n\n```\nconst number = 123456; // задаем переменную number и присваиваем ей значение 123456\nnumber = 987643;       // попытка изменить значение приведет к ошибке \"TypeError\"\n\nconst str = 'How are you doing?'; // задаем переменную str и присваиваем ей значение 'How are you doing?'\nstr = 'How are you?';             // попытка изменить значение приведет к ошибке \"TypeError\"\n\nconst isHotWeather = true; // задаем переменную isHotWeather и присваиваем ей значение true\nisHotWeather = false;      // попытка изменить значение приведет к ошибке \"TypeError\"\n\n```\n\nЕсли при создании константы не определить ее значение, это приведет к ошибке. Например:\n\n```\nconst number;       // попытка создать переменную без присваивания значения приведет к ошибке \"SyntaxError\"\nconst str;          // попытка создать переменную без присваивания значения приведет к ошибке \"SyntaxError\"\nconst isHotWeather; // попытка создать переменную без присваивания значения приведет к ошибке \"SyntaxError\"\nconst line;         // попытка создать переменную без присваивания значения приведет к ошибке \"SyntaxError\"\n```\n\nЕсли вы не планируете изменять значение переменной в программе, используйте `const`. Если значение переменной в\nпрограмме будет меняться – используйте `let`.\n\n![](https://course-js-syntax.s3-us-west-1.amazonaws.com/ispolzui-const.PNG)\n\n\n",
    "en": "JavaScript uses 2 keywords when creating variables: `let` and `const`.\n\nTheir use depends on whether the value of the variable will change during the execution of the program.\n\n### Creating a variable with the `const` keyword\n\nIf the value of the variable will not change, it is preferable to use `const`.\n\nIf the `const` keyword is used, the value of the variable must be set immediately.\n\n#### If the value is not set, an error `SyntaxError` will be thrown\n\nCheck this by running each of the examples in the console:\n\n```javascript\nconst number; // SyntaxError, no variable value was set\nconst str; // SyntaxError\nconst isHotWeather; // SyntaxError\nconst line; // SyntaxError\n```\n\n#### Attempting to change the value of a variable described as `const` will result in a `TypeError` error\n\nRun the examples below in the console and see for yourself:\n\n```javascript\nconst number = 12345;\nnumber = 98765; // TypeError, an attempt to change a value with the `const` keyword.\n\nconst str = 'How are you doing?'\nstr = 'How are you?'; // TypeError\n```\n\n### Creating a variable with the keyword `let`\n\nIf the value of the variable will change during the execution of the program, you must use the keyword `let`.\n\nThe `let` allows you to assign a new value to a variable.\n\nYou do not need to use the word `let` when changing the value of a variable.\n\n```javascript\nlet num = 5; // create a variable with keyword `let`.\nconsole.log(num); // 5 is the value of the variable\nnum = 10; // changed the value of num variable\nconsole.log(num); // 10 is the new value of the variable\n```\n\n#### Declaring multiple variables on one line\n\nTo keep the code short you can declare variables on one line. Variables are enumerated separated by commas.\n\n```javascript\nlet num = 5, newNum = 15, oldNum = 10; // create three variables\nconsole.log(num, newNum, oldNum); // 5, 15, 10 are the values of the variables\n```\n\n#### Creating an empty variable without an initial value\n\nIf you use the `let` keyword you can create a variable and assign a value to it later.\n\n```javascript\nlet telNumber; // create a variable\ntelNumber = 15058768956; // set the variable value\nconsole.log(telNumber); // 15058768956 is the value of the variable\n```\n\n#### What is the value of a variable if no value is assigned to it?\n\nAccessing a variable without a value will return `undefined`. You can assign a new value to a variable by using the\nassignment operator `=`.\n\n```javascript\nlet str; // create a variable\nconsole.log(str); // undefined, the variable has no value\nstr = 'Hello, QA student!'; // set the variable to a value  \nconsole.log(str); // \"Hello, QA student!\" - variable value\n```\n\n#### Redefining a variable value\n\nThe value of a variable can be redefined several times. In this case the variable will have the last value assigned to it\nvalue.\n\n```javascript\nlet line; // create a variable        \nline = 'Coding challenge'; // assign a value to the variable\nline = 100; // we changed the value of the variable\nconsole.log(line); // 100, the last modified value is output\n```\n\nNow let's go over again the main points we've covered in this lesson:\n\n#### The let keyword creates variables whose values can be changed\n\nIf a variable is created with the `let` keyword, its value can be overridden, i.e. a new value can be assigned to the variable\nA new value.\nThe `let` keyword is only used when creating a variable.\nWhen assigning a new value to a variable, the `let` keyword need not be used.\n\n![](https://course-js-syntax.s3-us-west-1.amazonaws.com/use-const-temperature.jpg)\n\nFor example:\n\n```\nlet num = 5; // the num variable is assigned the value 5\nconsole.log(num); // 5 will be output to the console\nnum = 10; // the num variable is assigned the new value 10, the let keyword is not needed in this case\nconsole.log(num); // the console will print 10\n```\n\nTo keep the code short, you can declare variables on one line, for example:\n\n```\nlet num = 5, newNum = 15, oldNum = 10; // the num variable is assigned the value 5, the newNum variable is assigned the value 15, the oldNum variable is assigned the value 10; the variables are listed separated by commas\nconsole.log(num, newNum, oldNum); // the console will print 5, 15, and 10\n```\n\nDeclaring variables on one line is not recommended because it makes the code harder to read. Declare each\nvariables on a separate line.\n\nA variable can be created without assigning a value to it, for example:\n\n```\nlet telNumber; // set telNumber variable without assigning a value to it\nconsole.log(telNumber); // undefined will be thrown in the console\n```\n\nIf no value is assigned, the variable defaults to `undefined`.\n\nThe value of the variable can then be rewritten using the assignment operator (`=`).\n\n```\nlet telNumber; // set variable telNumber without assigning a value to it\ntelNumber = 150558768956; // the telNumber variable value is changed  \nconsole.log(telNumber); // the console will print 15058768956\n\nlet str; // set variable str without assigning a value to it\nconsole.log(str); // the console will print undefined\nstr = 'Hello, QA student!'; // the str variable value is changed  \nconsole.log(str); // console will print \"Hello, QA student!\"\n\nlet line; // set the line variable without assigning a value to it\nline = 'Coding challenge'; // the value of the line variable is changed  \nline = 100; // the value of line has been changed  \nconsole.log(line); // console will print 100\n```\n\n##### Variables created with the const keyword cannot be changed\n\nTo declare a constant, i.e. an immutable variable (read only), use `const` instead of `let`. **Constants cannot be\nchange**. Attempting to change a constant will result in an error.\n\nWhen you create a constant, the value of the variable is assigned immediately. For example:\n\n```\nconst number = 123456; // set variable number and assign value 123456 to it\nnumber = 987643; // an attempt to change the value will cause a \"TypeError\" error\n\nconst str = 'How are you doing?'; // set variable str and assign value 'How are you doing?'\nstr = 'How are you?'; // an attempt to change the value will cause a \"TypeError\" error\n\nconstHotWeather = true; // set the isHotWeather variable and assign the value true to it\nisHotWeather = false; // an attempt to change the value will cause a \"TypeError\" error\n\n```\n\nIf you do not define the value of a constant when you create it, it will cause an error. For example:\n\n```\nconst number; // an attempt to create a variable without assigning a value will result in a \"SyntaxError\" error\nconst str; // an attempt to create a variable without assigning a value will result in a \"SyntaxError\" error\nconst isHotWeather; // an attempt to create a variable without assigning a value will result in a \"SyntaxError\" error\nconst line; // an attempt to create a variable without assigning a value will result in a \"SyntaxError\" error.\n```\n\nIf you do not plan to change the value of a variable in a program, use `const`. If the value of the variable in the\nprogram will change, use `let`.\n\n![](https://course-js-syntax.s3-us-west-1.amazonaws.com/ispolzui-const.PNG)\n\n\n",
    "es": "\n"
  }
}