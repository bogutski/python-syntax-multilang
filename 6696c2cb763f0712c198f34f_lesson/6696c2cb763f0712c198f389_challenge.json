{
  "_id": "6696c2cb763f0712c198f389",
  "name": {
    "en": "/*",
    "ru": "Сокращение массива до заданной длины"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `trimArrayToSize`, которая принимает массив и целое число `n` в качестве аргументов.\n\nФункция должна удалять элементы с конца массива с использованием метода `pop()`, пока его длина не станет равной `n`.\n\n* Если `n` больше текущей длины массива или равно ей, функция должна вернуть исходный массив без изменений.\n* Если `n` меньше нуля, функция также должна вернуть исходный массив без изменений.\n\n\nПример запуска функции:\n```javascript\ntrimArrayToSize(['single'], 2);           // [ 'single' ]\ntrimArrayToSize([1, 2, 3], -1);           // [ 1, 2, 3 ]\ntrimArrayToSize([1, 2, 3, 4, 5], 3);      // [ 1, 2, 3 ]\ntrimArrayToSize(['a', 'b', 'c', 'd'], 4); // [ 'a', 'b', 'c', 'd' ]\ntrimArrayToSize([true, false, true], 0);  // []\n```"
  },
  "initialSolution": "function trimArrayToSize(){\n\n}",
  "completedSolution": "function trimArrayToSize(arr, n) {\n  if(n > arr.length || n < 0) return arr\n  const numOfIteration = arr.length - n\n\n  for(let i = 0; i < numOfIteration; i++){\n    arr.pop()\n  }\n\n  return arr\n}",
  "openTest": "it('Created function trimArrayToSize', () => {\n  expect(trimArrayToSize).to.be.a('function');\n});\n\nit(\"trimArrayToSize([1, 2, 3, 4, 5], 3) should return [1, 2, 3]\", () => {\n  expect(trimArrayToSize([1, 2, 3, 4, 5], 3)).to.deep.equal([1, 2, 3]);\n});\n\nit(\"trimArrayToSize(['a', 'b', 'c', 'd'], 4) should return ['a', 'b', 'c', 'd']\", () => {\n  expect(trimArrayToSize(['a', 'b', 'c', 'd'], 4)).to.deep.equal(['a', 'b', 'c', 'd']);\n});\n\nit(\"trimArrayToSize([true, false, true], 0) should return []\", () => {\n  expect(trimArrayToSize([true, false, true], 0)).to.deep.equal([]);\n});\n\nit(\"trimArrayToSize([], 2) should return [] for an initially empty array\", () => {\n  expect(trimArrayToSize([], 2)).to.deep.equal([]);\n});\n\nit(\"trimArrayToSize([1, 2, 3], -1) should return [1, 2, 3] for negative size\", () => {\n  expect(trimArrayToSize([1, 2, 3], -1)).to.deep.equal([1, 2, 3]);\n});\n\nit(\"should modify the original array\", () => {\n  let originalArray = [1, 2, 3, 4];\n  trimArrayToSize(originalArray, 2);\n  expect(originalArray).to.deep.equal([1, 2]);\n});\n\nit(\"trimArrayToSize(['x', 'y', 'z'], 3) should return the unmodified array if size equals current length\", () => {\n  expect(trimArrayToSize(['x', 'y', 'z'], 3)).to.deep.equal(['x', 'y', 'z']);\n});\n\nit(\"trimArrayToSize([10, 20, 30, 40, 50], 5) should return the unmodified array if size equals the array's length\", () => {\n  expect(trimArrayToSize([10, 20, 30, 40, 50], 5)).to.deep.equal([10, 20, 30, 40, 50]);\n});\n\nit(\"trimArrayToSize(['a', 'b'], 1) should return ['a']\", () => {\n  expect(trimArrayToSize(['a', 'b'], 1)).to.deep.equal(['a']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}