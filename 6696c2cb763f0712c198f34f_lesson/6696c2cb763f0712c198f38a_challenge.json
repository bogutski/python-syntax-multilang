{
  "_id": "6696c2cb763f0712c198f38a",
  "name": {
    "en": "/*",
    "ru": "Удаление элементов до баланса сумм"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `balanceSums`, которая принимает массив чисел в качестве аргумента.\n\nФункция должна последовательно удалять элементы с конца массива с использованием метода `pop()`, пока сумма удалённых элементов не станет равной или большей сумме оставшихся элементов в массиве.\n\nФункция должна возвращать изменённый массив, в котором остаются элементы, не превышающие суммарно сумму удалённых элементов.\n\n\nПример запуска функции:\n```javascript\nbalanceSums([1, 2, 3, 4, 5, 6]); // [ 1, 2, 3, 4 ] - так как сумма удалённых (6+5=11) >= сумма оставшихся (1+2+3+4=10)\nbalanceSums([5, 3, 2, 7, 8]);  // [ 5, 3, 2 ] - так как сумма удалённых (8+7=15) >= сумма оставшихся (5+3+2=10)\nbalanceSums([10, 5, 3, 2]);  // [ 10 ] - так как сумма удалённых (2+3+5=10) >= сумма оставшихся (10)\nbalanceSums([10, 10]);     // [ 10 ]\nbalanceSums([5]);        // []\nbalanceSums([]);       // []\n```"
  },
  "initialSolution": "function balanceSums(){\n\n}",
  "completedSolution": "function balanceSums(arr) {\n  let originalSum = arr.reduce((acc, val) => acc + val, 0)\n  let deletedSum = 0\n\n  while(originalSum > deletedSum && arr.length > 0) {\n    let int = arr.pop()\n    deletedSum += int\n    originalSum -= int\n  }\n\n  return arr\n}",
  "openTest": "it('Created function balanceSums', () => {\n  expect(balanceSums).to.be.a('function');\n});\n\nit(\"balanceSums([5, 3, 2, 7, 8]) should return [5, 3, 2]\", () => {\n  expect(balanceSums([5, 3, 2, 7, 8])).to.deep.equal([5, 3, 2]);\n});\n\nit(\"balanceSums([1, 2, 3, 4, 5, 6]) should return [1, 2, 3, 4]\", () => {\n  expect(balanceSums([1, 2, 3, 4, 5, 6])).to.deep.equal([1, 2, 3, 4]);\n});\n\nit(\"balanceSums([10]) should return []\", () => {\n  expect(balanceSums([10])).to.deep.equal([]);\n});\n\nit(\"balanceSums([]) should return [] for an initially empty array\", () => {\n  expect(balanceSums([])).to.deep.equal([]);\n});\n\nit(\"balanceSums([20, 15, 5, 10]) should return [20]\", () => {\n  expect(balanceSums([20, 15, 5, 10])).to.deep.equal([20]);\n});\n\nit(\"should modify the original array\", () => {\n  let originalArray = [1, 2, 3, 4];\n  balanceSums(originalArray);\n  expect(originalArray.length).to.be.below(4); // Checking if the array has been modified\n});\n\nit(\"balanceSums([2, 2, 2, 2]) should return [2, 2]\", () => {\n  expect(balanceSums([2, 2, 2, 2])).to.deep.equal([2, 2]);\n});\n\nit(\"balanceSums([180, 698, 14, 999, 103, 782, 167, 500]) should return [180, 698, 14]\", () => {\n  expect(balanceSums([180, 698, 14, 999, 103, 782, 167, 500])).to.deep.equal([180, 698, 14]);\n});\n\nit(\"balanceSums([100, 0, 0, 50, 50, 0]) should return [100, 0, 0]\", () => {\n  expect(balanceSums([100, 0, 0, 50, 50, 0])).to.deep.equal([100, 0, 0]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}