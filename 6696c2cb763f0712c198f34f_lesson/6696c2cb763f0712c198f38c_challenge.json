{
  "_id": "6696c2cb763f0712c198f38c",
  "name": {
    "en": "/*",
    "ru": "Удаление до первого четного числа"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `clearUntilEven`, которая принимает массив чисел.\n\nФункция должна последовательно удалять элементы с конца массива, используя метод `pop()`, пока не удалит первое четное число (включая это число).\n\nЕсли в массиве нет четных чисел, функция должна удалить все элементы.\n\nФункция должна возвращать измененный массив. Если массив изначально пуст, вернуть пустой массив.\n\n\nПример запуска функции:\n```javascript\nclearUntilEven([1, 3, 5, 7, 4, 9]); // [1, 3, 5, 7], т.к. 4 — первое четное, удаляем его и все, что после\nclearUntilEven([2, 3, 5, 7]); // [], т.к. 2 — первое (и единственное) четное число, удаляем его и все остальные\nclearUntilEven([1, 3, 5, 7]); // [], т.к. нет четных чисел\nclearUntilEven([]); // []\n```"
  },
  "initialSolution": "function clearUntilEven(){\n\n}",
  "completedSolution": "function clearUntilEven(arr) {\n  let currEl = 1\n\n  while(currEl % 2 !== 0 && arr.length  !== 0)(\n      currEl = arr.pop()\n  )\n\n  return arr\n}",
  "openTest": "it('Created function clearUntilEven', () => {\n  expect(clearUntilEven).to.be.a('function');\n});\n\nit('Function clearUntilEven includes methods pop() and push()', () => {\n  const result = clearUntilEven.toString()\n  expect(result).to.include('.pop()')\n});\n\nit(\"clearUntilEven([1, 3, 5, 7, 4, 9]) should return [1, 3, 5, 7]\", () => {\n  expect(clearUntilEven([1, 3, 5, 7, 4, 9])).to.deep.equal([1, 3, 5, 7]);\n});\n\nit(\"clearUntilEven([2, 3, 5, 7]) should return []\", () => {\n  expect(clearUntilEven([2, 3, 5, 7])).to.deep.equal([]);\n});\n\nit(\"clearUntilEven([1, 3, 5, 7]) should return [] because there are no even numbers\", () => {\n  expect(clearUntilEven([1, 3, 5, 7])).to.deep.equal([]);\n});\n\nit(\"clearUntilEven([]) should return an empty array for an initially empty array\", () => {\n  expect(clearUntilEven([])).to.deep.equal([]);\n});\n\nit(\"should modify the original array\", () => {\n  let originalArray = [5, 7, 9, 2, 8];\n  clearUntilEven(originalArray);\n  expect(originalArray).to.deep.equal([5, 7, 9, 2]);\n});\n\nit(\"clearUntilEven([1, 2, 3, 4, 5, 6]) should return [1, 2, 3, 4, 5]\", () => {\n  expect(clearUntilEven([1, 2, 3, 4, 5, 6])).to.deep.equal([1, 2, 3, 4, 5]);\n});\n\nit(\"clearUntilEven([0, 1, 3, 5]) should return [] because 0 is even\", () => {\n  expect(clearUntilEven([0, 1, 3, 5])).to.deep.equal([]);\n});\n\nit(\"clearUntilEven([11, 22, 33, 44, 55]) should return [11, 22, 33]\", () => {\n  expect(clearUntilEven([11, 22, 33, 44, 55])).to.deep.equal([11, 22, 33]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}