{
  "_id": "6696c2ca763f0712c198e03d",
  "name": {
    "en": "Even is zero, odd is ten",
    "ru": "Четное – ноль, нечетное – десять"
  },
  "instruction": {
    "en": "Write a function `oddEvenTen` that takes one parameter `num` and returns `0` if the number is even, and `10` if the number is odd.\n\nYou need to use the operator `%` (remainder of division)\n\nYou cannot use the conditional operator `if` or the ternary operator `? :` and you cannot use `switch`.\n\nHint: Use the `%` operator (remainder of division) and the `*` operator (multiplication).\n\nIf you multiply any number by `0` the result will be `0`, and if you multiply any number by `1` the result will be equal to the number itself.",
    "ru": "Напиши функцию `oddEvenTen`, которая принимает один параметр `num` и возвращает `0` если число четное, и `10` если число нечетное.\n\nВам нужно использовать оператор `%` (остаток от деления)\n\nНельзя использовать условный оператор `if` или тернарный оператор `? :`, а также нельзя использовать `switch`.\n\nПодсказка: Используйте оператор `%` (остаток от деления) и оператор `*` (умножение).\n\nПри умножении любого числа на `0` результат будет `0`, а при умножении любого числа на `1` результат будет равен самому числу."
  },
  "initialSolution": "funk odd",
  "completedSolution": "function oddEvenTen(num){\n  return num % 2 * 10;\n}",
  "openTest": "it('Created function oddEvenTen', () => {\n  expect(oddEvenTen).to.be.a('function');\n});\n\nit('oddEvenTen(2) should return 0', () => {\n  expect(oddEvenTen(2)).to.equal(0);\n} );\n\nit('oddEvenTen(3) should return 10', () => {\n  expect(oddEvenTen(3)).to.equal(10);\n});\n\nit('oddEvenTen(4) should return 0', () => {\n  expect(oddEvenTen(4)).to.equal(0);\n});\n\nit('Function oddEvenTen has one parameter num', () => {\n  // function to string and then to array of arguments\n  const args = oddEvenTen.toString().match(/\\(([^)]*)\\)/)[1].split(',').map(arg => arg.trim());\n  expect(args).to.be.eql(['num']);\n});\n\n// function body should not contain if statement\nit('Function oddEvenTen should not contain if statement', () => {\n  expect(oddEvenTen.toString().includes('if')).to.be.false;\n});\n\n// function body should not contain ternary operator\nit('Function oddEvenTen should not contain ternary operator', () => {\n  expect(oddEvenTen.toString().includes('?')).to.be.false;\n  expect(oddEvenTen.toString().includes(':')).to.be.false;\n});\n\n// function body should not contain ternary operator\nit('Function oddEvenTen should not contain switch', () => {\n  expect(oddEvenTen.toString().includes('switch')).to.be.false;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}