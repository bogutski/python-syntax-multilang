{
  "_id": "6696c2ca763f0712c198ee09",
  "name": {
    "en": "",
    "ru": "Исправьте текст, чтобы все предложения заканчивались точкой"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `replacePunctuation`, которая принимает строку.\nСтрока - произвольный текст, составленный из одного или нескольких предложений, разделенных разными знаками препинания.\nФункция должна вернуть новую строку, в которой все `!` и `?` заменены на точки.\n\nПримеры запуска функции:\n```javascript\nreplacePunctuation('Hello! How are you?'); // 'Hello. How are you.'\nreplacePunctuation('Hi! What is your name again? Is it Alice? I am so sorry. How could I forget?'); // 'Hi. What is your name again. Is it Alice. I am so sorry. How could I forget.'\nreplacePunctuation('Hello! My name is Alice. I am 20 years old. I am a student.'); // 'Hello. My name is Alice. I am 20 years old. I am a student.'\nreplacePunctuation(''); // ''"
  },
  "initialSolution": "function replacePunctuation",
  "completedSolution": "function replacePunctuation(text) {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '!' || text[i] === '?') {\n      result += '.';\n    } else {\n      result += text[i];\n    }\n  }\n  return result;\n}",
  "openTest": "it('Created function replacePunctuation', () => {\n  expect(replacePunctuation).to.be.a('function');\n});\n\nit('Function replacePunctuation should not contain replace()', () => {\n  expect(replacePunctuation.toString()).to.not.include('replace(');\n});\n\nit('Function replacePunctuation should not contain replaceAll()', () => {\n  expect(replacePunctuation.toString()).to.not.include('replaceAll(');\n});\n\nit('replacePunctuation(\"Hello! How are you?\") should return \"Hello. How are you.\"', () => {\n  expect(replacePunctuation('Hello! How are you?')).to.equal('Hello. How are you.');\n});\n\nit('replacePunctuation(\"Hi! What is your name again? Is it John? I am so sorry. How could I forget?\") should return \"Hi. What is your name again. Is it John. I am so sorry. How could I forget.\"', () => {\n  expect(replacePunctuation('Hi! What is your name again? Is it John? I am so sorry. How could I forget?')).to.equal('Hi. What is your name again. Is it John. I am so sorry. How could I forget.');\n});\n\nit('replacePunctuation(\"Hello! My name is John Smith. I am 23 years old. I am a student.\") should return \"Hello. My name is John Smith. I am 23 years old. I am a student.\"', () => {\n  expect(replacePunctuation('Hello! My name is John Smith. I am 23 years old. I am a student.')).to.equal('Hello. My name is John Smith. I am 23 years old. I am a student.');\n});\n\nit('replacePunctuation(\"Hey!!! What is going on? My dear friend, I am so glad to see you!.\") should return \"Hey... What is going on. My dear friend, I am so glad to see you..\"', () => {\n  expect(replacePunctuation('Hey!!! What is going on? My dear friend, I am so glad to see you!.')).to.equal('Hey... What is going on. My dear friend, I am so glad to see you..');\n});\nit('replacePunctuation(\"\") should return \"\"', () => {\n  expect(replacePunctuation('')).to.equal('');\n});\n\nit('replacePunctuation(\"?!\") should return \"..\"', () => {\n  expect(replacePunctuation('?!')).to.equal('..');\n});\n\nit('replacePunctuation(\"Hello!?\") should return \"Hello..\"', () => {\n  expect(replacePunctuation('Hello!?')).to.equal('Hello..');\n});\n\nit('replacePunctuation(\"!\") should return \".\"', () => {\n  expect(replacePunctuation('!')).to.equal('.');\n});\n\nit('replacePunctuation(\".\") should return \".\"', () => {\n  expect(replacePunctuation('.')).to.equal('.');\n});\n\nit('replacePunctuation(\" ? \") should return \" . \"', () => {\n  expect(replacePunctuation(' ? ')).to.equal(' . ');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}