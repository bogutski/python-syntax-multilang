{
  "_id": "6696c2ca763f0712c198ee0d",
  "name": {
    "en": "",
    "ru": "Расшифровать строку с закодированными цветами радуги"
  },
  "instruction": {
    "en": "",
    "ru": "Как мы все знаем, радуга состоит из 7 цветов. Каждый цвет имеет свой номер:\n1 - красный - red\n2 - оранжевый - orange\n3 - желтый - yellow\n4 - зеленый - green\n5 - голубой - blue\n6 - синий - indigo\n7 - фиолетовый  - violet\n\nФункция `colorDecoder` принимает строку, в которой закодированы цвета радуги - вместо названий цветов в строке используются их коды (порядковые номера).\nНужно расшифровать строку, заменив номера цветов на их названия, и вернуть получившуюся строку.\nДля решения задачи используйте массив `rainbow`, который уже создан в коде.\nНе забывайте, что нумерация в массиве начинается с 0, а порядковые номера цветов - с 1.\n\nПримеры использования функции:\ncolorDecoder('1-2-3') // 'red-orange-yellow'\ncolorDecoder('Grass is 4. Skies are 5.') // 'Grass is green. Skies are blue.'\ncolorDecoder('1, 2, 3, 4, 5, 6 and 7 are the colors of the rainbow') // 'red, orange, yellow, green, blue, indigo and violet are the colors of the rainbow'\ncolorDecoder('1') // 'red'\ncolorDecoder('') // ''"
  },
  "initialSolution": "function colorDecoder(str) {\n  const rainbow = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n  let result = '';\n  // your code here\n  return result;\n}",
  "completedSolution": "function colorDecoder(str) {\n  const rainbow = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n  let result = '';\n\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '1' && str[i] <= '7') {\n      const index = +str[i] - 1;\n      result += rainbow[index];\n    } else {\n      result += str[i];\n    }\n  }\n\n  return result;\n}",
  "openTest": "it('Created function colorDecoder', () => {\n  expect(colorDecoder).to.be.a('function');\n});\n\nit('colorDecoder(\"1-2-3\") should return \"red-orange-yellow\"', () => {\n  expect(colorDecoder('1-2-3')).to.equal('red-orange-yellow');\n});\n\nit('colorDecoder(\"Grass is 4. Skies are 5.\") should return \"Grass is green. Skies are blue.\"', () => {\n  expect(colorDecoder('Grass is 4. Skies are 5.')).to.equal('Grass is green. Skies are blue.');\n});\n\nit('colorDecoder(\"1, 2, 3, 4, 5, 6 and 7 are the colors of the rainbow\") should return \"red, orange, yellow, green, blue, indigo and violet are the colors of the rainbow\"', () => {\n  expect(colorDecoder('1, 2, 3, 4, 5, 6 and 7 are the colors of the rainbow')).to.equal('red, orange, yellow, green, blue, indigo and violet are the colors of the rainbow');\n});\n\nit('colorDecoder(\"6\") should return \"indigo\"', () => {\n  expect(colorDecoder('6')).to.equal('indigo');\n});\n\nit('colorDecoder(\"7\") should return \"violet\"', () => {\n  expect(colorDecoder('7')).to.equal('violet');\n});\n\nit('colorDecoder(\"\") should return \"\"', () => {\n  expect(colorDecoder('')).to.equal('');\n});\n\nit('colorDecoder(\"1-2-3-4-5-6-7\") should return \"red-orange-yellow-green-blue-indigo-violet\"', () => {\n  expect(colorDecoder('1-2-3-4-5-6-7')).to.equal('red-orange-yellow-green-blue-indigo-violet');\n});\n\nit('colorDecoder(\"1:1 2:2 3/3,4-8-9\") should return \"red:red orange:orange yellow/yellow,green-8-9\"', () => {\n  expect(colorDecoder('1:1 2:2 3/3,4-8-9')).to.equal('red:red orange:orange yellow/yellow,green-8-9');\n});\n\nit('colorDecoder(\"mix 3 and 5 to get 4\") should return \"mix yellow and blue to get green\"', () => {\n  expect(colorDecoder('mix 3 and 5 to get 4')).to.equal('mix yellow and blue to get green');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}