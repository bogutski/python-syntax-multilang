{
  "_id": "6696c2ca763f0712c198ee0a",
  "name": {
    "en": "",
    "ru": "Отформатируйте предложение"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `formatSentence` принимает строку, в которой записано одно предложение.\nЭто предложение нужно отформатировать и вернуть полученный результат.\n\nНужно убедиться, что первое слово в предложении начинается с большой буквы, и предложение оканчивается точкой или другим знаком препинания.\n\nДопустимые знаки препинания: точка, восклицательный знак, вопросительный знак.\n\nЕсли предложение записано с ошибками, то нужно исправить предложение и вернуть правильный вариант.\n\nЕсли первая буква в предложении не является заглавной, то нужно заменить ее на заглавную.\n\nЕсли в конце предложения нет точки или другого допустимого знака препинания, то нужно добавить точку.\n\nЕсли предложение записано правильно или содержит пустую строку, то нужно вернуть его без изменений.\n\nПримеры запуска функции:\n```javascript\nformatSentence('hello world'); // 'Hello world.'\nformatSentence('The rain has stopped and the sun is out.'); // 'The rain has stopped and the sun is out.'\nformatSentence(''); // ''\n```\n\nИсправьте ошибки в коде функции `formatSentence` так, чтобы она работала правильно."
  },
  "initialSolution": "function formatSentence(sentence) {\n  if (sentence === '!') return ''; // empty string\n\n  const firstLetter = sentence[0].toLowerCase(); //capitalize first letter\n  const lastLetter = sentence[sentence.length - 1]; //get last letter\n  const newSentence = sentenc; //we assume that sentence is correct\n\n  if (firstLetter !== sentence[0]) { // check if first letter is lowercase\n    newSentence = firstLetter; // rewrite newSentence with capitalized first letter\n    for (let i=1; i<sentence.length; i++) { //copy the rest of the sentence as it is\n      newSentence += sentence;\n    }\n  }\n\n  if (lastLetter !== '.' &&  lastLetter !== '!' && lastLetter !== '?' ) { // check the last letter\n    newSentence = newSentence + '/';\n  }\n\n  return new;\n}",
  "completedSolution": "function formatSentence(sentence) {\n  if (sentence === '') return ''; // empty string\n\n  const firstLetter = sentence[0].toUpperCase(); //capitalize first letter\n  const lastLetter = sentence[sentence.length - 1]; //get last letter\n  let newSentence = sentence; //we assume that sentence is correct\n\n  if (firstLetter !== sentence[0]) { // check if first letter is lowercase\n    newSentence = firstLetter; // rewrite newSentence with capitalized first letter\n    for (let i=1; i<sentence.length; i++) { //copy the rest of the sentence as it is\n      newSentence += sentence[i];\n    }\n  }\n\n  if (lastLetter !== '.' &&  lastLetter !== '!' && lastLetter !== '?' ) { // check the last letter\n    newSentence = newSentence + '.';\n  }\n\n  return newSentence;\n}",
  "openTest": "it('Created function formatSentence', () => {\n  expect(formatSentence).to.be.a('function');\n});\n\nit('Function formatSentence should not include split() method', () => {\n  expect(formatSentence.toString()).to.not.include('.split(');\n});\n\nit('Function formatSentence should not include replace() method', () => {\n  expect(formatSentence.toString()).to.not.include('.replace(');\n});\n\nit('Function formatSentence should not include slice() method', () => {\n  expect(formatSentence.toString()).to.not.include('.slice(');\n});\n\nit('Function formatSentence should not include substring() method', () => {\n  expect(formatSentence.toString()).to.not.include('.substring(');\n});\n\nit('Function formatSentence should not include substr() method', () => {\n  expect(formatSentence.toString()).to.not.include('.substr(');\n});\n\nit('formatSentence(\"hello world\") should return \"Hello world.\"', () => {\n  expect(formatSentence('hello world')).to.equal('Hello world.');\n});\n\nit('formatSentence(\"hello world!\") should return \"Hello world!\"', () => {\n  expect(formatSentence('hello world!')).to.equal('Hello world!');\n});\n\nit('formatSentence(\"What is up?\") should return \"What is up?\"', () => {\n  expect(formatSentence('What is up?')).to.equal('What is up?');\n});\n\nit('formatSentence(\"what is your name?\") should return \"What is your name?\"', () => {\n  expect(formatSentence('what is your name?')).to.equal('What is your name?');\n});\n\nit('formatSentence(\"i\") should return \"I.\"', () => {\n  expect(formatSentence('i')).to.equal('I.');\n});\n\nit('formatSentence(\".\") should return \".\"', () => {\n  expect(formatSentence('.')).to.equal('.');\n});\n\nit('formatSentence(\"The rain has stopped and the sun is out.\") should return \"The rain has stopped and the sun is out.\"', () => {\n  expect(formatSentence('The rain has stopped and the sun is out.')).to.equal('The rain has stopped and the sun is out.');\n});\n\nit('formatSentence(\"\") should return \"\"', () => {\n  expect(formatSentence('')).to.equal('');\n});\n\nit('formatSentence(\"train will arrive at 12:00\") should return \"Train will arrive at 12:00.\"', () => {\n  expect(formatSentence('train will arrive at 12:00')).to.equal('Train will arrive at 12:00.');\n});\n\nit('formatSentence(\"tom and his friend went to the cinema.\") should return \"Tom and his friend went to the cinema.\"', () => {\n  expect(formatSentence('tom and his friend went to the cinema.')).to.equal('Tom and his friend went to the cinema.');\n});\n\nit('formatSentence(\"i am a student.\") should return \"I am a student.\"', () => {\n  expect(formatSentence('i am a student.')).to.equal('I am a student.');\n});\n\nit('formatSentence(\"i am a student\") should return \"I am a student.\"', () => {\n  expect(formatSentence('i am a student')).to.equal('I am a student.');\n});\n\nit('formatSentence(\"!\") should return \"!\"', () => {\n  expect(formatSentence('!')).to.equal('!');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}