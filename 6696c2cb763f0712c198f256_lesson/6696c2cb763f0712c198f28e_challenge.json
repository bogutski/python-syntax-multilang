{
  "_id": "6696c2cb763f0712c198f28e",
  "name": {
    "en": "Checking types in an array of arrays",
    "ru": "Проверка типов в массиве массивов"
  },
  "instruction": {
    "en": "Write a function `areAllTypesTheSame` that takes an array of arrays.\n\nThe function should check if all elements of all sub-arrays have the same data type.\n\nIf one of the sub-arrays is empty, the function should return the string `One or more sub-arrays are empty`.\n\nIf the outer array is empty, the function should return the string `Array is empty`.\n\n\nExamples of function calls:\n```javascript\nareAllTypesTheSame([ [1, 2], [3, 4], [5, 6] ]);              // true\nareAllTypesTheSame([ [1, 2], [3, 4], [5, '6'] ]);            // false\nareAllTypesTheSame([ ['abc'], ['test'], ['a', undefined] ]); // false\nareAllTypesTheSame([ [], ['test'], ['a', 'b'], ['str'] ]);   // 'One or more sub-arrays are empty'\nareAllTypesTheSame([ ]);                                     // 'Array is empty'\n```",
    "ru": "Напишите функцию `areAllTypesTheSame`, которая принимает массив массивов.\n\nФункция должна проверить, что все элементы всех под-массивов имеют одинаковый тип данных.\n\nЕсли один из подмассивов пустой, то функция должна вернуть строку `One or more sub-arrays are empty`.\n\nЕсли внешний массив пустой, то функция должна вернуть строку `Array is empty`.\n\n\nПримеры запуска функции:\n```javascript\nareAllTypesTheSame([ [1, 2], [3, 4], [5, 6] ]);              // true\nareAllTypesTheSame([ [1, 2], [3, 4], [5, '6'] ]);            // false\nareAllTypesTheSame([ ['abc'], ['test'], ['a', undefined] ]); // false\nareAllTypesTheSame([ [], ['test'], ['a', 'b'], ['str'] ]);   // 'One or more sub-arrays are empty'\nareAllTypesTheSame([ ]);                                     // 'Array is empty'\n```"
  },
  "initialSolution": "function areAllTypesTheSame(arr)",
  "completedSolution": "function areAllTypesTheSame(arr){\n  if(!arr.length) return 'Array is empty';\n  let firstType = '';\n\n  for(let i = 0; i < arr.length; i++){\n    if(!arr[i].length) return 'One or more sub-arrays are empty';\n    for(let j = 0; j < arr[i].length; j++){\n      if(firstType === '' && arr[i].length) firstType = typeof arr[i][j];\n      else if(firstType !== typeof arr[i][j]) return false;\n    }\n  }\n\n  return true;\n}",
  "openTest": "it('Created function areAllTypesTheSame', () => {\n  expect(areAllTypesTheSame).to.be.a('function');\n});\n\nit(\"areAllTypesTheSame([ [0, 1, 2], [3, NaN, 5], [6, 7, 8, 9] ]) should return true\", () => {\n  expect(areAllTypesTheSame([ [0, 1, 2], [3, NaN, 5], [6, 7, 8, 9] ])).to.be.true;\n});\n\nit(\"areAllTypesTheSame([ ['ab'], ['a', 'b', 'c'], ['test', 'string'] ]) should return true\", () => {\n  expect(areAllTypesTheSame([ ['ab'], ['a', 'b', 'c'], ['test', 'string'] ])).to.be.true;\n});\n\nit(\"areAllTypesTheSame([ [true, false], [true, 5 > 10], [false] ]) should return true\", () => {\n  expect(areAllTypesTheSame([ [true, false], [true, 5 > 10], [false] ])).to.be.true;\n});\n\nit(\"areAllTypesTheSame([ [undefined], [undefined], [undefined] ]) should return true\", () => {\n  expect(areAllTypesTheSame([ [undefined], [undefined], [undefined] ])).to.be.true;\n});\n\nit(\"areAllTypesTheSame([ [5], [10], [100], [0], [9999], ['123'] ]) should return false\", () => {\n  expect(areAllTypesTheSame([ [5], [10], [100], [0], [9999], ['123'] ])).to.be.false;\n});\n\nit(\"areAllTypesTheSame([ [], [], [null], [null] ]) should return 'One or more sub-arrays are empty'\", () => {\n  expect(areAllTypesTheSame([ [], [], [null], [null] ])).to.be.equal('One or more sub-arrays are empty');\n});\n\nit(\"areAllTypesTheSame([]) should return 'Array is empty'\", () => {\n  expect(areAllTypesTheSame([])).to.be.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}