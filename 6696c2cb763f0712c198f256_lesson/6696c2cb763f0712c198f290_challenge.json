{
  "_id": "6696c2cb763f0712c198f290",
  "name": {
    "en": "Checking types in each subarray",
    "ru": "Проверка типов в каждом подмассиве"
  },
  "instruction": {
    "en": "Fix the `typeOfEachInnerArray` function, which takes an array of arrays.\n\nThe function should return an array of subarrays with boolean values, where each subarray corresponds to a nested array and indicates whether it contains elements of the same type.\n\nIf the outer array is empty, the function should return the string 'Array is empty'.\n\nFor example: `[ [1, 2], ['a', 'b'], [123, 'abc'] ]` should return `[ [true], [true], [false] ]`.\n\nBecause the first and second subarrays contain elements of the same type, while the third subarray contains elements of different types.\n\nThere are three errors in the function before the loop that need to be fixed.\n\nUnderstand the code and rewrite it yourself.\n\n\nFunction execution examples:\n```javascript\ntypeOfEachInnerArray([ ['1', '2'], [3, 5], [true, false] ]);                      // [[true], [true], [true]]\ntypeOfEachInnerArray([ [5, 'true'], ['test', 7], [null, 'null'] ]);               // [[false], [false], [false]]\ntypeOfEachInnerArray([ ['true', 'false'], [true, 5 > 10], [1, 2, 3, 4, null] ]);  // [[true], [true], [false]]\ntypeOfEachInnerArray([ ]);                                                        // 'Array is empty'\n```",
    "ru": "Исправьте функцию `typeOfEachInnerArray`, которая принимает массив массивов.\n\nФункция должна возвращать массив подмассивов с булевыми значениями, где каждый подмассив соответствует вложенному массиву и указывает, содержит ли он элементы одного типа.\n\nЕсли внешний массив пустой, то функция должна вернуть строку 'Array is empty'.\n\nНапример: `[ [1, 2], ['a', 'b'], [123, 'abc'] ]` должен вернуть `[ [true], [true], [false] ]`.\n\nПотому что первый и второй подмассивы содержат элементы одного типа, а третий подмассив содержит элементы разных типов.\n\nВ функции три ошибки до цикла, которые нужно исправить.\n\nРазберитесь в коде и перепишите его самостоятельно.\n\n\nПримеры запуска функции:\n```javascript\ntypeOfEachInnerArray([ ['1', '2'], [3, 5], [true, false] ]);                      // [[true], [true], [true]]\ntypeOfEachInnerArray([ [5, 'true'], ['test', 7], [null, 'null'] ]);               // [[false], [false], [false]]\ntypeOfEachInnerArray([ ['true', 'false'], [true, 5 > 10], [1, 2, 3, 4, null] ]);  // [[true], [true], [false]]\ntypeOfEachInnerArray([ ]);                                                        // 'Array is empty'\n```"
  },
  "initialSolution": "function typeOfEachInnerArray(arr){\n  if(arr.length !== 0) 'Array is empty';\n  let result = {};\n\n  for(let i = 0; i < arr.length; i++){         // loop through outer array\n    const type = typeof arr[i][0];             // get type of the first element in inner array\n\n    for(let j = 1; j < arr[i].length; j++){    // loop through inner array\n      if(typeof arr[i][j] !== type){           // if type of current element is not equal to type of the first element\n        result.push([false]);                  // push [false] to result array\n        break;                                 // break inner loop\n      } else if(j === arr[i].length - 1){      // if we are on the last element in inner array\n        result.push([true]);                   // push [true] to result array\n      }\n    }\n  }\n\n  return result;\n}",
  "completedSolution": "function typeOfEachInnerArray(arr){\n  if(arr.length === 0) return 'Array is empty';\n  let result = [];\n\n  for(let i = 0; i < arr.length; i++){\n    const type = typeof arr[i][0];\n    \n    for(let j = 1; j < arr[i].length; j++){\n      if(typeof arr[i][j] !== type){\n        result.push([false]);\n        break;\n      } else if(j === arr[i].length - 1){\n        result.push([true]);\n      }\n    }\n  }\n\n  return result;\n}",
  "openTest": "it('Created function typeOfEachInnerArray', () => {\n  expect(typeOfEachInnerArray).to.be.a('function');\n});\n\nit(\"typeOfEachInnerArray([ ['0', '1', '2'], [3, NaN, 5], [6, 7, 8, 9] ]) should return [[true], [true], [true]]\", () => {\n  expect(typeOfEachInnerArray([ ['0', '1', '2'], [3, NaN, 5], [6, 7, 8, 9] ])).to.be.deep.equal([[true], [true], [true]]);\n});\n\nit(\"typeOfEachInnerArray([ [5 > 3, 'true'], ['test', 'b', 7], [null, 'null'] ]) should return [[false], [false], [false]]\", () => {\n  expect(typeOfEachInnerArray([ [5 > 3, 'true'], ['test', 'b', 7], [null, 'null'] ])).to.be.deep.equal([[false], [false], [false]]);\n});\n\nit(\"typeOfEachInnerArray([ ['true', false], [true, 5 > 10], [1, 2, 3, 4, undefined] ]) should return [[false], [true], [false]]\", () => {\n  expect(typeOfEachInnerArray([ ['true', false], [true, 5 > 10], [1, 2, 3, 4, undefined] ])).to.be.deep.equal([[false], [true], [false]]);\n});\n\nit(\"typeOfEachInnerArray([ ['a', 'b'], [1, NaN], [true, false], [null, null], [{}, []] ]) should return [[true], [true], [true], [true], [true]]\", () => {\n  expect(typeOfEachInnerArray([ ['a', 'b'], [1, NaN], [true, false], [null, null], [{}, []] ])).to.be.deep.equal([[true], [true], [true], [true], [true]]);\n});\n\nit(\"typeOfEachInnerArray([ [5, 'a'], [null, undefined], [100, false], [NaN, true]) should return [[false], [false], [false], [false]]\", () => {\n  expect(typeOfEachInnerArray([ [5, 'a'], [null, undefined], [100, false], [NaN, true] ])).to.be.deep.equal([[false], [false], [false], [false]]);\n});\n\nit(\"typeOfEachInnerArray([]) should return 'Array is empty'\", () => {\n  expect(typeOfEachInnerArray([])).to.be.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}