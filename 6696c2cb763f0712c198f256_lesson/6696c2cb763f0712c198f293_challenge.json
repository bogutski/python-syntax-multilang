{
  "_id": "6696c2cb763f0712c198f293",
  "name": {
    "en": "Number of boolean values",
    "ru": "Количество булевых значений"
  },
  "instruction": {
    "en": "Write a function `areAllElementsBoolean` that takes an array with different data types.\n\nThe function should return a string depending on the types of data present in the array:\n\n* If the array contains only boolean values, return the string: `Yes, number of boolean <number of boolean values>`.\n* If the array does not contain any boolean values, return the string: `There is no boolean`.\n* If the array contains boolean values and other data types, return the string: `No. Number of boolean <number of boolean values>, other <number of other values>`.\n* If the array is empty, return the string: `Array is empty`.\n\nNo need to check inside subarrays, consider objects or arrays as non-boolean elements.\n\nExamples of function calls:\n```javascript\nareAllElementsBoolean([true, false, true, false, 5 > 10]);  // 'Yes, number of boolean 5'\nareAllElementsBoolean([10, 0, 'test', 'true', [], {}]);     // 'There is no boolean'\nareAllElementsBoolean([true, undefined, true, NaN, false]); // 'No. Number of boolean 3, other 2'\nareAllElementsBoolean([ ]);                                 // 'Array is empty'\n```",
    "ru": "Напишите функцию `areAllElementsBoolean`, которая принимает массив с различными типами данных.\n\nФункция должна вернуть строку в зависимости от того, какие типы данных присутствуют в массиве:\n\n* Если в массиве только булевы значения, то вернуть строку: `Yes, number of boolean <количество булевых значений>`.\n* Если в массиве нет булевых значений, то вернуть строку: `There is no boolean`.\n* Если в массиве есть булевы значения и другие типы данных, то вернуть строку: `No. Number of boolean <количество булевых значений>, other <количество остальных значений>`.\n* Если массив пустой, то вернуть строку: `Array is empty`.\n\nВнутри подмассивов проверять не нужно, если это объект или массив, то считать их за не булевые элементы.\n\n\nПримеры запуска функции:\n```javascript\nareAllElementsBoolean([true, false, true, false, 5 > 10]);  // 'Yes, number of boolean 5'\nareAllElementsBoolean([10, 0, 'test', 'true', [], {}]);     // 'There is no boolean'\nareAllElementsBoolean([true, undefined, true, NaN, false]); // 'No. Number of boolean 3, other 2'\nareAllElementsBoolean([ ]);                                 // 'Array is empty'\n```"
  },
  "initialSolution": "function areAllElementsBoolean(arr)",
  "completedSolution": "function areAllElementsBoolean(arr){\n  if(arr.length === 0) return 'Array is empty';\n  let count = 0;\n\n  for(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] === 'boolean') count++;\n  }\n\n  if(count === arr.length) return `Yes, number of boolean ${count}`;\n  else if(count === 0) return `There is no boolean`;\n  else return `No. Number of boolean ${count}, other ${arr.length - count}`;\n}",
  "openTest": "it('Created function areAllElementsBoolean', () => {\n  expect(areAllElementsBoolean).to.be.a('function');\n});\n\nit(\"areAllElementsBoolean([true, false, true, false, 5 > 3, 10 < 5]) should return 'Yes, number of boolean 6'\", () => {\n  expect(areAllElementsBoolean([true, false, true, false, 5 > 3, 10 < 5])).to.be.equal('Yes, number of boolean 6');\n});\n\nit(\"areAllElementsBoolean([12, 30, 'test', 'true', [], {}]) should return 'There is no boolean'\", () => {\n  expect(areAllElementsBoolean([12, 30, 'test', 'true', [], {}])).to.be.equal('There is no boolean');\n});\n\nit(\"areAllElementsBoolean([true, undefined, false, null, 'true', 5, 'test']) should return 'No. Number of boolean 2, other 5'\", () => {\n  expect(areAllElementsBoolean([true, undefined, false, null, 'true', 5, 'test'])).to.be.equal('No. Number of boolean 2, other 5');\n});\n\nit(\"areAllElementsBoolean(['a', 'b', [], NaN, 52, -963, false, true]) should return 'No. Number of boolean 2, other 6'\", () => {\n  expect(areAllElementsBoolean(['a', 'b', [], NaN, 52, -963, false, true])).to.be.equal('No. Number of boolean 2, other 6');\n});\n\nit(\"areAllElementsBoolean([150 + 200 === 350, 'true', 'test', 7, [null, 'null']]) should return 'No. Number of boolean 1, other 4'\", () => {\n  expect(areAllElementsBoolean([150 + 200 === 350, 'true', 'test', 7, [null, 'null']])).to.be.equal('No. Number of boolean 1, other 4');\n});\n\nit(\"areAllElementsBoolean([]) should return 'Array is empty'\", () => {\n  expect(areAllElementsBoolean([])).to.be.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}