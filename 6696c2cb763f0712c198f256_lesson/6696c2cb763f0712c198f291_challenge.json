{
  "_id": "6696c2cb763f0712c198f291",
  "name": {
    "en": "Checking subarrays for numbers",
    "ru": "Проверка подмассивов на числа"
  },
  "instruction": {
    "en": "Write a function `areAllNumbers` that takes an array of arrays.\n\nThe function should return an array of arrays with boolean values that indicate whether all elements of the subarray are numbers.\n\nFor example: `[ [1, 2], ['a', 'b'], [123, 741] ]` should return `[ [true], [false], [true] ]`.\n\nIf the outer array is empty, the function should return the string 'Array is empty'.\n\nThe inner arrays will not be empty.\n\n\nFunction execution examples:\n```javascript\nareAllNumbers([ ['1', '2'], [3, 5], [true, false] ]);           // [[false], [true], [false]]\nareAllNumbers([ [5, 'true'], ['test', 7], [null, 'null'] ]);    // [[false], [false], [false]]\nareAllNumbers([ [155, 0, 36], [-52, 5, 10], [1, -2, 3, -4] ]);  // [[true], [true], [true]]\nareAllNumbers([ ]);                                             // 'Array is empty'\n```",
    "ru": "Напишите функцию `areAllNumbers`, которая принимает массив массивов.\n\nФункция должна возвращать массив массивов с булевыми значений, которые показывают, являются ли все элементы подмассива числами.\n\nНапример: `[ [1, 2], ['a', 'b'], [123, 741] ]` должен вернуть `[ [true], [false], [true] ]`.\n\nЕсли внешний массив пустой, то функция должна вернуть строку 'Array is empty'.\n\nВнутренние массивы не будут пустыми.\n\n\nПримеры запуска функции:\n```javascript\nareAllNumbers([ ['1', '2'], [3, 5], [true, false] ]);           // [[false], [true], [false]]\nareAllNumbers([ [5, 'true'], ['test', 7], [null, 'null'] ]);    // [[false], [false], [false]]\nareAllNumbers([ [155, 0, 36], [-52, 5, 10], [1, -2, 3, -4] ]);  // [[true], [true], [true]]\nareAllNumbers([ ]);                                             // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function areAllNumbers(arr){\n  if(!arr.length) return 'Array is empty';\n  let result = [];\n\n  for(let i = 0; i < arr.length; i++){\n\n    for(let j = 0; j < arr[i].length; j++){\n      if(typeof arr[i][j] !== 'number'){\n        result.push([false]);\n        break;\n      } else if(j === arr[i].length - 1){\n        result.push([true]);\n      }\n    }\n  }\n\n  return result;\n}",
  "openTest": "it('Created function areAllNumbers', () => {\n  expect(areAllNumbers).to.be.a('function');\n});\n\nit(\"areAllNumbers([ [100, 639, 22147, 0], [3, NaN, 5], [6, 7, 8, 9] ]) should return [[true], [true], [true]]\", () => {\n  expect(areAllNumbers([ [100, 639, 22147, 0], [3, NaN, 5], [6, 7, 8, 9] ])).to.be.deep.equal([[true], [true], [true]]);\n});\n\nit(\"areAllNumbers([ [5 > 3, 'true'], ['test', 'b', 7], [null, 'null'] ]) should return [[false], [false], [false]]\", () => {\n  expect(areAllNumbers([ [5 > 3, 'true'], ['test', 'b', 7], [null, 'null'] ])).to.be.deep.equal([[false], [false], [false]]);\n});\n\nit(\"areAllNumbers([ ['true', false], [true, 5 > 10], [1, 2, 3, 4, undefined] ]) should return [[false], [false], [false]]\", () => {\n  expect(areAllNumbers([ ['true', false], [true, 5 > 10], [1, 2, 3, 4, undefined] ])).to.be.deep.equal([[false], [false], [false]]);\n});\n\nit(\"areAllNumbers([ ['a', 'b'], [1, NaN], [true, false], [null, null], [{}, []] ]) should return [[false], [true], [false], [false], [false]]\", () => {\n  expect(areAllNumbers([ ['a', 'b'], [1, NaN], [true, false], [null, null], [{}, []] ])).to.be.deep.equal([[false], [true], [false], [false], [false]]);\n});\n\nit(\"areAllNumbers([ [5, 'a'], [null, undefined], [100, false], [NaN, true]) should return [[false], [false], [false], [false]]\", () => {\n  expect(areAllNumbers([ [5, 'a'], [null, undefined], [100, false], [NaN, true] ])).to.be.deep.equal([[false], [false], [false], [false]]);\n});\n\nit(\"areAllNumbers([]) should return 'Array is empty'\", () => {\n  expect(areAllNumbers([])).to.be.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}