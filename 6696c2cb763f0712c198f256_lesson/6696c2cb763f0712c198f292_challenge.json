{
  "_id": "6696c2cb763f0712c198f292",
  "name": {
    "en": "Checking for strings",
    "ru": "Проверка на строки"
  },
  "instruction": {
    "en": "Fix the `areAllElementsString` function, which takes an array of arrays.\n\nThe function should return an array of boolean values, where each element of the array and/or inner array is replaced with the boolean data type.\n\nReturn `true` if the data type of the element is `string`, `false` otherwise.\n\nFor example: `[ 'a', ['b', 'c'], 555 ]` => should return `[true, true, true, false]`.\n\nNo separate subarray is created, even if the element is in the inner array.\n\nIf the outer array is empty, the function should return the string 'Array is empty'.\n\nThere are three errors in the code that need to be fixed, all of them before the loop.\n\n\nFunction call examples:\n```javascript\nareAllElementsString([ 'a', ['1', '2'], [3, 5], [true, false] ]); // [true, true, true false, false, false, false]\nareAllElementsString([5, 'true', 'test', 7, [null, 'null'] ]);    // [false, true, true, false, false, true]\nareAllElementsString([ [155, 0], [-52, 5, 10], [1, -2, -4] ]);    // [false, false, false, false, false, false, false]\nareAllElementsString([ ]);                                        // 'Array is empty'\n```",
    "ru": "Исправьте функцию `areAllElementsString`, которая принимает массив массивов.\n\nФункция должна возвращать массив с булевыми значениями, где каждый элемент массива и/или внутреннего массива заменяется на тип данных boolean.\n\nВозвращается `true` - если тип данных элемента `string`, `false` - в противном случае.\n\nНапример: `[ 'a', ['b', 'c'], 555 ]` =>  должно вернуть `[true, true, true, false]`.\n\nПодмассив не создается отдельно, даже если элемент во внутреннем массиве.\n\nЕсли внешний массив пустой, то функция должна вернуть строку 'Array is empty'.\n\nВ коде три ошибки, которые нужно исправить, все они до цикла.\n\n\nПримеры запуска функции:\n```javascript\nareAllElementsString([ 'a', ['1', '2'], [3, 5], [true, false] ]); // [true, true, true false, false, false, false]\nareAllElementsString([5, 'true', 'test', 7, [null, 'null'] ]);    // [false, true, true, false, false, true]\nareAllElementsString([ [155, 0], [-52, 5, 10], [1, -2, -4] ]);    // [false, false, false, false, false, false, false]\nareAllElementsString([ ]);                                        // 'Array is empty'\n```"
  },
  "initialSolution": "function areAllElementsString(){\n  if(arr.length === 1) return 'Array is empty';\n  let result = {};\n\n  for(let i = 0; i < arr.length; i++){                        // loop through the array\n    if(typeof arr[i] === 'string') result.push(true)          // if element is string, push true to result array\n    else if(typeof arr[i] !== 'object') result.push(false)    // if element is not an object, push false to result array\n    else {                                                    // if element is an object\n\n      for(let j = 0; j < arr[i].length; j++){                 // loop through the inner array\n        if(typeof arr[i][j] === 'string') result.push(true);  // if element is string, push true to result array\n        else result.push(false);                              // if element is not a string, push false to result array\n      }\n\n    }\n\n  }\n\n  return result;\n}",
  "completedSolution": "function areAllElementsString(arr){\n  if(arr.length === 0) return 'Array is empty';\n  let result = [];\n\n  for(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] === 'string') result.push(true)\n    else if(typeof arr[i] !== 'object') result.push(false)\n    else {\n\n      for(let j = 0; j < arr[i].length; j++){\n        if(typeof arr[i][j] === 'string') result.push(true);\n        else result.push(false);\n      }\n\n    }\n    \n  }\n\n  return result;\n}",
  "openTest": "it('Created function areAllElementsString', () => {\n  expect(areAllElementsString).to.be.a('function');\n});\n\nit(\"areAllElementsString(['a', ['22147', '0'], ['3', 'NaN'], 'b', ['6', '7'], 'c']) should return [true, true, true, true, true, true, true, true, true]\", () => {\n  expect(areAllElementsString(['a', ['22147', '0'], ['3', 'NaN'], 'b', ['6', '7'], 'c'])).to.be.deep.equal([true, true, true, true, true, true, true, true, true]);\n});\n\nit(\"areAllElementsString([true, [5 > 3, true], 55, [null, undefined], 136]) should return [false, false, false, false, false, false, false]\", () => {\n  expect(areAllElementsString([true, [5 > 3, true], 55, [null, undefined], 136])).to.be.deep.equal([false, false, false, false, false, false, false]);\n});\n\nit(\"areAllElementsString([['true', false], 'abc', ['true', 5 > 10], [1, 2, 3, 4, undefined]]) should return [true, false, true, true, false, false, false, false, false, false]\", () => {\n  expect(areAllElementsString([['true', false], 'abc', ['true', 5 > 10], [1, 2, 3, 4, undefined]])).to.be.deep.equal([true, false, true, true, false, false, false, false, false, false]);\n  });\n\nit(\"areAllElementsString(['a', 'b', [1, NaN], [{}, []], 'test js']) should return [true, true, false, false, false, false, true]\", () => {\n  expect(areAllElementsString(['a', 'b', [1, NaN], [{}, []], 'test js'])).to.be.deep.equal([true, true, false, false, false, false, true]);\n});\n\nit(\"areAllElementsString([ [5, 'a'], [null, undefined], [100, false], [NaN, true]) should return [false, true, false, false, false, false, false, false]\", () => {\n  expect(areAllElementsString([ [5, 'a'], [null, undefined], [100, false], [NaN, true]])).to.be.deep.equal([false, true, false, false, false, false, false, false]);\n});\n\nit(\"areAllElementsString([]) should return 'Array is empty'\", () => {\n  expect(areAllElementsString([])).to.be.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}