{
  "_id": "6696c2cb763f0712c198f402",
  "name": {
    "en": "/*",
    "ru": "Удаление элементов с конца массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `removeLastN`, которая принимает массив и число N в качестве аргументов.\n\nФункция должна удалить N элементов с конца массива.\n\nФункция должна возвращать исходный массив после удаления элементов.\n\nЕсли N больше или равно длине исходного массива, функция должна возвращать пустой массив.\n\n\nПример запуска функции:\n```javascript\nremoveLastN([1, 2, 3, 4, 5], 2); // [ 1, 2, 3 ]\nremoveLastN([true, false, true], 1);  // [ true, false ]\nremoveLastN(['a', 'b', 'c', 'd'], 3); // [ 'a' ]\nremoveLastN([1, 2, 3], 0); // [1, 2, 3]\nremoveLastN([1, 2, 3], 3); // []\nremoveLastN([1, 2, 3], 4); // []\n```"
  },
  "initialSolution": "function removeLastN(){\n\n}",
  "completedSolution": "function removeLastN(arr, num) {\n  if(!num) return arr;\n  else arr.splice(-num)\n\n  return arr;\n}",
  "openTest": "it('Created function removeLastN', () => {\n  expect(removeLastN).to.be.a('function');\n});\n\nit('Function removeLastN should include methods splice()', () => {\n  const res = removeLastN.toString()\n  expect(res).to.include('.splice(')\n});\n\nit(\"removeLastN([1, 2, 3, 4, 5], 2) should return [1, 2, 3]\", () => {\n  expect(removeLastN([1, 2, 3, 4, 5], 2)).to.deep.equal([1, 2, 3]);\n});\n\nit(\"removeLastN(['a', 'b', 'c', 'd'], 3) should return ['a']\", () => {\n  expect(removeLastN(['a', 'b', 'c', 'd'], 3)).to.deep.equal(['a']);\n});\n\nit(\"removeLastN([true, false, true], 1) should return [true, false]\", () => {\n  expect(removeLastN([true, false, true], 1)).to.deep.equal([true, false]);\n});\n\nit(\"removeLastN([1, 2, 3], 0) should return [1, 2, 3]\", () => {\n  expect(removeLastN([1, 2, 3], 0)).to.deep.equal([1, 2, 3]);\n});\n\nit(\"removeLastN([1, 2, 3], 3) should return an empty array\", () => {\n  expect(removeLastN([1, 2, 3], 3)).to.deep.equal([]);\n});\n\nit(\"removeLastN([1, 2, 3], 4) should return an empty array when N is greater than array length\", () => {\n  expect(removeLastN([1, 2, 3], 4)).to.deep.equal([]);\n});\n\nit(\"removeLastN([], 1) should return an empty array if the input array is initially empty\", () => {\n  expect(removeLastN([], 1)).to.deep.equal([]);\n});\n\nit(\"should verify that the original array is modified correctly after removal\", () => {\n  let originalArray = [1, 2, 3, 4, 5];\n  removeLastN(originalArray, 2);\n  expect(originalArray).to.deep.equal([1, 2, 3]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}