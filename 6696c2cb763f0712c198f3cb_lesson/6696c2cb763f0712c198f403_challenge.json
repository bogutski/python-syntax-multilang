{
  "_id": "6696c2cb763f0712c198f403",
  "name": {
    "en": "/*",
    "ru": "Замена элементов в массиве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `replaceElements`, которая принимает массив, индекс начального элемента для замены, количество элементов для удаления и произвольное количество новых элементов.\n\nФункция должна заменить указанное количество элементов в массиве, начиная с заданного индекса, на новые элементы, переданные в функцию.\n\nВозвращать ничего не нужно, так как изменения происходят в исходном массиве.\n\n\nПример запуска функции:\n```javascript\nlet numbers = [1, 2, 3, 4, 5];\nreplaceElements(numbers, 2, 2, 6, 7);\nconsole.log(numbers); // Должен вернуть [1, 2, 6, 7, 5]\n\nlet letters = ['a', 'b', 'c', 'd', 'e'];\nreplaceElements(letters, 1, 3, 'x', 'y', 'z');\nconsole.log(letters); // Должен вернуть ['a', 'x', 'y', 'z', 'e']\n```"
  },
  "initialSolution": "function replaceElements(){\n\n}",
  "completedSolution": "function replaceElements(arr, start, deleteCount, ...elements) {\n  arr.splice(start, deleteCount, ...elements)\n}",
  "openTest": "it('Created function replaceElements', () => {\n  expect(replaceElements).to.be.a('function');\n});\n\nit('Function replaceElements should include methods splice()', () => {\n  const res = replaceElements.toString()\n  expect(res).to.include('.splice(')\n});\n\nit(\"replaceElements([1, 2, 3, 4, 5], 2, 2, 6, 7) should modify array to [1, 2, 6, 7, 5]\", () => {\n  let numbers = [1, 2, 3, 4, 5];\n  replaceElements(numbers, 2, 2, 6, 7);\n  expect(numbers).to.deep.equal([1, 2, 6, 7, 5]);\n});\n\nit(\"replaceElements(['a', 'b', 'c', 'd', 'e'], 1, 3, 'x', 'y', 'z') should modify array to ['a', 'x', 'y', 'z', 'e']\", () => {\n  let letters = ['a', 'b', 'c', 'd', 'e'];\n  replaceElements(letters, 1, 3, 'x', 'y', 'z');\n  expect(letters).to.deep.equal(['a', 'x', 'y', 'z', 'e']);\n});\n\nit(\"replaceElements(['first', 'second', 'third'], 0, 1, 'newFirst') should replace the first element\", () => {\n  let array = ['first', 'second', 'third'];\n  replaceElements(array, 0, 1, 'newFirst');\n  expect(array).to.deep.equal(['newFirst', 'second', 'third']);\n});\n\nit(\"replaceElements([10, 20, 30], 1, 2, 40, 50) should replace the last two elements with two new ones\", () => {\n  let numbers = [10, 20, 30];\n  replaceElements(numbers, 1, 2, 40, 50);\n  expect(numbers).to.deep.equal([10, 40, 50]);\n});\n\nit(\"replaceElements([], 0, 0, 'new') should add an element to an empty array\", () => {\n  let emptyArray = [];\n  replaceElements(emptyArray, 0, 0, 'new');\n  expect(emptyArray).to.deep.equal(['new']);\n});\n\nit(\"replaceElements([1, 2, 3], 1, 0, 'a') should insert 'a' without removing any elements\", () => {\n  let numbers = [1, 2, 3];\n  replaceElements(numbers, 1, 0, 'a');\n  expect(numbers).to.deep.equal([1, 'a', 2, 3]);\n});\n\nit(\"replaceElements(['apple', 'banana', 'cherry'], 2, 1, 'orange', 'grape') should modify array to ['apple', 'banana', 'orange', 'grape']\", () => {\n  let fruits = ['apple', 'banana', 'cherry'];\n  replaceElements(fruits, 2, 1, 'orange', 'grape');\n  expect(fruits).to.deep.equal(['apple', 'banana', 'orange', 'grape']);\n});\n\nit(\"should verify that replaceElements can handle large deleteCount beyond array length\", () => {\n  let array = ['start', 'middle', 'end'];\n  replaceElements(array, 1, 10, 'new');\n  expect(array).to.deep.equal(['start', 'new']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}