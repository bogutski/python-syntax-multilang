{
  "_id": "6696c2cb763f0712c198f400",
  "name": {
    "en": "/*",
    "ru": "Добавление элементов в начало массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `simplePrepend`, которая принимает массив и один элемент для добавления.\n\nФункция должна добавить переданный элемент в начало исходного массива с использованием метода `splice()`.\n\nФункция должна возвращать измененный массив.\n\n\nПример запуска функции:\n```javascript\nsimplePrepend([2, 3, 4], 1); // [ 1, 2, 3, 4 ]\nsimplePrepend(['b', 'c', 'd'], 'a'); // [ 'a', 'b', 'c', 'd' ]\nsimplePrepend([], 'start'); // [ 'start' ]\n```"
  },
  "initialSolution": "function simplePrepend(){\n\n}",
  "completedSolution": "function simplePrepend(arr, el) {\n  arr.splice(0, 0, el)\n  return arr;\n}",
  "openTest": "it('Created function simplePrepend', () => {\n  expect(simplePrepend).to.be.a('function');\n});\n\nit('Function simplePrepend should include methods splice()', () => {\n  const res = simplePrepend.toString()\n  expect(res).to.include('.splice(')\n});\n\nit(\"simplePrepend([2, 3, 4], 1) should return [1, 2, 3, 4]\", () => {\n  expect(simplePrepend([2, 3, 4], 1)).to.deep.equal([1, 2, 3, 4]);\n});\n\nit(\"simplePrepend(['b', 'c', 'd'], 'a') should return ['a', 'b', 'c', 'd']\", () => {\n  expect(simplePrepend(['b', 'c', 'd'], 'a')).to.deep.equal(['a', 'b', 'c', 'd']);\n});\n\nit(\"simplePrepend([], 'start') should return ['start']\", () => {\n  expect(simplePrepend([], 'start')).to.deep.equal(['start']);\n});\n\nit(\"simplePrepend(['item'], 'newItem') should add 'newItem' at the beginning\", () => {\n  let testArray = ['item'];\n  expect(simplePrepend(testArray, 'newItem')).to.deep.equal(['newItem', 'item']);\n});\n\nit(\"should verify the returned array is the same instance as the input array\", () => {\n  let inputArray = [3, 4];\n  let resultArray = simplePrepend(inputArray, 2);\n  expect(resultArray).to.equal(inputArray);\n});\n\nit(\"simplePrepend(['end'], 'start') should return ['start', 'end']\", () => {\n  expect(simplePrepend(['end'], 'start')).to.deep.equal(['start', 'end']);\n});\n\nit(\"simplePrepend([4, 5, 6], 3) after calling simplePrepend([1, 2], 0) should return [3, 4, 5, 6]\", () => {\n  simplePrepend([1, 2], 0); // Предыдущий вызов, не влияющий на следующий тест\n  expect(simplePrepend([4, 5, 6], 3)).to.deep.equal([3, 4, 5, 6]);\n});\n\nit(\"simplePrepend(['second'], 'first') should maintain the original order after multiple operations\", () => {\n  let resultArray = simplePrepend(['third'], 'second');\n  resultArray = simplePrepend(resultArray, 'first');\n  expect(resultArray).to.deep.equal(['first', 'second', 'third']);\n});\n\nit(\"simplePrepend([true], false) should correctly handle boolean values\", () => {\n  expect(simplePrepend([true], false)).to.deep.equal([false, true]);\n});\n\nit(\"simplePrepend([2, 3], 1) should not affect the length of unrelated arrays\", () => {\n  let unrelatedArray = [4, 5, 6];\n  simplePrepend([2, 3], 1);\n  expect(unrelatedArray.length).to.equal(3);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}