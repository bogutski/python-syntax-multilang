{
  "_id": "6696c2cb763f0712c198f406",
  "name": {
    "en": "/*",
    "ru": "Объединение массивов с последующей ротацией"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `mergeAndRotate`, которая принимает три аргумента: два массива (array1 и array2) и число N.\n\nВаша задача — сначала объединить два данных массива в один, а затем \"сдвинуть\" элементы получившегося массива на N позиций.\n\n* Если N положительное, сдвигайте элементы вправо, то есть последние `N` элементов переместятся в начало массива.\n* Если N отрицательное, сдвигайте элементы влево, то есть первые `|N|` элементов переместятся в конец массива.\n\nФункция должна возвращать новый массив после сдвига.\n\n\nПример запуска функции:\n```javascript\nmergeAndRotate([1, 2, 3], [4, 5, 6], 2); // [ 5, 6, 1, 2, 3, 4 ]\nmergeAndRotate(['a', 'b'], ['c', 'd', 'e'], -1); // [ 'b', 'c', 'd', 'e', 'a' ]\nmergeAndRotate([true, false], [false, true, true], 3); // [ false, true, true, true, false ]\nmergeAndRotate([], [1, 2], 1); // [ 2, 1 ]\n```"
  },
  "initialSolution": "function mergeAndRotate(){\n\n}",
  "completedSolution": "function mergeAndRotate(arr1, arr2, n) {\n  let res = [...arr1, ...arr2]\n\n  if(n > 0){\n    const elements = res.splice(-n)\n    res.splice(0, 0, ...elements)\n  }else {\n    const elements = res.splice(0, -n)\n    res.splice(res.length, 0, ...elements)\n  }\n\n  return res;\n}",
  "openTest": "it('Created function mergeAndRotate', () => {\n  expect(mergeAndRotate).to.be.a('function');\n});\n\nit('Function mergeAndRotate should include methods splice()', () => {\n  const res = mergeAndRotate.toString()\n  expect(res).to.include('.splice(')\n});\n\nit(\"mergeAndRotate([1, 2, 3], [4, 5, 6], 2) should return [5, 6, 1, 2, 3, 4]\", () => {\n  expect(mergeAndRotate([1, 2, 3], [4, 5, 6], 2)).to.deep.equal([5, 6, 1, 2, 3, 4]);\n});\n\nit(\"mergeAndRotate(['a', 'b'], ['c', 'd', 'e'], -1) should return ['b', 'c', 'd', 'e', 'a']\", () => {\n  expect(mergeAndRotate(['a', 'b'], ['c', 'd', 'e'], -1)).to.deep.equal(['b', 'c', 'd', 'e', 'a']);\n});\n\nit(\"mergeAndRotate([true, false], [false, true, true], 3) should return [false, true, true, true, false]\", () => {\n  expect(mergeAndRotate([true, false], [false, true, true], 3)).to.deep.equal([false, true, true, true, false]);\n});\n\nit(\"mergeAndRotate([], [1, 2], 1) should return [2, 1] for rotating a single array\", () => {\n  expect(mergeAndRotate([], [1, 2], 1)).to.deep.equal([2, 1]);\n});\n\nit(\"mergeAndRotate([], [], 0) should return an empty array if both input arrays are empty\", () => {\n  expect(mergeAndRotate([], [], 0)).to.deep.equal([]);\n});\n\nit(\"mergeAndRotate([1, 2], [3, 4], 4) should return [1, 2, 3, 4] as rotating by the length of the array results in the same array\", () => {\n  expect(mergeAndRotate([1, 2], [3, 4], 4)).to.deep.equal([1, 2, 3, 4]);\n});\n\nit(\"mergeAndRotate([1, 2], [3, 4, 5, 6], 0) should return [1, 2, 3, 4, 5, 6] as rotating by 0 doesn't change the array\", () => {\n  expect(mergeAndRotate([1, 2], [3, 4, 5, 6], 0)).to.deep.equal([1, 2, 3, 4, 5, 6]);\n});\n\nit(\"mergeAndRotate(['x', 'y'], ['a', 'b', 'c'], -5) should return ['x', 'y', 'a', 'b', 'c']\", () => {\n  expect(mergeAndRotate(['x', 'y'], ['a', 'b', 'c'], -5)).to.deep.equal(['x', 'y', 'a', 'b', 'c']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}