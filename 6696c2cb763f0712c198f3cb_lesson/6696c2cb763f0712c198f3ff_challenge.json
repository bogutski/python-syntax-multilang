{
  "_id": "6696c2cb763f0712c198f3ff",
  "name": {
    "en": "/*",
    "ru": "Удаление конкретного элемента"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `removeElement`, которая принимает массив и элемент для удаления.\n\nФункция должна найти первое вхождение указанного элемента в массив и удалить его с помощью метода `splice()`.\n\nЕсли элемент не найден, массив остается неизменным. Функция должна возвращать измененный массив.\n\n\nПример запуска функции:\n```javascript\nremoveElement([1, 2, 3], 4);       // [ 1, 2, 3 ]\nremoveElement([1, 2, 3, 4, 5], 3); // [ 1, 2, 4, 5 ]\nremoveElement(['a', 'b', 'c', 'd'], 'c');  // [ 'a', 'b', 'd' ]\nremoveElement(['a', 'a', 'b', 'c'], 'a');  // [ 'a', 'b', 'c' ]\nremoveElement([true, false, true], false); // [ true, true ]\n```"
  },
  "initialSolution": "function removeElement(){\n\n}",
  "completedSolution": "function removeElement(arr, el) {\n  const index = arr.indexOf(el)\n\n  if(index === -1) return arr\n  else arr.splice(index, 1)\n\n  return arr;\n}",
  "openTest": "it('Created function removeElement', () => {\n  expect(removeElement).to.be.a('function');\n});\n\nit('Function removeElement should include methods splice()', () => {\n  const res = removeElement.toString()\n  expect(res).to.include('.splice(')\n});\n\nit(\"removeElement([1, 2, 3, 4, 5], 3) should return [1, 2, 4, 5]\", () => {\n  expect(removeElement([1, 2, 3, 4, 5], 3)).to.deep.equal([1, 2, 4, 5]);\n});\n\nit(\"removeElement([-5, 6, 10, -5, -8, -5, 0], -5) should return [6, 10, -5, -8, -5, 0]\", () => {\n  expect(removeElement([-5, 6, 10, -5, -8, -5, 0], -5)).to.deep.equal([6, 10, -5, -8, -5, 0]);\n});\n\nit(\"removeElement(['a', 'b', 'c', 'd'], 'c') should return ['a', 'b', 'd']\", () => {\n  expect(removeElement(['a', 'b', 'c', 'd'], 'c')).to.deep.equal(['a', 'b', 'd']);\n});\n\nit(\"removeElement([true, false, true], false) should return [true, true]\", () => {\n  expect(removeElement([true, false, true], false)).to.deep.equal([true, true]);\n});\n\nit(\"removeElement([1, 2, 3], 4) should return [1, 2, 3] when the element is not found\", () => {\n  expect(removeElement([1, 2, 3], 4)).to.deep.equal([1, 2, 3]);\n});\n\nit(\"removeElement([], 1) should return an empty array if the input array is initially empty\", () => {\n  expect(removeElement([], 1)).to.deep.equal([]);\n});\n\nit(\"removeElement([1, 2, 3, 4, 5], 1) should remove the first element if it matches\", () => {\n  expect(removeElement([1, 2, 3, 4, 5], 1)).to.deep.equal([2, 3, 4, 5]);\n});\n\nit(\"should not modify the array if the element to remove is repeated but remove only the first occurrence\", () => {\n  let originalArray = [1, 2, 2, 3];\n  removeElement(originalArray, 2);\n  expect(originalArray).to.deep.equal([1, 2, 3]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}