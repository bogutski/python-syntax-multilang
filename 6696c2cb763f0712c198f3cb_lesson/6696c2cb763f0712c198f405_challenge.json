{
  "_id": "6696c2cb763f0712c198f405",
  "name": {
    "en": "/*",
    "ru": "Ротация элементов массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `rotateArray`, которая принимает массив и число N.\n\nФункция должна \"ротировать\" массив, перемещая первые N элементов из начала массива в его конец.\n\nЕсли N отрицательное, перемещение должно происходить из конца массива в начало.\n\nФункция должна возвращать измененный массив.\n\n\nПример запуска функции:\n```javascript\nrotateArray(['a', 'b', 'c', 'd', 'e'], 7); // [ 'a', 'b', 'c', 'd', 'e' ]\nrotateArray(['a', 'b', 'c', 'd'], -1);    // [ 'd', 'a', 'b', 'c' ]\nrotateArray([true, false, true], 3);     // [ true, false, true ]\nrotateArray([1, 2, 3, 4, 5], -3);       // [ 3, 4, 5, 1, 2 ]\nrotateArray([1, 2, 3, 4, 5], 2);       // [ 3, 4, 5, 1, 2 ]\n```"
  },
  "initialSolution": "function rotateArray(){\n\n}",
  "completedSolution": "function rotateArray(arr, n) {\n\n  if(n > 0){\n    const deletedElements = arr.splice(0, n)\n    arr.splice(arr.length, 0, ...deletedElements)\n  } else {\n    const deletedElements = arr.splice(n)\n    arr.splice(0, 0, ...deletedElements)\n  }\n\n  return arr;\n}",
  "openTest": "it('Created function rotateArray', () => {\n  expect(rotateArray).to.be.a('function');\n});\n\nit('Function rotateArray should include methods splice()', () => {\n  const res = rotateArray.toString()\n  expect(res).to.include('.splice(')\n});\n\nit(\"rotateArray([1, 2, 3, 4, 5], 2) should return [3, 4, 5, 1, 2]\", () => {\n  expect(rotateArray([1, 2, 3, 4, 5], 2)).to.deep.equal([3, 4, 5, 1, 2]);\n});\n\nit(\"rotateArray(['a', 'b', 'c', 'd'], -1) should return ['d', 'a', 'b', 'c']\", () => {\n  expect(rotateArray(['a', 'b', 'c', 'd'], -1)).to.deep.equal(['d', 'a', 'b', 'c']);\n});\n\nit(\"rotateArray([true, false, true], 3) should return [true, false, true]\", () => {\n  expect(rotateArray([true, false, true], 3)).to.deep.equal([true, false, true]);\n});\n\nit(\"rotateArray([1, 2, 3, 4, 5], -3) should return [3, 4, 5, 1, 2]\", () => {\n  expect(rotateArray([1, 2, 3, 4, 5], -3)).to.deep.equal([3, 4, 5, 1, 2]);\n});\n\nit(\"rotateArray([1, 2, 3], 6) should return the same array as rotating by its length doesn't change it\", () => {\n  expect(rotateArray([1, 2, 3], 6)).to.deep.equal([1, 2, 3]);\n});\n\nit(\"should handle the case when N is 0 and return the original array unchanged\", () => {\n  let originalArray = [1, 2, 3];\n  expect(rotateArray(originalArray, 0)).to.deep.equal([1, 2, 3]);\n});\n\nit(\"rotateArray(['first', 'second', 'third', 'fourth'], 2) should correctly rotate elements to the end\", () => {\n  expect(rotateArray(['first', 'second', 'third', 'fourth'], 2)).to.deep.equal(['third', 'fourth', 'first', 'second']);\n});\n\nit(\"rotateArray(['a', 'b', 'c', 'd', 'e'], 7) should return ['a', 'b', 'c', 'd', 'e']\", () => {\n  expect(rotateArray(['a', 'b', 'c', 'd', 'e'], 7)).to.deep.equal(['a', 'b', 'c', 'd', 'e']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}