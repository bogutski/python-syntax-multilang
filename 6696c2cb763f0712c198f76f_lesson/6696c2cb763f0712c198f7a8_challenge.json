{
  "_id": "6696c2cb763f0712c198f7a8",
  "name": {
    "en": "/*",
    "ru": "Проверка наличия строки в многоуровневом массиве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `checkStringInNestedArray`, которая принимает многоуровневый массив и строку.\n\nФункция должна \"выпрямить\" массив (сделать одномерным) и привести все строки к верхнему регистру.\n\nЗатем функция должна проверить, есть ли переданная строка в массиве (также в верхнем регистре) с помощью метода `includes()`.\n\nФункция должна вернуть объект вида: `{newArr: modified array, includes: boolean}`.\n\n\nПримеры запуска функции:\n```javascript\ncheckStringInNestedArray([[\"hello\", \"world\"], [\"foo\", [\"bar\"]]], \"FOO\");\n// { newArr: [\"HELLO\", \"WORLD\", \"FOO\", \"BAR\"], includes: true }\n\ncheckStringInNestedArray([[\"JavaScript\", [\"is\", \"fun\"]], \"Python\"], \"PYTHON\");\n// { newArr: [\"JAVASCRIPT\", \"IS\", \"FUN\", \"PYTHON\"], includes: true }\n\ncheckStringInNestedArray([[\"apple\", \"banana\"], [\"cherry\", [\"date\"]]], \"kiwi\");\n// { newArr: [\"APPLE\", \"BANANA\", \"CHERRY\", \"DATE\"], includes: false }\n```"
  },
  "initialSolution": "function checkStringInNestedArray(){\n\n}",
  "completedSolution": "function checkStringInNestedArray(arr, string) {\n  string = string.toUpperCase()\n  const newArr = arr.flat(Infinity).map(str => str.toUpperCase())\n  return {newArr, includes: newArr.includes(string)};\n}",
  "openTest": "it('Created function checkStringInNestedArray', () => {\n  expect(checkStringInNestedArray).to.be.a('function');\n});\n\nit(\"Function checkStringInNestedArray should include includes method\", () => {\n  const result = checkStringInNestedArray.toString();\n  expect(result).to.include('.includes(');\n});\n\nit('checkStringInNestedArray([[\"hello\", \"world\"], [\"foo\", [\"bar\"]]], \"FOO\") should return {newArr: [\"HELLO\", \"WORLD\", \"FOO\", \"BAR\"], includes: true}', function() {\n  expect(checkStringInNestedArray([[\"hello\", \"world\"], [\"foo\", [\"bar\"]]], \"FOO\")).to.deep.equal({\n    newArr: [\"HELLO\", \"WORLD\", \"FOO\", \"BAR\"],\n    includes: true\n  });\n});\n\nit('checkStringInNestedArray([[\"JavaScript\", [\"is\", \"fun\"]], \"Python\"], \"PYTHON\") should return {newArr: [\"JAVASCRIPT\", \"IS\", \"FUN\", \"PYTHON\"], includes: true}', function() {\n  expect(checkStringInNestedArray([[\"JavaScript\", [\"is\", \"fun\"]], \"Python\"], \"PYTHON\")).to.deep.equal({\n    newArr: [\"JAVASCRIPT\", \"IS\", \"FUN\", \"PYTHON\"],\n    includes: true\n  });\n});\n\nit('checkStringInNestedArray([[\"apple\", \"banana\"], [\"cherry\", [\"date\"]]], \"kiwi\") should return {newArr: [\"APPLE\", \"BANANA\", \"CHERRY\", \"DATE\"], includes: false}', function() {\n  expect(checkStringInNestedArray([[\"apple\", \"banana\"], [\"cherry\", [\"date\"]]], \"kiwi\")).to.deep.equal({\n    newArr: [\"APPLE\", \"BANANA\", \"CHERRY\", \"DATE\"],\n    includes: false\n  });\n});\n\nit('checkStringInNestedArray([[[\"nested\", \"array\"], \"test\"], [\"strings\"]], \"NESTED\") should return {newArr: [\"NESTED\", \"ARRAY\", \"TEST\", \"STRINGS\"], includes: true}', function() {\n  expect(checkStringInNestedArray([[[\"nested\", \"array\"], \"test\"], [\"strings\"]], \"NESTED\")).to.deep.equal({\n    newArr: [\"NESTED\", \"ARRAY\", \"TEST\", \"STRINGS\"],\n    includes: true\n  });\n});\n\nit('checkStringInNestedArray([[\"first\", \"second\"], [\"third\", [\"fourth\"]]], \"fifth\") should return {newArr: [\"FIRST\", \"SECOND\", \"THIRD\", \"FOURTH\"], includes: false}', function() {\n  expect(checkStringInNestedArray([[\"first\", \"second\"], [\"third\", [\"fourth\"]]], \"fifth\")).to.deep.equal({\n    newArr: [\"FIRST\", \"SECOND\", \"THIRD\", \"FOURTH\"],\n    includes: false\n  });\n});\n\nit('checkStringInNestedArray([[\"A\", \"B\", [\"C\"]], [\"D\", \"E\"]], \"C\") should return {newArr: [\"A\", \"B\", \"C\", \"D\", \"E\"], includes: true}', function() {\n  expect(checkStringInNestedArray([[\"A\", \"B\", [\"C\"]], [\"D\", \"E\"]], \"C\")).to.deep.equal({\n    newArr: [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    includes: true\n  });\n});\n\nit('checkStringInNestedArray([[\"lowercase\", \"UPPERCASE\"], [\"Mixed\", [\"case\"]]], \"LOWERCASE\") should return {newArr: [\"LOWERCASE\", \"UPPERCASE\", \"MIXED\", \"CASE\"], includes: true}', function() {\n  expect(checkStringInNestedArray([[\"lowercase\", \"UPPERCASE\"], [\"Mixed\", [\"case\"]]], \"LOWERCASE\")).to.deep.equal({\n    newArr: [\"LOWERCASE\", \"UPPERCASE\", \"MIXED\", \"CASE\"],\n    includes: true\n  });\n});\n\nit('checkStringInNestedArray([[\"find\", \"the\"], [\"hidden\", [\"WORD\"]]], \"hidden\") should return {newArr: [\"FIND\", \"THE\", \"HIDDEN\", \"WORD\"], includes: true}', function() {\n  expect(checkStringInNestedArray([[\"find\", \"the\"], [\"hidden\", [\"WORD\"]]], \"hidden\")).to.deep.equal({\n    newArr: [\"FIND\", \"THE\", \"HIDDEN\", \"WORD\"],\n    includes: true\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}