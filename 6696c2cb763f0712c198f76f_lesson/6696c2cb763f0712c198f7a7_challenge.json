{
  "_id": "6696c2cb763f0712c198f7a7",
  "name": {
    "en": "/*",
    "ru": "Проверка наличия строки в массиве после модификации"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `checkStringInArray`, которая принимает массив строк и строку на проверку.\n\nФункция должна сначала удалить все пробелы и привести к нижнему регистру каждую строку в массиве, а затем проверить, есть ли совпадение со строкой на проверку (также без пробелов и в нижнем регистре).\n\nФункция должна вернуть объект вида: `{newArr: modified array, includes: boolean}`.\n\n\nПримеры запуска функции:\n```javascript\ncheckStringInArray([\"Java\", \"C++\", \"Rust\"], \"go\"); // { newArr: [\"java\", \"c++\", \"rust\"], includes: false }\ncheckStringInArray([\"Hello World\", \" foo \", \"BaR\"], \" foo\"); // { newArr: [\"helloworld\", \"foo\", \"bar\"], includes: true }\ncheckStringInArray([\"JavaScript\", \"Python\", \" Ruby \"], \"java script\"); // { newArr: [\"javascript\", \"python\", \"ruby\"], includes: true }\n```"
  },
  "initialSolution": "function checkStringInArray(){\n\n}",
  "completedSolution": "function checkStringInArray(arr, string) {\n  const newArr = arr.map(str => str.replaceAll(' ', '').toLowerCase())\n  string = string.replaceAll(' ', '').toLowerCase()\n  return {newArr, includes: newArr.includes(string)}\n}",
  "openTest": "it('Created function checkStringInArray', () => {\n  expect(checkStringInArray).to.be.a('function');\n});\n\nit(\"Function checkStringInArray should include includes method\", () => {\n  const result = checkStringInArray.toString();\n  expect(result).to.include('.includes(');\n});\n\nit('checkStringInArray([\"Hello World\", \" foo \", \"BaR\"], \" foo\") should return {newArr: [\"helloworld\", \"foo\", \"bar\"], includes: true}', function() {\n  expect(checkStringInArray([\"Hello World\", \" foo \", \"BaR\"], \" foo\")).to.deep.equal({\n    newArr: [\"helloworld\", \"foo\", \"bar\"],\n    includes: true\n  });\n});\n\nit('checkStringInArray([\"JavaScript\", \"Python\", \" Ruby \"], \"java script\") should return {newArr: [\"javascript\", \"python\", \"ruby\"], includes: true}', function() {\n  expect(checkStringInArray([\"JavaScript\", \"Python\", \" Ruby \"], \"java script\")).to.deep.equal({\n    newArr: [\"javascript\", \"python\", \"ruby\"],\n    includes: true\n  });\n});\n\nit('checkStringInArray([\"Java\", \"C++\", \"Rust\"], \"go\") should return {newArr: [\"java\", \"c++\", \"rust\"], includes: false}', function() {\n  expect(checkStringInArray([\"Java\", \"C++\", \"Rust\"], \"go\")).to.deep.equal({\n    newArr: [\"java\", \"c++\", \"rust\"],\n    includes: false\n  });\n});\n\nit('checkStringInArray([\"  a\", \" B \", \" c \"], \"a\") should return {newArr: [\"a\", \"b\", \"c\"], includes: true}', function() {\n  expect(checkStringInArray([\"  a\", \" B \", \" c \"], \"a\")).to.deep.equal({\n    newArr: [\"a\", \"b\", \"c\"],\n    includes: true\n  });\n});\n\nit('checkStringInArray([\"abc\", \"def\", \"ghi\"], \"ABC\") should return {newArr: [\"abc\", \"def\", \"ghi\"], includes: true}', function() {\n  expect(checkStringInArray([\"abc\", \"def\", \"ghi\"], \"ABC\")).to.deep.equal({\n    newArr: [\"abc\", \"def\", \"ghi\"],\n    includes: true\n  });\n});\n\nit('checkStringInArray([\"One\", \"Two\", \"Three\"], \"Four\") should return {newArr: [\"one\", \"two\", \"three\"], includes: false}', function() {\n  expect(checkStringInArray([\"One\", \"Two\", \"Three\"], \"Four\")).to.deep.equal({\n    newArr: [\"one\", \"two\", \"three\"],\n    includes: false\n  });\n});\n\nit('checkStringInArray([\"apple\", \"banana\", \"grape\"], \"banana\") should return {newArr: [\"apple\", \"banana\", \"grape\"], includes: true}', function() {\n  expect(checkStringInArray([\"apple\", \"banana\", \"grape\"], \"banana\")).to.deep.equal({\n    newArr: [\"apple\", \"banana\", \"grape\"],\n    includes: true\n  });\n});\n\nit('checkStringInArray([\"Car\", \"Bike\", \"Truck\"], \"bus\") should return {newArr: [\"car\", \"bike\", \"truck\"], includes: false}', function() {\n  expect(checkStringInArray([\"Car\", \"Bike\", \"Truck\"], \"bus\")).to.deep.equal({\n    newArr: [\"car\", \"bike\", \"truck\"],\n    includes: false\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}