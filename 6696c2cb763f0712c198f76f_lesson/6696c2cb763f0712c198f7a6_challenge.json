{
  "_id": "6696c2cb763f0712c198f7a6",
  "name": {
    "en": "/*",
    "ru": "Проверка наличия объекта с определенным свойством и значением в массиве объектов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `containsObjectWithProperty`, которая принимает массив объектов и два параметра: имя свойства и значение свойства.\n\nФункция должна возвращать `true`, если в массиве есть объект с указанным свойством, равным указанному значению, и `false` в противном случае.\n\nОдин из вариантов решения может быть использование методов: `map()` и `includes()`.\n\n\nПримеры запуска функции:\n```javascript\ncontainsObjectWithProperty([{age: 25}, {age: 30}, {age: 35}], 'age', 40); // false\ncontainsObjectWithProperty([{name: 'Alice', age: 25}, {name: 'Bob', age: 30}], 'age', 30); // true\ncontainsObjectWithProperty([{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}], 'name', 'Bob'); // true\n```"
  },
  "initialSolution": "function containsObjectWithProperty(){\n\n}",
  "completedSolution": "function containsObjectWithProperty(arr, key, value) {\n  return arr.map(obj => obj[key]).includes(value);\n}",
  "openTest": "it('Created function containsObjectWithProperty', () => {\n  expect(containsObjectWithProperty).to.be.a('function');\n});\n\nit('containsObjectWithProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}], \"name\", \"Bob\") should return true', function() {\n  expect(containsObjectWithProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}], \"name\", \"Bob\")).to.equal(true);\n});\n\nit('containsObjectWithProperty([{age: 25}, {age: 30}, {age: 35}], \"age\", 40) should return false', function() {\n  expect(containsObjectWithProperty([{age: 25}, {age: 30}, {age: 35}], \"age\", 40)).to.equal(false);\n});\n\nit('containsObjectWithProperty([{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}], \"age\", 30) should return true', function() {\n  expect(containsObjectWithProperty([{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}], \"age\", 30)).to.equal(true);\n});\n\nit('containsObjectWithProperty([{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}], \"name\", \"Charlie\") should return false', function() {\n  expect(containsObjectWithProperty([{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}], \"name\", \"Charlie\")).to.equal(false);\n});\n\nit('containsObjectWithProperty([{color: \"red\"}, {color: \"blue\"}, {color: \"green\"}], \"color\", \"blue\") should return true', function() {\n  expect(containsObjectWithProperty([{color: \"red\"}, {color: \"blue\"}, {color: \"green\"}], \"color\", \"blue\")).to.equal(true);\n});\n\nit('containsObjectWithProperty([{status: \"active\"}, {status: \"inactive\"}], \"status\", \"pending\") should return false', function() {\n  expect(containsObjectWithProperty([{status: \"active\"}, {status: \"inactive\"}], \"status\", \"pending\")).to.equal(false);\n});\n\nit('containsObjectWithProperty([{id: 1}, {id: 2}, {id: 3}], \"id\", 2) should return true', function() {\n  expect(containsObjectWithProperty([{id: 1}, {id: 2}, {id: 3}], \"id\", 2)).to.equal(true);\n});\n\nit('containsObjectWithProperty([{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}], \"age\", 25) should return true', function() {\n  expect(containsObjectWithProperty([{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}], \"age\", 25)).to.equal(true);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}