{
  "_id": "6696c2cb763f0712c198f76f",
  "content": {
    "ru": "В JavaScript массивы используются для хранения нескольких значений в одной переменной. Для упрощения процесса проверки наличия конкретного значения в массиве в ECMAScript 2016 (ES7) был введен метод `Array.prototype.includes()`. \n\nЭтот метод предоставляет более читаемый и краткий способ выполнения этой проверки по сравнению с предыдущими методами, такими как `indexOf()`.\n\n\n### Определение и синтаксис\n\nМетод `includes()` определяет, содержит ли массив определенное значение среди своих элементов, возвращая `true` или `false`. \n\nОн особенно полезен для массивов, содержащих примитивные значения, такие как строки, числа или булевы значения.\n\n\n#### Синтаксис:\n\n```javascript\narr.includes(valueToFind[, fromIndex])\n```\n\n* **valueToFind**: Элемент, который необходимо найти в массиве.\n* **fromIndex** (необязательно): Позиция в массиве, с которой начинается поиск `valueToFind`. \n\nОтрицательное значение означает начало поиска с конца массива. По умолчанию равно 0.\n\n\n### Примеры использования\n\nПример 1: Основное использование\n\n```javascript\nconst fruits = ['apple', 'banana', 'mango', 'orange'];\nconsole.log(fruits.includes('banana')); // Вывод: true\nconsole.log(fruits.includes('grape'));  // Вывод: false\n```\n\nВ этом примере проверяется наличие `banana` и `grape` в массиве `fruits`.\n\n\nПример 2: Использование `fromIndex`\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.includes(3, 2)); // Вывод: true\nconsole.log(numbers.includes(2, 2)); // Вывод: false\n```\n\nВ этом примере поиск начинается с индекса `2`. \n\nЧисло `3` находится на индексе `2` и метод вернет - `true`, но число `2` в поиск не включается, так как находится до начального индекса и метод вернет - `false`.\n\n\n### Преимущества использования `includes()`\n\n* **Читаемость**: В отличие от `indexOf()`, который возвращает `-1`, когда элемент не найден, `includes()` возвращает булево значение, что делает ваш код более читаемым и интуитивно понятным.\n* **Функциональность ES7**: Будучи частью ES7, `includes()` позволяет разработчикам писать современный код JavaScript в соответствии с текущими стандартами.\n* **Обработка `NaN`**: В отличие от `indexOf()`, `includes()` может правильно определить наличие `NaN` в массиве.\n\n\nПример обработки `NaN`:\n\n```javascript\nconst oddValues = [1, 3, NaN, 7];\nconsole.log(oddValues.includes(NaN)); // Вывод: true\nconsole.log(oddValues.indexOf(NaN));  // Вывод: -1\n```\n\n`indexOf()` не может найти `NaN`, в то время как `includes()` делает это без труда.\n\n\n\nМетод `Array.prototype.includes()` упрощает задачу проверки наличия конкретного элемента в массиве.\nЕго интуитивно понятный синтаксис и способность обрабатывать ё делают его предпочтительным выбором для разработчиков, стремящихся написать четкий и эффективный код.",
    "en": "# Array.prototype.includes() – содержит ли массив искомый элемент language: en",
    "es": "# Array.prototype.includes() – содержит ли массив искомый элемент language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}