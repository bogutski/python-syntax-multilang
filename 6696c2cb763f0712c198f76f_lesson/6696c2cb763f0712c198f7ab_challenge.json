{
  "_id": "6696c2cb763f0712c198f7ab",
  "name": {
    "en": "/*",
    "ru": "Подсчет наличия элементов из второго массива в первом массиве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `countElementsInArray`, которая принимает два массива.\n\nФункция должна определить, сколько элементов из второго массива присутствуют в первом массиве, и вернуть объект вида: `{foundElements: <array>, totalCount: <count>}`, где:\n  * `foundElements` — массив найденных элементов,\n  * `totalCount` — общее количество найденных элементов.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(countElementsInArray(['apple', 'banana', 'cherry', 'apple'], ['apple', 'cherry', 'grape', 'apple']));\n// { foundElements: ['apple', 'cherry', 'apple'], totalCount: 3 }\n\nconsole.log(countElementsInArray([1, 2, 3, 4], [2, 3, 5, 2]));\n// { foundElements: [2, 3, 2], totalCount: 3 }\n\nconsole.log(countElementsInArray(['cat', 'dog', 'fish'], ['dog', 'cat']));\n// { foundElements: ['dog', 'cat'], totalCount: 2 }\n```"
  },
  "initialSolution": "function countElementsInArray(){\n\n}",
  "completedSolution": "function countElementsInArray(arr1, arr2) {\n  let count = 0\n  let result = []\n\n  arr2.forEach(el => {\n    if(arr1.includes(el)) {\n      count++\n      result.push(el)\n    }\n  })\n\n  return {foundElements: result, totalCount: count};\n}",
  "openTest": "it('Created function countElementsInArray', () => {\n  expect(countElementsInArray).to.be.a('function');\n});\n\nit('countElementsInArray([\"apple\", \"banana\", \"cherry\", \"apple\"], [\"apple\", \"cherry\", \"grape\", \"apple\"]) should return {foundElements: [\"apple\", \"cherry\", \"apple\"], totalCount: 3}', function() {\n  expect(countElementsInArray([\"apple\", \"banana\", \"cherry\", \"apple\"], [\"apple\", \"cherry\", \"grape\", \"apple\"])).to.deep.equal({\n    foundElements: [\"apple\", \"cherry\", \"apple\"],\n    totalCount: 3\n  });\n});\n\nit('countElementsInArray([1, 2, 3, 4, 2, 3], [2, 3, 5, 2]) should return {foundElements: [2, 3, 2], totalCount: 3}', function() {\n  expect(countElementsInArray([1, 2, 3, 4, 2, 3], [2, 3, 5, 2])).to.deep.equal({\n    foundElements: [2, 3, 2],\n    totalCount: 3\n  });\n});\n\nit('countElementsInArray([\"cat\", \"dog\", \"fish\"], [\"dog\", \"dog\", \"cat\"]) should return {foundElements: [\"dog\", \"dog\", \"cat\"], totalCount: 3}', function() {\n  expect(countElementsInArray([\"cat\", \"dog\", \"fish\"], [\"dog\", \"dog\", \"cat\"])).to.deep.equal({\n    foundElements: [\"dog\", \"dog\", \"cat\"],\n    totalCount: 3\n  });\n});\n\nit('countElementsInArray([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]) should return {foundElements: [], totalCount: 0}', function() {\n  expect(countElementsInArray([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"])).to.deep.equal({\n    foundElements: [],\n    totalCount: 0\n  });\n});\n\nit('countElementsInArray([\"x\", \"y\", \"z\"], [\"x\", \"x\", \"x\"]) should return {foundElements: [\"x\", \"x\", \"x\"], totalCount: 3}', function() {\n  expect(countElementsInArray([\"x\", \"y\", \"z\"], [\"x\", \"x\", \"x\"])).to.deep.equal({\n    foundElements: [\"x\", \"x\", \"x\"],\n    totalCount: 3\n  });\n});\n\nit('countElementsInArray([true, false, true], [true, true, true]) should return {foundElements: [true, true, true], totalCount: 3}', function() {\n  expect(countElementsInArray([true, false, true], [true, true, true])).to.deep.equal({\n    foundElements: [true, true, true],\n    totalCount: 3\n  });\n});\n\nit('countElementsInArray([null, undefined, null], [null, null, undefined]) should return {foundElements: [null, null, undefined], totalCount: 3}', function() {\n  expect(countElementsInArray([null, undefined, null], [null, null, undefined])).to.deep.equal({\n    foundElements: [null, null, undefined],\n    totalCount: 3\n  });\n});\n\nit('countElementsInArray([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"banana\", \"banana\"]) should return {foundElements: [\"banana\", \"banana\", \"banana\"], totalCount: 3}', function() {\n  expect(countElementsInArray([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"banana\", \"banana\"])).to.deep.equal({\n    foundElements: [\"banana\", \"banana\", \"banana\"],\n    totalCount: 3\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}