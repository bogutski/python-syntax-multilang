{
  "_id": "6696c2cb763f0712c198f7ac",
  "name": {
    "en": "/*",
    "ru": "Поиск элементов по типам"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findElementsByType`, которая принимает массив и произвольное количество элементов.\n\nФункция должна проверить, какие из переданных элементов присутствуют в массиве, и создать объект, где:\n * ключами будут типы найденных элементов,\n * значениями — массивы всех элементов из исходного массива соответствующего типа.\n\nЕсли ни один из переданных элементов не найден, функция должна вернуть пустой объект.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findElementsByType([true, 'hello', NaN, undefined, 'world', 5, 0, false], 'hello', true));\n// Вывод: { string: ['hello', 'world'], boolean: [true, false] }\n\nconsole.log(findElementsByType(['true', 'hello JS', 1, 2, 3, 0, false, 'a', 'b', 'c'], 'true', 'b'));\n// Вывод: { string: ['true', 'hello JS', 'a', 'b', 'c'] }\n\nconsole.log(findElementsByType([100, 'apple', 'Alice', NaN], false));\n// Вывод: {}\n```"
  },
  "initialSolution": "function findElementsByType(){\n\n}",
  "completedSolution": "function findElementsByType(arr, ...elements) {\n  let result = {}\n  const toCheck = [...elements]\n\n  for(let el of toCheck){\n    if(arr.includes(el)) result[typeof el] = []\n  }\n\n  const toFind = Object.keys(result)\n  for(let el of arr){\n    const typeOfEl = typeof el\n    if(toFind.includes(typeOfEl)) result[typeOfEl].push(el)\n  }\n\n  return result;\n}",
  "openTest": "it('Created function findElementsByType', () => {\n  expect(findElementsByType).to.be.a('function');\n});\n\nit('findElementsByType([true, \"hello\", NaN, undefined, \"world\", 5, 0, false], \"hello\", true) should return {string: [\"hello\", \"world\"], boolean: [true, false]}', function() {\n  expect(findElementsByType([true, \"hello\", NaN, undefined, \"world\", 5, 0, false], \"hello\", true)).to.deep.equal({\n    string: [\"hello\", \"world\"],\n    boolean: [true, false]\n  });\n});\n\nit('findElementsByType([\"true\", \"hello JS\", 1, 2, 3, 0, false, \"a\", \"b\", \"c\"], \"true\", \"b\") should return {string: [\"true\", \"hello JS\", \"a\", \"b\", \"c\"]}', function() {\n  expect(findElementsByType([\"true\", \"hello JS\", 1, 2, 3, 0, false, \"a\", \"b\", \"c\"], \"true\", \"b\")).to.deep.equal({\n    string: [\"true\", \"hello JS\", \"a\", \"b\", \"c\"]\n  });\n});\n\nit('findElementsByType([100, \"apple\", \"Alice\", NaN], false) should return {}', function() {\n  expect(findElementsByType([100, \"apple\", \"Alice\", NaN], false)).to.deep.equal({});\n});\n\nit('findElementsByType([1, 2, \"a\", \"b\", true, false], \"a\", 2) should return {string: [\"a\", \"b\"], number: [1, 2]}', function() {\n  expect(findElementsByType([1, 2, \"a\", \"b\", true, false], \"a\", 2)).to.deep.equal({\n    string: [\"a\", \"b\"],\n    number: [1, 2]\n  });\n});\n\nit('findElementsByType([\"x\", \"y\", \"z\"], \"y\", \"x\") should return {string: [\"x\", \"y\", \"z\"]}', function() {\n  expect(findElementsByType([\"x\", \"y\", \"z\"], \"y\", \"x\")).to.deep.equal({\n    string: [\"x\", \"y\", \"z\"]\n  });\n});\n\nit('findElementsByType([true, false, true, false], false) should return {boolean: [true, false, true, false]}', function() {\n  expect(findElementsByType([true, false, true, false], false)).to.deep.equal({\n    boolean: [true, false, true, false]\n  });\n});\n\nit('findElementsByType([null, undefined, null], null, undefined) should return {object: [null, null], undefined: [undefined]}', function() {\n  expect(findElementsByType([null, undefined, null], null, undefined)).to.deep.equal({\n    object: [null, null],\n    undefined: [undefined]\n  });\n});\n\nit('findElementsByType([1, \"a\", true], 1, \"a\", true) should return {number: [1], string: [\"a\"], boolean: [true]}', function() {\n  expect(findElementsByType([1, \"a\", true], 1, \"a\", true)).to.deep.equal({\n    number: [1],\n    string: [\"a\"],\n    boolean: [true]\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}