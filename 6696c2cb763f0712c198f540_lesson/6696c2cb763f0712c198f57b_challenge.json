{
  "_id": "6696c2cb763f0712c198f57b",
  "name": {
    "en": "/*",
    "ru": "Группировка и сглаживание массивов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `groupAndFlatten`, которая принимает два аргумента:\n\n * массив `arrays`, содержащий несколько массивов (возможно, с подмассивами),\n * функцию `groupFunction`, которая определяет критерий группировки элементов.\n\nФункция должна сначала \"выпрямить\" все массивы в один уровень, затем сгруппировать элементы в соответствии с критерием, заданным `groupFunction`, и вернуть объект, где ключи — это результаты `groupFunction`, а значения — массивы элементов, соответствующие этим ключам.\n\n\nПримеры Запуска Функции:\n```javascript\nconst arrays = [[1, 2, 3], [4, 5], [6, [7, 8]]];\nconst isOdd = num => num % 2 !== 0 ? 'odd' : 'even';\nconsole.log(groupAndFlatten(arrays, isOdd));\n// Вывод: { odd: [1, 3, 5, 7], even: [2, 4, 6, 8] }\n\nconst arrays2 = [['apple', 'banana'], ['cherry', 'date']];\nconst startsWith = str => str[0];\nconsole.log(groupAndFlatten(arrays2, startsWith));\n// Вывод: { a: ['apple'], b: ['banana'], c: ['cherry'], d: ['date'] }\n```"
  },
  "initialSolution": "function groupAndFlatten(){\n\n}",
  "completedSolution": "function groupAndFlatten(arr, func) {\n  arr = arr.flat(Infinity)\n  let res = {}\n\n  arr.forEach(el => {\n    const temp = func(el)\n    if(temp in res) res[temp].push(el)\n    else res[temp] = [el]\n  })\n\n  return res;\n}",
  "openTest": "it('Created function groupAndFlatten', () => {\n  expect(groupAndFlatten).to.be.a('function');\n});\n\nit('Function groupAndFlatten should include method flat()', () => {\n  const res = groupAndFlatten.toString()\n  expect(res).to.include('.flat(')\n});\n\nit(\"groupAndFlatten([[1, 2, 3], [4, 5], [6, [7, 8]]], num => num % 2 !== 0 ? 'odd' : 'even') should return { odd: [1, 3, 5, 7], even: [2, 4, 6, 8] }\", function() {\n  expect(groupAndFlatten([[1, 2, 3], [4, 5], [6, [7, 8]]], num => num % 2 !== 0 ? 'odd' : 'even')).to.deep.equal({ odd: [1, 3, 5, 7], even: [2, 4, 6, 8] });\n});\n\nit(\"groupAndFlatten([['apple', 'banana'], ['cherry', 'date']], str => str[0]) should return { a: ['apple'], b: ['banana'], c: ['cherry'], d: ['date'] }\", function() {\n  expect(groupAndFlatten([['apple', 'banana'], ['cherry', 'date']], str => str[0])).to.deep.equal({ a: ['apple'], b: ['banana'], c: ['cherry'], d: ['date'] });\n});\n\nit(\"groupAndFlatten([['one', 'two'], ['three']], str => str.length) should return { 3: ['one', 'two'], 5: ['three'] }\", function() {\n  expect(groupAndFlatten([['one', 'two'], ['three']], str => str.length)).to.deep.equal({ 3: ['one', 'two'], 5: ['three'] });\n});\n\nit(\"groupAndFlatten([[10, 20], [30, 40, 50]], num => num < 30 ? 'low' : 'high') should return { low: [10, 20], high: [30, 40, 50] }\", function() {\n  expect(groupAndFlatten([[10, 20], [30, 40, 50]], num => num < 30 ? 'low' : 'high')).to.deep.equal({ low: [10, 20], high: [30, 40, 50] });\n});\n\nit(\"groupAndFlatten([[true, false], [false, true]], bool => bool) should return { true: [true, true], false: [false, false] }\", function() {\n  expect(groupAndFlatten([[true, false], [false, true]], bool => bool)).to.deep.equal({ true: [true, true], false: [false, false] });\n});\n\nit(\"groupAndFlatten([[null, undefined], [null, 5]], value => value == null ? 'nullish' : 'valid') should return { nullish: [null, undefined, null], valid: [5] }\", function() {\n  expect(groupAndFlatten([[null, undefined], [null, 5]], value => value == null ? 'nullish' : 'valid')).to.deep.equal({ nullish: [null, undefined, null], valid: [5] });\n});\n\nit(\"groupAndFlatten([[1.5, 2.5], [1.1, 2.2]], num => Math.floor(num)) should return { 1: [1.5, 1.1], 2: [2.5, 2.2] }\", function() {\n  expect(groupAndFlatten([[1.5, 2.5], [1.1, 2.2]], num => Math.floor(num))).to.deep.equal({ 1: [1.5, 1.1], 2: [2.5, 2.2] });\n});\n\nit(\"groupAndFlatten([['short', 'longer'], ['medium', 'tiny']], str => str.length) should return { 4: ['tiny'], 5: ['short'], 6: ['longer', 'medium'] }\", function() {\n  expect(groupAndFlatten([['short', 'longer'], ['medium', 'tiny']], str => str.length)).to.deep.equal({ 4: ['tiny'], 5: ['short'], 6: ['longer', 'medium'] });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}