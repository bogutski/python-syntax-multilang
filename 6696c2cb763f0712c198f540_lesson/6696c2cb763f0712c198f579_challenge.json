{
  "_id": "6696c2cb763f0712c198f579",
  "name": {
    "en": "/*",
    "ru": "Глубина сглаживания с условием"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `conditionalFlatten`, которая принимает два аргумента: вложенный массив `nestedArray` и целочисленный параметр `depth`.\n\nФункция должна выпрямить массив до указанной глубины `depth`, а затем применить фильтр, который удаляет все значения `null` и `undefined` из результата.\n\n\nПримеры Запуска Функции:\n```javascript\nconditionalFlatten([null, [[undefined, 2], 3]], 2); // [2, 3]\nconditionalFlatten([[['a', null], undefined], [['b', null], 'c']], Infinity); // ['a', 'b', 'c']\nconditionalFlatten([1, [2, null, [3, undefined]], [4, [5, 6]]], 1); // [1, 2, [3, undefined], 4, [5, 6]]\n```"
  },
  "initialSolution": "function conditionalFlatten(){\n\n}",
  "completedSolution": "function conditionalFlatten(arr, depth) {\n  const flatten = arr.flat(depth)\n  let res = []\n\n  for(let el of flatten){\n    if(el !== undefined && el !== null) res.push(el)\n  }\n\n  return res;\n}",
  "openTest": "it('Created function conditionalFlatten', () => {\n  expect(conditionalFlatten).to.be.a('function');\n});\n\nit('Function conditionalFlatten should include method flat()', () => {\n  const res = conditionalFlatten.toString()\n  expect(res).to.include('.flat(')\n});\n\nit(\"conditionalFlatten([1, [2, null, [3, undefined]], [4, [5, 6]]], 1) should return [1, 2, [3, undefined], 4, [5, 6]]\", function() {\n  expect(conditionalFlatten([1, [2, null, [3, undefined]], [4, [5, 6]]], 1)).to.deep.equal([1, 2, [3, undefined], 4, [5, 6]]);\n});\n\nit(\"conditionalFlatten([null, [[undefined, 2], 3]], 2) should return [2, 3]\", function() {\n  expect(conditionalFlatten([null, [[undefined, 2], 3]], 2)).to.deep.equal([2, 3]);\n});\n\nit(\"conditionalFlatten([[['a']], [['b', null], 'c']], Infinity) should return ['a', 'b', 'c']\", function() {\n  expect(conditionalFlatten([[['a']], [['b', null], 'c']], Infinity)).to.deep.equal(['a', 'b', 'c']);\n});\n\nit(\"conditionalFlatten([[null, [1]], [2, [3]]], 1) should remove null values and return [1, 2, [3]]\", function() {\n  expect(conditionalFlatten([[null, [1]], [2, [3]]], 1)).to.deep.equal([[1], 2, [3]]);\n});\n\nit(\"conditionalFlatten([[], [[], [0]]], 2) should return [0]\", function() {\n  expect(conditionalFlatten([[], [[], [0]]], 2)).to.deep.equal([0]);\n});\n\nit(\"conditionalFlatten([['', false], [true, NaN]], 1) should filter out only null and undefined\", function() {\n  expect(conditionalFlatten([['', false], [true, NaN]], 1)).to.deep.equal(['', false, true, NaN]);\n});\n\nit(\"conditionalFlatten([[1, [2]], [[3, 4], [5]]], 1) should return [1, [2], [3, 4], [5]]\", function() {\n  expect(conditionalFlatten([[1, [2]], [[3, 4], [5]]], 1)).to.deep.equal([1, [2], [3, 4], [5]]);\n});\n\nit(\"conditionalFlatten([['hello', undefined], [null, 'world']], Infinity) should return ['hello', 'world']\", function() {\n  expect(conditionalFlatten([['hello', undefined], [null, 'world']], Infinity)).to.deep.equal(['hello', 'world']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}