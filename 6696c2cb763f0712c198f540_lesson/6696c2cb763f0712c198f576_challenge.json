{
  "_id": "6696c2cb763f0712c198f576",
  "name": {
    "en": "/*",
    "ru": "Слияние массивов с удалением вложенности"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `mergeAndFlatten`, которая принимает два аргумента — массивы `array1` и `array2`.\n\nФункция должна объединить эти два массива в один и \"выпрямить\" любую вложенность, используя метод `Array.prototype.flat()`.\n\nВ результате должен быть возвращен новый массив, содержащий все элементы обоих массивов на одном уровне.\n\n\nПримеры Запуска Функции:\n```javascript\nmergeAndFlatten([1, 2, [3]], [4, [5, 6]]); // [1, 2, 3, 4, 5, 6]\nmergeAndFlatten([[1, 2], [3, 4]], [[5, 6], 7]); // [1, 2, 3, 4, 5, 6, 7]\nmergeAndFlatten(['a', ['b']], [['c'], 'd']); // ['a', 'b', 'c', 'd']\n```"
  },
  "initialSolution": "function mergeAndFlatten(){\n\n}",
  "completedSolution": "function mergeAndFlatten(arr1, arr2) {\n  return [...arr1, ...arr2].flat(Infinity);\n}",
  "openTest": "it('Created function mergeAndFlatten', () => {\n  expect(mergeAndFlatten).to.be.a('function');\n});\n\nit('Function mergeAndFlatten should include method flat()', () => {\n  const res = mergeAndFlatten.toString()\n  expect(res).to.include('.flat(')\n});\n\nit(\"mergeAndFlatten([1, 2, [3]], [4, [5, 6]]) should return [1, 2, 3, 4, 5, 6]\", function() {\n  expect(mergeAndFlatten([1, 2, [3]], [4, [5, 6]])).to.deep.equal([1, 2, 3, 4, 5, 6]);\n});\n\nit(\"mergeAndFlatten([[1, 2], [3, 4]], [[5, 6], 7]) should return [1, 2, 3, 4, 5, 6, 7]\", function() {\n  expect(mergeAndFlatten([[1, 2], [3, 4]], [[5, 6], 7])).to.deep.equal([1, 2, 3, 4, 5, 6, 7]);\n});\n\nit(\"mergeAndFlatten(['a', ['b']], [['c'], 'd']) should return ['a', 'b', 'c', 'd']\", function() {\n  expect(mergeAndFlatten(['a', ['b']], [['c'], 'd'])).to.deep.equal(['a', 'b', 'c', 'd']);\n});\n\nit(\"mergeAndFlatten([], []) should return an empty array\", function() {\n  expect(mergeAndFlatten([], [])).to.deep.equal([]);\n});\n\nit(\"mergeAndFlatten([[], [[]]], [[[]], []]) should return an empty array\", function() {\n  expect(mergeAndFlatten([[], [[]]], [[[]], []])).to.deep.equal([]);\n});\n\nit(\"mergeAndFlatten([0, [1]], [[2], 3]) should return [0, 1, 2, 3]\", function() {\n  expect(mergeAndFlatten([0, [1]], [[2], 3])).to.deep.equal([0, 1, 2, 3]);\n});\n\nit(\"mergeAndFlatten([[null, undefined], [true, false]], [[NaN], [Infinity]]) should return [null, undefined, true, false, NaN, Infinity]\", function() {\n  expect(mergeAndFlatten([[null, undefined], [true, false]], [[NaN], [Infinity]])).to.deep.equal([null, undefined, true, false, NaN, Infinity]);\n});\n\nit(\"mergeAndFlatten(['flat', ['nested']], [['more', 'nested'], 'values']) should return ['flat', 'nested', 'more', 'nested', 'values']\", function() {\n  expect(mergeAndFlatten(['flat', ['nested']], [['more', 'nested'], 'values'])).to.deep.equal(['flat', 'nested', 'more', 'nested', 'values']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}