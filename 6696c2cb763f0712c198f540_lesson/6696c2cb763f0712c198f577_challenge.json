{
  "_id": "6696c2cb763f0712c198f577",
  "name": {
    "en": "/*",
    "ru": "Условное сглаживание и фильтрация вложенных массивов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterAndFlatten`, которая принимает два аргумента — вложенный массив `nestedArray` и функцию `predicate`.\n\nФункция должна сначала \"выпрямить\" все элементы вложенных массивов до одного уровня, используя метод `Array.prototype.flat()`, а затем фильтровать результат по заданному условию в функции `predicate`, возвращая новый массив только с теми элементами, которые удовлетворяют условию `predicate`.\n\n\nПримеры запуска функции:\n```javascript\nfilterAndFlatten([[1, 2], [3, 4]], x => x > 2); // [3, 4]\nfilterAndFlatten([1, [2, 3], [4, [5, 6]]], x => x % 2 === 0); // [2, 4, 6]\nfilterAndFlatten([['a', ['b']], ['1', [2, [3]]]], x => typeof x === 'string'); // ['a', 'b', '1']\n```"
  },
  "initialSolution": "function filterAndFlatten(){\n\n}",
  "completedSolution": "function filterAndFlatten(arr, isTrue) {\n  const flattenArray = arr.flat(Infinity)\n  let result = []\n\n  for(let el of flattenArray){\n    if(isTrue(el)) result.push(el)\n  }\n\n  return result;\n}",
  "openTest": "it('Created function filterAndFlatten', () => {\n  expect(filterAndFlatten).to.be.a('function');\n});\n\nit('Function filterAndFlatten should include method flat()', () => {\n  const res = filterAndFlatten.toString()\n  expect(res).to.include('.flat(')\n});\n\nit(\"filterAndFlatten([1, [2, 3], [4, [5, 6]]], x => x % 2 === 0) should return [2, 4, 6]\", function() {\n  expect(filterAndFlatten([1, [2, 3], [4, [5, 6]]], x => x % 2 === 0)).to.deep.equal([2, 4, 6]);\n});\n\nit(\"filterAndFlatten([[1, 2], [3, 4]], x => x > 2) should return [3, 4]\", function() {\n  expect(filterAndFlatten([[1, 2], [3, 4]], x => x > 2)).to.deep.equal([3, 4]);\n});\n\nit(\"filterAndFlatten([['a', ['b']], ['c', ['d', ['e']]]], x => typeof x === 'string') should return ['a', 'b', 'c', 'd', 'e']\", function() {\n  expect(filterAndFlatten([['a', ['b']], ['c', ['d', ['e']]]], x => typeof x === 'string')).to.deep.equal(['a', 'b', 'c', 'd', 'e']);\n});\n\nit(\"filterAndFlatten([0, [null, undefined]], x => x != null) should return [0]\", function() {\n  expect(filterAndFlatten([0, [null, undefined]], x => x != null)).to.deep.equal([0]);\n});\n\nit(\"filterAndFlatten([[true, false], [false]], x => x) should return [true]\", function() {\n  expect(filterAndFlatten([[true, false], [false]], x => x)).to.deep.equal([true]);\n});\n\nit(\"filterAndFlatten([[NaN, Infinity], [1]], x => !isNaN(x)) should return [Infinity, 1]\", function() {\n  expect(filterAndFlatten([[NaN, Infinity], [1]], x => !isNaN(x))).to.deep.equal([Infinity, 1]);\n});\n\nit(\"filterAndFlatten([['flat', ['nested']], [['more', 'nested'], 'values']], x => x.includes('nested')) should return ['nested', 'nested']\", function() {\n  expect(filterAndFlatten([['flat', ['nested']], [['more', 'nested'], 'values']], x => x.includes('nested'))).to.deep.equal(['nested', 'nested']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}