{
  "_id": "6696c2cb763f0712c198f670",
  "name": {
    "en": "/*",
    "ru": "Обращение порядка слов в строках массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `reverseWordsInArray`, которая принимает массив строк.\n\nФункция должна обработать каждую строку таким образом, чтобы слова в строке следовали в обратном порядке, но порядок самих строк в массиве оставался неизменным.\n\nВозвращаемый результат должен быть новым массивом с измененными строками.\n\n\nПримеры запуска функции:\n```javascript\nreverseWordsInArray([\"Hello world\", \"Good morning\"]); // [\"world Hello\", \"morning Good\"]\nreverseWordsInArray([\"One two three\", \"Four five six\"]); // [\"three two One\", \"six five Four\"]\nreverseWordsInArray([\"Single\"]); // [\"Single\"]\n```"
  },
  "initialSolution": "function reverseWordsInArray(){\n\n}",
  "completedSolution": "function reverseWordsInArray(array) {\n  let result = []\n\n  array.forEach(string => {\n    const element = string.split(' ').reverse().join(' ')\n    result.push(element)\n  })\n\n  return result;\n}",
  "openTest": "it('Created function reverseWordsInArray', () => {\n  expect(reverseWordsInArray).to.be.a('function');\n});\n\nit(\"reverseWordsInArray(['Hello world', 'Good morning']) should return ['world Hello', 'morning Good']\", () => {\n  expect(reverseWordsInArray([\"Hello world\", \"Good morning\"])).to.deep.equal([\"world Hello\", \"morning Good\"]);\n});\n\nit(\"reverseWordsInArray(['One two three', 'Four five six']) should return ['three two One', 'six five Four']\", () => {\n  expect(reverseWordsInArray([\"One two three\", \"Four five six\"])).to.deep.equal([\"three two One\", \"six five Four\"]);\n});\n\nit(\"reverseWordsInArray(['Single']) should return ['Single']\", () => {\n  expect(reverseWordsInArray([\"Single\"])).to.deep.equal([\"Single\"]);\n});\n\nit(\"reverseWordsInArray([]) should return an empty array\", () => {\n  expect(reverseWordsInArray([])).to.deep.equal([]);\n});\n\nit(\"reverseWordsInArray(['First', 'Second Third']) should return ['First', 'Third Second']\", () => {\n  expect(reverseWordsInArray(['First', 'Second Third'])).to.deep.equal(['First', 'Third Second']);\n});\n\nit(\"reverseWordsInArray(['Another test', 'With more words']) should return ['test Another', 'words more With']\", () => {\n  expect(reverseWordsInArray(['Another test', 'With more words'])).to.deep.equal(['test Another', 'words more With']);\n});\n\nit(\"reverseWordsInArray(['Empty next', '']) should return ['next Empty', '']\", () => {\n  expect(reverseWordsInArray(['Empty next', ''])).to.deep.equal(['next Empty', '']);\n});\n\nit(\"reverseWordsInArray(['Hello', 'world!']) should return ['Hello', 'world!']\", () => {\n  expect(reverseWordsInArray(['Hello', 'world!'])).to.deep.equal(['Hello', 'world!']);\n});\n\nit(\"reverseWordsInArray(['Mixed 123 numbers', 'and symbols #!']) should return ['numbers 123 Mixed', '#! symbols and']\", () => {\n  expect(reverseWordsInArray(['Mixed 123 numbers', 'and symbols #!'])).to.deep.equal(['numbers 123 Mixed', '#! symbols and']);\n});\n\nit(\"original array should not be modified\", () => {\n  const array = ['1 2 3', 'a b c', 'true false'];\n  reverseWordsInArray(array)\n  expect(array).to.deep.equal(['1 2 3', 'a b c', 'true false']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}