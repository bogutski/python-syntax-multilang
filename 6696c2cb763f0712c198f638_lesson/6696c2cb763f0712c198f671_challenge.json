{
  "_id": "6696c2cb763f0712c198f671",
  "name": {
    "en": "/*",
    "ru": "Сортировка массива строк по длине и обращение их порядка"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortAndReverseStringsByLength`, которая принимает массив строк.\n\nФункция должна сначала отсортировать строки по убыванию их длины. Затем функция должна обратить порядок отсортированных строк в массиве и вернуть результат в виде нового массива.\n\n\nПримеры запуска функции:\n```javascript\nsortAndReverseStringsByLength([\"short\", \"longer\", \"longest\", \"tiny\"]); // ['tiny', 'short', 'longer', 'longest']\nsortAndReverseStringsByLength([\"apple\", \"bananas\", \"cherry\"]); // ['apple', 'cherry', 'bananas']\nsortAndReverseStringsByLength([]); // []\n```"
  },
  "initialSolution": "function sortAndReverseStringsByLength(){\n\n}",
  "completedSolution": "function sortAndReverseStringsByLength(array) {\n  const result = [...array].sort((a, b) => b.length - a.length)\n  return result.reverse();\n}",
  "openTest": "it('Created function sortAndReverseStringsByLength', () => {\n  expect(sortAndReverseStringsByLength).to.be.a('function');\n});\n\nit(\"original array should not be modified\", () => {\n  const array = ['a', 'abc', 'abcd', 'b', 'ab'];\n  sortAndReverseStringsByLength(array)\n  expect(array).to.deep.equal(['a', 'abc', 'abcd', 'b', 'ab']);\n});\n\nit(\"sortAndReverseStringsByLength should have the reverse method\", () => {\n  const result = sortAndReverseStringsByLength.toString();\n  expect(result).to.include('.reverse()');\n});\n\nit(\"sortAndReverseStringsByLength(['short', 'longer', 'longest', 'tiny']) should return ['tiny', 'short', 'longer', 'longest']\", () => {\n  expect(sortAndReverseStringsByLength([\"short\", \"longer\", \"longest\", \"tiny\"])).to.deep.equal([\"tiny\", \"short\", \"longer\", \"longest\"]);\n});\n\nit(\"sortAndReverseStringsByLength(['apple', 'banana', 'cherry']) should return ['apple', 'cherry', 'banana']\", () => {\n  expect(sortAndReverseStringsByLength([\"apple\", \"banana\", \"cherry\"])).to.deep.equal([\"apple\", \"cherry\", \"banana\"]);\n});\n\nit(\"sortAndReverseStringsByLength([]) should return an empty array\", () => {\n  expect(sortAndReverseStringsByLength([])).to.deep.equal([]);\n});\n\nit(\"sortAndReverseStringsByLength(['one', 'two', 'three', 'four']) should return ['two', 'one', 'four', 'three']\", () => {\n  expect(sortAndReverseStringsByLength([\"one\", \"two\", \"three\", \"four\"])).to.deep.equal([\"two\", \"one\", \"four\", \"three\"]);\n});\n\nit(\"sortAndReverseStringsByLength(['word']) should return ['word']\", () => {\n  expect(sortAndReverseStringsByLength([\"word\"])).to.deep.equal([\"word\"]);\n});\n\nit(\"sortAndReverseStringsByLength(['phrase', 'a', 'substantially', 'longer', 'sentence']) should return ['a', 'longer', 'phrase', 'sentence', 'substantially']\", () => {\n  expect(sortAndReverseStringsByLength([\"phrase\", \"a\", \"substantially\", \"longer\", \"sentence\"])).to.deep.equal([\"a\", \"longer\", \"phrase\", \"sentence\", \"substantially\"]);\n});\n\nit(\"sortAndReverseStringsByLength(['hello', 'world']) should return ['world', 'hello']\", () => {\n  expect(sortAndReverseStringsByLength([\"hello\", \"world\"])).to.deep.equal([\"world\", \"hello\"]);\n});\n\nit(\"sortAndReverseStringsByLength(['test', 'testing', 'tests']) should return ['test', 'tests', 'testing']\", () => {\n  expect(sortAndReverseStringsByLength([\"test\", \"testing\", \"tests\"])).to.deep.equal([\"test\", \"tests\", \"testing\"]);\n});\n\nit(\"sortAndReverseStringsByLength(['data', 'information', 'fact']) should return ['fact', 'data', 'information']\", () => {\n  expect(sortAndReverseStringsByLength([\"data\", \"information\", \"fact\"])).to.deep.equal([\"fact\", \"data\", \"information\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}