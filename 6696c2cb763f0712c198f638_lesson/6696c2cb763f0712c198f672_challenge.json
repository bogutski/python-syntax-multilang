{
  "_id": "6696c2cb763f0712c198f672",
  "name": {
    "en": "/*",
    "ru": "Сортировка и обращение массива по индивидуальным критериям"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortAndReverseByCriteria`, которая принимает массив объектов и строку, представляющую ключ объекта.\n\nФункция должна сортировать массив по значению этого ключа в порядке убывания. После сортировки, функция должна перевернуть порядок объектов в массиве и вернуть результат.\n\n\nПримеры запуска функции:\n```javascript\nconst items = [\n  { name: \"John\", age: 25 },\n  { name: \"Jane\", age: 30 },\n  { name: \"Jim\", age: 20 }\n];\nconsole.log(sortAndReverseByCriteria(items, 'age'));\n// [{ name: \"John\", age: 25 },\n//  { name: \"Jane\", age: 30 },\n//  { name: \"Jim\", age: 20 }]\n```"
  },
  "initialSolution": "function sortAndReverseByCriteria(){\n\n}",
  "completedSolution": "function sortAndReverseByCriteria(array, key) {\n  return array.toSorted((a, b) => a[key] - b[key]).reverse();\n}",
  "openTest": "it('Created function sortAndReverseByCriteria', () => {\n  expect(sortAndReverseByCriteria).to.be.a('function');\n});\n\nit(\"Original array should not be modified\", () => {\n  const array  = [\n    { name: \"John\", age: 25 },\n    { name: \"Jane\", age: 30 },\n    { name: \"Jim\", age: 20 }\n  ];\n  sortAndReverseByCriteria(array, 'age')\n  expect(array).to.deep.equal([\n    { name: \"John\", age: 25 },\n    { name: \"Jane\", age: 30 },\n    { name: \"Jim\", age: 20 }\n  ]);\n});\n\nit(\"sortAndReverseByCriteria should have the reverse method\", () => {\n  const result = sortAndReverseByCriteria.toString();\n  expect(result).to.include('.reverse()');\n});\n\nit(\"sortAndReverseByCriteria([{ name: 'John', age: 25 }, { name: 'Jane', age: 30 }, { name: 'Jim', age: 20 }], 'age') should return [{ name: 'Jane', age: 30 }, { name: 'John', age: 25 }, { name: 'Jim', age: 20 }]\", () => {\n  expect(sortAndReverseByCriteria([{ name: 'John', age: 25 }, { name: 'Jane', age: 30 }, { name: 'Jim', age: 20 }], 'age'))\n      .to.deep.equal([{ name: 'Jane', age: 30 }, { name: 'John', age: 25 }, { name: 'Jim', age: 20 }]);\n});\n\nit(\"sortAndReverseByCriteria([{ name: 'Apple', value: 2 }, { name: 'Banana', value: 3 }, { name: 'Cherry', value: 1 }], 'value') should return [{ name: 'Banana', value: 3 }, { name: 'Apple', value: 2 }, { name: 'Cherry', value: 1 }]\", () => {\n  expect(sortAndReverseByCriteria([{ name: 'Apple', value: 2 }, { name: 'Banana', value: 3 }, { name: 'Cherry', value: 1 }], 'value'))\n      .to.deep.equal([{ name: 'Banana', value: 3 }, { name: 'Apple', value: 2 }, { name: 'Cherry', value: 1 }]);\n});\n\nit(\"sortAndReverseByCriteria([], 'value') should return an empty array\", () => {\n  expect(sortAndReverseByCriteria([], 'value')).to.deep.equal([]);\n});\n\nit(\"sortAndReverseByCriteria([{ name: 'Alpha' }, { name: 'Beta' }], 'name') should return [{ name: 'Beta' }, { name: 'Alpha' }]\", () => {\n  expect(sortAndReverseByCriteria([{ name: 'Alpha' }, { name: 'Beta' }], 'name')).to.deep.equal([{ name: 'Beta' }, { name: 'Alpha' }]);\n});\n\nit(\"sortAndReverseByCriteria([{ name: 'Dog', age: 5 }, { name: 'Cat', age: 7 }, { name: 'Bird', age: 3 }], 'age') should return [{ name: 'Cat', age: 7 }, { name: 'Dog', age: 5 }, { name: 'Bird', age: 3 }]\", () => {\n  expect(sortAndReverseByCriteria([{ name: 'Dog', age: 5 }, { name: 'Cat', age: 7 }, { name: 'Bird', age: 3 }], 'age'))\n      .to.deep.equal([{ name: 'Cat', age: 7 }, { name: 'Dog', age: 5 }, { name: 'Bird', age: 3 }]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}