{
  "_id": "6696c2cb763f0712c198f66c",
  "name": {
    "en": "/*",
    "ru": "Обращение порядка элементов в массиве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `reverseArray`, которая принимает массив любых типов данных.\n\nФункция должна вернуть измененный массив, в котором элементы следуют в обратном порядке.\n\n\nПримеры запуска функции:\n```javascript\nreverseArray([1, 2, 3, 4, 5]); // [5, 4, 3, 2, 1]\nreverseArray(['a', 'b', 'c']); // ['c', 'b', 'a']\nreverseArray([]); // []\n```"
  },
  "initialSolution": "function reverseArray(){\n\n}",
  "completedSolution": "function reverseArray(arr) {\n  return arr.reverse();\n}",
  "openTest": "it('Created function reverseArray', () => {\n  expect(reverseArray).to.be.a('function');\n});\n\nit(\"reverseArray([1, 2, 3, 4, 5]) should return [5, 4, 3, 2, 1]\", () => {\n  let originalArray = [1, 2, 3, 4, 5];\n  reverseArray(originalArray);\n  expect(originalArray).to.deep.equal([5, 4, 3, 2, 1]);\n});\n\nit(\"reverseArray(['a', 'b', 'c']) should return ['c', 'b', 'a']\", () => {\n  let originalArray = ['a', 'b', 'c'];\n  reverseArray(originalArray);\n  expect(originalArray).to.deep.equal(['c', 'b', 'a']);\n});\n\nit(\"reverseArray([]) should return []\", () => {\n  let originalArray = [];\n  reverseArray(originalArray);\n  expect(originalArray).to.deep.equal([]);\n});\n\nit(\"reverseArray([1]) should return [1]\", () => {\n  let originalArray = [1];\n  reverseArray(originalArray);\n  expect(originalArray).to.deep.equal([1]);\n});\n\nit(\"reverseArray([1, 2]) should return [2, 1]\", () => {\n  let originalArray = [1, 2];\n  reverseArray(originalArray);\n  expect(originalArray).to.deep.equal([2, 1]);\n});\n\nit(\"reverseArray(['Hello', 'world']) should return ['world', 'Hello']\", () => {\n  let originalArray = ['Hello', 'world'];\n  reverseArray(originalArray);\n  expect(originalArray).to.deep.equal(['world', 'Hello']);\n});\n\nit(\"reverseArray([null, undefined, '']) should return ['', undefined, null]\", () => {\n  let originalArray = [null, undefined, ''];\n  reverseArray(originalArray);\n  expect(originalArray).to.deep.equal(['', undefined, null]);\n});\n\nit(\"reverseArray([true, false, true]) should return [true, false, true]\", () => {\n  let originalArray = [true, false, true];\n  reverseArray(originalArray);\n  expect(originalArray).to.deep.equal([true, false, true]);\n});\n\nit(\"reverseArray(['a', 1, null, undefined]) should return [undefined, null, 1, 'a']\", () => {\n  let originalArray = ['a', 1, null, undefined];\n  reverseArray(originalArray);\n  expect(originalArray).to.deep.equal([undefined, null, 1, 'a']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}