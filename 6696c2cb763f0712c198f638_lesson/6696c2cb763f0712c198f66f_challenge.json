{
  "_id": "6696c2cb763f0712c198f66f",
  "name": {
    "en": "/*",
    "ru": "Слияние и обращение порядка элементов в нескольких массивах"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `mergeAndReverse`, которая принимает произвольное количество массивов любых типов данных.\n\nФункция должна сначала объединить все эти массивы в один, а затем вернуть новый массив, в котором элементы следуют в обратном порядке.\n\nФункция должна создавать новый массив, не изменяя исходные.\n\n\nПримеры запуска функции:\n```javascript\nmergeAndReverse([1, 2], [3, 4], [5, 6]); // [6, 5, 4, 3, 2, 1]\nmergeAndReverse(['a', 'b'], ['c', 'd']); // ['d', 'c', 'b', 'a']\nmergeAndReverse([], [1, 2], ['a']); // ['a', 2, 1]\n```"
  },
  "initialSolution": "function mergeAndReverse(){\n\n}",
  "completedSolution": "function mergeAndReverse(...arr) {\n  return [...arr].flat().reverse();\n}",
  "openTest": "it('Created function mergeAndReverse', () => {\n  expect(mergeAndReverse).to.be.a('function');\n});\n\nit(\"mergeAndReverse([1, 2], [3, 4], [5, 6]) should return [6, 5, 4, 3, 2, 1]\", () => {\n  expect(mergeAndReverse([1, 2], [3, 4], [5, 6])).to.deep.equal([6, 5, 4, 3, 2, 1]);\n});\n\nit(\"mergeAndReverse(['a', 'b'], ['c', 'd']) should return ['d', 'c', 'b', 'a']\", () => {\n  expect(mergeAndReverse(['a', 'b'], ['c', 'd'])).to.deep.equal(['d', 'c', 'b', 'a']);\n});\n\nit(\"mergeAndReverse([], [1, 2], ['a']) should return ['a', 2, 1]\", () => {\n  expect(mergeAndReverse([], [1, 2], ['a'])).to.deep.equal(['a', 2, 1]);\n});\n\nit(\"mergeAndReverse([1]) should return [1]\", () => {\n  expect(mergeAndReverse([1])).to.deep.equal([1]);\n});\n\nit(\"mergeAndReverse() should return an empty array\", () => {\n  expect(mergeAndReverse()).to.deep.equal([]);\n});\n\nit(\"mergeAndReverse(['Hello', 'world'], [123]) should return [123, 'world', 'Hello']\", () => {\n  expect(mergeAndReverse(['Hello', 'world'], [123])).to.deep.equal([123, 'world', 'Hello']);\n});\n\nit(\"mergeAndReverse([true, false], [null, undefined], [1, 'two']) should return ['two', 1, undefined, null, false, true]\", () => {\n  expect(mergeAndReverse([true, false], [null, undefined], [1, 'two'])).to.deep.equal(['two', 1, undefined, null, false, true]);\n});\n\nit(\"mergeAndReverse can handle arrays with different data types and reverse them in place\", () => {\n  let originalArray = [1, 'two', {three: 3}, [4], null];\n  expect(mergeAndReverse(originalArray)).to.deep.equal([null, [4], {three: 3}, 'two', 1]);\n});\n\nit(\"mergeAndReverse should use the flat method to merge arrays\", () => {\n  const originalArrays = [[1, 2], [3, 4]];\n  const flattenedArray = originalArrays.flat();\n  mergeAndReverse(...originalArrays);\n  expect(flattenedArray).to.deep.equal([1, 2, 3, 4]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}