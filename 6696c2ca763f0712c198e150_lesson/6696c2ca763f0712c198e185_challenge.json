{
  "_id": "6696c2ca763f0712c198e185",
  "name": {
    "en": "Is the pizza salesman telling the truth?",
    "ru": "Правду ли говорит продавец пиццы?"
  },
  "instruction": {
    "en": "The pizza salesman says that a large pizza is more profitable than a small one in terms of price to size ratio.\n\nLet's check this statement with different diameters and prices.\n\nThe function `pizzaCompare` receives parameters:\n\n* `smallDiameter` - diameter of a small pizza,\n* `bigDiameter` - diameter of a large pizza,\n* `smallPrice` - price of a small pizza,\n* `bigPrice` - price of a large pizza.\n\nIf the large pizza is really more profitable, the function should return `true`, otherwise `false`.\n\nSolution algorithm:\n* 1. Find the area of the small pizza.\n* 2. Find the area of the large pizza\n* 3. find the price per square centimeter of a small pizza\n* 4. find the price per square centimeter of a large pizza\n* 5. compare prices per square centimeter\n* 6. Return the result of the comparison\n\nThe area of a circle is equal to `3.14 * radius ** 2'.\n\nHave you noticed that the `pizzaCompare` function has repetitive code? Try putting it in a separate function `getCircleArea` and calling it inside `pizzaCompare`.\n\nCreate a function `getCircleArea` that takes a single parameter `diameter` and returns the area of the circle. Use this function inside `pizzaCompare`.\n\nThe `getCircleArea` function must be declared next to the `pizzaCompare` function, but not inside it. The function `pizzaCompare` must call the function `getCircleArea` inside itself.\n\nAn example of two functions:\n```javascript\nfunction getRoomArea(width, length) {\n  return width * length;\n}\n\nfunction twoRoomsAreaCompare(width1, length1, width2, length2) {\n  const area1 = getRoomArea(width1, length1);\n  const area2 = getRoomArea(width2, length2);\n  return area1 > area2;\n}\n```",
    "ru": "Продавец пиццы говорит, что большая пицца выгоднее маленькой по соотношению цены и размера.\n\nДавайте проверим это утверждение при разных диаметрах и ценах.\n\nВ функцию `pizzaCompare` передаются параметры:\n\n* `smallDiameter` - диаметр маленькой пиццы,\n* `bigDiameter` - диаметр большой пиццы,\n* `smallPrice` - цена маленькой пиццы,\n* `bigPrice` - цена большой пиццы.\n\nЕсли большая пицца действительно выгоднее, то функция должна вернуть `true`, иначе `false`.\n\nАлгоритм решения:\n* 1. Найти площадь маленькой пиццы\n* 2. Найти площадь большой пиццы\n* 3. Найти цену за квадратный сантиметр маленькой пиццы\n* 4. Найти цену за квадратный сантиметр большой пиццы\n* 5. Сравнить цены за квадратный сантиметр\n* 6. Вернуть результат сравнения\n\nПлощадь круга равна `3.14 * radius ** 2`.\n\nВы заметили, что в функции `pizzaCompare` есть повторяющийся код? Попробуйте вынести его в отдельную функцию `getCircleArea` и вызывать ее внутри `pizzaCompare`.\n\nСоздайте функцию `getCircleArea`, которая принимает один параметр `diameter` и возвращает площадь круга. Используйте эту функцию внутри `pizzaCompare`.\n\nФункция `getCircleArea` должна быть объявлена рядом с функцией `pizzaCompare`, но не внутри ее. Функция `pizzaCompare` должна вызывать функцию `getCircleArea` внутри себя.\n\nПример двух функций:\n```javascript\nfunction getRoomArea(width, length) {\n  return width * length;\n}\n\nfunction twoRoomsAreaCompare(width1, length1, width2, length2) {\n  const area1 = getRoomArea(width1, length1);\n  const area2 = getRoomArea(width2, length2);\n  return area1 > area2;\n}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function getCircleArea(diameter) {\n  return 3.14 * (diameter / 2) ** 2;\n}\n\nfunction pizzaCompare(smallDiameter, bigDiameter, smallPrice, bigPrice) {\n  const smallArea = getCircleArea(smallDiameter);\n  const bigArea = getCircleArea(bigDiameter);\n  const smallPricePerSquareCm = smallPrice / smallArea;\n  const bigPricePerSquareCm = bigPrice / bigArea;\n  return bigPricePerSquareCm < smallPricePerSquareCm;\n}",
  "openTest": "it('Created function pizzaCompare', () => {\n  expect(pizzaCompare).to.be.a('function');\n});\n\nit('pizzaCompare(10, 20, 100, 200) should return true', () => {\n  expect(pizzaCompare(10, 20, 100, 200)).to.be.true;\n});\n\nit('pizzaCompare(10, 20, 200, 100) should return true', () => {\n  expect(pizzaCompare(10, 20, 200, 100)).to.be.true;\n});\n\nit('pizzaCompare(10, 20, 100, 100) should return true', () => {\n  expect(pizzaCompare(10, 20, 100, 100)).to.be.true;\n});\n\nit('pizzaCompare(10, 20, 200, 200) should return true', () => {\n  expect(pizzaCompare(10, 20, 200, 200)).to.be.true;\n});\n\nit('Created function getCircleArea', () => {\n  expect(getCircleArea).to.be.a('function');\n});\n\nit('getCircleArea(10) should return 78.5', () => {\n  expect(getCircleArea(10)).to.equal(78.5);\n});\n\nit('getCircleArea(20) should return 314', () => {\n  expect(getCircleArea(20)).to.equal(314);\n});\n\nit('getCircleArea(30) should return 706.5', () => {\n  expect(getCircleArea(30)).to.equal(706.5);\n});\n\nit('pizzaCompare should contain getCircleArea', () => {\n  expect(pizzaCompare.toString().includes('getCircleArea')).to.be.true;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}