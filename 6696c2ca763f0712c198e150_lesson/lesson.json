{
  "_id": "6696c2ca763f0712c198e150",
  "content": {
    "ru": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/girl-and-numbers-signs.png)\n\nТип данных `Boolean` может принимать 2 значения: _**true**_ или _**false**_. Получить их мы можем при сравнении чисел.\n\nДля сравнения чисел существуют такие операторы:\n\n`>` — возвращает `true`, если левый операнд **больше** правого.\n\n`>=` — возвращает `true`, если левый операнд **больше или равен** правому операнду.\n\n`<` — возвращает `true`, если левый операнд **меньше** правого.\n\n`<=` — возвращает `true`, если левый операнд **меньше или равен** правому операнду.\n\n`===` — возвращает `true`, если операнды **строго равны**.\n\n`!==` — возвращает `true`, если операнды **строго не равны**.\n\n\nПримеры:\n\n```javascript\nconsole.log(3 > 2);    // true — верно, 3 больше 2\nconsole.log(5 > 10);   // false — неверно, 5 меньше 10\n\nconsole.log(5 < 10);   // true\nconsole.log(19 < 8);   // false\n\nconsole.log(20 >= 20); // true\nconsole.log(30 <= 10); // false\n```\n\nСравнивать можно также и переменные:\n\n```javascript\nconst a = 35;\nconst b = 83;\n\nconsole.log(a < b);   // true\nconsole.log(a > b);   // false\n\nconsole.log(a <= b);  // true\nconsole.log(a >= b);  // false\n```\n\n\n### Оператор строгого равенства `===` тройное равно\n\nПишется, как тройной символ знака равенства `===`, и сравнивает два значения на равенство.\n\nОператор строгого равенства `===` проверяет равенство **без** приведения типов.\n\nЭтот оператор работает следующим образом:\n\n* `true` — если операнды имеют **одинаковые значения и одинаковый тип**.\n* `false` — если операнды имеют **одинаковые значения и разные типы**.\n* `false` — если операнды имеют **разные значения**.\n\n```javascript\nconst n1 = 2;\nconst n2 = 3;\nconst n3 = 2;\n\nconsole.log(n1 === n2); // false, 2 не равно 3\nconsole.log(n1 === n3); // true, 2 равно 2\n```\n\nТеперь зададим переменной `n2` значение другого типа:\n\n```javascript\nconst n1 = 2;\nconst n2 = '2';\n\nconsole.log(n1 === n2); // false, хоть значения и одинаковые, но типы разные\n```\n\nРассмотрим еще пару примеров:\n\n```javascript\nconsole.log(1 === true); // false\nconsole.log(0 === false); // false\nconsole.log('' === false); // false\n```\n\nЧтобы сравнить значения разных типов с помощью оператора строгого равенства, приведите значения к одному типу:\n\n```javascript\nconst n1 = 1;\nconst n2 = '1';\n\nconsole.log(n1 === n2); // false, хоть значения и одинаковые, но типы разные\nconsole.log(n1 === +n2); // true, c помощью унарного плюса привели строку к числу\n```\n\n### Оператор строгого неравенства `!==`\n\nПишется как одинарный символ знака восклицания и двойной символ знака равенства `!==`, сравнивает два значения на неравенство.\n\nОператор строгого неравенства `!==` проверяет неравенство **без** приведения типов.\n\nЭтот оператор работает следующим образом:\n\n* `false` — если операнды имеют **одинаковые значения и одинаковый тип**.\n* `true` — если операнды имеют **одинаковые значения и разные типы**.\n* `true` — если операнды имеют **разные значения**.\n\n```javascript\nconst n1 = 2;\nconst n2 = 1;\n\nconsole.log(n1 !== n2); // true, 2 не равно 1\n```\n\nРассмотрим еще пару примеров:\n\n```javascript\nconsole.log(1 !== 1); // false\nconsole.log(1 !== 2); // true\nconsole.log(1 !== '1'); // true\nconsole.log(1 !== '2'); // true\n```\n",
    "en": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/girl-and-numbers-signs.png)\n\nThe `Boolean` data type can take 2 values: _**true**_ or _**false**_. We can get them by comparing numbers.\n\nThere are such operators for comparing numbers:\n\n`>` - returns `true` if the left operand is **more** than the right operand.\n\n`>=` - returns `true` if the left operand **is greater than or equal to** the right operand.\n\n`<` - returns `true` if the left operand is **smaller** than the right operand.\n\n`<=` - returns `true` if the left operand is **less than or equal to** the right operand.\n\n`===` - returns `true` if the operands are **strictly equal**.\n\n`!==` - returns `true` if the operands **strictly are not equal**.\n\n\nExamples:\n\n```javascript\nconsole.log(3 > 2);    // true — true, 3 is greater than 2\nconsole.log(5 > 10);   // false — false, 5 is less than 10\n\nconsole.log(5 < 10);   // true\nconsole.log(19 < 8);   // false\n\nconsole.log(20 >= 20); // true\nconsole.log(30 <= 10); // false\n```\n\nVariables can also be compared:\n\n```javascript\nconst a = 35;\nconst b = 83;\n\nconsole.log(a < b);   // true\nconsole.log(a > b);   // false\n\nconsole.log(a <= b);  // true\nconsole.log(a >= b);  // false\n```\n\n\n### The strict equality operator `===` triple equal\n\nIt is written as a triple equal sign symbol `===`, and compares two values for equality.\n\nThe strict equality operator `===` checks for equality **without** type conversion.\n\nThis operator works as follows:\n\n* `true` - if the operands have **same values and the same type**.\n* `false` - if the operands have **same values and different types**.\n* `false` - if the operands have **different values**.\n\n```javascript\nconst n1 = 2;\nconst n2 = 3;\nconst n3 = 2;\n\nconsole.log(n1 === n2); // false, 2 is not 3\nconsole.log(n1 === n3); // true, 2 is 2\n```\n\nNow set the variable `n2` to a different type:\n\n```javascript\nconst n1 = 2;\nconst n2 = '2';\n\nconsole.log(n1 === n2); // false, though the values are the same, but the types are different\n```\n\nLet's look at a couple more examples:\n\n```javascript\nconsole.log(1 === true); // false\nconsole.log(0 === false); // false\nconsole.log('' === false); // false\n```\n\nTo compare values of different types using the strict equality operator, cast the values to the same type:\n\n```javascript\nconst n1 = 1;\nconst n2 = '1';\n\nconsole.log(n1 === n2); // false, though the values are the same, but the types are different\nconsole.log(n1 === +n2); // true, with the unary plus brought the string to a number\n```\n\n### The strict inequality operator `!==`\n\nSpelled as a single exclamation point character and a double equal sign character `!==`, it compares two values to an inequality.\n\nThe strict inequality operator `!==` tests an inequality **without** type conversion.\n\nThis operator works as follows:\n\n* `false` - if the operands have **same values and the same type**.\n* `true` - if the operands have **same values and different types**.\n* `true` - if the operands have **different values**.\n\n```javascript\nconst n1 = 2;\nconst n2 = 1;\n\nconsole.log(n1 !== n2); // true, 2 is not equal to 1\n```\n\nLet's look at a couple more examples:\n\n```javascript\nconsole.log(1 !== 1); // false\nconsole.log(1 !== 2); // true\nconsole.log(1 !== '1'); // true\nconsole.log(1 !== '2'); // true\n```\n",
    "es": "# Сравнение чисел. Операторы >, <, >=, <= language: es"
  },
  "video": {
    "ru": "https://youtu.be/3oF7Cscn6cI",
    "en": "",
    "es": ""
  }
}