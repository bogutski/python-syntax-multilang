{
  "_id": "6696c2cb763f0712c198f5b7",
  "name": {
    "en": "/*",
    "ru": "Группировка по статусу"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `groupByStatus, которая принимает массив объектов.\n\nКаждый объект содержит ключи: `name` и `status`.\n\nФункция должна возвращать объект, в котором ключи — это статусы, а значения — массивы имен, соответствующих каждому статусу.\n\n\nПример запуска функции\n```javascript\nconst users = [\n  { name: 'Alice', status: 'active' },\n  { name: 'Bob', status: 'inactive' },\n  { name: 'Carol', status: 'active' },\n  { name: 'Dave', status: 'inactive' }\n];\n\nconsole.log(groupByStatus(users));\n// Вывод: { active: ['Alice', 'Carol'], inactive: ['Bob', 'Dave'] }\n```"
  },
  "initialSolution": "function groupByStatus(){\n\n}",
  "completedSolution": "function groupByStatus(arr) {\n  let res = {}\n\n  arr.forEach(({name, status}) => {\n    if(!res.hasOwnProperty(status)) res[status] = []\n    res[status].push(name)\n  })\n\n  return res;\n}",
  "openTest": "it('Created function groupByStatus', () => {\n  expect(groupByStatus).to.be.a('function');\n});\n\nit('should group names by status', () => {\n  const users = [\n    { name: 'Alice', status: 'active' },\n    { name: 'Bob', status: 'inactive' },\n    { name: 'Carol', status: 'active' },\n    { name: 'Dave', status: 'inactive' }\n  ];\n  expect(groupByStatus(users)).to.deep.equal({ active: ['Alice', 'Carol'], inactive: ['Bob', 'Dave'] });\n});\n\nit('should return an empty object if the input array is empty', () => {\n  expect(groupByStatus([])).to.deep.equal({});\n});\n\nit('should handle cases where all users have the same status', () => {\n  const users = [{ name: 'Alice', status: 'active' }, { name: 'Bob', status: 'active' }];\n  expect(groupByStatus(users)).to.deep.equal({ active: ['Alice', 'Bob'] });\n});\n\nit('should return an object with empty arrays if there are statuses but no names', () => {\n  const users = [{ name: '', status: 'active' }, { name: '', status: 'inactive' }];\n  expect(groupByStatus(users)).to.deep.equal({ active: [''], inactive: [''] });\n});\n\nit('should handle users with no status defined', () => {\n  const users = [{ name: 'Alice', status: undefined }, { name: 'Bob', status: 'active' }];\n  expect(groupByStatus(users)).to.deep.equal({ undefined: ['Alice'], active: ['Bob'] });\n});\n\nit('should group users by status', () => {\n  const users = [\n    { name: 'Carol', status: 'active' },\n    { name: 'Alice', status: 'active' },\n    { name: 'Dave', status: 'inactive' },\n    { name: 'Bob', status: 'inactive' }\n  ];\n  const result = groupByStatus(users);\n  expect(result.active).to.deep.equal(['Carol', 'Alice']);\n  expect(result.inactive).to.deep.equal(['Dave', 'Bob']);\n});\n\nit('should handle a large array of users efficiently', () => {\n  const largeArray = Array.from({ length: 1000 }, (_, i) => ({ name: `User${i}`, status: i % 2 === 0 ? 'active' : 'inactive' }));\n  const activeUsers = largeArray.filter(user => user.status === 'active').map(user => user.name);\n  const inactiveUsers = largeArray.filter(user => user.status === 'inactive').map(user => user.name);\n  expect(groupByStatus(largeArray)).to.deep.equal({ active: activeUsers, inactive: inactiveUsers });\n});\n\nit('should correctly group users when some have null or unexpected statuses', () => {\n  const users = [\n    { name: 'Alice', status: null },\n    { name: 'Bob', status: 'active' },\n    { name: 'Carol', status: 'unknown' }\n  ];\n  expect(groupByStatus(users)).to.deep.equal({ null: ['Alice'], active: ['Bob'], unknown: ['Carol'] });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}