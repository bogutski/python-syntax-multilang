{
  "_id": "6696c2cb763f0712c198f5b9",
  "name": {
    "en": "/*",
    "ru": "Преобразование и объединение вложенных массивов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `transformAndFlatten`, которая принимает массив объектов.\n\nКаждый объект содержит ключ `data`, который ассоциируется с массивом чисел.\n\nФункция должна умножить каждое число на `2` и затем \"разгладить\" результаты в один массив.\n\nИспользуйте метод `flatMap()`.\n\n\nПример запуска функции\n```javascript\nconst entries = [\n  { data: [1, 2, 3] },\n  { data: [4, 5, 6] },\n  { data: [7, 8, 9] }\n];\n\nconsole.log(transformAndFlatten(entries));\n// Вывод: [2, 4, 6, 8, 10, 12, 14, 16, 18]\n```"
  },
  "initialSolution": "function transformAndFlatten(){\n\n}",
  "completedSolution": "function transformAndFlatten(arr) {\n  return arr.flatMap(({data}) => data.map(el => el * 2));\n}",
  "openTest": "it('Created function transformAndFlatten', () => {\n  expect(transformAndFlatten).to.be.a('function');\n});\n\nit('Function transformAndFlatten should include method flatMap()', () => {\n  const res = transformAndFlatten.toString()\n  expect(res).to.include('.flatMap(')\n});\n\nit('transformAndFlatten([{ data: [1, 2, 3] }, { data: [4, 5, 6] }, { data: [7, 8, 9] }]) should return [2, 4, 6, 8, 10, 12, 14, 16, 18]', () => {\n  const entries = [\n    { data: [1, 2, 3] },\n    { data: [4, 5, 6] },\n    { data: [7, 8, 9] }\n  ];\n  expect(transformAndFlatten(entries)).to.deep.equal([2, 4, 6, 8, 10, 12, 14, 16, 18]);\n});\n\nit('transformAndFlatten([]) should return []', () => {\n  expect(transformAndFlatten([])).to.deep.equal([]);\n});\n\nit('transformAndFlatten([{ data: [] }, { data: [1, 2, 3] }]) should return [2, 4, 6]', () => {\n  const entries = [{ data: [] }, { data: [1, 2, 3] }];\n  expect(transformAndFlatten(entries)).to.deep.equal([2, 4, 6]);\n});\n\nit('transformAndFlatten([{ data: [] }, { data: [] }]) should return []', () => {\n  const entries = [{ data: [] }, { data: [] }];\n  expect(transformAndFlatten(entries)).to.deep.equal([]);\n});\n\nit('transformAndFlatten([{ data: [1] }, { data: [2] }, { data: [3] }]) should return [2, 4, 6]', () => {\n  const entries = [{ data: [1] }, { data: [2] }, { data: [3] }];\n  expect(transformAndFlatten(entries)).to.deep.equal([2, 4, 6]);\n});\n\nit('transformAndFlatten(large array of 1000 entries) should process correctly', () => {\n  const largeArray = Array.from({ length: 1000 }, (_, i) => ({ data: [i, i + 1] }));\n  const expectedResult = largeArray.flatMap(entry => entry.data.map(num => num * 2));\n  expect(transformAndFlatten(largeArray)).to.deep.equal(expectedResult);\n});\n\nit('transformAndFlatten([{ data: [1, 2, 3, 4] }, { data: [5, 6, 7, 8] }]) should return [2, 4, 6, 8, 10, 12, 14, 16]', () => {\n  const entries = [{ data: [1, 2, 3, 4] }, { data: [5, 6, 7, 8] }];\n  expect(transformAndFlatten(entries)).to.deep.equal([2, 4, 6, 8, 10, 12, 14, 16]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}