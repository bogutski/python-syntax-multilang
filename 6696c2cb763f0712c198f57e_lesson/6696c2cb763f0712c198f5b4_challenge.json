{
  "_id": "6696c2cb763f0712c198f5b4",
  "name": {
    "en": "/*",
    "ru": "Извлечение и объединение свойств из массива объектов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `extractAndCombineProperties`, которая принимает массив объектов.\n\nКаждый объект содержит ключ `tags`, который ассоциируется с массивом строк (тегов).\n\nФункция должна возвращать один массив, содержащий все теги из всех объектов, сохраняя их порядок и включая повторения.\n\n\nПример запуска функции:\n```javascript\nconst items = [\n  { tags: ['apple', 'banana'] },\n  { tags: ['banana', 'cherry'] },\n  { tags: ['apple', 'date'] }\n];\n\nconsole.log(extractAndCombineProperties(items));\n// Вывод: ['apple', 'banana', 'banana', 'cherry', 'apple', 'date']\n```"
  },
  "initialSolution": "function extractAndCombineProperties(){\n\n}",
  "completedSolution": "function extractAndCombineProperties(arr) {\n  return arr.flatMap(({tags}) => tags);\n}",
  "openTest": "it('Created function extractAndCombineProperties', () => {\n  expect(extractAndCombineProperties).to.be.a('function');\n});\n\nit('Function extractAndCombineProperties should include method flatMap()', () => {\n  const res = extractAndCombineProperties.toString()\n  expect(res).to.include('.flatMap(')\n});\n\nit('should extract and combine tags from an array of objects', () => {\n  const items = [\n    { tags: ['apple', 'banana'] },\n    { tags: ['banana', 'cherry'] },\n    { tags: ['apple', 'date'] }\n  ];\n  expect(extractAndCombineProperties(items)).to.deep.equal(['apple', 'banana', 'banana', 'cherry', 'apple', 'date']);\n});\n\nit('should return an empty array if the input array is empty', () => {\n  expect(extractAndCombineProperties([])).to.deep.equal([]);\n});\n\nit('should handle objects with empty tags arrays', () => {\n  const items = [{ tags: [] }, { tags: ['apple', 'banana'] }];\n  expect(extractAndCombineProperties(items)).to.deep.equal(['apple', 'banana']);\n});\n\nit('should return an empty array if all objects have empty tags arrays', () => {\n  const items = [{ tags: [] }, { tags: [] }];\n  expect(extractAndCombineProperties(items)).to.deep.equal([]);\n});\n\nit('should handle single-tag arrays in all objects', () => {\n  const items = [{ tags: ['apple'] }, { tags: ['banana'] }, { tags: ['cherry'] }];\n  expect(extractAndCombineProperties(items)).to.deep.equal(['apple', 'banana', 'cherry']);\n});\n\nit('should not remove duplicates from the combined array', () => {\n  const items = [{ tags: ['apple', 'apple'] }, { tags: ['banana', 'banana'] }];\n  expect(extractAndCombineProperties(items)).to.deep.equal(['apple', 'apple', 'banana', 'banana']);\n});\n\nit('should combine tags correctly regardless of the order in the input objects', () => {\n  const items = [{ tags: ['date', 'cherry'] }, { tags: ['banana', 'apple'] }, { tags: ['fig'] }];\n  expect(extractAndCombineProperties(items)).to.deep.equal(['date', 'cherry', 'banana', 'apple', 'fig']);\n});\n\nit('should handle a large array of objects efficiently', () => {\n  const largeArray = Array.from({ length: 1000 }, (_,) => ({ tags: ['tag1', 'tag2'] }));\n  const expectedResult = Array.from({ length: 2000 }, (_, i) => i % 2 === 0 ? 'tag1' : 'tag2');\n  expect(extractAndCombineProperties(largeArray)).to.deep.equal(expectedResult);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}