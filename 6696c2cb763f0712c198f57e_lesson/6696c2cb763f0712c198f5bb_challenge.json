{
  "_id": "6696c2cb763f0712c198f5bb",
  "name": {
    "en": "/*",
    "ru": "Расчет среднего рейтинга продуктов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `calculateAverageRatings`, которая принимает массив объектов, каждый из которых содержит массив рейтингов.\n\nФункция должна использовать `flatMap` для объединения всех рейтингов в один массив, а затем вычислить и вернуть средний рейтинг всех продуктов.\n\nЕсли в переданном массиве либо в объекте массивы пустые, верните строку `Array is empty`.\n\n\nПример запуска функции:\n```javascript\nconst products = [\n  { ratings: [5, 4, 3] },\n  { ratings: [3, 2, 1] },\n  { ratings: [4, 5] }\n];\nconsole.log(calculateAverageRatings(products)); // 3.375\n\nconsole.log(calculateAverageRatings([])) // \"Array is empty\"\nconsole.log(calculateAverageRatings([{ ratings: [] }])) // \"Array is empty\"\n```"
  },
  "initialSolution": "function calculateAverageRatings(){\n\n}",
  "completedSolution": "function calculateAverageRatings(product) {\n  const allRating = product.flatMap(arr => arr.ratings)\n  if(!allRating.length) return 'Array is empty';\n\n  const sum = allRating.reduce((acc, el) => acc + el)\n  return sum / allRating.length;\n}",
  "openTest": "it('Created function calculateAverageRatings', () => {\n  expect(calculateAverageRatings).to.be.a('function');\n});\n\nit('Function calculateAverageRatings should include method flatMap()', () => {\n  const res = calculateAverageRatings.toString()\n  expect(res).to.include('.flatMap(')\n});\n\nit('calculateAverageRatings([{ ratings: [5, 4, 3] }, { ratings: [3, 2, 1] }, { ratings: [4, 5] }]) should return 3.375', () => {\n  const products = [\n    { ratings: [5, 4, 3] },\n    { ratings: [3, 2, 1] },\n    { ratings: [4, 5] }\n  ];\n  expect(calculateAverageRatings(products)).to.equal(3.375);\n});\n\nit('calculateAverageRatings([]) should return \"Array is empty\"', () => {\n  expect(calculateAverageRatings([])).to.equal('Array is empty');\n});\n\nit('calculateAverageRatings([{ ratings: [] }]) should return \"Array is empty\"', () => {\n  const products = [{ ratings: [] }];\n  expect(calculateAverageRatings(products)).to.equal('Array is empty');\n});\n\nit('calculateAverageRatings([{ ratings: [10] }, { ratings: [20] }, { ratings: [30] }]) should return 20', () => {\n  const products = [{ ratings: [10] }, { ratings: [20] }, { ratings: [30] }];\n  expect(calculateAverageRatings(products)).to.equal(20);\n});\n\nit('calculateAverageRatings([{ ratings: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] }]) should return 5.5', () => {\n  const products = [{ ratings: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] }];\n  expect(calculateAverageRatings(products)).to.equal(5.5);\n});\n\nit('calculateAverageRatings([{ ratings: [2, 2, 2, 2] }, { ratings: [3, 3, 3, 3] }]) should return 2.5', () => {\n  const products = [{ ratings: [2, 2, 2, 2] }, { ratings: [3, 3, 3, 3] }];\n  expect(calculateAverageRatings(products)).to.equal(2.5);\n});\n\nit('calculateAverageRatings(large array of 1000 entries) should process correctly', () => {\n  const largeArray = Array.from({ length: 1000 }, (_, i) => ({ ratings: [i % 5 + 1] }));\n  const expectedAverage = (1 + 2 + 3 + 4 + 5) / 5;\n  expect(calculateAverageRatings(largeArray)).to.equal(expectedAverage);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}