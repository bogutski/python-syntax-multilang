{
  "_id": "6696c2cb763f0712c198f5b3",
  "name": {
    "en": "/*",
    "ru": "Слияние чисел из массива объектов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `mergeAllNumbers`, которая принимает массив объектов.\n\nКаждый объект содержит ключ `numbers`, который ассоциируется с массивом чисел.\n\nФункция должна возвращать один массив, содержащий все числа из всех объектов, слитые в один массив.\n\n\nПример запуска функции\n```javascript\nconst data = [\n  { numbers: [5, 3, 9] },\n  { numbers: [1, 7] },\n  { numbers: [3, 9, 2] }\n];\n\nconsole.log(mergeAllNumbers(data)); // [5, 3, 9, 1, 7, 3, 9, 2]\n```"
  },
  "initialSolution": "function mergeAllNumbers(){\n\n}",
  "completedSolution": "function mergeAllNumbers(arr) {\n  return arr.flatMap(({numbers}) => numbers);\n}",
  "openTest": "it('Created function mergeAllNumbers', () => {\n  expect(mergeAllNumbers).to.be.a('function');\n});\n\nit('Function mergeAllNumbers should include method flatMap()', () => {\n  const res = mergeAllNumbers.toString()\n  expect(res).to.include('.flatMap(')\n});\n\nit('should merge numbers from an array of objects', () => {\n  const data = [\n    { numbers: [5, 3, 9] },\n    { numbers: [1, 7] },\n    { numbers: [3, 9, 2] }\n  ];\n  expect(mergeAllNumbers(data)).to.deep.equal([5, 3, 9, 1, 7, 3, 9, 2]);\n});\n\nit('should return an empty array if the input array is empty', () => {\n  expect(mergeAllNumbers([])).to.deep.equal([]);\n});\n\nit('should handle objects with empty number arrays', () => {\n  const data = [{ numbers: [] }, { numbers: [1, 2] }];\n  expect(mergeAllNumbers(data)).to.deep.equal([1, 2]);\n});\n\nit('should handle all empty number arrays in objects', () => {\n  const data = [{ numbers: [] }, { numbers: [] }];\n  expect(mergeAllNumbers(data)).to.deep.equal([]);\n});\n\nit('should handle single number arrays in all objects', () => {\n  const data = [{ numbers: [1] }, { numbers: [2] }, { numbers: [3] }];\n  expect(mergeAllNumbers(data)).to.deep.equal([1, 2, 3]);\n});\n\nit('should handle duplicates as they are without removing them', () => {\n  const data = [{ numbers: [1, 2, 2] }, { numbers: [2, 3, 3] }];\n  expect(mergeAllNumbers(data)).to.deep.equal([1, 2, 2, 2, 3, 3]);\n});\n\nit('should merge numbers correctly regardless of the order in the input objects', () => {\n  const data = [{ numbers: [5, 3] }, { numbers: [1, 7] }, { numbers: [2] }];\n  expect(mergeAllNumbers(data)).to.deep.equal([5, 3, 1, 7, 2]);\n});\n\nit('should handle a large array of objects efficiently', () => {\n  const largeArray = Array.from({ length: 1000 }, (_, i) => ({ numbers: [i, i + 1] }));\n  const expectedResult = Array.from({ length: 2000 }, (_, i) => i % 2 === 0 ? i / 2 : (i - 1) / 2 + 1);\n  expect(mergeAllNumbers(largeArray)).to.deep.equal(expectedResult);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}