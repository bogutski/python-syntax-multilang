{
  "_id": "6696c2cb763f0712c198f5ba",
  "name": {
    "en": "/*",
    "ru": "Фильтрация и объединение категорий продуктов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterAndFlattenCategories`, которая принимает массив объектов.\n\nКаждый объект содержит ключ `categories`, который ассоциируется с массивом категорий (строк).\n\nФункция должна вернуть массив всех категорий, у которых длина строки больше трех символов, в одном \"разглаженном\" массиве.\n\nИспользуйте метод `flatMap()`.\n\n\nПример запуска функции:\n```javascript\nconst products = [\n  { categories: ['toy', 'games', 'books'] },\n  { categories: ['food', 'drinks'] },\n  { categories: ['electronics', 'apparel', 'toys'] }\n];\n\nconsole.log(filterAndFlattenCategories(products));\n// Вывод: ['games', 'books', 'food', 'drinks', 'electronics', 'apparel', 'toys']\n```"
  },
  "initialSolution": "function filterAndFlattenCategories(){\n\n}",
  "completedSolution": "function filterAndFlattenCategories(arr) {\n  const allCategories = arr.flatMap(({categories}) => categories)\n  const res = [];\n\n  allCategories.forEach(el => {\n    if(el.length > 3) res.push(el)\n  })\n\n  return res;\n}",
  "openTest": "it('Created function filterAndFlattenCategories', () => {\n  expect(filterAndFlattenCategories).to.be.a('function');\n});\n\nit('Function filterAndFlattenCategories should include method flatMap()', () => {\n  const res = filterAndFlattenCategories.toString()\n  expect(res).to.include('.flatMap(')\n});\n\nit('filterAndFlattenCategories([{ categories: [\"toys\", \"games\", \"books\"] }, { categories: [\"food\", \"drinks\"] }, { categories: [\"electronics\", \"apparel\", \"toys\"] }]) should return [\"toys\", \"games\", \"books\", \"food\", \"drinks\", \"electronics\", \"apparel\", \"toys\"]', () => {\n  const products = [\n    { categories: ['toys', 'games', 'books'] },\n    { categories: ['food', 'drinks'] },\n    { categories: ['electronics', 'apparel', 'toys'] }\n  ];\n  expect(filterAndFlattenCategories(products)).to.deep.equal(['toys', 'games', 'books', 'food', 'drinks', 'electronics', 'apparel', 'toys']);\n});\n\nit('filterAndFlattenCategories([]) should return []', () => {\n  expect(filterAndFlattenCategories([])).to.deep.equal([]);\n});\n\nit('filterAndFlattenCategories([{ categories: [] }, { categories: [\"tea\", \"pi\"] }]) should return []', () => {\n  const products = [{ categories: [] }, { categories: ['tea', 'pi'] }];\n  expect(filterAndFlattenCategories(products)).to.deep.equal([]);\n});\n\nit('filterAndFlattenCategories([{ categories: [] }, { categories: [] }]) should return []', () => {\n  const products = [{ categories: [] }, { categories: [] }];\n  expect(filterAndFlattenCategories(products)).to.deep.equal([]);\n});\n\nit('filterAndFlattenCategories([{ categories: [\"cat\"] }, { categories: [\"dog\"] }, { categories: [\"fish\"] }]) should return [\"fish\"]', () => {\n  const products = [{ categories: ['cat'] }, { categories: ['dog'] }, { categories: ['fish'] }];\n  expect(filterAndFlattenCategories(products)).to.deep.equal(['fish']);\n});\n\nit('filterAndFlattenCategories(large array of 1000 entries) should process correctly', () => {\n  const largeArray = Array.from({ length: 1000 }, (_, i) => ({ categories: [`product${i}`, `item${i}`] }));\n  const expectedResult = largeArray.flatMap(product => product.categories.filter(category => category.length > 3));\n  expect(filterAndFlattenCategories(largeArray)).to.deep.equal(expectedResult);\n});\n\nit('filterAndFlattenCategories([{ categories: [\"short\", \"longEnough\", \"tiny\", \"sufficient\"] }]) should filter out short category names', () => {\n  const products = [{ categories: ['short', 'longEnough', 'tiny', 'sufficient'] }];\n  expect(filterAndFlattenCategories(products)).to.deep.equal(['short', 'longEnough', 'tiny', 'sufficient']);\n});\n\nit('filterAndFlattenCategories([{ categories: [\"short\", \"tiny\"] }, { categories: [\"another\", \"mini\", \"array\"] }]) should return [\"short\", \"tiny\", \"another\", \"mini\", \"array\"]', () => {\n  const products = [{ categories: ['short', 'tiny'] }, { categories: ['another', 'mini', 'array'] }];\n  expect(filterAndFlattenCategories(products)).to.deep.equal(['short', 'tiny', 'another', 'mini', 'array']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}