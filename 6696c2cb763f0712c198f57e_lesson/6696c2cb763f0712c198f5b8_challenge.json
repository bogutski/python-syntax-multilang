{
  "_id": "6696c2cb763f0712c198f5b8",
  "name": {
    "en": "/*",
    "ru": "Конвертация и фильтрация данных"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `convertAndFilterData`, которая принимает массив объектов.\n\nКаждый объект содержит ключи `id` (целое число) и `isActive` (булево значение).\n\nФункция должна вернуть массив, содержащий `id` активных пользователей (тех, у кого `isActive` равно `true`), умноженные на `10`.\n\nЕсли `id` не присутствует в объекте, а `isActive` - `true`, то функция должна добавить `0` в массив.\n\n\nПример запуска функции:\n```javascript\nconst users = [\n    { id: 1, isActive: true },\n    { id: 2, isActive: false },\n    { id: 3, isActive: true },\n    { id: 4, isActive: true }\n];\n\nconsole.log(convertAndFilterData(users));\n// Вывод: [10, 30, 40]\n\nconst obj = [\n  { isActive: true },\n  { isActive: false },\n  { isActive: true }\n];\n\nconsole.log(convertAndFilterData(obj));\n// Вывод: [0, 0]\n```"
  },
  "initialSolution": "function convertAndFilterData(){\n\n}",
  "completedSolution": "function convertAndFilterData(users) {\n  let res = []\n\n  users.forEach(({id, isActive}) => {\n    if(isActive) id === undefined ? res.push(0) : res.push(id * 10)\n  })\n\n  return res;\n}",
  "openTest": "it('Created function convertAndFilterData', () => {\n  expect(convertAndFilterData).to.be.a('function');\n});\n\nit('should return ids multiplied by 10 for active users', () => {\n  const users = [\n    { id: 1, isActive: true },\n    { id: 2, isActive: false },\n    { id: 3, isActive: true },\n    { id: 4, isActive: true }\n  ];\n  expect(convertAndFilterData(users)).to.deep.equal([10, 30, 40]);\n});\n\nit('should return an empty array if the input array is empty', () => {\n  expect(convertAndFilterData([])).to.deep.equal([]);\n});\n\nit('should handle cases where all users are inactive', () => {\n  const users = [{ id: 1, isActive: false }, { id: 2, isActive: false }];\n  expect(convertAndFilterData(users)).to.deep.equal([]);\n});\n\nit('should handle cases where there are no ids provided', () => {\n  const users = [{ isActive: true }, { isActive: true }];\n  expect(convertAndFilterData(users)).to.deep.equal([0, 0]); // Assuming missing ids default to 0.\n});\n\nit('should not include inactive users even if their ids are high', () => {\n  const users = [{ id: 100, isActive: false }, { id: 200, isActive: true }];\n  expect(convertAndFilterData(users)).to.deep.equal([2000]);\n});\n\nit('should correctly handle mixed data types for isActive', () => {\n  const users = [{ id: '1', isActive: true }, { id: 2, isActive: true }];\n  expect(convertAndFilterData(users)).to.deep.equal([10, 20]);\n});\n\nit('should handle a large array of users efficiently', () => {\n  const largeArray = Array.from({ length: 1000 }, (_, i) => ({ id: i, isActive: i % 2 === 0 }));\n  const expectedResult = largeArray.filter(user => user.isActive).map(user => user.id * 10);\n  expect(convertAndFilterData(largeArray)).to.deep.equal(expectedResult);\n});\n\nit('should return an array of transformed ids, even if some ids are the same', () => {\n  const users = [{ id: 1, isActive: true }, { id: 1, isActive: true }];\n  expect(convertAndFilterData(users)).to.deep.equal([10, 10]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}