{
  "_id": "6696c2cb763f0712c198f5b5",
  "name": {
    "en": "/*",
    "ru": "Извлечение и объединение адресов электронной почты"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `extractAndCombineEmails`, которая принимает массив объектов.\n\nКаждый объект содержит ключ `emails`, который ассоциируется с массивом адресов электронной почты.\n\nФункция должна возвращать один массив, содержащий все адреса электронной почты из всех объектов, сохраняя их порядок и включая повторения.\n\n\nПример запуска функции:\n```javascript\nconst contacts = [\n  { emails: ['alice@example.com', 'alice@gmail.com'] },\n  { emails: ['bob@example.com'] },\n  { emails: ['carol@example.com', 'carol@gmail.com', 'carol@yahoo.com'] }\n];\n\nconsole.log(extractAndCombineEmails(contacts));\n// Вывод: ['alice@example.com', 'alice@gmail.com', 'bob@example.com', 'carol@example.com', 'carol@gmail.com', 'carol@yahoo.com']\n```"
  },
  "initialSolution": "function extractAndCombineEmails(){\n\n}",
  "completedSolution": "function extractAndCombineEmails(arr) {\n  return arr.flatMap(obj => obj.emails);\n}",
  "openTest": "it('Created function extractAndCombineEmails', () => {\n  expect(extractAndCombineEmails).to.be.a('function');\n});\n\nit('Function extractAndCombineEmails should include method flatMap()', () => {\n  const res = extractAndCombineEmails.toString()\n  expect(res).to.include('.flatMap(')\n});\n\nit('should extract and combine emails from an array of objects', () => {\n  const contacts = [\n    { emails: ['alice@example.com', 'alice@gmail.com'] },\n    { emails: ['bob@example.com'] },\n    { emails: ['carol@example.com', 'carol@gmail.com', 'carol@yahoo.com'] }\n  ];\n  expect(extractAndCombineEmails(contacts)).to.deep.equal(['alice@example.com', 'alice@gmail.com', 'bob@example.com', 'carol@example.com', 'carol@gmail.com', 'carol@yahoo.com']);\n});\n\nit('should return an empty array if the input array is empty', () => {\n  expect(extractAndCombineEmails([])).to.deep.equal([]);\n});\n\nit('should handle objects with empty email arrays', () => {\n  const contacts = [{ emails: [] }, { emails: ['alice@example.com'] }];\n  expect(extractAndCombineEmails(contacts)).to.deep.equal(['alice@example.com']);\n});\n\nit('should return an empty array if all objects have empty email arrays', () => {\n  const contacts = [{ emails: [] }, { emails: [] }];\n  expect(extractAndCombineEmails(contacts)).to.deep.equal([]);\n});\n\nit('should handle single-email arrays in all objects', () => {\n  const contacts = [{ emails: ['alice@example.com'] }, { emails: ['bob@example.com'] }, { emails: ['carol@example.com'] }];\n  expect(extractAndCombineEmails(contacts)).to.deep.equal(['alice@example.com', 'bob@example.com', 'carol@example.com']);\n});\n\nit('should not remove duplicates from the combined array', () => {\n  const contacts = [{ emails: ['alice@example.com', 'alice@example.com'] }, { emails: ['bob@example.com'] }];\n  expect(extractAndCombineEmails(contacts)).to.deep.equal(['alice@example.com', 'alice@example.com', 'bob@example.com']);\n});\n\nit('should combine emails correctly regardless of the order in the input objects', () => {\n  const contacts = [{ emails: ['carol@example.com'] }, { emails: ['bob@example.com'] }, { emails: ['alice@example.com'] }];\n  expect(extractAndCombineEmails(contacts)).to.deep.equal(['carol@example.com', 'bob@example.com', 'alice@example.com']);\n});\n\nit('should handle a large array of objects efficiently', () => {\n  const largeArray = Array.from({ length: 1000 }, (_, i) => ({ emails: [`user${i}@example.com`, `user${i}@gmail.com`] }));\n  const expectedResult = Array.from({ length: 2000 }, (_, i) => `user${Math.floor(i / 2)}@${i % 2 === 0 ? 'example.com' : 'gmail.com'}`);\n  expect(extractAndCombineEmails(largeArray)).to.deep.equal(expectedResult);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}