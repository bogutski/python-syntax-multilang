{
  "_id": "6696c2ca763f0712c198e913",
  "name": {
    "en": "Splitting an array into numbers and strings",
    "ru": "Разделение массива на числа и строки"
  },
  "instruction": {
    "en": "Write a function `numbersAndStrings` that takes an array and returns an array of two arrays:\n\n* the first array contains all numbers from the original array,\n* the second array contains all strings.\n\nThe array can contain any type of data, but only numbers and strings must fall into the corresponding arrays.\n\nIf there are no numbers or strings in the original array, the corresponding array must be empty.\n\nAn example of running a function:\n```javascript\nnumbersAndStrings([1, 'e', 2, 'r', 3]) // [[1, 2, 3], ['e', 'r']]\nnumbersAndStrings([1, 2, 3, 4, 5]) // [[1, 2, 3, 4, 5], []]\nnumbersAndStrings(['a', 'b', 'c']) // [[], ['a', 'b', 'c']]\nnumbersAndStrings([true, undefined, 123, 'abc']) // [[123], ['abc']]\n```",
    "ru": "Напишите функцию `numbersAndStrings`, которая принимает массив и возвращает массив из двух массивов:\n\n* первый массив содержит все числа из исходного массива,\n* второй - все строки.\n\nВ массиве могут быть любые типы данных, но только числа и строки должны попасть в соответствующие массивы.\n\nЕсли в исходном массиве нет чисел или строк, соответствующий массив должен быть пустым.\n\nПример запуска функции:\n```javascript\nnumbersAndStrings([1, 'e', 2, 'r', 3]) // [[1, 2, 3], ['e', 'r']]\nnumbersAndStrings([1, 2, 3, 4, 5]) // [[1, 2, 3, 4, 5], []]\nnumbersAndStrings(['a', 'b', 'c']) // [[], ['a', 'b', 'c']]\nnumbersAndStrings([true, undefined, 123, 'abc']) // [[123], ['abc']]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function numbersAndStrings(array) {\n  const numbers = []\n  const strings = []\n  for (let i = 0; i < array.length; i++) {\n    if (typeof array[i] === 'number') numbers.push(array[i])\n    else if (typeof array[i] === 'string') strings.push(array[i])\n  }\n  return [numbers, strings]\n}",
  "openTest": "it('Created function numbersAndStrings', () => {\n  expect(numbersAndStrings).to.be.a('function');\n});\n\nit(\"numbersAndStrings([1, 'e', 2, 'r', 3, 't', 4, 'y', 5, 'u']) should return [[1, 2, 3, 4, 5], ['e', 'r', 't', 'y', 'u']]\", () => {\n  expect(numbersAndStrings([1, 'e', 2, 'r', 3, 't', 4, 'y', 5, 'u'])).to.deep.equal([[1, 2, 3, 4, 5], ['e', 'r', 't', 'y', 'u']]);\n});\n\nit(\"numbersAndStrings([1, 2, 3, 4, 5]) should return [[1, 2, 3, 4, 5], []]\", () => {\n  expect(numbersAndStrings([1, 2, 3, 4, 5])).to.deep.equal([[1, 2, 3, 4, 5], []]);\n});\n\nit(\"numbersAndStrings(['hello', 'world', '!!!']) should return [[], ['hello', 'world', '!!!']]\", () => {\n  expect(numbersAndStrings(['hello', 'world', '!!!'])).to.deep.equal([[], ['hello', 'world', '!!!']]);\n});\n\nit(\"numbersAndStrings([true, 100, undefined, 'a', null, 'b', 200, 'c']) should return [[100, 200], ['a', 'b', 'c']]\", () => {\n  expect(numbersAndStrings([true, 100, undefined, 'a', null, 'b', 200, 'c'])).to.deep.equal([[100, 200], ['a', 'b', 'c']]);\n});\n\nit(\"numbersAndStrings([true, undefined, false, null]) should return [[], []]\", () => {\n  expect(numbersAndStrings([true, undefined, false, null])).to.deep.equal([[], []]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}