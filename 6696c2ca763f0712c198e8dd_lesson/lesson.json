{
  "_id": "6696c2ca763f0712c198e8dd",
  "content": {
    "ru": "### Сумма массива определенной длины.\n\nДан массив чисел, с длиной в `10` элементов. Необходимо найти сумму элементов массива.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet sum = 0;\n\nfor (let i = 0; i < 10; i++) {  // итерация цикла будет с `0` элемента до `9`\n    sum += numbers[i];          // суммируем элементы массива\n}\nconsole.log(sum)                // 55\n```\n\n### Сумма массива неопределенной длины.\n\nДавайте разберем, как определить длину массива.\n\nДля этого у нас есть свойство `length`, которое возвращает длину массива.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\n\nconsole.log(numbers.length);      // 5\n```\n\nТеперь вспомним, что индексация массива начинается с `0`, а длина массива с `1`.\n\n```javascript\nconst numbers = [1, 2, 3];\n\nconsole.log(numbers[0]);          // 1\nconsole.log(numbers[1]);          // 2\nconsole.log(numbers[2]);          // 3\nconsole.log(numbers[3]);          // undefined - элемента с таким индексом нет\n```\n\nЧтобы обратится к первому элементу массива, мы используем индекс `0`.\n\nА чтобы обратится к последнему элементу массива, мы используем индекс `length - 1`.\n\n```javascript\nconst numbers = ['zero', 'one', 'two'];\n\nconsole.log(numbers[0]);                    // 'zero'\nconsole.log(numbers[numbers.length - 1]);   // 'two'\nconsole.log(numbers[numbers.length]);       // undefined - элемента с индексом `3` нет\n```\n\n\nТеперь, когда мы знаем, как определить последний элемент массива, мы можем найти сумму всех элементов массива.\n\n```javascript\nconst numbers = [10, 20, 30, 40, 50];\nlet sum = 0;\n\nfor (let i = 0; i < numbers.length; i++) {  // итерация цикла будет с `0` элемента до `4`\n    sum += numbers[i];                      // суммируем элементы массива\n}\n\nconsole.log(sum)                            // 150\n```\n\nВ данном примере мы используем свойство `length` для определения длины массива. \n\nУказываем в условии, чтобы цикл выполнялся до тех пор, пока `i` меньше длины массива, то есть `i < numbers.length`.\n\nТакже, мы можем использовать следующее условие: `i <= numbers.length - 1`.\n\nВ этом случае мы указываем, что цикл должен выполнятся до тех пор, пока `i` меньше или равно длине массива минус `1`.\n\n\n\n### Среднее арифметическое элементов массива.\n\nДля того чтобы найти среднее арифметическое элементов массива, нам необходимо найти сумму всех элементов массива и разделить ее на количество элементов или на длину массива.\n\n```javascript\nconst numbers = [10, 20, 30, 40, 50];\nlet sum = 0;\n\nfor (let i = 0; i < numbers.length; i++) {  // итерация цикла будет с `0` элемента до `4`\n    sum += numbers[i];                      // суммируем элементы массива\n}\n\nconst average = sum / numbers.length;       // `150 / 5 = 30`, находим среднее арифметическое\nconsole.log(average)                        // 30\n```\n\n### Умножение элементов массива.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet result = 1;                                  // начальное значение `1`\n\nfor (let i = 0; i < numbers.length; i++) {       // итерация цикла будет с `0` элемента до `9`\n    result = result * numbers[i];                // умножаем элементы массива\n}\n\nconsole.log(result)                              // 3628800\n```\n\nНе забывайте про начальное значение переменной `result`, которое должно быть равно `1`.\n\nИначе, если мы умножим на `0`, то результат всегда будет равен `0`.\n\n\n### Развернуть массив с использованием метода `push()`.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst reversed = [];\n\nfor (let i = numbers.length - 1; i >= 0; i--) {  // итерация цикла будет с `4` элемента до `0`\n  reversed.push(numbers[i]);                     // добавляем элементы в конец нового массива\n  console.log(reversed)                          // [5] -> [5, 4] -> [5, 4, 3] -> [5, 4, 3, 2] -> [5, 4, 3, 2, 1]\n}\n\nconsole.log(reversed)                            // [5, 4, 3, 2, 1]\n```\n\nВ данном примере нужно обратить внимание на условие цикла:\n\n* `let i = numbers.length - 1` - начальное значение `i` равно длине массива минус `1`, то есть `4`.\n\n* `i >= 0` - цикл будет выполняться до тех пор, пока `i` больше или равно `0`.\n\n* `i--` - после каждой итерации, значение `i` будет уменьшаться на `1`. Если мы оставим `i++`, то цикл будет выполняться бесконечно.\n\n\n\n### Развернуть массив с использованием метода `unshift()`.\n\n```javascript\nconst numbers = ['Hi', 'there', '!!!'];\nconst reversed = [];\n\nfor (let i = 0; i < numbers.length; i++) {     // итерация цикла будет с `0` элемента до `2`\n  reversed.unshift(numbers[i]);                // добавляем элементы в начало нового массива\n  console.log(reversed)                        // ['Hi'] -> ['there', 'Hi'] -> ['!!!', 'there', 'Hi']\n}\n\nconsole.log(reversed)                          // ['!!!', 'there', 'Hi']\n```\n\nПри использовании метода `unshift()`, в каждой итерации цикла, все индексы нового массива будут пересчитываться, потому что каждый элемент будет добавляться в начало массива.\n\nСо стороны оптимизации, данный метод не является оптимальным, так как при большом количестве элементов, он будет выполняться дольше, чем метод `push()`.\n",
    "en": "### The sum of an array of a certain length.\n\nAn array of numbers is given, with a length of `10` elements. You need to find the sum of the elements of the array.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet sum = 0;\n\nfor (let i = 0; i < 10; i++) { // iterate the loop from `0` item to `9`\n    sum += numbers[i]; // sum the array elements\n}\nconsole.log(sum) // 55\n```\n\n### The sum of an array of indeterminate length.\n\nLet's look at how to determine the length of an array.\n\nTo do this, we have the `length` property, which returns the length of the array.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\n\nconsole.log(numbers.length);      // 5\n```\n\nNow recall that array indexing starts with `0` and array length with `1`.\n\n```javascript\nconst numbers = [1, 2, 3];\n\nconsole.log(numbers[0]);          // 1\nconsole.log(numbers[1]);          // 2\nconsole.log(numbers[2]);          // 3\nconsole.log(numbers[3]);          // undefined - no element with this index\n```\n\nTo access the first element of the array, we use the index `0`.\n\nAnd to access the last element of the array, we use the index `length - 1`.\n\n```javascript\nconst numbers = ['zero', 'one', 'two'];\n\nconsole.log(numbers[0]);                    // 'zero'\nconsole.log(numbers[numbers.length - 1]);   // 'two'\nconsole.log(numbers[numbers.length]);       // undefined - no element with index `3`\n```\n\n\nNow that we know how to determine the last element of an array, we can find the sum of all the elements of the array.\n\n```javascript\nconst numbers = [10, 20, 30, 40, 50];\nlet sum = 0;\n\nfor (let i = 0; i < numbers.length; i++) { // iterate the loop from `0` element to `4`\n    sum += numbers[i]; // sum the array elements\n}\n\nconsole.log(sum) // 150\n```\n\nIn this example we use the `length` property to determine the length of the array. \n\nSpecify in the condition that the loop be executed as long as `i` is less than the length of the array, that is, `i < numbers.length`.\n\nAlso, we can use the following condition: `i <= numbers.length - 1`.\n\nIn this case we specify that the loop must be executed as long as `i` is less than or equal to the length of the array minus `1`.\n\n\n\n### The arithmetic mean of the array elements.\n\nIn order to find the arithmetic average of the array elements, we need to find the sum of all the array elements and divide it by the number of elements or by the length of the array.\n\n```javascript\nconst numbers = [10, 20, 30, 40, 50];\nlet sum = 0;\n\nfor (let i = 0; i < numbers.length; i++) { // iterate the loop from `0` element to `4`\n    sum += numbers[i]; // sum the array elements\n}\n\nconst average = sum / numbers.length; // `150 / 5 = 30`, find the arithmetic mean\nconsole.log(average) // 30\n```\n\n### Multiplication of array elements.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet result = 1; // initial value `1`\n\nfor (let i = 0; i < numbers.length; i++) { // loop iteration will be from `0` element to `9`\n    result = result * numbers[i]; // multiply array elements\n}\n\nconsole.log(result) // 3628800\n```\n\nDo not forget about the initial value of the `result` variable, which must be equal to `1`.\n\nOtherwise, if we multiply by `0`, the result will always be `0`.\n\n\n### Expand the array using the `push()` method.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst reversed = [];\n\nfor (let i = numbers.length - 1; i >= 0; i--) {  // iterate the loop from `4` element to `0`\n  reversed.push(numbers[i]);                     // add elements to the end of the new array\n  console.log(reversed)                          // [5] -> [5, 4] -> [5, 4, 3] -> [5, 4, 3, 2] -> [5, 4, 3, 2, 1]\n}\n\nconsole.log(reversed)                            // [5, 4, 3, 2, 1]\n```\n\nIn this example, pay attention to the loop condition:\n\n* `let i = numbers.length - 1` - the initial value of `i` is equal to the length of the array minus `1`, that is `4`.\n\n* `i >= 0` - the loop will be executed as long as `i` is greater than or equal to `0`.\n\n* `i--` - after each iteration, the value of `i` will decrease by `1`. If we leave `i++`, the loop will be executed infinitely.\n\n\n\n### Expand the array using the `unshift()` method.\n\n```javascript\nconst numbers = ['Hi', 'there', '!!!'];\nconst reversed = [];\n\nfor (let i = 0; i < numbers.length; i++) {     // iterate the loop from `0` element to `2`\n  reversed.unshift(numbers[i]);                // add elements to the beginning of the new array\n  console.log(reversed)                        // ['Hi'] -> ['there', 'Hi'] -> ['!!!', 'there', 'Hi']\n}\n\nconsole.log(reversed)                          // ['!!!', 'there', 'Hi']\n```\n\nWhen using the `unshift()` method, in each iteration of the loop, all the indexes of the new array will be recalculated, because each element will be added to the beginning of the array.\n\nOn the optimization side, this method is not optimal, because with a large number of elements, it will take longer to execute than the `push()` method.\n",
    "es": "# Перебор массива language: es"
  },
  "video": {
    "ru": "https://youtu.be/gsZF6nfhuC0",
    "en": "",
    "es": ""
  }
}