{
  "_id": "6696c2ca763f0712c198ec61",
  "name": {
    "en": "Number of 1st element from the beginning to the middle of the line and 2nd element from the middle to the end of the line",
    "ru": "Количество вхождений элементов с конца до середины строки"
  },
  "instruction": {
    "en": "The `countElFromEndToMiddle` function takes 1 parameter - a string.\n\nThe string `str` is of arbitrary length and contains letters/words in upper and lower case.\n\nThe function should return an object where the keys are letters and the values are the number of occurrences of these letters in the string.\n\nThe counting is performed from the end of the string to the middle.\n\nCalculation of the middle of the string is rounded down.\n\nCorrect the errors in the code to make the function work correctly.\n\nExample of running the function:\n```javascript\ncountElFromEndToMiddle('REPAPER'); // {E: 1, P: 1, R: 1}\ncountElFromEndToMiddle('Yada Yada'); // {a: 2, d: 1, Y: 1}\ncountElFromEndToMiddle('Madam'); // {a: 1, m: 1}\ncountElFromEndToMiddle(''); // {}\n```",
    "ru": "Функция `countElFromEndToMiddle` принимает 1 параметр - строку.\n\nСтрока `str` произвольной длины и содержит буквы/слова в верхнем и нижнем регистре.\n\nФункция должна вернуть объект, в котором ключами будут буквы, а значениями - количество вхождений этих букв в строку.\n\nПодсчет производится с конца строки до середины.\n\nВычисление середины строки производится с округлением в меньшую сторону.\n\nИсправьте ошибки в коде, чтобы функция работала правильно.\n\nПример запуска функции:\n```javascript\ncountElFromEndToMiddle('REPAPER'); // {E: 1, P: 1, R: 1}\ncountElFromEndToMiddle('Yada Yada'); // {a: 2, d: 1, Y: 1}\ncountElFromEndToMiddle('Madam'); // {a: 1, m: 1}\ncountElFromEndToMiddle(''); // {}\n```"
  },
  "initialSolution": "function countElFromEndToMiddle(str){\n  let middle = Math.ceil(str.length / 2);\n  const obj = [];\n  for (let i = str.length; i > middle; i++) {\n    if (obj[str[i]]) obj[str[i]]++\n    else obj[str[i]] = 1;\n  }\n  return obj;\n}",
  "completedSolution": "function countElFromEndToMiddle(str) {\n  let middle = Math.floor(str.length / 2);\n  const obj = {};\n  for (let i = str.length - 1; i > middle; i--) {\n    if (obj[str[i]]) obj[str[i]]++\n    else obj[str[i]] = 1;\n  }\n  return obj;\n}",
  "openTest": "it('Created function countElFromEndToMiddle', () => {\n  expect(countElFromEndToMiddle).to.be.a('function');\n});\n\nit(\"countElFromEndToMiddle('REPAPER') should return {E: 1, P: 1, R: 1}\", () => {\n  expect(countElFromEndToMiddle('REPAPER')).to.deep.equal({E: 1, P: 1, R: 1});\n});\n\nit(\"countElFromEndToMiddle('Love Birds') should return {d: 1, i: 1, r: 1, s: 1}\", () => {\n  expect(countElFromEndToMiddle('Love Birds')).to.deep.equal({d: 1, i: 1, r: 1, s: 1});\n});\n\nit(\"countElFromEndToMiddle('Yada Yada') should return {a: 2, d: 1, Y: 1}\", () => {\n  expect(countElFromEndToMiddle('Yada Yada')).to.deep.equal({a: 2, d: 1, Y: 1});\n});\n\nit(\"countElFromEndToMiddle('Madam') should return {a: 1, m: 1}\", () => {\n  expect(countElFromEndToMiddle('Madam')).to.deep.equal({a: 1, m: 1});\n});\n\nit(\"countElFromEndToMiddle('Two Down, One to Go') should return {' ': 2, e: 1, G: 1, n: 1, o: 2, O: 1, t: 1}\", () => {\n  expect(countElFromEndToMiddle('Two Down, One to Go')).to.deep.equal({' ': 2, e: 1, G: 1, n: 1, o: 2, O: 1, t: 1});\n});\n\nit(\"countElFromEndToMiddle('4 you') should return {o: 1, u: 1}\", () => {\n  expect(countElFromEndToMiddle('4 you')).to.deep.equal({o: 1, u: 1});\n});\n\nit(\"countElFromEndToMiddle('') should return {}\", () => {\n  expect(countElFromEndToMiddle('')).to.deep.equal({});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}