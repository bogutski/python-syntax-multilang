{
  "_id": "6696c2ca763f0712c198ec62",
  "name": {
    "en": "Number of occurrences of two given letters in a string in upper and lower case",
    "ru": "Вернуть массив ключей объекта"
  },
  "instruction": {
    "en": "Write a function `objectKeys` takes 1 parameter, a string.\n\nThe string is of arbitrary length and contains upper and/or lower case letters.\n\nThe function should return an array of object keys, where the keys are the letters of the string.\n\nUse the `Object.keys()` method to solve the problem.\n\nExample of how to run the function:\n```javascript\nobjectKeys('A Piece of Cake'); // [\"A\", \" \", \"P\", \"i\", \"e\", \"c\", \"o\", \"f\", \"C\", \"a\", \"k\"]\nobjectKeys('Anna'); // [\"A\", \"n\", \"a\"]\nobjectKeys('level'); // [\"l\", \"e\", \"v\"]\nobjectKeys(''); // []\n```",
    "ru": "Напишите функция `objectKeys` принимает 1 параметр - строку.\n\nСтрока произвольной длины и содержит буквы в верхнем и/или нижнем регистре.\n\nФункция должна вернуть массив ключей объекта, где ключи - это буквы строки.\n\nДля решения задачи используйте метод `Object.keys()`.\n\nПример запуска функции:\n```javascript\nobjectKeys('A Piece of Cake'); // [\"A\", \" \", \"P\", \"i\", \"e\", \"c\", \"o\", \"f\", \"C\", \"a\", \"k\"]\nobjectKeys('Anna'); // [\"A\", \"n\", \"a\"]\nobjectKeys('level'); // [\"l\", \"e\", \"v\"]\nobjectKeys(''); // []\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function objectKeys(str) {\n  const obj = {};\n  for (let i = 0; i < str.length; i++) {\n    if (obj[str[i]]) obj[str[i]]++\n    else obj[str[i]] = 1;\n  }\n  return Object.keys(obj);\n}",
  "openTest": "it('Created function objectKeys', () => {\n  expect(objectKeys).to.be.a('function');\n});\n\nit(\"objectKeys('A Piece of Cake') should return ['A', ' ', 'P', 'i', 'e', 'c', 'o', 'f', 'C', 'a', 'k']\", () => {\n  expect(objectKeys('A Piece of Cake')).to.deep.equal(['A', ' ', 'P', 'i', 'e', 'c', 'o', 'f', 'C', 'a', 'k']);\n});\n\nit(\"objectKeys('Anna') should return ['A', 'n', 'a']\", () => {\n  expect(objectKeys('Anna')).to.deep.equal(['A', 'n', 'a']);\n});\n\nit(\"objectKeys('level') should return ['l', 'e', 'v']\", () => {\n  expect(objectKeys('level')).to.deep.equal(['l', 'e', 'v']);\n});\n\nit(\"objectKeys('road') should return ['r', 'o', 'a', 'd']\", () => {\n  expect(objectKeys('road')).to.deep.equal(['r', 'o', 'a', 'd']);\n});\n\nit(\"objectKeys('wheel') should return ['w', 'h', 'e', 'l']\", () => {\n  expect(objectKeys('wheel')).to.deep.equal(['w', 'h', 'e', 'l']);\n});\n\nit(\"objectKeys('12 plus 1') should return ['1', '2', ' ', 'p', 'l', 'u', 's']\", () => {\n  expect(objectKeys('12 plus 1')).to.deep.equal(['1', '2', ' ', 'p', 'l', 'u', 's']);\n});\n\nit(\"objectKeys('') should return []\", () => {\n  expect(objectKeys('')).to.deep.equal([]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}