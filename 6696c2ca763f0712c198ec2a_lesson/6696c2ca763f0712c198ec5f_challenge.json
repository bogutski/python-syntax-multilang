{
  "_id": "6696c2ca763f0712c198ec5f",
  "name": {
    "en": "Counting the occurrence of each element in the string from the beginning to the middle",
    "ru": "Подсчет вхождения каждого элемента в строку от начала до середины"
  },
  "instruction": {
    "en": "Write a function `countElFromStartToMiddle` that takes 1 parameter, a string.\n\nA string of arbitrary length consists of letters/words in lower and/or upper case.\n\nThe function should return an object in which the keys are letters and the values are the number of occurrences of these letters.\n\nThe counting should be performed from the beginning to the middle of the string.\n\nBefore creating the `for` loop, find the middle of the string by rounding it up using the `Math.ceil()` method.\n\nExample of running the function:\n```javascript\ncountElFromStartToMiddle('REPAPER'); // {A: 1, E: 1, P: 1, R: 1}\ncountElFromStartToMiddle('Yada Yada'); // {\" \": 1, a: 2, d: 1, Y: 1}\ncountElFromStartToMiddle('Madam'); // {a: 1, d: 1, M: 1}\ncountElFromStartToMiddle('w'); // {w: 1}\ncountElFromStartToMiddle(''); // {}\n```",
    "ru": "Напишите функцию `countElFromStartToMiddle`, которая принимает 1 параметр - строку.\n\nСтрока произвольной длины состоит из букв/слов в нижнем и/или верхнем регистре.\n\nФункция должна вернуть объект, в котором ключами будут буквы, а значениями - количество вхождений этих букв.\n\nПодсчет должен осуществляться от начала до середины строки.\n\nПеред созданием цикла `for` найдите середину строки, округлив ее в большую сторону с использованием метода `Math.ceil()`\n\nПример запуска функции:\n```javascript\ncountElFromStartToMiddle('REPAPER'); // {A: 1, E: 1, P: 1, R: 1}\ncountElFromStartToMiddle('Yada Yada'); // {\" \": 1, a: 2, d: 1, Y: 1}\ncountElFromStartToMiddle('Madam'); // {a: 1, d: 1, M: 1}\ncountElFromStartToMiddle('w'); // {w: 1}\ncountElFromStartToMiddle(''); // {}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function countElFromStartToMiddle(str) {\n  let middle = Math.ceil(str.length / 2);\n  const obj = {};\n  for (let i = 0; i < middle; i++) {\n    if (obj[str[i]]) obj[str[i]]++\n    else obj[str[i]] = 1;\n  }\n  return obj;\n}",
  "openTest": "it('Created function countElFromStartToMiddle', () => {\n  expect(countElFromStartToMiddle).to.be.a('function');\n});\n\nit(\"countElFromStartToMiddle('REPAPER') should return {A: 1, E: 1, P: 1, R: 1}\", () => {\n  expect(countElFromStartToMiddle('REPAPER')).to.deep.equal({A: 1, E: 1, P: 1, R: 1});\n});\n\nit(\"countElFromStartToMiddle('Love Birds') should return {' ': 1, e: 1, L: 1, o: 1, v: 1}\", () => {\n  expect(countElFromStartToMiddle('Love Birds')).to.deep.equal({' ': 1, e: 1, L: 1, o: 1, v: 1});\n});\n\nit(\"countElFromStartToMiddle('Yada Yada') should return {' ': 1, a: 2, d: 1, Y: 1}\", () => {\n  expect(countElFromStartToMiddle('Yada Yada')).to.deep.equal({' ': 1, a: 2, d: 1, Y: 1});\n});\n\nit(\"countElFromStartToMiddle('Madam') should return {a: 1, d: 1, M: 1}\", () => {\n  expect(countElFromStartToMiddle('Madam')).to.deep.equal({a: 1, d: 1, M: 1});\n});\n\nit(\"countElFromStartToMiddle('Two Down, One to Go') should return {' ': 2, ',': 1, D: 1, n: 1, o: 2, T: 1, w: 2}\", () => {\n  expect(countElFromStartToMiddle('Two Down, One to Go')).to.deep.equal({' ': 2, ',': 1, D: 1, n: 1, o: 2, T: 1, w: 2});\n});\n\nit(\"countElFromStartToMiddle('4 you') should return {' ': 1, 4: 1, y: 1}\", () => {\n  expect(countElFromStartToMiddle('4 you')).to.deep.equal({' ': 1, 4: 1, y: 1});\n});\n\nit(\"countElFromStartToMiddle('') should return {}\", () => {\n  expect(countElFromStartToMiddle('')).to.deep.equal({});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}