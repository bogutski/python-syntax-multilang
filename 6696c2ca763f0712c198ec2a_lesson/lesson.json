{
  "_id": "6696c2ca763f0712c198ec2a",
  "content": {
    "ru": "### Посчитать количество вхождений каждого символа в строку\n\nИногда еще попадаются задания, в том числе на собеседованиях - посчитать сколько раз \nсимвол попадается в строке. То есть посчитать количество вхождений\nПример:\n```javascript\nconst str = 'abc coding ace';\n```\nНам необходимо вывести в какую-то структуру, количество вхождений символов в строку.\n\nВ примере выше видно, что символ \"а\" встречается 2 раза, \"c\" - 3 раза\nи остальные символы по одному разу.\n\nВ качестве структуры мы можем использовать объект или массив.\n\nДавайте выведем результат в объект:\n```javascript\nconst str = 'abc coding ace';\n\nconst obj = {}          //создаем пустой объект и далее делаем цикл по строке\nfor (let i = 0; i < str.length; i++) {\n  \n  //Сделаем сначала неправильно, а потом исправим\n  obj[str[i]] = true   // присвоим свойству со значением символа из строки  `true`\n}\n//посмотрим, что получится в консоли\nconsole.log(obj)\n//{\" \": true, a: true, b: true, c: true, d: true, e: true, g: true, i: true, n: true, o: true}\n```\nМы получили объект, где каждая буква строки стала ключом объекта со значением true.\n\nДавайте поподробнее остановимся на записи\n```javascript\n obj[str[i]]\n```\nЗдесь используются двойные квадратные скобки. Почему? Попробуйте объяснить.\nПервыми внешними квадратными скобками \n```javascript\n obj[**]\n```\nмы обращаемся к объекту, к какому-то его ключу.\n\nА внутренние квадратные скобки `str[i]` - это элемент строки, который будет/является ключом.\n```javascript\n obj[str[i]]\n```\n\nТеперь давайте напишем правильное решение задачи.\n\nЕсли такого свойства (как мы задали выше) мы не найдем - то присвоим ему значение единица.\n\nА если найдем, то увеличим значение на единицу.\n```javascript\nconst str = 'abc coding ace';\n\nconst obj = {}        \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++         //если в объекте есть свойство с ключом равным символу из строки то увеличиваем значение этого свойства на единицу\n  else obj[str[i]] = 1;                 //иначе присваиваем этому свойству значение 1\n}\n\nconsole.log(obj)\n\n//{\" \": 2, a: 2, b: 1, c: 3, d: 1, e: 1, g: 1, i: 1, n: 1, o: 1}\n``` \nКод работает правильно\n\nДобавим еще 2 пробела\n```javascript\nconst str = 'abc co di ng ace';\n\nconst obj = {}        \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\nconsole.log(obj)\n\n//{\" \": 4, a: 2, b: 1, c: 3, d: 1, e: 1, g: 1, i: 1, n: 1, o: 1}\n``` \nЭтот способ можно использовать, чтобы посчитать, сколько символов встречается в строке.\n\nВ задачах выше мы использовали объект для вывода результатов.\nМы можем применять эту структуру, чтобы считать дубликаты. Можно перевести объект в массив.\n\nКак перевести объект в массив.\nМы можем перевести в массив его ключи, можем перевести в массив его значения\n```javascript\nObject.keys(obj)\n``` \n`Object` - это глобальный объект, мы его никак не контролируем.\nА `obj` - это наш объект, который мы можем назвать как угодно\n\n```javascript\nconst str = 'abc codi ng ace';\n\nconst obj = {}        \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\nconsole.log(Object.keys(obj))\n\n//[\"a\", \" b\", \"c\", \" \", \"o\", \"d\", \"i\", \"n\", \"g\", \"e\"]\n```\nВ результате мы получили массив с элементами строки. Они не упорядочены!\nДополнительно надо будет отсортировать массив.\n\nДавайте теперь получим массив значений:\n```javascript\nconsole.log(Object.values(obj))\n\n// [2, 1, 3, 3, 1, 1, 1, 1, 1, 1, ]\n```\n\nЗаметьте, что здесь порядок в массиве ключей соответствует порядку в массиве значений.\n\nТакже можно использовать следующую команду\n```javascript\nconsole.log(Object.entries(obj))\n\n// [[\"a\", 2], [\"b\", 1], [\"c\", 3], [\" \", 3], [\"o\", 1], [\"d\", 1], [\"i\", 1], [\"n\", 1], [\"g\", 1], [\"e\", 1]]\n```\nВ данном случае мы получим массив массивов.\n\nНапример, мы хотим получить наш результат в виде строки в следующем виде:\n`a = 2, b = 1, c = 3...`\nКак это сделать? Нужно пройтись еще раз циклом, но уже по массиву и провести конкатенацию элементов\n\n```javascript\nconst str = 'abc codi ng ace';\n\nconst obj = {}        \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\n const arr = Object.entries(obj);     //присвоим переменной arr значение перевода нашего объекта в массив\n let acc = '';                        //создадим строку аккумулятор, куда будем собирать элементы\n\nfor (let i = 0; i < arr.length; i++) {\n  acc += arr[i][0] + ' = ' + arr[i][1] + ', '\n}\n\nconsole.log(acc)\n//\"a = 2, b = 1, c = 3,   = 3, o = 1, d = 1, i = 1, n = 1, g = 1, e = 1, \"\n```\nОбратите внимание, что в конце строки тоже присутствует запятая и пробел\n\n```javascript\nconst str = 'abc codi ng ace';\n\nconst obj = {}        \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\n const keys = Object.keys(obj);     \n let acc = '';                        \n\nfor (let i = 0; i < keys.length; i++) {\n  acc += obj[keys[i]]\n}\n\nconsole.log(acc)\n//\"2133111111\"  //мы собрали в строку значение ключей\n```\n\nКак собрать строку как в примере выше `a = 2, b = 1, c = 3...` если у нас есть только ключи:\n\n```javascript\nconst str = 'abc codi ng ace';\n\nconst obj = {}        \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\n const keys = Object.keys(obj);     \n let acc = '';                        \n\nfor (let i = 0; i < keys.length; i++) {\n  acc += keys[i] + '=' + obj[keys[i]] + ', '\n}\n\nconsole.log(acc)\n//\"a=2, b=1, c=3,  =3, o=1, d=1, i=1, n=1, g=1, e=1, \"\n```\n\nПостарайтесь разобраться и повторить самим эти задачи.\nОсобенно как переводить объект в массив с помощью `keys, values and entries `",
    "en": "### Count the number of occurrences of each character in the string\n\nSometimes there are also tasks, including in interviews - to count how many times \ncharacter appears in the string. That is, count the number of occurrences\nExample:\n```javascript\nconst str = 'abc coding ace';\n```\nWe need to output in some structure, the number of occurrences of characters in a string.\n\nIn the example above you can see that the symbol \"a\" occurs 2 times, \"c\" occurs 3 times\nand the other characters occur once each.\n\nAs a structure we can use an object or an array.\n\nLet's output the result to an object:\n```javascript\nconst str = 'abc coding ace';\n\nconst obj = {} //create an empty object and then loop over the string\nfor (let i = 0; i < str.length; i++) {\n\n  //do it incorrectly at first and then correct it\n  obj[str[i]] = true //assign to the property with the character value from the string `true`\n}\n//watch what it comes up with in the console\nconsole.log(obj)\n//{\" \": true, a: true, b: true, c: true, d: true, e: true, g: true, i: true, n: true, o: true}\n```\nWe got an object where each letter of the string became an object key with the value true.\n\nLet's take a closer look at the record\n```javascript\n obj[str[i]]\n```\nDouble square brackets are used here. Why? Try to explain.\nThe first outside square brackets \n```javascript\n obj[**]\n```\nwe are referring to an object, to some key of it.\n\nAnd the internal square brackets `str[i]` is the string element that will/is the key.\n```javascript\n obj[str[i]]\n```\n\nNow let's write the correct solution to the problem.\n\nIf we don't find such a property (as we set above), we assign it a value of one.\n\nAnd if we find it, we increase the value by one.\n```javascript\nconst str = 'abc coding ace';\n\nconst obj = {}  \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++ //if the object has a property with a key equal to the character from the string then increase the value of this property by one\n  else obj[str[i]] = 1; //otherwise we assign value 1 to this property\n}\n\nconsole.log(obj)\n\n//{\" \": 2, a: 2, b: 1, c: 3, d: 1, e: 1, g: 1, i: 1, n: 1, o: 1}\n``` \nThe code works correctly\n\nAdd two more spaces\n```javascript\nconst str = 'abc co di ng ace';\n\nconst obj = {}        \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\nconsole.log(obj)\n\n//{\" \": 4, a: 2, b: 1, c: 3, d: 1, e: 1, g: 1, i: 1, n: 1, o: 1}\n``` \nThis method can be used to count how many characters occur in a string.\n\nIn the problems above, we used the object to output the results.\nWe can apply this structure to count duplicates. We can translate the object into an array.\n\nHow to translate an object into an array.\nWe can array its keys, we can array its values\n```javascript\nObject.keys(obj)\n``` \nThe `Object` is a global object, we have no control over it.\nAnd `obj` is our object, which we can name however we want\n\n```javascript\nconst str = 'abc codi ng ace';\n\nconst obj = {}        \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\nconsole.log(Object.keys(obj))\n\n//[\"a\", \" b\", \"c\", \" \", \"o\", \"d\", \"i\", \"n\", \"g\", \"e\"]\n```\nAs a result, we got an array with string elements. They are not ordered!\nAdditionally, we need to sort the array.\n\nLet's now get an array of values:\n```javascript\nconsole.log(Object.values(obj))\n\n// [2, 1, 3, 3, 1, 1, 1, 1, 1, 1, ]\n```\n\nNote that here the order in the key array corresponds to the order in the value array.\n\nYou can also use the following command\n```javascript\nconsole.log(Object.entries(obj))\n\n// [[\"a\", 2], [\"b\", 1], [\"c\", 3], [\" \", 3], [\"o\", 1], [\"d\", 1], [\"i\", 1], [\"n\", 1], [\"g\", 1], [\"e\", 1]]\n```\nIn this case we get an array of arrays.\n\nFor example, we want to get our result as a string in the following form:\n`a = 2, b = 1, c = 3...`\nHow do we do that? We should loop through the array again and concatenate the elements\n\n```javascript\nconst str = 'abc codi ng ace';\n\nconst obj = {}  \nfor (let i = 0; i &lt; str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\n const arr = Object.entries(obj); //assign to the arr variable the value of our object's translation into an array\n let acc = ''; //create the string accumulator, where we will collect the elements\n\nfor (let i = 0; i < arr.length; i++) {\n  acc += arr[i][0] + ' = ' + arr[i][1] + ', '\n}\n\nconsole.log(acc)\n//\"a = 2, b = 1, c = 3, = 3, o = 1, d = 1, i = 1, n = 1, g = 1, e = 1, \"\n```\nNote that there is also a comma and a space at the end of the line\n\n```javascript\nconst str = 'abc codi ng ace';\n\nconst obj = {}  \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\n const keys = Object.keys(obj);     \n let acc = '';   \n\nfor (let i = 0; i < keys.length; i++) {\n  acc += obj[keys[i]]\n}\n\nconsole.log(acc)\n//\"2133111111\" //we have stringed together the value of the keys\n```\n\nHow to assemble a string like in the above example `a = 2, b = 1, c = 3...` if we only have keys:\n\n```javascript\nconst str = 'abc codi ng ace';\n\nconst obj = {}  \nfor (let i = 0; i < str.length; i++) {\n  if (obj[str[i]]) obj[str[i]]++\n  else obj[str[i]] = 1;\n}\n const keys = Object.keys(obj);     \n let acc = '';   \n\nfor (let i = 0; i < keys.length; i++) {\n  acc += keys[i] + '=' + obj[keys[i]] + ', '\n}\n\nconsole.log(acc)\n//\"a=2, b=1, c=3, =3, o=1, d=1, i=1, n=1, g=1, e=1, \"\n```\n\nTry to understand and repeat these tasks yourself.\nEspecially how to translate an object into an array using `keys, values and entries `.",
    "es": "# Посчитать количество вхождений каждого символа в строку language: es"
  },
  "video": {
    "ru": "https://youtu.be/LSIeJ-Vo9ws",
    "en": "",
    "es": ""
  }
}