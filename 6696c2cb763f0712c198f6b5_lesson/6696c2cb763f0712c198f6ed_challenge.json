{
  "_id": "6696c2cb763f0712c198f6ed",
  "name": {
    "en": "/*",
    "ru": "Фильтрация по временным интервалам и доступности"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterByAvailability`, которая принимает четыре параметра:\n\n* events - массив объектов,\n* fromDate - дата начала (строка вида: \"2024-05-10\"),\n* toDate - дата окончания (строка вида: \"2024-05-31\"),\n* isAvailable - доступность события (Boolean).\n\n\nФункция должна фильтровать массив событий, возвращая только те, что происходят в заданный временной интервал (включительно переданные даты) и соответствуют статусу доступности.\n\n\nПримеры запуска функции:\n```javascript\nconst events = [\n  { name: \"Webinar\", date: \"2024-05-10\", available: true },\n  { name: \"Workshop\", date: \"2024-05-20\", available: false },\n  { name: \"Seminar\", date: \"2024-05-31\", available: true },\n  { name: \"Conference\", date: \"2024-06-01\", available: true }\n];\n\nconsole.log(filterByAvailability(events, \"2024-05-01\", \"2024-05-31\", true));\n// [{name: \"Webinar\", date: \"2024-05-10\", available: true}, {name: 'Seminar', date: '2024-05-31', available: true}]\n```"
  },
  "initialSolution": "function filterByAvailability(){\n\n}",
  "completedSolution": "function filterByAvailability(events, fromDate, toDate, isAvailable) {\n  return events.filter(({date, available}) => date >= fromDate && date <= toDate && available === isAvailable)\n}",
  "openTest": "it('Created function filterByAvailability', () => {\n  expect(filterByAvailability).to.be.a('function');\n});\n\nit(\"Function filterByAvailability should include filter method\", () => {\n  const result = filterByAvailability.toString();\n  expect(result).to.include('.filter(');\n});\n\nit(\"filterByAvailability([{name: 'Webinar', date: '2024-05-10', available: true}], '2024-05-01', '2024-05-31', true) should return [{name: 'Webinar', date: '2024-05-10', available: true}]\", () => {\n  const events = [\n    { name: \"Webinar\", date: \"2024-05-10\", available: true }\n  ];\n  expect(filterByAvailability(events, \"2024-05-01\", \"2024-05-31\", true)).to.deep.equal([\n    { name: \"Webinar\", date: \"2024-05-10\", available: true }\n  ]);\n});\n\nit(\"filterByAvailability([{name: 'Workshop', date: '2024-05-20', available: false}], '2024-05-01', '2024-05-31', false) should return [{name: 'Workshop', date: '2024-05-20', available: false}]\", () => {\n  const events = [\n    { name: \"Workshop\", date: \"2024-05-20\", available: false }\n  ];\n  expect(filterByAvailability(events, \"2024-05-01\", \"2024-05-31\", false)).to.deep.equal([\n    { name: \"Workshop\", date: \"2024-05-20\", available: false }\n  ]);\n});\n\nit(\"filterByAvailability([], '2024-05-01', '2024-05-31', true) should return []\", () => {\n  expect(filterByAvailability([], \"2024-05-01\", \"2024-05-31\", true)).to.deep.equal([]);\n});\n\nit(\"filterByAvailability([{name: 'Conference', date: '2024-06-01', available: true}], '2024-05-01', '2024-05-31', true) should return []\", () => {\n  const events = [\n    { name: \"Conference\", date: \"2024-06-01\", available: true }\n  ];\n  expect(filterByAvailability(events, \"2024-05-01\", \"2024-05-31\", true)).to.deep.equal([]);\n});\n\nit(\"filterByAvailability([{name: 'Webinar', date: '2024-05-10', available: true}, {name: 'Workshop', date: '2024-05-20', available: false}], '2024-05-01', '2024-05-31', true) should return [{name: 'Webinar', date: '2024-05-10', available: true}]\", () => {\n  const events = [\n    { name: \"Webinar\", date: \"2024-05-10\", available: true },\n    { name: \"Workshop\", date: \"2024-05-20\", available: false }\n  ];\n  expect(filterByAvailability(events, \"2024-05-01\", \"2024-05-31\", true)).to.deep.equal([\n    { name: \"Webinar\", date: \"2024-05-10\", available: true }\n  ]);\n});\n\nit(\"filterByAvailability([{name: 'Conference', date: '2024-05-01', available: true}], '2024-05-01', '2024-05-31', true) should return [{name: 'Conference', date: '2024-05-01', available: true}]\", () => {\n  const events = [\n    { name: \"Conference\", date: \"2024-05-01\", available: true }\n  ];\n  expect(filterByAvailability(events, \"2024-05-01\", \"2024-05-31\", true)).to.deep.equal([\n    { name: \"Conference\", date: \"2024-05-01\", available: true }\n  ]);\n});\n\nit(\"filterByAvailability([{name: 'Seminar', date: '2024-05-31', available: true}], '2024-05-01', '2024-05-31', true) should return [{name: 'Seminar', date: '2024-05-31', available: true}]\", () => {\n  const events = [\n    { name: \"Seminar\", date: \"2024-05-31\", available: true }\n  ];\n  expect(filterByAvailability(events, \"2024-05-01\", \"2024-05-31\", true)).to.deep.equal([\n    { name: \"Seminar\", date: \"2024-05-31\", available: true }\n  ]);\n});\n\nit(\"filterByAvailability([{name: 'Webinar', date: '2024-04-30', available: true}, {name: 'Workshop', date: '2024-05-01', available: true}], '2024-05-01', '2024-05-31', true) should only return events starting from the start date, thus [{name: 'Workshop', date: '2024-05-01', available: true}]\", () => {\n  const events = [\n    { name: \"Webinar\", date: \"2024-04-30\", available: true },\n    { name: \"Workshop\", date: \"2024-05-01\", available: true }\n  ];\n  expect(filterByAvailability(events, \"2024-05-01\", \"2024-05-31\", true)).to.deep.equal([\n    { name: \"Workshop\", date: \"2024-05-01\", available: true }\n  ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}