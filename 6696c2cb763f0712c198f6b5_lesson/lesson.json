{
  "_id": "6696c2cb763f0712c198f6b5",
  "content": {
    "ru": "В программировании часто возникает необходимость отфильтровать данные, выбирая из них только те элементы, которые соответствуют определённым критериям. \n\nВ JavaScript одним из мощных инструментов для такой задачи служит метод `filter()` для массивов. Этот метод позволяет эффективно создавать новый массив из тех элементов исходного массива, которые удовлетворяют заданному условию.\n\n\n### Определение и синтаксис\n\nМетод `filter()` создаёт новый массив со всеми элементами исходного массива, для которых вызываемая функция фильтрации возвращает `true`.\n\n```javascript\nlet filteredArray = array.filter(callbackFunction(element, index, array), thisArg);\n```\n\n* **callbackFunction**: Функция, вызываемая для каждого элемента массива. Элемент добавляется в новый массив только если функция возвращает `true`.\n* **element**: Текущий обрабатываемый элемент массива.\n* **index** (необязательно): Индекс текущего обрабатываемого элемента в массиве.\n* **array** (необязательно): Массив, по которому осуществляется проход.\n* **thisArg** (необязательно): Значение, используемое в качестве `this` при выполнении `callbackFunction`.\n\n\n### Примеры использования\n\nФильтрация массива чисел:\nНапример, фильтрация всех чётных чисел из массива:\n\n```javascript\nconst original = [1, 2, 3, 4, 5, 6];\nconst evenNumbers = original.filter(number => number % 2 === 0);\n\nconsole.log(original);    // [ 1, 2, 3, 4, 5, 6 ]\nconsole.log(evenNumbers); // [ 2, 4, 6 ]\n```\n\nФильтрация массива объектов:\nПредположим, у вас есть массив объектов, представляющих людей, и вы хотите найти только тех, кто старше 18 лет:\n\n```javascript\nconst people = [\n    { name: \"John\", age: 25 },\n    { name: \"Jane\", age: 16 },\n    { name: \"Jim\", age: 30 }\n];\n\nconst adults = people.filter(person => person.age > 18);\nconsole.log(adults); // [ { name: \"John\", age: 25 }, { name: \"Jim\", age: 30 } ]\n```\n\n\n### Преимущества использования `filter()`\n\n* **Неизменяемость исходных данных**: Метод `filter()` не модифицирует исходный массив, что делает его идеальным для функционального программирования.\n* **Читаемость и выразительность**: Функция фильтрации может быть лаконично выражена через стрелочные функции, что делает код компактным и легко читаемым.\n* **Универсальность**: Метод можно использовать для любых типов данных, поддерживаемых в массивах, включая числа, строки, объекты и даже другие массивы.\n\n\nМетод `filter()` является неотъемлемой частью работы с массивами в JavaScript и предлагает мощный, но простой способ обработки и выборки данных, соответствующих определённым условиям. Он способствует написанию чистого, оптимизированного и легко поддерживаемого кода, что делает его незаменимым инструментом для разработчиков на всех уровнях.",
    "en": "# Array.prototype.filter() – фильтрует массив по условию language: en",
    "es": "# Array.prototype.filter() – фильтрует массив по условию language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}