{
  "_id": "6696c2cb763f0712c198f6ef",
  "name": {
    "en": "/*",
    "ru": "Фильтрация задач по срокам и статусу"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterTasks`, которая фильтрует массив задач на основании их статуса и срока выполнения.\n\nФункция принимает четыре параметра:\n* `tasks` - массив объектов,\n* `statuses` - массив строк,\n* `startDate` - строка вида: \"2024-06-01\",\n* `endDate` - строка вида: \"2024-06-30\".\n\nЗадачи должны соответствовать любому из статусов в массиве `statuses` и иметь дату выполнения в заданном диапазоне от `startDate` до `endDate`.\n\n\nПримеры запуска функции:\n```javascript\nconst tasks = [\n  { name: \"Task 1\", status: \"Completed\", dueDate: \"2024-06-01\" },\n  { name: \"Task 2\", status: \"In Progress\", dueDate: \"2024-06-15\" },\n  { name: \"Task 3\", status: \"Not Started\", dueDate: \"2024-07-01\" }\n];\n\nconsole.log(filterTasks(tasks, [\"Completed\", \"In Progress\"], \"2024-06-01\", \"2024-06-30\"));\n// [{ name: \"Task 1\", status: \"Completed\", dueDate: \"2024-06-01\" }, { name: \"Task 2\", status: \"In Progress\", dueDate: \"2024-06-15\" }]\n```"
  },
  "initialSolution": "function filterTasks(){\n\n}",
  "completedSolution": "function filterTasks(tasks, statuses, startDate, endDate) {\n  return tasks.filter(({status, dueDate}) => dueDate >= startDate && dueDate <= endDate && statuses.includes(status));\n}",
  "openTest": "it('Created function filterTasks', () => {\n  expect(filterTasks).to.be.a('function');\n});\n\nit(\"Function filterTasks should include filter method\", () => {\n  const result = filterTasks.toString();\n  expect(result).to.include('.filter(');\n});\n\nit(\"filterTasks([{name: 'Task 1', status: 'Completed', dueDate: '2024-06-01'}], ['Completed'], '2024-06-01', '2024-06-30') should return [{name: 'Task 1', status: 'Completed', dueDate: '2024-06-01'}]\", () => {\n  const tasks = [\n    { name: \"Task 1\", status: \"Completed\", dueDate: \"2024-06-01\" }\n  ];\n  expect(filterTasks(tasks, [\"Completed\"], \"2024-06-01\", \"2024-06-30\")).to.deep.equal([\n    { name: \"Task 1\", status: \"Completed\", dueDate: \"2024-06-01\" }\n  ]);\n});\n\nit(\"filterTasks([{name: 'Task 2', status: 'In Progress', dueDate: '2024-06-15'}], ['Completed'], '2024-06-01', '2024-06-30') should return [] because the status does not match\", () => {\n  const tasks = [\n    { name: \"Task 2\", status: \"In Progress\", dueDate: \"2024-06-15\" }\n  ];\n  expect(filterTasks(tasks, [\"Completed\"], \"2024-06-01\", \"2024-06-30\")).to.deep.equal([]);\n});\n\nit(\"filterTasks([{name: 'Task 3', status: 'Not Started', dueDate: '2024-07-01'}], ['Not Started'], '2024-06-01', '2024-06-30') should return [] because the due date is out of range\", () => {\n  const tasks = [\n    { name: \"Task 3\", status: \"Not Started\", dueDate: \"2024-07-01\" }\n  ];\n  expect(filterTasks(tasks, [\"Not Started\"], \"2024-06-01\", \"2024-06-30\")).to.deep.equal([]);\n});\n\nit(\"filterTasks([], ['Completed'], '2024-06-01', '2024-06-30') should return [] when there are no tasks\", () => {\n  expect(filterTasks([], [\"Completed\"], \"2024-06-01\", \"2024-06-30\")).to.deep.equal([]);\n});\n\nit(\"filterTasks([{name: 'Task 1', status: 'Completed', dueDate: '2024-06-01'}], ['Completed'], '2024-06-01', '2024-06-01') should return [{name: 'Task 1', status: 'Completed', dueDate: '2024-06-01'}] as the due date matches exactly the start date\", () => {\n  const tasks = [\n    { name: \"Task 1\", status: \"Completed\", dueDate: \"2024-06-01\" }\n  ];\n  expect(filterTasks(tasks, [\"Completed\"], \"2024-06-01\", \"2024-06-01\")).to.deep.equal([\n    { name: \"Task 1\", status: \"Completed\", dueDate: \"2024-06-01\" }\n  ]);\n});\n\nit(\"filterTasks([{name: 'Task 4', status: 'In Progress', dueDate: '2024-06-30'}], ['In Progress'], '2024-06-01', '2024-06-30') should return [{name: 'Task 4', status: 'In Progress', dueDate: '2024-06-30'}] as the due date matches exactly the end date\", () => {\n  const tasks = [\n    { name: \"Task 4\", status: \"In Progress\", dueDate: \"2024-06-30\" }\n  ];\n  expect(filterTasks(tasks, [\"In Progress\"], \"2024-06-01\", \"2024-06-30\")).to.deep.equal([\n    { name: \"Task 4\", status: \"In Progress\", dueDate: \"2024-06-30\" }\n  ]);\n});\n\nit(\"filterTasks([{name: 'Task 1', status: 'Completed', dueDate: '2024-06-01'}, {name: 'Task 2', status: 'Completed', dueDate: '2024-06-15'}], ['Completed'], '2024-06-01', '2024-06-30') should return all tasks within date range and matching status\", () => {\n  const tasks = [\n    { name: \"Task 1\", status: \"Completed\", dueDate: \"2024-06-01\" },\n    { name: \"Task 2\", status: \"Completed\", dueDate: \"2024-06-15\" }\n  ];\n  expect(filterTasks(tasks, [\"Completed\"], \"2024-06-01\", \"2024-06-30\")).to.deep.equal([\n    { name: \"Task 1\", status: \"Completed\", dueDate: \"2024-06-01\" },\n    { name: \"Task 2\", status: \"Completed\", dueDate: \"2024-06-15\" }\n  ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}