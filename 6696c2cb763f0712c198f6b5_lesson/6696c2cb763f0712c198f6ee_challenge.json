{
  "_id": "6696c2cb763f0712c198f6ee",
  "name": {
    "en": "/*",
    "ru": "Фильтрация ресторанов по кухне и рейтингу"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterRestaurants`, которая принимает массив объектов, представляющих рестораны, а также желаемый тип кухни и минимальный рейтинг.\n\nФункция должна возвращать новый массив, содержащий только те рестораны, которые соответствуют указанной кухне и имеют рейтинг выше или равный минимальному.\n\n\nПримеры запуска функции:\n```javascript\nconst restaurants = [\n  { name: \"Chez Panisse\", cuisine: \"Mexican\", rating: 3.9 },\n  { name: \"Shalimar\", cuisine: \"Indian\", rating: 4.0 },\n  { name: \"La Taqueria\", cuisine: \"Mexican\", rating: 4.5 },\n  { name: \"Pizzeria Delfina\", cuisine: \"Italian\", rating: 4.1 }\n];\n\nconsole.log(filterRestaurants(restaurants, \"Mexican\", 4.0));\n// Вывод: [{ name: \"La Taqueria\", cuisine: \"Mexican\", rating: 4.5 }]\n```"
  },
  "initialSolution": "function filterRestaurants(){\n\n}",
  "completedSolution": "function filterRestaurants(arr, type, minRating) {\n  return arr.filter(({cuisine, rating}) => cuisine === type && rating >= minRating);\n}",
  "openTest": "it('Created function filterRestaurants', () => {\n  expect(filterRestaurants).to.be.a('function');\n});\n\nit(\"Function filterRestaurants should include filter method\", () => {\n  const result = filterRestaurants.toString();\n  expect(result).to.include('.filter(');\n});\n\nit(\"filterRestaurants([{name: 'La Taqueria', cuisine: 'Mexican', rating: 4.5}], 'Mexican', 4.0) should return [{name: 'La Taqueria', cuisine: 'Mexican', rating: 4.5}]\", () => {\n  const restaurants = [\n    { name: \"La Taqueria\", cuisine: \"Mexican\", rating: 4.5 }\n  ];\n  expect(filterRestaurants(restaurants, \"Mexican\", 4.0)).to.deep.equal([\n    { name: \"La Taqueria\", cuisine: \"Mexican\", rating: 4.5 }\n  ]);\n});\n\nit(\"filterRestaurants([{name: 'Shalimar', cuisine: 'Indian', rating: 4.0}], 'Indian', 4.0) should return [{name: 'Shalimar', cuisine: 'Indian', rating: 4.0}]\", () => {\n  const restaurants = [\n    { name: \"Shalimar\", cuisine: \"Indian\", rating: 4.0 }\n  ];\n  expect(filterRestaurants(restaurants, \"Indian\", 4.0)).to.deep.equal([\n    { name: \"Shalimar\", cuisine: \"Indian\", rating: 4.0 }\n  ]);\n});\n\nit(\"filterRestaurants([], 'Italian', 4.0) should return []\", () => {\n  expect(filterRestaurants([], \"Italian\", 4.0)).to.deep.equal([]);\n});\n\nit(\"filterRestaurants([{name: 'Pizzeria Delfina', cuisine: 'Italian', rating: 3.9}], 'Italian', 4.0) should return []\", () => {\n  const restaurants = [\n    { name: \"Pizzeria Delfina\", cuisine: \"Italian\", rating: 3.9 }\n  ];\n  expect(filterRestaurants(restaurants, \"Italian\", 4.0)).to.deep.equal([]);\n});\n\nit(\"filterRestaurants([{name: 'Chez Panisse', cuisine: 'French', rating: 4.5}], 'French', 4.5) should return [{name: 'Chez Panisse', cuisine: 'French', rating: 4.5}]\", () => {\n  const restaurants = [\n    { name: \"Chez Panisse\", cuisine: \"French\", rating: 4.5 }\n  ];\n  expect(filterRestaurants(restaurants, \"French\", 4.5)).to.deep.equal([\n    { name: \"Chez Panisse\", cuisine: \"French\", rating: 4.5 }\n  ]);\n});\n\nit(\"filterRestaurants([{name: 'Pizzeria Delfina', cuisine: 'Italian', rating: 4.0}], 'Italian', 4.0) should return [{name: 'Pizzeria Delfina', cuisine: 'Italian', rating: 4.0}]\", () => {\n  const restaurants = [\n    { name: \"Pizzeria Delfina\", cuisine: \"Italian\", rating: 4.0 }\n  ];\n  expect(filterRestaurants(restaurants, \"Italian\", 4.0)).to.deep.equal([\n    { name: \"Pizzeria Delfina\", cuisine: \"Italian\", rating: 4.0 }\n  ]);\n});\n\nit(\"filterRestaurants([{name: 'La Taqueria', cuisine: 'Mexican', rating: 3.9}], 'Mexican', 4.0) should return [] because the rating is below the threshold\", () => {\n  const restaurants = [\n    { name: \"La Taqueria\", cuisine: \"Mexican\", rating: 3.9 }\n  ];\n  expect(filterRestaurants(restaurants, \"Mexican\", 4.0)).to.deep.equal([]);\n});\n\nit(\"filterRestaurants([{name: 'Chez Panisse', cuisine: 'French', rating: 4.5}, {name: 'Bistro Margot', cuisine: 'French', rating: 4.5}], 'French', 4.5) should return both restaurants as they meet the criteria\", () => {\n  const restaurants = [\n    { name: \"Chez Panisse\", cuisine: \"French\", rating: 4.5 },\n    { name: \"Bistro Margot\", cuisine: \"French\", rating: 4.5 }\n  ];\n  expect(filterRestaurants(restaurants, \"French\", 4.5)).to.deep.equal([\n    { name: \"Chez Panisse\", cuisine: \"French\", rating: 4.5 },\n    { name: \"Bistro Margot\", cuisine: \"French\", rating: 4.5 }\n  ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}