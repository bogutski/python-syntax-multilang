{
  "_id": "6696c2cb763f0712c198f6f1",
  "name": {
    "en": "/*",
    "ru": "Фильтрация и агрегация данных о продажах"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterAndSummarizeSales`, которая фильтрует массив записей о продажах по минимальной сумме продажи и диапазону дат, а затем суммирует и возвращает общую сумму продаж для отфильтрованных записей.\n\nФункция принимает 4 параметра:\n* salesData - массив объектов [{ date: \"2024-03-01\", amount: 200 }, ...],\n* minAmount - минимальная сумма (number),\n* startDate - начальная дата (string),\n* endDate - дата окончания (string).\n\n\nПримеры запуска функции:\n```javascript\nconst salesData = [\n  { date: \"2024-03-01\", amount: 200 },\n  { date: \"2024-03-15\", amount: 150 },\n  { date: \"2024-04-01\", amount: 300 },\n  { date: \"2024-05-15\", amount: 250 }\n];\n\nconsole.log(filterAndSummarizeSales(salesData, 200, \"2024-03-01\", \"2024-04-30\"));\n// Вывод: 500 (сумма продаж 200 и 300, попадающих в критерии)\n```"
  },
  "initialSolution": "function filterAndSummarizeSales(){\n\n}",
  "completedSolution": "function filterAndSummarizeSales(salesData, minAmount, startDate, endDate) {\n  return salesData\n      .filter(({amount, date}) => amount >= minAmount && date >= startDate && date <= endDate)\n      .reduce((acc, {amount}) => acc + amount, 0);\n}",
  "openTest": "it('Created function filterAndSummarizeSales', () => {\n  expect(filterAndSummarizeSales).to.be.a('function');\n});\n\nit(\"Function filterAndSummarizeSales should include filter method\", () => {\n  const result = filterAndSummarizeSales.toString();\n  expect(result).to.include('.filter(');\n});\n\nit(\"filterAndSummarizeSales([{date: '2024-03-01', amount: 200}, {date: '2024-04-01', amount: 300}], 200, '2024-03-01', '2024-04-30') should return 500\", () => {\n  const salesData = [\n    { date: \"2024-03-01\", amount: 200 },\n    { date: \"2024-04-01\", amount: 300 }\n  ];\n  expect(filterAndSummarizeSales(salesData, 200, \"2024-03-01\", \"2024-04-30\")).to.equal(500);\n});\n\nit(\"filterAndSummarizeSales([], 100, '2024-03-01', '2024-04-30') should return 0\", () => {\n  expect(filterAndSummarizeSales([], 100, \"2024-03-01\", \"2024-04-30\")).to.equal(0);\n});\n\nit(\"filterAndSummarizeSales([{date: '2024-04-15', amount: 250}], 300, '2024-03-01', '2024-04-30') should return 0 as no sales meet the minimum amount\", () => {\n  const salesData = [\n    { date: \"2024-04-15\", amount: 250 }\n  ];\n  expect(filterAndSummarizeSales(salesData, 300, \"2024-03-01\", \"2024-04-30\")).to.equal(0);\n});\n\nit(\"filterAndSummarizeSales([{date: '2024-03-15', amount: 150}, {date: '2024-04-01', amount: 300}], 200, '2024-03-01', '2024-04-30') should return 300\", () => {\n  const salesData = [\n    { date: \"2024-03-15\", amount: 150 },\n    { date: \"2024-04-01\", amount: 300 }\n  ];\n  expect(filterAndSummarizeSales(salesData, 200, \"2024-03-01\", \"2024-04-30\")).to.equal(300);\n});\n\nit(\"filterAndSummarizeSales([{date: '2024-03-01', amount: 200}], 200, '2024-03-01', '2024-03-01') should return 200 as the sale date matches exactly the start and end dates\", () => {\n  const salesData = [\n    { date: \"2024-03-01\", amount: 200 }\n  ];\n  expect(filterAndSummarizeSales(salesData, 200, \"2024-03-01\", \"2024-03-01\")).to.equal(200);\n});\n\nit(\"filterAndSummarizeSales([{date: '2024-02-28', amount: 500}, {date: '2024-03-01', amount: 200}], 100, '2024-03-01', '2024-03-01') should return 200 as only one sale is within the date range\", () => {\n  const salesData = [\n    { date: \"2024-02-28\", amount: 500 },\n    { date: \"2024-03-01\", amount: 200 }\n  ];\n  expect(filterAndSummarizeSales(salesData, 100, \"2024-03-01\", \"2024-03-01\")).to.equal(200);\n});\n\nit(\"filterAndSummarizeSales([{date: '2024-04-30', amount: 300}, {date: '2024-05-01', amount: 500}], 250, '2024-04-01', '2024-04-30') should return 300 as only the sale on the last day of April meets the criteria\", () => {\n  const salesData = [\n    { date: \"2024-04-30\", amount: 300 },\n    { date: \"2024-05-01\", amount: 500 }\n  ];\n  expect(filterAndSummarizeSales(salesData, 250, \"2024-04-01\", \"2024-04-30\")).to.equal(300);\n});\n\nit(\"filterAndSummarizeSales([{date: '2024-03-15', amount: 150}, {date: '2024-04-01', amount: 300}, {date: '2024-04-02', amount: 450}], 150, '2024-04-01', '2024-04-15') should return 750 as it includes multiple sales within the date range\", () => {\n  const salesData = [\n    { date: \"2024-03-15\", amount: 150 },\n    { date: \"2024-04-01\", amount: 300 },\n    { date: \"2024-04-02\", amount: 450 }\n  ];\n  expect(filterAndSummarizeSales(salesData, 150, \"2024-04-01\", \"2024-04-15\")).to.equal(750);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}