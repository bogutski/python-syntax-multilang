{
  "_id": "6696c2cb763f0712c198f6ea",
  "name": {
    "en": "/*",
    "ru": "Фильтрация студентов по среднему баллу"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterHighAchievers` которая принимает массив объектов, представляющих студентов, и пороговое значение `threshold` для среднего балла.\n\nФункция должна возвращать новый массив, содержащий только тех студентов, чей средний балл выше или равен заданному порогу.\n\n\nПримеры запуска функции:\n```javascript\nconst students = [\n  { name: \"Alice\", averageScore: 88 },\n  { name: \"Bob\", averageScore: 72 },\n  { name: \"Clara\", averageScore: 91 },\n  { name: \"David\", averageScore: 85 }\n];\n\nconsole.log(filterHighAchievers(students, 85));\n// [\n//   { name: 'Alice', averageScore: 88 },\n//   { name: 'Clara', averageScore: 91 },\n//   { name: 'David', averageScore: 85 }\n// ]\n```"
  },
  "initialSolution": "function filterHighAchievers(){\n\n}",
  "completedSolution": "function filterHighAchievers(array, threshold) {\n  return array.filter(({averageScore}) => averageScore >= threshold);\n}",
  "openTest": "it('Created function filterHighAchievers', () => {\n  expect(filterHighAchievers).to.be.a('function');\n});\n\nit(\"Function filterHighAchievers should include filter method\", () => {\n  const result = filterHighAchievers.toString();\n  expect(result).to.include('.filter(');\n});\n\nit(\"filterHighAchievers should return students with scores above or equal to 85\", () => {\n  const students = [\n    { name: \"Alice\", averageScore: 88 },\n    { name: \"Bob\", averageScore: 72 },\n    { name: \"Clara\", averageScore: 91 },\n    { name: \"David\", averageScore: 85 }\n  ];\n  expect(filterHighAchievers(students, 85)).to.deep.equal([\n    { name: \"Alice\", averageScore: 88 },\n    { name: \"Clara\", averageScore: 91 },\n    { name: \"David\", averageScore: 85 }\n  ]);\n});\n\nit(\"filterHighAchievers should return an empty array if no students meet the threshold\", () => {\n  const students = [\n    { name: \"Alice\", averageScore: 84 },\n    { name: \"Bob\", averageScore: 72 }\n  ];\n  expect(filterHighAchievers(students, 85)).to.deep.equal([]);\n});\n\nit(\"filterHighAchievers should handle a single-element array\", () => {\n  const students = [{ name: \"Clara\", averageScore: 91 }];\n  expect(filterHighAchievers(students, 85)).to.deep.equal([{ name: \"Clara\", averageScore: 91 }]);\n});\n\nit(\"filterHighAchievers should handle an array with all students above the threshold\", () => {\n  const students = [\n    { name: \"Alice\", averageScore: 88 },\n    { name: \"Clara\", averageScore: 91 },\n    { name: \"David\", averageScore: 86 }\n  ];\n  expect(filterHighAchievers(students, 85)).to.deep.equal([\n    { name: \"Alice\", averageScore: 88 },\n    { name: \"Clara\", averageScore: 91 },\n    { name: \"David\", averageScore: 86 }\n  ]);\n});\n\nit(\"filterHighAchievers should handle an array with students having the exact threshold score\", () => {\n  const students = [\n    { name: \"David\", averageScore: 85 }\n  ];\n  expect(filterHighAchievers(students, 85)).to.deep.equal([{ name: \"David\", averageScore: 85 }]);\n});\n\nit(\"filterHighAchievers should return an empty array when no data is available\", () => {\n  expect(filterHighAchievers([], 85)).to.deep.equal([]);\n});\n\nit(\"filterHighAchievers should return an empty array when threshold is not a number\", () => {\n  const students = [\n    { name: \"Alice\", averageScore: 88 },\n    { name: \"Clara\", averageScore: 91 }\n  ];\n  expect(filterHighAchievers(students, \"eighty-five\")).to.deep.equal([]);\n});\n\nit(\"filterHighAchievers should process large datasets efficiently\", () => {\n  const students = Array(1000).fill({ name: \"Test\", averageScore: 85 });\n  expect(filterHighAchievers(students, 85).length).to.equal(1000);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}