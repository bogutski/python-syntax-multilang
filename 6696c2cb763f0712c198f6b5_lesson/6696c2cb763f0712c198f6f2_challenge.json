{
  "_id": "6696c2cb763f0712c198f6f2",
  "name": {
    "en": "/*",
    "ru": "Расширенная фильтрация и преобразование данных заказов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `summarizeAndFilterOrders`, которая принимает:\n * orders - массив заказов (array of objects),\n * minTotal - минимальную общую сумму заказа для фильтрации (number),\n * categories - массив допустимых категорий (array of strings),\n * regions - массив допустимых регионов (array of strings).\n\nФункция должна сначала суммировать массивы сумм в каждом заказе, затем фильтровать заказы, которые соответствуют минимальной сумме, категории и региону.\n\nВозвращаемые данные должны быть в новом формате, как указанно в примере.\n\n\nПримеры запуска функции:\n```javascript\nconst orders = [\n  { id: 1, total: [300, 100, 50], category: \"Electronics\", region: \"North\" },\n  { id: 2, total: [50, 45, 80], category: \"Clothing\", region: \"South\" }\n];\n\nconsole.log(summarizeAndFilterOrders(orders, 200, [\"Electronics\", \"Clothing\"], [\"North\", \"South\"]));\n// Вывод: [{ id: 1, total: 450, category: \"Electronics\", region: \"North\" }]\n```"
  },
  "initialSolution": "function summarizeAndFilterOrders(){\n\n}",
  "completedSolution": "function summarizeAndFilterOrders(orders, minTotal, categories, regions) {\n  return orders\n      .map(obj => ({...obj, total: obj.total.reduce((acc, n) => acc + n, 0)}))\n      .filter(({total, category, region}) =>\n          total >= minTotal &&\n          categories.includes(category) &&\n          regions.includes(region)\n      )\n}",
  "openTest": "it('Created function summarizeAndFilterOrders', () => {\n  expect(summarizeAndFilterOrders).to.be.a('function');\n});\n\nit(\"Function summarizeAndFilterOrders should include filter method\", () => {\n  const result = summarizeAndFilterOrders.toString();\n  expect(result).to.include('.filter(');\n});\n\nit(\"summarizeAndFilterOrders should sum totals and filter by min total, categories, and regions, returning the new format\", () => {\n  const orders = [\n    { id: 1, total: [300, 100, 50], category: \"Electronics\", region: \"North\" },\n    { id: 2, total: [150, 10, 45, 80], category: \"Clothing\", region: \"South\" }\n  ];\n  expect(summarizeAndFilterOrders(orders, 200, [\"Electronics\", \"Clothing\"], [\"North\", \"South\"])).to.deep.equal([\n    { id: 1, total: 450, category: \"Electronics\", region: \"North\" }, { id: 2, total: 285, category: \"Clothing\", region: \"South\" }\n  ]);\n});\n\nit(\"summarizeAndFilterOrders should return an empty array if no orders meet the criteria\", () => {\n  const orders = [\n    { id: 3, total: [100, 50], category: \"Electronics\", region: \"West\" }\n  ];\n  expect(summarizeAndFilterOrders(orders, 200, [\"Electronics\"], [\"West\"])).to.deep.equal([]);\n});\n\nit(\"summarizeAndFilterOrders should handle cases with multiple categories and regions correctly\", () => {\n  const orders = [\n    { id: 4, total: [300, 250], category: \"Furniture\", region: \"North\" },\n    { id: 5, total: [100, 100, 100], category: \"Furniture\", region: \"East\" }\n  ];\n  expect(summarizeAndFilterOrders(orders, 500, [\"Furniture\"], [\"North\", \"East\"])).to.deep.equal([\n    { id: 4, total: 550, category: \"Furniture\", region: \"North\" }\n  ]);\n});\n\nit(\"summarizeAndFilterOrders should handle orders that exactly meet the minimum total requirement\", () => {\n  const orders = [\n    { id: 6, total: [100, 50, 50], category: \"Electronics\", region: \"North\" }\n  ];\n  expect(summarizeAndFilterOrders(orders, 200, [\"Electronics\"], [\"North\"])).to.deep.equal([\n    { id: 6, total: 200, category: \"Electronics\", region: \"North\" }\n  ]);\n});\n\nit(\"summarizeAndFilterOrders should exclude orders below the minimum total requirement\", () => {\n  const orders = [\n    { id: 7, total: [100, 95], category: \"Electronics\", region: \"North\" }\n  ];\n  expect(summarizeAndFilterOrders(orders, 200, [\"Electronics\"], [\"North\"])).to.deep.equal([]);\n});\n\nit(\"summarizeAndFilterOrders should include orders from multiple matching regions\", () => {\n  const orders = [\n    { id: 8, total: [150, 100], category: \"Clothing\", region: \"North\" },\n    { id: 9, total: [120, 90], category: \"Clothing\", region: \"South\" }\n  ];\n  expect(summarizeAndFilterOrders(orders, 200, [\"Clothing\"], [\"North\", \"South\"])).to.deep.equal([\n    { id: 8, total: 250, category: \"Clothing\", region: \"North\" },\n    { id: 9, total: 210, category: \"Clothing\", region: \"South\" }\n  ]);\n});\n\nit(\"summarizeAndFilterOrders should return empty array when no categories match\", () => {\n  const orders = [\n    { id: 10, total: [200, 300], category: \"Home Goods\", region: \"West\" }\n  ];\n  expect(summarizeAndFilterOrders(orders, 100, [\"Electronics\", \"Clothing\"], [\"West\"])).to.deep.equal([]);\n});\n\nit(\"summarizeAndFilterOrders should correctly sum and filter large number of small amounts\", () => {\n  const orders = [\n    { id: 11, total: Array(100).fill(5), category: \"Books\", region: \"East\" }  // 100 * 5 = 500\n  ];\n  expect(summarizeAndFilterOrders(orders, 500, [\"Books\"], [\"East\"])).to.deep.equal([\n    { id: 11, total: 500, category: \"Books\", region: \"East\" }\n  ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}