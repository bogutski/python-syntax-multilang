{
  "_id": "6696c2cb763f0712c198f6f0",
  "name": {
    "en": "/*",
    "ru": "Фильтрация мультимедийного контента по жанрам и рейтингам"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterMedia`, которая принимает массив объектов - `mediaList`, мультимедийного контента (фильмы, игры, книги), массив жанров - `genres` и объект диапазона рейтингов - `ratingRange`.\n\nФункция должна возвращать новый массив, содержащий только те элементы, которые соответствуют одному из жанров в списке и имеют рейтинг в указанном диапазоне (включительно).\n\n\nПримеры запуска функции:\n```javascript\nconst mediaList = [\n  { title: \"Inception\", genre: \"Sci-Fi\", rating: 8.8 },\n  { title: \"The Witcher\", genre: \"Fantasy\", rating: 9.2 },\n  { title: \"Revolutionary Road\", genre: \"Drama\", rating: 7.3 },\n  { title: \"Black Mirror\", genre: \"Sci-Fi\", rating: 8.5 }\n];\n\nconsole.log(filterMedia(mediaList, [\"Sci-Fi\", \"Fantasy\"], {min: 8, max: 9}));\n// [{ title: \"Inception\", genre: \"Sci-Fi\", rating: 8.8 }, { title: \"Black Mirror\", genre: \"Sci-Fi\", rating: 8.5 }]\n```"
  },
  "initialSolution": "function filterMedia(){\n\n}",
  "completedSolution": "function filterMedia(mediaList, genres, ratingRange) {\n  return mediaList.filter(({genre, rating}) => genres.includes(genre) && rating >= ratingRange.min && rating <= ratingRange.max);\n}",
  "openTest": "it('Created function filterMedia', () => {\n  expect(filterMedia).to.be.a('function');\n});\n\nit(\"Function filterMedia should include filter method\", () => {\n  const result = filterMedia.toString();\n  expect(result).to.include('.filter(');\n});\n\nit(\"filterMedia([{title: 'Inception', genre: 'Sci-Fi', rating: 8.8}], ['Sci-Fi'], {min: 8, max: 9}) should return [{title: 'Inception', genre: 'Sci-Fi', rating: 8.8}]\", () => {\n  const mediaList = [\n    { title: \"Inception\", genre: \"Sci-Fi\", rating: 8.8 }\n  ];\n  expect(filterMedia(mediaList, [\"Sci-Fi\"], {min: 8, max: 9})).to.deep.equal([\n    { title: \"Inception\", genre: \"Sci-Fi\", rating: 8.8 }\n  ]);\n});\n\nit(\"filterMedia([{title: 'The Witcher', genre: 'Fantasy', rating: 9.2}], ['Fantasy'], {min: 9, max: 9.5}) should return [{title: 'The Witcher', genre: 'Fantasy', rating: 9.2}]\", () => {\n  const mediaList = [\n    { title: \"The Witcher\", genre: \"Fantasy\", rating: 9.2 }\n  ];\n  expect(filterMedia(mediaList, [\"Fantasy\"], {min: 9, max: 9.5})).to.deep.equal([\n    { title: \"The Witcher\", genre: \"Fantasy\", rating: 9.2 }\n  ]);\n});\n\nit(\"filterMedia([], ['Drama'], {min: 7, max: 8}) should return []\", () => {\n  expect(filterMedia([], [\"Drama\"], {min: 7, max: 8})).to.deep.equal([]);\n});\n\nit(\"filterMedia([{title: 'Revolutionary Road', genre: 'Drama', rating: 7.3}], ['Drama'], {min: 7, max: 7.5}) should return [{title: 'Revolutionary Road', genre: 'Drama', rating: 7.3}]\", () => {\n  const mediaList = [\n    { title: \"Revolutionary Road\", genre: \"Drama\", rating: 7.3 }\n  ];\n  expect(filterMedia(mediaList, [\"Drama\"], {min: 7, max: 7.5})).to.deep.equal([\n    { title: \"Revolutionary Road\", genre: \"Drama\", rating: 7.3 }\n  ]);\n});\n\nit(\"filterMedia([{title: 'Black Mirror', genre: 'Sci-Fi', rating: 8.5}], ['Sci-Fi'], {min: 8.5, max: 9}) should return [{title: 'Black Mirror', genre: 'Sci-Fi', rating: 8.5}] as the rating matches exactly the lower bound\", () => {\n  const mediaList = [\n    { title: \"Black Mirror\", genre: \"Sci-Fi\", rating: 8.5 }\n  ];\n  expect(filterMedia(mediaList, [\"Sci-Fi\"], {min: 8.5, max: 9})).to.deep.equal([\n    { title: \"Black Mirror\", genre: \"Sci-Fi\", rating: 8.5 }\n  ]);\n});\n\nit(\"filterMedia([{title: 'Old Movie', genre: 'Classic', rating: 8.0}], ['Classic'], {min: 8, max: 8}) should return [{title: 'Old Movie', genre: 'Classic', rating: 8.0}] as the rating matches exactly the bounds\", () => {\n  const mediaList = [\n    { title: \"Old Movie\", genre: \"Classic\", rating: 8.0 }\n  ];\n  expect(filterMedia(mediaList, [\"Classic\"], {min: 8, max: 8})).to.deep.equal([\n    { title: \"Old Movie\", genre: \"Classic\", rating: 8.0 }\n  ]);\n});\n\nit(\"filterMedia([{title: 'New Series', genre: 'Sci-Fi', rating: 8.9}], ['Sci-Fi'], {min: 8, max: 8.9}) should return [{title: 'New Series', genre: 'Sci-Fi', rating: 8.9}] as the rating matches exactly the upper bound\", () => {\n  const mediaList = [\n    { title: \"New Series\", genre: \"Sci-Fi\", rating: 8.9 }\n  ];\n  expect(filterMedia(mediaList, [\"Sci-Fi\"], {min: 8, max: 8.9})).to.deep.equal([\n    { title: \"New Series\", genre: \"Sci-Fi\", rating: 8.9 }\n  ]);\n});\n\nit(\"filterMedia([{title: 'Adventure Time', genre: 'Adventure', rating: 9.0}], ['Adventure'], {min: 9, max: 9.0}) should return [{title: 'Adventure Time', genre: 'Adventure', rating: 9.0}] as the rating matches exactly the upper bound\", () => {\n  const mediaList = [\n    { title: \"Adventure Time\", genre: \"Adventure\", rating: 9.0 }\n  ];\n  expect(filterMedia(mediaList, [\"Adventure\"], {min: 9, max: 9.0})).to.deep.equal([\n    { title: \"Adventure Time\", genre: \"Adventure\", rating: 9.0 }\n  ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}