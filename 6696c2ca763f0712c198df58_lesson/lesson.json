{
  "_id": "6696c2ca763f0712c198df58",
  "content": {
    "ru": "#### Чтобы функция вернула результат своей работы используется директива `return`\n\n`return` прекращает работу функции и возвращает результат.\n\nРассмотрим пример, в котором `return` используется несколько раз в теле функции:\n\n ```javascript\nfunction n1() {\n  return 1; // функция выполняет 'return' и прекращает работу \n  return 10; // эта строка не выполнится никогда\n}\n\nconsole.log(n1()) // 1 \n ```\n\nПродолжим знакомиться с функцией и ее структурой.\n\n## Параметры и аргументы функции\n\nРассмотрим пример:\n\n ```javascript\nfunction sum(n1, n2) {\n  return n1 + n2;\n} \n\nconsole.log(sum(1, 2)) // 3\n ```\n\nПри объявлении функции `sum()` мы использовали `параметры` `n1` и `n2`.\n\n`n1` и `n2` — это `переменные`, которые будут доступны в функции `sum()`.\n\nПри вызове функции `sum()` мы передали значения `1` и `2` в качестве `аргументов`.\n\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/one1-one2.png)\n\n### Параметр функции — это переменная, которая задается при объявлении функции\n\nРезультат работы функции `sum()` будет зависеть от тех значений, которые мы передадим при её вызове.\n\nЧтобы получить результат сложения чисел `3` и `5`, вызовем функцию `sum(3, 5)`.\n\n#### Пример вызова функции `sum()` и передачи ей аргументов\n\nРезультат работы функции `sum()` будет зависеть от тех значений, которые мы передадим при её вызове.\n\nПосле того как функция `sum()` получила значения `3` и `5` в качестве аргументов, она сложила их и вернула\nрезультат `8`.\n\nРезультат работы функции записали в переменную `result` и вывели в консоль.\n\n```javascript\nfunction sum(n1, n2) {\n  return n1 + n2;\n} \n \nconst result = sum(3, 5);\nconsole.log(result); // 8\n```\n\nЗначения `3` и `5` являются  `аргументами` функции `sum()`.\n\n### Аргумент функции — это значение, которое присваивается параметру при вызове функции\n\nАргументы присваиваются параметрам функции в том порядке, в котором они указаны при вызове функции.\n\nРассмотрим примеры работы функции `sum()` с различными значениями. Результаты выведем в консоль:\n\n```javascript\nconsole.log(sum(10, 20))// 30; результат работы функции 'sum()' для аргументов 10 и 20\nconsole.log(sum(35, -10)) // 25; результат работы функции 'sum()' для аргументов 35 и -10\nconsole.log(sum(-300, 120)) // -180; результат работы функции 'sum()' для аргументов -300 и 180\n ```\n\nМы рассмотрели пример функции `sum()` с двумя параметрами `n1` и `n2`.\n\nРассмотрим другие примеры:\n\n```javascript\nfunction mult(n1, n2, n3) {\n  return n1 * n2 * n3;\n}\n\nconsole.log(mult(2, 3, 4)) // 24\n```\n\nФункция `mult()` принимает три параметра `n1`, `n2` и `n3` и возвращает результат умножения для аргументов `2`, `3`\nи `4`.\n\n```javascript\nfunction avg(n1, n2, n3, n4) {\n  return (n1 + n2 + n3 + n4) / 4;\n}\n\nconsole.log(avg(2, 3, 4, 5)) // 3.5\n```\n\nФункция `avg()` принимает четыре параметра `n1`, `n2`, `n3` и `n4` и возвращает среднее арифметическое для\nаргументов `2`, `3`, `4` и `5`.\n\nОбратите внимание, что в примерах выше названия параметров `n1` и `n2` используются в разных\nфункциях: `sum(n1, n2)`, `mult(n1, n2, n3)` и `avg(n1, n2, n3, n4)`.\n\nЭто допустимо, поскольку доступ к ним ограничены границей функции.\n\n#### Пример попытки доступа к параметрам функции за её пределами\n\n```javascript\nfunction sum(n1, n2) {\n  return n1 + n2;\n}\n\nconsole.log(n1) // ReferenceError: n1 is not defined\n```\n\nВ примере выше мы пытаемся вывести в консоль значение переменной `n1`, которая объявлена внутри функции `sum()`.\n\nПри попытке обратиться к переменной `n1` вне функции `sum()` возникает ошибка `ReferenceError: n1 is not defined`.\n\n#### Пример функций с одним параметром\n\n```javascript\n// нахождение площади квадрата со стороной 'side'\nfunction square(side) {\n  return side ** 2; \n}\n\n// нахождение объема куба с ребром 'side'\nfunction cube(side) {\n  return side ** 3; \n}\n\nconsole.log(square(5)) // 25; \nconsole.log(cube(5)) // 125\n```\n\nПри создании функции параметры могут быть не заданы.\n\n```javascript\nfunction ten() {\n  return 10;\n}\n\nconsole.log(ten()) // 10\nconsole.log(ten(2, 3)) // 10\nconsole.log(ten(2, 3, -4)) // 10\nconsole.log(ten('hello')) // 10\n```\n\nФункция `ten()` не имеет ни одного параметра и возвращает значение `10` вне зависимости от переданных в нее аргументов.\nЭто выглядит странно. Но теперь вы знаете, как это работает.\n\nТренируйтесь создавать функции с разным количеством параметров.\n\nЭкспериментируйте с разными типами данных в качестве аргументов.\n",
    "en": "#### The `return` directive is used to make the function return the result of its work\n\n`return` stops the function and returns the result.\n\nConsider an example in which `return` is used several times in the body of a function:\n\n ```javascript\nfunction n1() {\n  return 1; // the function executes 'return' and stops working \n  return 10; // this line will never be executed\n}\n\nconsole.log(n1()) // 1 \n ```\n\nLet's continue to get acquainted with the function and its structure.\n\n## Function parameters and arguments\n\nLet's look at an example:\n\n ```javascript\nfunction sum(n1, n2) {\n  return n1 + n2;\n} \n\nconsole.log(sum(1, 2)) // 3\n ```\n\nWhen declaring the `sum()` function, we used `parameters` `n1` and `n2`.\n\nThe `n1` and `n2` are the `variables` that will be available in the `sum()` function.\n\nWhen `sum()` was called, we passed values `1` and `2` as `arguments`.\n\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/one1-one2.png)\n\n### A function parameter is a variable that is set when the function is declared\n\nThe result of the `sum()` function will depend on the values we pass when calling it.\n\nTo get the result of adding `3` and `5`, call the function `sum(3, 5)`.\n\n#### An example of calling the `sum()` function and passing it arguments\n\nThe result of the `sum()` function will depend on the values we pass when calling it.\n\nAfter `sum()` received the values `3` and `5` as arguments, it added them up and returned\nthe result `8`.\n\nThe result of the function was written into the `result` variable and output to the console.\n\n```javascript\nfunction sum(n1, n2) {\n  return n1 + n2;\n} \n\nconst result = sum(3, 5);\nconsole.log(result); // 8\n```\n\nThe values `3` and `5` are the `arguments` of `sum()`.\n\n### The function argument is the value that is assigned to the parameter when the function is called\n\nArguments are assigned to function parameters in the order in which they are specified when the function is called.\n\nLet's look at examples of `sum()` function working with different values. Let's display the results in the console:\n\n```javascript\nconsole.log(sum(10, 20))// 30; the result of the 'sum()' function for arguments 10 and 20\nconsole.log(sum(35, -10)) // 25; the result of 'sum()' for arguments 35 and -10\nconsole.log(sum(-300, 120)) // -180; the result of 'sum()' for arguments -300 and 180\n ```\n\nWe have considered an example of the `sum()` function with two parameters `n1` and `n2`.\n\nConsider other examples:\n\n```javascript\nfunction mult(n1, n2, n3) {\n  return n1 * n2 * n3;\n}\n\nconsole.log(mult(2, 3, 4)) // 24\n```\n\nThe function `mult()` takes three parameters `n1`, `n2` and `n3` and returns the result of multiplication for arguments `2`, `3`\nи `4`.\n\n```javascript\nfunction avg(n1, n2, n3, n4) {\n  return (n1 + n2 + n3 + n4) / 4;\n}\n\nconsole.log(avg(2, 3, 4, 5)) // 3.5\n```\n\nThe `avg()` function takes four parameters `n1`, `n2`, `n3` and `n4` and returns the arithmetic mean of\nof the arguments `2`, `3`, `4` and `5`.\n\nNote that in the examples above the parameter names `n1` and `n2` are used in different\nfunctions: `sum(n1, n2)`, `mult(n1, n2, n3)` and `avg(n1, n2, n3, n4)`.\n\nThis is acceptable because access to them is limited to the boundary of the function.\n\n#### An example of an attempt to access the parameters of a function outside of it\n\n```javascript\nfunction sum(n1, n2) {\n  return n1 + n2;\n}\n\nconsole.log(n1) // ReferenceError: n1 is not defined\n```\n\nIn the example above, we are trying to print to the console the value of the variable `n1`, which is declared inside the `sum()` function.\n\nWhen I try to access the `n1` variable outside the `sum()` function, an error `ReferenceError: n1 is not defined` occurs.\n\n#### Example of functions with one parameter\n\n```javascript\n// finding the area of a square with side 'side'\nfunction square(side) {\n  return side ** 2; \n}\n\n// finding the volume of the cube with the edge 'side'\nfunction cube(side) {\n  return side ** 3; \n}\n\nconsole.log(square(5)) // 25; \nconsole.log(cube(5)) // 125\n```\n\nThe parameters may not be set when the function is created.\n\n```javascript\nfunction ten() {\n  return 10;\n}\n\nconsole.log(ten()) // 10\nconsole.log(ten(2, 3)) // 10\nconsole.log(ten(2, 3, -4)) // 10\nconsole.log(ten('hello')) // 10\n```\n\nThe `ten()` function has no parameters and returns `10` regardless of the arguments passed to it.\nThis looks strange. But now you know how it works.\n\nPractice creating functions with different numbers of parameters.\n\nExperiment with different types of data as arguments.\n",
    "es": "# Параметры и аргументы функции language: es"
  },
  "video": {
    "ru": "https://youtu.be/eYXjfWQzc2k",
    "en": "",
    "es": ""
  }
}