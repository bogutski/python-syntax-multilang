{
  "_id": "6696c2ca763f0712c198ebb0",
  "content": {
    "ru": "### Что такое `Анаграмма`?\n\n`Анаграмма` - это слово или фраза, образованные путем перестановки букв другого слова или фразы. \n\nНапример, `brush` - это анаграмма слова `shrub`, `listen` - анаграмма слова `silent`, а `laptop machines` анаграмма от `Apple Macintosh`.\n\n\n### Функция на проверку анаграммы с использованием только циклов\n\nДавайте напишем функцию, которая будет проверять, являются ли две строки анаграммой.\n\n```javascript\nfunction isAnagram(str1, str2){\n  const s1 = str1.trim().toLowerCase();       // удаляем пробелы и приводим к нижнему регистру\n  const s2 = str2.trim().toLowerCase();\n\n  if(s1.length !== s2.length) return false;   // если длина строк не равна, то это не анаграмма\n\n  for(let i = 0; i < s1.length; i++){         // первый цикл перебирает все буквы первой строки\n    for(let j = 0; j < s2.length; j++){       // второй цикл перебирает все буквы второй строки\n      if(s1[i] === s2[j]) break;              // если буква первой строки равна букве второй строки, то выходим из цикла\n      if(s2.length -1 === j) return false;    // если мы дошли до конца второй строки и не нашли совпадений, то это не анаграмма\n    }\n  }\n\n  return true;\n}\n\nconsole.log(isAnagram('elbow', 'below'));   // true\n```\n\n\n\n### Функция на проверку анаграммы с использованием объекта\n\nТеперь мы рассмотрим, как можно оптимизировать нашу функцию с помощью объекта. \n\n```javascript\nfunction isAnagram(str1, str2){\n    const s1 = str1.trim().toLowerCase();\n    const s2 = str2.trim().toLowerCase();\n\n    if(s1.length !== s2.length) return false;\n\n    const s2object = {};                        // создаем объект, в котором будем хранить буквы второй строки\n\n    for(let i = 0; i < s2.length; i++){         // цикл перебирает все буквы второй строки\n        const el = s2[i];                       // сохраняем букву в переменную, чтобы улучшить читаемость кода\n        s2object[el] = true;                    // добавляем букву в объект: `ключ - это будет буква, значение - true`\n    }\n\n    for(let i = 0; i < s1.length; i++){         // цикл перебирает все буквы первой строки\n        const el = s1[i];                       // сохраняем букву в переменную, чтобы улучшить читаемость кода\n        if(!s2object[el]) return false;         // если буквы нет в объекте, то это не анаграмма\n    }\n\n    return true;\n}\n\nconsole.log(isAnagram('123', '923'));       // false\nconsole.log(isAnagram('elbow', 'below'));   // true\nconsole.log(isAnagram('laptop 123', 'toplap 125'));   // false\nconsole.log(isAnagram('laptop 123', 'toplap 123'));   // true\nconsole.log(isAnagram('laptop machines', 'Apple Macintosh'));   // true\n```\n\n\n\n### Функция на проверку анаграммы с использованием методов массива и строки\n\nВ следующей задаче мы рассмотрим, как можно укоротить нашу задачу с помощью методов массива и строки.\n\nДавайте разберем, какие методы мы будем использовать, помимо `trim` и `toLowerCase`.\n\n* `split` - метод строки, который разбивает строку на массив по разделителю\n* `sort` - метод массива, который сортирует массив по алфавиту. По умолчанию сортирует по возрастанию. Еще в этот метод можно передать параметр, который будет определять порядок сортировки.\n* `join` - метод массива, который объединяет массив в строку\n\n```javascript\nfunction isAnagram(str1, str2){\n    const s1 = str1.trim().toLowerCase();\n    const s2 = str2.trim().toLowerCase();\n\n    if(s1.length !== s2.length) return false;\n\n    const s1mod = s1.split('').sort().join('');   // 'below'\n                                                  // для второй строки разберем по шагам\n    const s2mod = s2.split('')                    // [ 'e', 'l', 'b', 'o', 'w' ] - переводим строку в массив\n    const s2mod2 = s2mod.sort()                   // [ 'b', 'e', 'l', 'o', 'w' ] - сортируем массив\n    const s2mod3 = s2mod2.join('');               // 'below' - переводим массив в строку\n\n    return s1mod === s2mod3;                      // сравниваем строки\n}\n\nconsole.log(isAnagram('below', 'elbow'));         // true\n```\n\nПопрактикуйтесь в решении этой задачи еще раз самостоятельно, чтобы закрепить материал.",
    "en": "### What is `Anagram`?\n\n`Anagram` is a word or phrase formed by rearranging the letters of another word or phrase. \n\nFor example, `brush` is an anagram of `shrub`, `listen` is an anagram of `silent`, and `laptop machines` is an anagram of `Apple Macintosh`.\n\n\n### Anagram check function using only cycles\n\nLet's write a function that will check if two strings are anagrams.\n\n```javascript\nfunction isAnagram(str1, str2){\n  const s1 = str1.trim().toLowerCase(); // remove spaces and lowercase\n  const s2 = str2.trim().toLowerCase();\n\n  if(s1.length !== s2.length) return false; // if string length is not equal, it is not anagram\n\n  for(let i = 0; i < s1.length; i++){ // the first loop goes through all letters of the first string\n    for(let j = 0; j < s2.length; j++){ // the second loop goes through all letters of the second string\n      if(s1[i] === s2[j]) break; // if the letter of the first string is equal to the letter of the second string, then exit the loop\n      if(s2.length -1 === j) return false; // if we have got to the end of the second line and have not found a match, then it is not anagram\n    }\n  }\n\n  return true;\n}\n\nconsole.log(isAnagram('elbow', 'below')); // true\n```\n\n\n\n### Anagram check function using an object\n\nWe will now look at how we can optimize our function with an object. \n\n```javascript\nfunction isAnagram(str1, str2){\n    const s1 = str1.trim().toLowerCase();\n    const s2 = str2.trim().toLowerCase();\n\n    if(s1.length !== s2.length) return false;\n\n    const s2object = {}; // create an object to store the letters of the second string\n\n    for(let i = 0; i < s2.length; i++){ // loop through all letters of the second string\n        const el = s2[i]; // store the letter in a variable to improve code readability\n        s2object[el] = true; // add the letter to the object: `the key will be the letter, the value will be true`\n    }\n\n    for(let i = 0; i < s1.length; i++){ // the loop goes through all the letters of the first line\n        const el = s1[i]; // we save the letter in a variable to improve code readability\n        if(!s2object[el]) return false; // if there is no letter in the object, it is not an anagram\n    }\n\n    return true;\n}\n\nconsole.log(isAnagram('123', '923')); // false\nconsole.log(isAnagram('elbow', 'below')); // true\nconsole.log(isAnagram('laptop 123', 'toplap 125')); // false\nconsole.log(isAnagram('laptop 123', 'toplap 123')); // true\nconsole.log(isAnagram('laptop machines', 'Apple Macintosh')); // true\n```\n\n\n\n### Anagram check function using array and string methods\n\nIn the next problem we will see how we can shorten our problem using array and string methods.\n\nLet's break down what methods we will use besides `trim` and `toLowerCase`.\n\n* `split` is a string method that splits a string into an array by a delimiter\n* `sort` is an array method that sorts the array alphabetically. By default it sorts in ascending order. You can also pass a parameter to this method that will determine the sort order.\n* `join` is an array method that combines an array into a string\n\n```javascript\nfunction isAnagram(str1, str2){\n    const s1 = str1.trim().toLowerCase();\n    const s2 = str2.trim().toLowerCase();\n\n    if(s1.length !== s2.length) return false;\n\n    const s1mod = s1.split('').sort(').join(''); // 'below'\n                                                  // for the second line let's break it down in steps\n    const s2mod = s2.split('') // ['e', 'l', 'b', 'o', 'w' ] - convert string to array\n    const s2mod2 = s2mod.sort() // ['b', 'e', 'l', 'o', 'w' ] - sort array\n    const s2mod3 = s2mod2.join(''); // 'below' - convert array to string\n\n    return s1mod === s2mod3; // compare strings\n}\n\nconsole.log(isAnagram('below', 'elbow')); // true\n```\n\nPractice solving this problem again on your own to reinforce the material.",
    "es": "# Проверить, является ли строка анаграммой language: es"
  },
  "video": {
    "ru": "https://youtu.be/Gxhx-ix0EuA",
    "en": "",
    "es": ""
  }
}