{
  "_id": "6696c2ca763f0712c198ebea",
  "name": {
    "en": "Anagram test using an object",
    "ru": "Проверка на анаграмму с использованием объекта"
  },
  "instruction": {
    "en": "Write a function `isAnagram` that takes two strings.\n\nThe function should check if the first string is an anagram of the second string. In this task, use the `object solution`.\n\nBefore checking, all elements should be converted to the same case.\n\nThe function should return `false` if:\n\n* the strings have different lengths after removing spaces `only` at the beginning and end of the string,\n* the strings are not anagrams of each other.\n\n\nIf the strings are anagrams of each other, the function should return an array, for example:\n\n* Given strings: `isAnagram('abc', 'CBA')`\n\n* Result: `[ true, {a: true, b: true, c: true} ]` - keys `a`, `b`, `c` are the elements of the string `abc`.\n\n  * `true` - is the result of checking that the strings are anagrams of each other,\n\n  * `{a: true, b: true, c: true}` - is the object that was used for checking.\n\n\nMethods `sort`, `split`, and `join` cannot be used.\n\n\nFunction execution examples:\n```javascript\nisAnagram('123', '312');         // [ true, { '1': true, '2': true, '3': true } ]\nisAnagram('a b c', 'cba');       // false\nisAnagram('  CAR', 'ra c  ');    // false\nisAnagram('AbCd', '   BacD  ');  // [ true, { a: true, b: true, c: true, d: true } ]\n```",
    "ru": "Напишите функцию `isAnagram`, которая принимает две строки.\n\nФункция должна проверять является ли первая строка анаграммой второй строки. В этой задаче используйте `вариант\n решения с объектом`.\n\nПеред проверкой все элементы должны быть приведены к одному регистру.\n\nФункция должна вернуть `false`, если:\n\n* строки имеют разную длину, после удаления пробелов `только` в начале и конце строки,\n* строки не являются анаграммой друг друга.\n\n\nЕсли строки являются анаграммой друг друга, то функция должна вернуть массив, например:\n\n* Даны строки: `isAnagram('abc', 'CBA')`\n\n* Результат: `[ true, {a: true, b: true, c: true} ]` - ключи `a`, `b`, `c` - это элементы строки `abc`.\n\n  * `true` - это результат проверки, что строки являются анаграммой друг друга,\n\n  * `{a: true, b: true, c: true}` - это объект, который был использован для проверки.\n\n\nМетоды `sort`, `split` и `join` использовать нельзя.\n\n\nПримеры запуска функции:\n```javascript\nisAnagram('123', '312');         // [ true, { '1': true, '2': true, '3': true } ]\nisAnagram('a b c', 'cba');       // false\nisAnagram('  CAR', 'ra c  ');    // false\nisAnagram('AbCd', '   BacD  ');  // [ true, { a: true, b: true, c: true, d: true } ]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function isAnagram(str1, str2){\n  const s1 = str1.trim().toLowerCase()\n  const s2 = str2.trim().toLowerCase()\n\n  if(s1.length !== s2.length) return false;\n\n  const string1obj = {};\n\n  for(let i = 0; i < s1.length; i++){\n    const el = s1[i]\n    string1obj[el] = true;\n  }\n\n  for(let i = 0; i < s2.length; i++){\n    const el = s2[i]\n    if(!string1obj[el]) return false;\n  }\n\n  return [true, string1obj]\n}",
  "openTest": "it('Created function isAnagram', () => {\n  expect(isAnagram).to.be.a('function');\n});\n\nit(\"Function isAnagram does not contain method 'sort'\", () => {\n  expect(isAnagram.toString()).to.not.contain('sort');\n});\n\nit(\"Function isAnagram does not contain method 'split'\", () => {\n  expect(isAnagram.toString()).to.not.contain('split');\n});\n\nit(\"Function isAnagram does not contain method 'join'\", () => {\n  expect(isAnagram.toString()).to.not.contain('join');\n});\n\nit(\"isAnagram('123', '321') should return [ true, { '1': true, '2': true, '3': true } ]\", () => {\n  expect(isAnagram('123', '321')).to.deep.equal([ true, { '1': true, '2': true, '3': true } ]);\n});\n\nit(\"isAnagram('elbow', 'bELOw') should return [ true, { b: true, e: true, l: true, o: true, w: true } ]\", () => {\n  expect(isAnagram('elbow', 'bELOw')).to.deep.equal([ true, { b: true, e: true, l: true, o: true, w: true } ]);\n});\n\nit(\"isAnagram(' listen  ', ' silent ') should return [ true, { e: true, i: true, l: true, n: true, s: true, t: true } ]\", () => {\n  expect(isAnagram(' listen  ', ' silent ')).to.deep.equal([ true, { e: true, i: true, l: true, n: true, s: true, t: true } ]);\n});\n\nit(\"isAnagram('conversation', 'voices rant on') should return false\", () => {\n  expect(isAnagram('conversation', 'voices rant on')).to.equal(false);\n});\n\nit(\"isAnagram('S T A T E', 'taste') should return false\", () => {\n  expect(isAnagram('S T A T E', 'taste')).to.equal(false);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}