{
  "_id": "6696c2ca763f0712c198ebe9",
  "name": {
    "en": "",
    "ru": "Проверка на анаграмму с учетом регистра"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `isAnagram`, которая принимает `два массива` и возвращает `true`, если они являются анаграммами друг друга, и `false` в противном случае.\n\nВ массиве будут только буквы, цифры и пробелы, но у всех элементов строковый тип данных.\n\nПробелы нужно игнорировать при проверке.\n\nВажно! Буквы в массивах могут быть в разном регистре и имеет значение когда приводить их к одному регистру.\n\nМожно использовать любые методы.\n\n\nПримеры запуска функции:\n```javascript\nisAnagram(['1', '2', '3'], [' ', '3', '1', ' ', '2']);                     // true\nisAnagram(['A', 'B', 'C'], [' ', '', 'b', 'c', ' ', 'b']);                 // false\nisAnagram(['A', 'B', 'C'], [' ', 'b', 'a', 'c', ' ', ' ']);                // true\nisAnagram(['5', '9', '2', ' ', '3', '0'], ['0', '9', '3', ' ', '2', ' ']); // false\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function isAnagram(arr1, arr2){\n  const str1lowerCase = arr1.join('').toLowerCase();\n  const str2lowerCase = arr2.join('').toLowerCase();\n\n  const str1 = str1lowerCase.split('').sort().join('').trim();\n  const str2 = str2lowerCase.split('').sort().join('').trim();\n\n  return str1 === str2;\n}",
  "openTest": "it('Created function isAnagram', () => {\n  expect(isAnagram).to.be.a('function');\n});\n\nit(\"isAnagram(['1', '2', '3'], [' ', '', '3', '1', ' ', '2']) should return true\", () => {\n  expect(isAnagram(['1', '2', '3'], [' ', '', '3', '1', ' ', '2'])).to.be.true;\n});\n\nit(\"isAnagram([' ', '9', '2', ' ', '3', '0'], ['0', '', '9', '3', ' ', '2', ' ']) should return true\", () => {\n  expect(isAnagram([' ', '9', '2', ' ', '3', '0'], ['0', '', '9', '3', ' ', '2', ' '])).to.be.true;\n});\n\nit(\"isAnagram(['e', 'L', 'b', 'o', 'W'], ['b', 'E', 'l', 'o', 'w']) should return true\", () => {\n  expect(isAnagram(['e', 'L', 'b', 'o', 'W'], ['b', 'E', 'l', 'o', 'w'])).to.be.true;\n});\n\nit(\"isAnagram(['c', ' ', 'A', '8', 'R'], ['8', 'r', 'a', 'C']) should return true\", () => {\n  expect(isAnagram(['c', ' ', 'A', '8', 'R'], ['8', 'r', 'a', 'C'])).to.be.true;\n});\n\nit(\"isAnagram(['L', 'A', 'P', 'T', 'O', 'P'], ['t', 'o', 'o', 'p', 'l', 'a', 'p']) should return false\", () => {\n  expect(isAnagram(['L', 'A', 'P', 'T', 'O', 'P'], ['t', 'o', 'o', 'p', 'l', 'a', 'p'])).to.be.false;\n});\n\nit(\"isAnagram(['l', 'i', 's', 't', 'e', 'n'], ['s', 'i', 'l', 'l', 'e', 'n', 't']) should return true\", () => {\n  expect(isAnagram(['l', 'i', 's', 't', 'e', 'n'], ['S', 'I', 'L', 'E', 'N', 'T'])).to.be.true;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}