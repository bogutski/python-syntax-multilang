{
  "_id": "6696c2ca763f0712c198ebeb",
  "name": {
    "en": "",
    "ru": "Проверка на анаграмму"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `isAnagram`, которая принимает объект с двумя свойствами `str1` и `str2`.\n\n`str1` и `str2` - это строки, которые нужно проверить, являются ли они анаграммой друг друга.\n\nФункция должна вернуть объект с тремя свойствами: `str1`, `str2` и `result`.\n\n* `str1` и `str2` - это строки, которые были переданы в функцию.\n* `result` - это булевое значение, которое показывает, являются ли строки анаграммой друг друга.\n\nЭлементы строки могут содержать пробелы, как внутри строки, так и снаружи. Пробелы не должны учитываться при проверке анаграммы.\n\nБуквы могут быть в любом регистре. Перед проверкой строки должны быть приведены к одному регистру.\n\nМожно использовать любой метод при решении задачи.\n\n\nПримеры запуска функции:\n```javascript\nisAnagram({str1: 'a b c', str2: ' BAC   '});   // {str1: 'a b c', str2: ' BAC   ', result: true}\nisAnagram({str1: '1 a b c 2', str2: '12BAC'}); // {str1: '1 a b c 2', str2: '12BAC', result: true}\nisAnagram({str1: 'abc', str2: 'BACa'});        // false\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function isAnagram(obj){\n  const newStr1 = obj.str1.toLowerCase().split('').sort().join('').trim();\n  const newStr2 = obj.str2.toLowerCase().split('').sort().join('').trim();\n  obj.result = newStr1 === newStr2;\n  return obj;\n}",
  "openTest": "it('Created function isAnagram', () => {\n  expect(isAnagram).to.be.a('function');\n});\n\nit(\"isAnagram({str1: 'a b c', str2: ' BAC   '}) should return {str1: 'a b c', str2: ' BAC   ', result: true}\", () => {\n  expect(isAnagram({str1: 'a b c', str2: ' BAC   '})).to.deep.equal({str1: 'a b c', str2: ' BAC   ', result: true});\n});\n\nit(\"isAnagram({str1: 'a b c a', str2: ' BAC   '}) should return {str1: 'a b c a', str2: ' BAC   ', result: false}\", () => {\n  expect(isAnagram({str1: 'a b c a', str2: ' BAC   '})).to.deep.equal({str1: 'a b c a', str2: ' BAC   ', result: false});\n});\n\nit(\"isAnagram({str1: ' 1 2 3 4 5 ', str2: ' 3 5 2  1 4 '}) should return {str1: ' 1 2 3 4 5 ', str2: ' 3 5 2  1 4 ', result: true}\", () => {\n  expect(isAnagram({str1: ' 1 2 3 4 5 ', str2: ' 3 5 2  1 4 '})).to.deep.equal({str1: ' 1 2 3 4 5 ', str2: ' 3 5 2  1 4 ', result: true});\n});\n\nit(\"isAnagram({str1: 'apple', str2: 'ELPA'}) should return {str1: 'apple', str2: 'ELPA', result: false}\", () => {\n  expect(isAnagram({str1: 'apple', str2: 'ELPA'})).to.deep.equal({str1: 'apple', str2: 'ELPA', result: false});\n});\n\nit(\"isAnagram({str1: ' Apple Macintosh ', str2: 'L A P T O P m a c h i n e s'}) should return {str1: ' Apple Macintosh ', str2: 'L A P T O P m a c h i n e s', result: true}\", () => {\n  expect(isAnagram({str1: ' Apple Macintosh ', str2: 'L A P T O P m a c h i n e s'})).to.deep.equal({str1: ' Apple Macintosh ', str2: 'L A P T O P m a c h i n e s', result: true});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}