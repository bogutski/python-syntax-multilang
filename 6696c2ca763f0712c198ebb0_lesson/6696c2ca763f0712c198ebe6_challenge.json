{
  "_id": "6696c2ca763f0712c198ebe6",
  "name": {
    "en": "",
    "ru": "Проверка на анаграмму, без использования методов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `isAnagram`, которая принимает две строки и возвращает `true`, если эти строки являются анаграммами друг друга, и `false` в противном случае.\n\nВ строке могут быть заглавные и строчные буквы, а также пробелы. Пробелы не должны учитываться при проверке\n анаграммы. Пустых строк не будет.\n\nАлгоритм решения должен быть таким:\n* приводим обе строки к нижнему регистру (можно сделать на этом шаге или на следующем).\n* удаляем все пробелы из обеих строк, можно использовать один цикл, если не выходит, то два, для каждой строки отдельно.\n* проверяем, если длина строк не равна, то это не анаграмма.\n* на этом шаге делаем проверку на элементы. Можно использовать любой, ранее пройденный, вариант решения, кроме методов:\n `split`, `sort`, `join`.\n\n\nПримеры запуска функции:\n```javascript\nisAnagram(' 1 2 3 ', '312');       // true\nisAnagram('LAPtop 12345', '   top   lap 53   412   ');   // true\nisAnagram('listten', 'silent');   // false\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function isAnagram(str1, str2){\n  let newStr1 = '';\n  let newStr2 = '';\n\n  const length = str1.length > str2.length ? str1.length : str2.length;\n  for(let i = 0; i < length; i++){\n    if(str1[i] !== ' ' && str1[i] !== undefined) newStr1 += str1[i].toLowerCase();\n    if(str2[i] !== ' ' && str2[i] !== undefined) newStr2 += str2[i].toLowerCase();\n  }\n\n  if(newStr1.length !== newStr2.length) return false;\n\n  for(let i = 0; i < newStr1.length; i++){\n    if(!newStr2.includes(newStr1[i])) return false;\n  }\n\n  return true;\n}",
  "openTest": "it('Created function isAnagram', () => {\n  expect(isAnagram).to.be.a('function');\n});\n\nit(\"Function isAnagram does not contain method 'split'\", () => {\n  expect(isAnagram.toString()).to.not.contain('split');\n});\n\nit(\"Function isAnagram does not contain method 'sort'\", () => {\n  expect(isAnagram.toString()).to.not.contain('sort');\n});\n\nit(\"Function isAnagram does not contain method 'join'\", () => {\n  expect(isAnagram.toString()).to.not.contain('join');\n});\n\nit(\"isAnagram('1   2 3', '   3 1 2   ') returns true\", () => {\n  expect(isAnagram('1   2 3', '   3 1 2   ')).to.be.true;\n});\n\nit(\"isAnagram('1  2  3  ', '   3  5  2   ') returns false\", () => {\n  expect(isAnagram('1  2  3  ', '   3  5  2   ')).to.be.false;\n});\n\nit(\"isAnagram('12345', ' 5 4 2 3 1 ') returns true\", () => {\n  expect(isAnagram('12345', ' 5 4 2 3 1 ')).to.be.true;\n});\n\nit(\"isAnagram(' CAT ', 't a c') returns true\", () => {\n  expect(isAnagram(' CAT ', 't a c')).to.be.true;\n});\n\nit(\"isAnagram('Apple Macintosh', 'laptop machines') should return true\", () => {\n  expect(isAnagram('A p p l e M a c i n t o s h', 'laptop machines')).to.be.true;\n});\n\nit(\"isAnagram('liisten', 'silent') should return false\", () => {\n  expect(isAnagram('liisten', 'silent')).to.be.false;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}