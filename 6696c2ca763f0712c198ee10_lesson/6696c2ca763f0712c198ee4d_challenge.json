{
  "_id": "6696c2ca763f0712c198ee4d",
  "name": {
    "en": "",
    "ru": "Поменять слова местами и добавить в массив"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `switchWordAddToArray` принимает строку содержащую разные символы. Слова в строке разделены пробелами.\n\nФункция должна вернуть массив следующего вида:\n* первый элемент массива - последнее слово в строке\n* второй элемент массива - слова между первым и последним словом в строке\n* третий элемент массива - первое слово в строке\n\nПример запуска функции:\n```javascript\nswitchWordAddToArray(\"Hello world, my name is John\") // [\"John\", \"world, my name is\", \"Hello\"]\nswitchWordAddToArray(\"hello\") // [\"hello\", \"\", \"\"]\nswitchWordAddToArray(\"hello world\") // [\"world\", \"\", \"hello\"]\nswitchWordAddToArray(\"\") // [\"\", \"\", \"\"]\n```\nИспользуйте только циклы для решения этой задачи."
  },
  "initialSolution": "function switchWordAddToArray(str){\n\n}",
  "completedSolution": "function switchWordAddToArray(str) {\n  const arr = [];\n  let firstWord = '';\n  for(let i = 0; i < str.indexOf(' '); i++) {\n    firstWord += str[i]\n  }\n  let lastWord = ''\n  for(let i = str.lastIndexOf(' ') + 1; i < str.length; i++) {\n    lastWord += str[i]\n  }\n  let newStr = ''\n  for(let i = str.indexOf(' ') + 1; i < str.lastIndexOf(' '); i++) {\n    newStr += str[i]\n  }\n  arr.push(lastWord, newStr, firstWord)\n  return arr\n}",
  "openTest": "it('Created function switchWordAddToArray', () => {\n  expect(switchWordAddToArray).to.be.a('function');\n});\n\nit('function switchWordAddToArrayLength do not include statement substring',() => {\n  expect(switchWordAddToArray.toString().includes('substring')).to.be.equal(false);\n});\n\nit('function switchWordAddToArrayLength do not include statement split',() => {\n  expect(switchWordAddToArray.toString().includes('split')).to.be.equal(false)\n});\n\nit('switchWordAddToArray(\"Hello world, my name is John\") returns [\"John\", \"world, my name is\", \"Hello\"]', () => {\n  expect(switchWordAddToArray(\"Hello world, my name is John\")).to.deep.equal([\"John\", \"world, my name is\", \"Hello\"]);\n});\n\nit('switchWordAddToArray(\"phone number is 234095898723\") returns [\"234095898723\", \"number is\", \"phone\"]', () => {\n  expect(switchWordAddToArray(\"phone number is 234095898723\")).to.deep.equal([\"234095898723\", \"number is\", \"phone\"]);\n});\n\nit('switchWordAddToArray(\"\") returns [\"\", \"\", \"\"]', () => {\n  expect(switchWordAddToArray(\"\")).to.deep.equal([\"\", \"\", \"\"]);\n});\n\nit('switchWordAddToArray(\"Hello\") returns [\"Hello\", \"\", \"\"]', () => {\n  expect(switchWordAddToArray(\"Hello\")).to.deep.equal([\"Hello\", \"\", \"\"]);\n});\n\nit('switchWordAddToArray(\"Hello world\") returns [\"world\", \"\", \"Hello\"]', () => {\n  expect(switchWordAddToArray(\"Hello world\")).to.deep.equal([\"world\", \"\", \"Hello\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}