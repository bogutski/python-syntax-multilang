{
  "_id": "6696c2ca763f0712c198ee49",
  "name": {
    "en": "",
    "ru": "Верните объект с первым и последним словом в строке"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `updateString` принимает строку.\n\nНеобходимо вернуть объект с тремя свойствами:\n* `firstWord` - первое слово в строке\n* `lastWord` - последнее слово в строке\n* `updatedString` - строка, в которой первое и последнее слово поменяны местами\n\nСлова в строке разделены пробелами и приходит более одного слова\n\nНе используйте метод `substring` для получения подстроки.\n\nПримеры запуска функции:\n```javascript\nupdateString(\"sense makes position\") // {firstWord: \"sense\", lastWord: \"position\", updatedString: \"position makes sense\"}\nupdateString(\"Hello world\") // {firstWord: \"Hello\", lastWord: \"world\", updatedString: \"world Hello\"}\nupdateString(\"\") // {firstWord: \"\", lastWord: \"\", updatedString: \"\"}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function updateString(str) {\n  let firstWord = '';\n  let lastWord = '';\n  let restString = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === ' ') break;\n    firstWord += str[i];\n  }\n  for (let j = str.length - 1; j >= 0; j--) {\n    if (str[j] === ' ') break;\n    lastWord = str[j] + lastWord\n  }\n  for (let k = firstWord.length; k <= str.length-lastWord.length-1; k++) {\n    restString += str[k];\n  }\n  const updatedString = lastWord + restString + firstWord;\n  return {\n    firstWord,\n    lastWord,\n    updatedString,\n  }\n}",
  "openTest": "it('Created function updateString', () => {\n  expect(updateString).to.be.a('function');\n});\n\nit('function updateString do not include statement substring', () => {\n  expect(updateString.toString()).to.not.include('substring');\n})\nit('updateString(\"sense makes position\") returns {firstWord: \"sense\", lastWord: \"position\", updatedString: \"position makes sense\"}', () => {\n  expect(updateString(\"sense makes position\")).to.deep.equal({\n    firstWord: \"sense\",\n    lastWord: \"position\",\n    updatedString: \"position makes sense\"\n  });\n});\n\nit('updateString(\"perfect practice makes up only\") returns {firstWord: \"perfect\", lastWord: \"only\", updatedString: \"only practice makes up perfect\"}', () => {\n  expect(updateString(\"perfect practice makes up only\")).to.deep.equal({\n    firstWord: \"perfect\",\n    lastWord: \"only\",\n    updatedString: \"only practice makes up perfect\"\n  });\n});\nit('updateString(\"Hello world\") returns {firstWord: \"Hello\", lastWord: \"world\", updatedString: \"world Hello\"}', () => {\n  expect(updateString(\"Hello world\")).to.deep.equal({\n    firstWord: \"Hello\",\n    lastWord: \"world\",\n    updatedString: \"world Hello\"\n  });\n});\n\nit('updateString(\"\") returns {firstWord: \"\", lastWord: \"\", updatedString: \"\"}', () => {\n  expect(updateString(\"\")).to.deep.equal({firstWord: \"\", lastWord: \"\", updatedString: \"\"});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}