{
  "_id": "6696c2cb763f0712c198f1d8",
  "name": {
    "en": "Reverse the array elements if there is an element with the reverse value in the array",
    "ru": "Перевернуть элементы массива, если в нем есть элемент со значением reverse"
  },
  "instruction": {
    "en": "Write a function `reverseOnlyMarkedArr` that takes an array of arrays with different data types.\n\nThe function should return a new array that includes all the arrays from the original array, in the same order.\n\nThe elements of those sub-arrays that contain an element with the value 'reverse' should be reversed, while all other elements should be left unchanged.\n\nFor example: `[[1, 2, 3], [5, 6, 7, 'reverse'], [8, 9, 10]]` should return `[[1, 2, 3], ['reverse', 7, 6, 5], [8, 9, 10]]`.\n\nYou can use the methods `includes`, `indexOf`, `reverse`.\n\nIf the outer array is empty, return the string 'Array is empty'.\n\nExamples of function calls:\n```javascript\nreverseOnlyMarkedArr([[1, 2, 3], [4, 5], ['reverse', 6, 7]]); // [[1, 2, 3], [4, 5], [7, 6, 'reverse']]\nreverseOnlyMarkedArr([['a', 'b', 'c', 'd' reverse]]);         // [['reverse', 'd', 'c', 'b', 'a']]\nreverseOnlyMarkedArr([]);                                     // 'Array is empty'\n```",
    "ru": "Напишите функцию `reverseOnlyMarkedArr`, которая принимает массив массивов с разными типами данных.\n\nФункция должна вернуть новый массив, который включает все массивы из исходного, в том же порядке.\n\nЭлементы тех под-массивов, среди которых есть элемент со значением 'reverse', должны быть перевернуты, все остальные - оставлены без изменений.\n\nНапример: `[[1, 2, 3], [5, 6, 7, 'reverse'], [8, 9, 10]]` должно вернуть `[[1, 2, 3], ['reverse', 7, 6, 5], [8, 9, 10]]`.\n\nМожно использовать методы `includes`, `indexOf`, `reverse`.\n\nЕсли внешний массив пустой, верните строку 'Array is empty'.\n\n\nПримеры запуска функции:\n```javascript\nreverseOnlyMarkedArr([[1, 2, 3], [4, 5], ['reverse', 6, 7]]); // [[1, 2, 3], [4, 5], [7, 6, 'reverse']]\nreverseOnlyMarkedArr([['a', 'b', 'c', 'd' reverse]]);         // [['reverse', 'd', 'c', 'b', 'a']]\nreverseOnlyMarkedArr([]);                                     // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function reverseOnlyMarkedArr(arr) {\n  if (!arr.length) return 'Array is empty';\n  const newArr = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].includes('reverse')) newArr.push(arr[i].reverse());\n    else newArr.push(arr[i]);\n  }\n  return newArr;\n}",
  "openTest": "it('Created function reverseOnlyMarkedArr', () => {\n  expect(reverseOnlyMarkedArr).to.be.a('function');\n});\n\nit(\"reverseOnlyMarkedArr([[1, 2, 3], [4, 5,'reverse', 6, 7], [8, 9, 10, 11, 12]]) should return [[1, 2, 3], [7, 6, 'reverse', 5, 4], [8, 9, 10, 11, 12]]\", () => {\n  expect(reverseOnlyMarkedArr([[1, 2, 3], [4, 5,'reverse', 6, 7], [8, 9, 10, 11, 12]])).to.deep.equal([[1, 2, 3], [7, 6, 'reverse', 5, 4], [8, 9, 10, 11, 12]]);\n});\n\nit(\"reverseOnlyMarkedArr([['a', 'b', 'c', 'reverse'], ['d', 'e', 'f'], ['g', 'h', 'i', 'reverse']]) should return [['reverse', 'c', 'b', 'a'], ['d', 'e', 'f'], ['reverse', 'i', 'h', 'g']]\", () => {\n  expect(reverseOnlyMarkedArr([['a', 'b', 'c', 'reverse'], ['d', 'e', 'f'], ['g', 'h', 'i', 'reverse']])).to.deep.equal([['reverse', 'c', 'b', 'a'], ['d', 'e', 'f'], ['reverse', 'i', 'h', 'g']]);\n});\n\nit(\"reverseOnlyMarkedArr([[true, false], [false, true, 'reverse'], [8 > 1, 3 < 5]]) should return [[true, false], ['reverse', true, false], [true, 3 < 5]]\", () => {\n  expect(reverseOnlyMarkedArr([[true, false], [false, true, 'reverse'], [8 > 1, 3 < 5]])).to.deep.equal([[true, false], ['reverse', true, false], [true, 3 < 5]]);\n});\n\nit(\"reverseOnlyMarkedArr([[1, 2, 3], [], [5, 6, 7]]) should return [[1, 2, 3], [], [5, 6, 7]]\", () => {\n  expect(reverseOnlyMarkedArr([[1, 2, 3], [], [5, 6, 7]])).to.deep.equal([[1, 2, 3], [], [5, 6, 7]]);\n});\n\nit(\"reverseOnlyMarkedArr([]) should return 'Array is empty'\", () => {\n  expect(reverseOnlyMarkedArr([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}