{
  "_id": "6696c2ca763f0712c198e34d",
  "name": {
    "en": "Determine that the number contains three decimal places",
    "ru": "Определить, что число содержит три знака после запятой"
  },
  "instruction": {
    "en": "Write a `fractionalPart` function that takes a number.\n\nThe function should return `true` if the number contains three significant digits after the decimal point, and `false` otherwise.\n\nExamples of how to run the function:\n```javascript\nfractionalPart(1.234); // true\nfractionalPart(1.2); // false\nfractionalPart(200); // false\nfractionalPart(200.234); // true\nfractionalPart(200.23); // false\nfractionalPart(471.22244); // false\nfractionalPart(456471.222); // true\n```\n\nOne solution involves the following algorithm:\n\n* Convert a number to a string using the `toString()` method\n* Get a string representation of a number with three digits after the decimal point using the `toFixed()` method.\n* Compare the two strings obtained. If they are equal, return `true`, otherwise `false`.\n\nThe `toString()` method converts a number into a string including all significant digits after the decimal point. Non-digit zeros at the end of the number are discarded.\n\nExample of converting a number to a string:\n```javascript\nconst num = 1.234;\nconst str = num.toString(); // '1.234'\nconst num2 = 12.000;\nconst str2 = num2.toString(); // '12'\nconst num3 = 12.345000;\nconst str3 = num3.toString(); // '12.345'\n```\n\nThe problem can also be solved using mathematical operations without using the `toString()` and `toFixed()` methods.\nOne option is to multiply a number by 1000 and check the remainders from dividing the resulting number by 1 and by 10.\nThink about how to do this.",
    "ru": "Напишите функцию `fractionalPart`, которая принимает число.\n\nФункция должна вернуть `true`, если число содержит три значащие цифры после запятой, и `false` в противном случае.\n\nПримеры запуска функции:\n```javascript\nfractionalPart(1.234); // true\nfractionalPart(1.2); // false\nfractionalPart(200); // false\nfractionalPart(200.234); // true\nfractionalPart(200.23); // false\nfractionalPart(471.22244); // false\nfractionalPart(456471.222); // true\n```\n\nОдин из вариантов решения предполагает следующий алгоритм:\n\n* Преобразовать число в строку с помощью метода `toString()`\n* Получить строковое представление числа с тремя цифрами после запятой с помощью метода `toFixed()`\n* Сравнить две полученные строки. Если они равны, то возвращаем `true`, иначе `false`\n\nМетод `toString()` преобразует число в строку, включающую все значащие цифры после запятой. Незначащие нули в конце числа отбрасываются.\n\nПример преобразования числа в строку:\n```javascript\nconst num = 1.234;\nconst str = num.toString(); // '1.234'\nconst num2 = 12.000;\nconst str2 = num2.toString(); // '12'\nconst num3 = 12.345000;\nconst str3 = num3.toString(); // '12.345'\n```\n\nЗадача может быть также решена с помощью математических операций без использования методов `toString()` и `toFixed()`.\nОдин из вариантов - умножить число на 1000 и проверить остатки от деления полученного числа на 1 и на 10.\nПодумайте, как это сделать."
  },
  "initialSolution": "fun",
  "completedSolution": "function fractionalPart(num) {\n  num = num * 1000;\n  const remainder1 = num % 1;\n  const remainder2 = num % 10;\n  return remainder1 === 0 && remainder2 !== 0;\n}",
  "openTest": "it('Created function fractionalPart', () => {\n  expect(fractionalPart).to.be.a('function');\n});\n\nit('fractionalPart(1.234) should return true', () => {\n  expect(fractionalPart(1.234)).to.be.equal(true);\n});\n\nit('fractionalPart(1.2) should return false', () => {\n  expect(fractionalPart(1.2)).to.be.equal(false);\n});\n\nit('fractionalPart(200) should return false', () => {\n  expect(fractionalPart(200)).to.be.equal(false);\n});\n\nit('fractionalPart(78953) should return false', () => {\n  expect(fractionalPart(78953)).to.be.equal(false);\n});\n\nit('fractionalPart(200.234) should return true', () => {\n  expect(fractionalPart(200.234)).to.be.equal(true);\n});\n\nit('fractionalPart(200.23) should return false', () => {\n  expect(fractionalPart(200.23)).to.be.equal(false);\n});\n\nit('fractionalPart(471.22244) should return false', () => {\n  expect(fractionalPart(471.22244)).to.be.equal(false);\n});\n\nit('fractionalPart(456471.222) should return true', () => {\n  expect(fractionalPart(456471.222)).to.be.equal(true);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}