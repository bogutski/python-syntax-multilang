{
  "_id": "6696c2ca763f0712c198e34e",
  "name": {
    "en": "Inverse rounding",
    "ru": "Обратное округление"
  },
  "instruction": {
    "en": "Write a function `swapRound` that takes a number and returns its rounded value.\n\nRounding rules:\n* If the fractional part of a number is greater than or equal to 0.5, then round down.\n* If the fractional part of the number is less than 0.5, round up.",
    "ru": "Напишите функцию `swapRound`, которая принимает число и возвращает его округленное значение.\n\nПравила округления:\n* Если дробная часть числа больше или равна 0.5, то округляем вниз.\n* Если дробная часть числа меньше 0.5, то округляем вверх."
  },
  "initialSolution": "fun",
  "completedSolution": "function swapRound(number) {\n  const fraction = number - Math.floor(number);\n  if (fraction >= 0.5) return Math.floor(number);\n  return Math.ceil(number);\n}",
  "openTest": "it('Created function swapRound', () => {\n  expect(swapRound).to.be.a('function');\n});\n\nit('swapRound(1.5) should return 1', () => {\n  expect(swapRound(1.5)).to.be.equal(1);\n});\n\nit('swapRound(1.4) should return 2', () => {\n  expect(swapRound(1.4)).to.be.equal(2);\n});\n\nit('swapRound(1.6) should return 1', () => {\n  expect(swapRound(1.6)).to.be.equal(1);\n});\n\nit('swapRound(104.345) should return 105', () => {\n  expect(swapRound(104.345)).to.be.equal(105);\n});\n\nit('swapRound(104.745) should return 104', () => {\n  expect(swapRound(104.745)).to.be.equal(104);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}