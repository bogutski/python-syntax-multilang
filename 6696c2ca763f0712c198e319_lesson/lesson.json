{
  "_id": "6696c2ca763f0712c198e319",
  "content": {
    "ru": "Метод `toFixed(n)` принимает в качестве аргумента число, форматирует его до `n` знаков после запятой и возвращает результат в виде строки.\n\nСинтаксис: `Number.toFixed([n])`. Значение `n` может быть от 0 до 20 включительно. Если значение `n` не указано, то оно считается равным 0.\n\n```javascript\nconsole.log((35).toFixed(2)); // \"35.00\" метод добавляет нули n знаков после запятой\nconsole.log((35.00).toFixed()); // \"35\"\nconsole.log((35.00).toFixed(0)); // \"35\"\nconsole.log((35).toFixed(20)); // \"35.00000000000000000000\"\n```\n\nОкругление до _`n`_-ого знака происходит аналогично методу `Math.round(x)`, т. е. до ближайшего числа.\n\n```javascript\nconsole.log((-12345.678).toFixed()); // \"-12346\"\nconsole.log((12345.678).toFixed(1)); // \"12345.7\"\nconsole.log((12345.678).toFixed(2)); // \"12345.68\"\n```\n\nДанный метод \"выбрасывает\" ошибки (исключения):\n\n- `RangeError`, если значение `n` слишком маленькое или слишком большое. Значения `n` от 0 до 20 включительно не вызовут ошибку RangeError.\n- `TypeError`, если мы пытаемся применить данный метод не к `number`.\n\n```javascript\nconsole.log((900.7199254740991).toFixed(101)); // \"RangeError\"\nconsole.log(('153425').toFixed(1)); // \"TypeError\"\nconsole.log(('35$').toFixed(2)); // \"TypeError\"\nconsole.log((35).toFixed(-1)); // \"RangeError\"\n```\n\nВо избежание возврата некорректного результата, всегда берите числовое значение в круглые скобки! Помните, что возвращаемое методом значение имеет тип `string`, и, если вам необходимо получить тип `number`, преобразуйте его дополнительно.\n\n```javascript\nconst num = 1289.56;\nconsole.log(num.toFixed(1)); // \"1289.6\", \"string\"\nconsole.log(+num.toFixed(1)); // 1289.6, \"number\"\nconsole.log(Number(num.toFixed(1))); // 1289.6, \"number\"\n```\n",
    "en": "The `toFixed(n)` method takes a number as an argument, formats it to `n` decimal places and returns the result as a string.\n\nSyntax: `Number.toFixed([n])`. The value of `n` may be from 0 to 20 inclusive. If the value of `n` is not specified, it is assumed to be 0.\n\n```javascript\nconsole.log((35).toFixed(2)); // \"35.00\" method adds zeros to n decimal places\nconsole.log((35.00).toFixed()); // \"35\"\nconsole.log((35.00).toFixed(0)); // \"35\"\nconsole.log((35).toFixed(20)); // \"35.00000000000000000000\"\n```\n\nRounding to the _`n`_th sign is done similarly to the method `Math.round(x)`, i.e. to the nearest number.\n\n```javascript\nconsole.log((-12345.678).toFixed()); // \"-12346\"\nconsole.log((12345.678).toFixed(1)); // \"12345.7\"\nconsole.log((12345.678).toFixed(2)); // \"12345.68\"\n```\n\nThis method \"throws\" errors (exceptions):\n\n- `RangeError` if the value of `n` is too small or too large. Values of `n` from 0 to 20 inclusive will not cause a RangeError.\n- `TypeError` if we are not trying to apply this method to `number`.\n\n```javascript\nconsole.log((900.7199254740991).toFixed(101)); // \"RangeError\"\nconsole.log(('153425').toFixed(1)); // \"TypeError\"\nconsole.log(('35$').toFixed(2)); // \"TypeError\"\nconsole.log((35).toFixed(-1)); // \"RangeError\"\n```\n\nTo avoid returning an incorrect result, always put the numeric value in parentheses! Remember that the value returned by the method is of type `string`, and if you need to get the type `number`, convert it additionally.\n\n```javascript\nconst num = 1289.56;\nconsole.log(num.toFixed(1)); // \"1289.6\", \"string\"\nconsole.log(+num.toFixed(1)); // 1289.6, \"number\"\nconsole.log(Number(num.toFixed(1))); // 1289.6, \"number\"\n```\n",
    "es": "# Форматирование чисел. toFixed() language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}