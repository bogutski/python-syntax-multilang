{
  "_id": "6696c2ca763f0712c198ee85",
  "name": {
    "en": "Reverse each word from the string and add it to the array",
    "ru": "Перевернуть каждое слово из строки и добавить в массив"
  },
  "instruction": {
    "en": "Write a function reverseAndPush that takes a string and returns an array.\n\nThe array should contain the reversed words from the string. The words should remain in the same order as in the string.\n\nWords in the string are always separated by a single space.\n\n\nFunction execution examples:\n```javascript\nreverseAndPush('sihT si a tset') // ['This', 'is', 'a', 'test']\nreverseAndPush('123 456')        // ['321', '654']\nreverseAndPush('B')              // ['B']\nreverseAndPush('')               // ['']\n```",
    "ru": "Напишите функцию reverseAndPush, которая принимает строку и возвращает массив.\n\nМассив должен содержать перевернутые слова из строки. Слова должны остаться в таком же порядке, как и в строке.\n\nСлова в строке всегда разделены одним пробелом.\n\n\nПримеры запуска функции:\n```javascript\nreverseAndPush('sihT si a tset') // ['This', 'is', 'a', 'test']\nreverseAndPush('123 456')        // ['321', '654']\nreverseAndPush('B')              // ['B']\nreverseAndPush('')               // ['']\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function reverseAndPush(str){\n  const arr = []\n  let chunk = '';\n  for (let i = 0; i < str.length; i++){\n    if(str[i] === ' '){\n      arr.push(chunk)\n      chunk = ''\n    } else {\n      chunk = str[i] + chunk\n    }\n  }\n  arr.push(chunk)\n  return arr\n}",
  "openTest": "it('Created function reverseAndPush', () => {\n  expect(reverseAndPush).to.be.a('function');\n});\n\nit(\"reverseAndPush('ba cba dcba') returns ['ab', 'abc', 'abcd']\", () => {\n  expect(reverseAndPush('ba cba dcba')).to.deep.equal(['ab', 'abc', 'abcd']);\n});\n\nit(\"reverseAndPush('eno owt eerht ruof evif') returns ['one', 'two', 'three', 'four', 'five']\", () => {\n  expect(reverseAndPush('eno owt eerht ruof evif')).to.deep.equal(['one', 'two', 'three', 'four', 'five']);\n});\n\nit(\"reverseAndPush('sihT si a tset') returns ['This', 'is', 'a', 'test']\", () => {\n  expect(reverseAndPush('sihT si a tset')).to.deep.equal(['This', 'is', 'a', 'test']);\n});\n\nit(\"reverseAndPush('123! abc@ 456#') returns ['!321', '@cba', '#654']\", () => {\n  expect(reverseAndPush('123! abc@ 456#')).to.deep.equal(['!321', '@cba', '#654']);\n});\n\nit(\"reverseAndPush('A') returns ['A']\", () => {\n  expect(reverseAndPush('A')).to.deep.equal(['A']);\n});\n\nit(\"reverseAndPush('') returns ['']\", () => {\n  expect(reverseAndPush('')).to.deep.equal(['']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}