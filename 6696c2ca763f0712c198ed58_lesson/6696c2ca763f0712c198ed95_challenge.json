{
  "_id": "6696c2ca763f0712c198ed95",
  "name": {
    "en": "Split a line and move duplicates",
    "ru": "Разделить строку и переместить дубликаты"
  },
  "instruction": {
    "en": "Write a function `moveDuplicates` that takes a string of different characters.\n\nThe function should return an array with two elements:\n\n* The first element is a new string in which the elements do not repeat.\n\n* The second element is a string to which all other elements will be added if they already exist in the first string.\n\nThe string can contain both uppercase and lowercase letters. Before checking, convert the string to lowercase and use this string to add characters to the new string.\n\nIf the string is empty, return a string in the form: 'string is empty'.\n\n\nExamples of function execution:\n```javascript\nmoveDuplicates('')          // ['string is empty', '']\nmoveDuplicates('ABCabc')    // [ 'abc', 'abc' ]\nmoveDuplicates('AbCAaBbCc') // [ 'abc', 'aabbcc' ]\nmoveDuplicates('123123123') // [ '123', '123123' ]\n```",
    "ru": "Напишите функцию `moveDuplicates`, которая принимает строку из различных символов.\n\nФункция должна вернуть массив с двумя элементами:\n\n* Первый элемент - новая строка, в которой элементы не повторяются.\n\n* Второй элемент - строка, в которую будут добавлены все остальные элементы, если они уже есть в первой строке.\n\nВ строке могут быть как заглавные, так и строчные буквы. Перед проверкой приведите строку к нижнему регистру и\n используйте эту строку для добавления символов в новую строку.\n\nЕсли строка пустая, то верните строку вида: `string is empty`.\n\n\nПримеры запуска функции:\n```javascript\nmoveDuplicates('')          // ['string is empty']\nmoveDuplicates('ABCabc')    // [ 'abc', 'abc' ]\nmoveDuplicates('AbCAaBbCc') // [ 'abc', 'aabbcc' ]\nmoveDuplicates('123123123') // [ '123', '123123' ]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function moveDuplicates(str){\n  if(str.length === 0) return 'string is empty'\n  let toLowerCase = str.toLowerCase();\n  let newStr = '';\n  let duplicates = '';\n  for (let i = 0; i < str.length; i++) {\n    if(newStr.includes(toLowerCase[i])) duplicates += toLowerCase[i]\n    else newStr += toLowerCase[i]\n    }\n  return [newStr, duplicates];\n}",
  "openTest": "it('Created function moveDuplicates', () => {\n  expect(moveDuplicates).to.be.a('function');\n});\n\nit(\"moveDuplicates('AbCAaBbCc') should return ['abc', 'aabbcc']\", () => {\n  expect(moveDuplicates('AbCAaBbCc')).to.deep.equal(['abc', 'aabbcc']);\n});\n\nit(\"moveDuplicates('123123123') should return ['123', '123123']\", () => {\n  expect(moveDuplicates('123123123')).to.deep.equal(['123', '123123']);\n});\n\nit(\"moveDuplicates('AbCdEfGhIAjKlMcDGhnOpaQrjStBUvLoTYfdhmDlkejdWxYz') should return ['abcdefghijklmnopqrstuvywxz', 'acdghajblotfdhmdlkejdy']\", () => {\n  expect(moveDuplicates('AbCdEfGhIAjKlMcDGhnOpaQrjStBUvLoTYfdhmDlkejdWxYz')).to.deep.equal(['abcdefghijklmnopqrstuvywxz', 'acdghajblotfdhmdlkejdy']);\n});\n\nit(\"moveDuplicates('!@#$%^&*()_+!@#$%^&*()_+') should return ['!@#$%^&*()_+', '!@#$%^&*()_+']\", () => {\n  expect(moveDuplicates('!@#$%^&*()_+!@#$%^&*()_+')).to.deep.equal(['!@#$%^&*()_+', '!@#$%^&*()_+']);\n});\n\nit(\"moveDuplicates('') should return 'string is empty'\", () => {\n  expect(moveDuplicates('')).to.deep.equal('string is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}