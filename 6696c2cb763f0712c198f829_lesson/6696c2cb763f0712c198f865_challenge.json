{
  "_id": "6696c2cb763f0712c198f865",
  "name": {
    "en": "/*",
    "ru": "Найти индекс первого элемента, который содержит определенную подстроку и длина строки которого превышает заданное значение"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findFirstIndexWithSubstringAndLength`, которая принимает массив строк, подстроку и число.\n\nФункция должна вернуть индекс первого элемента в массиве, который содержит указанную подстроку и длина строки которого превышает заданное значение.\n\nЕсли такой строки нет, функция должна вернуть строку `Element not found`.\n\n\nПримеры запуска функции:\n```javascript\nfindFirstIndexWithSubstringAndLength(['apple pie', 'banana split', 'cherry tart', 'blueberry pie'], 'pie', 10); // 3\nfindFirstIndexWithSubstringAndLength(['cat', 'dog', 'elephant', 'bird'], 'og', 2); // 1\nfindFirstIndexWithSubstringAndLength(['hello', 'world', 'hi'], 'world', 4); // 1\nfindFirstIndexWithSubstringAndLength(['one', 'two', 'three'], 'four', 3); // \"Element not found\"\n```"
  },
  "initialSolution": "function findFirstIndexWithSubstringAndLength(){\n\n}",
  "completedSolution": "function findFirstIndexWithSubstringAndLength(arr, str, length) {\n  const res = arr.findIndex(el => el.includes(str) && el.length > length)\n  return res !== -1 ? res : 'Element not found';\n}",
  "openTest": "it('Created function findFirstIndexWithSubstringAndLength', () => {\n  expect(findFirstIndexWithSubstringAndLength).to.be.a('function');\n});\n\nit('findFirstIndexWithSubstringAndLength([\"apple pie\", \"banana split\", \"cherry tart\", \"blueberry pie\"], \"pie\", 10) should return 3', function() {\n  expect(findFirstIndexWithSubstringAndLength([\"apple pie\", \"banana split\", \"cherry tart\", \"blueberry pie\"], \"pie\", 10)).to.equal(3);\n});\n\nit('findFirstIndexWithSubstringAndLength([\"cat\", \"dog\", \"elephant\", \"bird\"], \"og\", 2) should return 1', function() {\n  expect(findFirstIndexWithSubstringAndLength([\"cat\", \"dog\", \"elephant\", \"bird\"], \"og\", 2)).to.equal(1);\n});\n\nit('findFirstIndexWithSubstringAndLength([\"hello\", \"world\", \"hi\"], \"world\", 4) should return 1', function() {\n  expect(findFirstIndexWithSubstringAndLength([\"hello\", \"world\", \"hi\"], \"world\", 4)).to.equal(1);\n});\n\nit('findFirstIndexWithSubstringAndLength([\"one\", \"two\", \"three\"], \"four\", 3) should return \"Element not found\"', function() {\n  expect(findFirstIndexWithSubstringAndLength([\"one\", \"two\", \"three\"], \"four\", 3)).to.equal(\"Element not found\");\n});\n\nit('findFirstIndexWithSubstringAndLength([\"lemon\", \"lime\", \"banana\", \"berry\"], \"na\", 5) should return 2', function() {\n  expect(findFirstIndexWithSubstringAndLength([\"lemon\", \"lime\", \"banana\", \"berry\"], \"na\", 5)).to.equal(2);\n});\n\nit('findFirstIndexWithSubstringAndLength([\"apple\", \"banana\", \"apricot\", \"blueberry\"], \"apple\", 4) should return 0', function() {\n  expect(findFirstIndexWithSubstringAndLength([\"apple\", \"banana\", \"apricot\", \"blueberry\"], \"apple\", 4)).to.equal(0);\n});\n\nit('findFirstIndexWithSubstringAndLength([\"strawberry\", \"raspberry\", \"blueberry\"], \"berry\", 7) should return 0', function() {\n  expect(findFirstIndexWithSubstringAndLength([\"strawberry\", \"raspberry\", \"blueberry\"], \"berry\", 7)).to.equal(0);\n});\n\nit('findFirstIndexWithSubstringAndLength([\"kiwi\", \"melon\", \"orange\"], \"me\", 3) should return 1', function() {\n  expect(findFirstIndexWithSubstringAndLength([\"kiwi\", \"melon\", \"orange\"], \"me\", 3)).to.equal(1);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}