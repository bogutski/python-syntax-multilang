{
  "_id": "6696c2cb763f0712c198f85e",
  "name": {
    "en": "/*",
    "ru": "Найти индекс первого объекта с определенным значением свойства"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findIndexByProperty`, которая принимает массив объектов и значение свойства.\n\nФункция должна вернуть индекс первого объекта в массиве, у которого значение свойства равно переданному значению.\n\nЕсли такой объект не найден, функция должна вернуть `Value not found`.\n\n\nПримеры запуска функции:\n```javascript\nfindIndexByProperty([{age: 20}, {age: 25}, {age: 30}], 30); // 2\nfindIndexByProperty([{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}], 'Bob'); // 1\nfindIndexByProperty([{type: 'fruit'}, {type: 'vegetable'}, {type: 'fruit'}], 'meat'); // \"Value not found\"\nfindIndexByProperty([{status: 'active'}, {status: 'inactive'}, {status: 'active'}], 'active'); // 0\n```"
  },
  "initialSolution": "function findIndexByProperty(){\n\n}",
  "completedSolution": "function findIndexByProperty(arr, value) {\n  const result = arr.findIndex(obj => Object.values(obj).includes(value))\n  return result !== -1 ? result : 'Value not found';\n}",
  "openTest": "it('Created function findIndexByProperty', () => {\n  expect(findIndexByProperty).to.be.a('function');\n});\n\nit(\"Function findIndexByProperty should include findIndex method\", () => {\n  const result = findIndexByProperty.toString();\n  expect(result).to.include('.findIndex(');\n});\n\nit('findIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}], \"Bob\") should return 1', function() {\n  expect(findIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}], \"Bob\")).to.equal(1);\n});\n\nit('findIndexByProperty([{age: 25}, {age: 30}, {age: 35}], 30) should return 1', function() {\n  expect(findIndexByProperty([{age: 25}, {age: 30}, {age: 35}], 30)).to.equal(1);\n});\n\nit('findIndexByProperty([{type: \"fruit\"}, {type: \"vegetable\"}, {type: \"fruit\"}], \"meat\") should return \"Value not found\"', function() {\n  expect(findIndexByProperty([{type: \"fruit\"}, {type: \"vegetable\"}, {type: \"fruit\"}], \"meat\")).to.equal(\"Value not found\");\n});\n\nit('findIndexByProperty([{status: \"active\"}, {status: \"inactive\"}, {status: \"active\"}], \"active\") should return 0', function() {\n  expect(findIndexByProperty([{status: \"active\"}, {status: \"inactive\"}, {status: \"active\"}], \"active\")).to.equal(0);\n});\n\nit('findIndexByProperty([{color: \"red\"}, {color: \"green\"}, {color: \"blue\"}], \"green\") should return 1', function() {\n  expect(findIndexByProperty([{color: \"red\"}, {color: \"green\"}, {color: \"blue\"}], \"green\")).to.equal(1);\n});\n\nit('findIndexByProperty([{height: 150}, {height: 160}, {height: 150}], 150) should return 0', function() {\n  expect(findIndexByProperty([{height: 150}, {height: 160}, {height: 150}], 150)).to.equal(0);\n});\n\nit('findIndexByProperty([], \"anything\") should return \"Value not found\"', function() {\n  expect(findIndexByProperty([], \"anything\")).to.equal(\"Value not found\");\n});\n\nit('findIndexByProperty([{category: \"A\"}, {category: \"B\"}, {category: \"A\"}], \"A\") should return 0', function() {\n  expect(findIndexByProperty([{category: \"A\"}, {category: \"B\"}, {category: \"A\"}], \"A\")).to.equal(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}