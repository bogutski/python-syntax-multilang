{
  "_id": "6696c2ca763f0712c198eefd",
  "name": {
    "en": "",
    "ru": "Найти сумму положительных и отрицательных чисел в строке"
  },
  "instruction": {
    "en": "",
    "ru": "В этой задаче разберем как найти сумму не только положительных, но и отрицательных чисел в строке.\n\nФункция `sumAllNumbers` принимает строку, состоящую из различных символов и положительных и отрицательных чисел.\n\nФункция должна найти все числа в строке и сложить их.\n\nРазберите код и допишите условие в цикле.\n\nПостарайтесь переписать код самостоятельно.\n\n\nПррмеры запуска функции:\n```javascript\nsumAllNumbers('11$2#(17)');                                    // 30\nsumAllNumbers('-51--42--33-2---1');                            // -129\nsumAllNumbers('0,-53;- -7,- - --- -3-72,W2--8:-94, -211-2-3'); // -451\nsumAllNumbers('');                                             // 0\n```"
  },
  "initialSolution": "function sumAllNumbers(str){\n  const numbers = {0: true, 1: true, 2: true, 3: true, 4: true, 5: true, 6: true, 7: true, 8: true, 9: true};\n\n  let sum = 0;                                      // variable for sum\n  let acc = '';                                     // accumulator for numbers\n\n  for (<code here...>) {                            // loop through string\n    const el = str[i];                              // current element\n    const nextEl = str[i + 1];                      // next element\n\n    // if current element is located in an object OR\n    // if current element is '-' AND next element is a number AND accumulator is empty\n    if (numbers[el] || el === '-' && numbers[nextEl] && acc === '') {\n      acc += el;                                    // add current element to accumulator\n    }\n\n    // if current element is '-' AND next element is a number AND accumulator is not empty\n    else if(el === '-' && numbers[nextEl] && acc !== ''){\n      sum += Number(acc);                          // add accumulator to sum\n      acc = '-';                                   // reset accumulator and add '-' to it\n    }\n    else {\n      sum += Number(acc);                         // add accumulator to sum\n      acc = '';                                   // reset accumulator\n    }\n  }\n  sum += Number(acc);                             // add accumulator to sum\n  return sum;\n}",
  "completedSolution": "function sumAllNumbers(str){\n  const numbers = {0: true, 1: true, 2: true, 3: true, 4: true, 5: true, 6: true, 7: true, 8: true, 9: true};\n\n  let sum = 0;                              // variable for sum\n  let acc = '';                              // accumulator for numbers\n\n  for (let i = 0; i < str.length; i++) {   // loop through string\n    const el = str[i];                              // current element\n    const nextEl = str[i + 1];                      // next element\n\n    // if current element is located in an object OR\n    // if current element is '-' AND next element is a number AND accumulator is empty\n    if (numbers[el] || el === '-' && numbers[nextEl] && acc === '') {\n      acc += el;                                    // add current element to accumulator\n    }\n\n    // if current element is '-' AND next element is a number AND accumulator is not empty\n    else if(el === '-' && numbers[nextEl] && acc !== ''){\n      sum += Number(acc);                          // add accumulator to sum\n      acc = '-';                                   // reset accumulator and add '-' to it\n    }\n    else {\n      sum += Number(acc);                         // add accumulator to sum\n      acc = '';                                   // reset accumulator\n    }\n  }\n  sum += Number(acc);                             // add accumulator to sum\n  return sum;\n}",
  "openTest": "it('Created function sumAllNumbers', () => {\n  expect(sumAllNumbers).to.be.a('function');\n});\n\nit(\"sumAllNumbers('1,-21,3, w-4, d52,--6, w72, w-89-10') should return -2\", () => {\n  expect(sumAllNumbers('1,-21,3, w-4, d52,--6, w72, w-89-10')).to.equal(-2);\n});\n\nit(\"sumAllNumbers('-51-42-33-2-1') should return -129\", () => {\n  expect(sumAllNumbers('-51-42-33-2-1')).to.equal(-129);\n});\n\nit(\"sumAllNumbers('91!20#30^44^2-84=7&82d93.5.') should return 290\", () => {\n  expect(sumAllNumbers('91!20#30^44^2-84=7&82d93.5.')).to.equal(290);\n});\n\nit(\"sumAllNumbers('0-53----7---3, *-*-*--729------8-94++-+-+-15-285-403') should return -1597\", () => {\n  expect(sumAllNumbers('0-53----7---3, *-*-*--729------8-94++-+-+-15-285-403')).to.equal(-1597);\n});\n\nit(\"sumAllNumbers('') should return 0\", () => {\n  expect(sumAllNumbers('')).to.equal(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}