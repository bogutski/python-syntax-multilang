{
  "_id": "6696c2ca763f0712c198ef4a",
  "name": {
    "en": "",
    "ru": "Исправить функцию по проверке типов элементов массива"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `checkTypes` принимает массив элементов трех типов: `number`, `string` и `boolean`.\n\n* Если в массиве все элементы типа `number`, то функция должна вернуть их произведение.\n* Если в массиве все элементы типа `string`, то функция должна вернуть их конкатенацию.\n* Если в массиве все элементы типа `boolean`, то функция должна вернуть количество элементов типа `boolean`.\n* Если в массиве встречаются разные типы, то функция должна вернуть строку `'There are different types in array'`.\n* Если массив пустой, то функция должна вернуть строку `'There is nothing to do here :('`.\n\nПостарайтесь разобрать каждую строчку функции и понять, как она работает.\n\nДобавьте необходимый код, в местах пропуска.\n\n\nПримеры запуска функции:\n```javascript\ncheckTypes([1, 2, 3]);           // 6\ncheckTypes(['a', 'b', 'c']);     // 'abc'\ncheckTypes([true, false, true]); // 3\ncheckTypes([false, 100, true]);  // 'There are different types in array'\ncheckTypes([1, 'test', false]);  // 'There are different types in array'\ncheckTypes([]);                  // 'There is nothing to do here :('\n```"
  },
  "initialSolution": "function checkTypes(arr){\n  if (arr.length === 0) code here... ;\n\n  let power = code here... ;\n  let string = code here... ;\n  let booleanCount = code here... ;\n\n  for (let i = 0; i < arr.length; i++){\n\n    if (typeof arr[i] === 'number' && string === '' && booleanCount === 0) power *= arr[i];\n    else if (typeof arr[i] === 'string' && power === 1 && booleanCount === 0) string += arr[i];\n    else if (typeof arr[i] === 'boolean' && power === 1 && string === '') booleanCount++;\n    else return 'There are different types in array';\n  }\n\n  if (power !== 1) return power;\n  else if (string !== '') return string;\n  else return booleanCount;\n}",
  "completedSolution": "function checkTypes(arr){\n  if (arr.length === 0) return 'There is nothing to do here :(';\n\n  let power = 1;\n  let string = '';\n  let booleanCount = 0;\n\n  for (let i = 0; i < arr.length; i++){\n\n    if (typeof arr[i] === 'number' && string === '' && booleanCount === 0) power *= arr[i];\n    else if (typeof arr[i] === 'string' && power === 1 && booleanCount === 0) string += arr[i];\n    else if (typeof arr[i] === 'boolean' && power === 1 && string === '') booleanCount++;\n    else return 'There are different types in array';\n  }\n\n  if (power !== 1) return power;\n  else if (string !== '') return string;\n  else return booleanCount;\n}",
  "openTest": "it('Created function checkTypes', () => {\n  expect(checkTypes).to.be.a('function');\n});\n\nit(\"checkTypes([1, 2, 3]) should return 6\", () => {\n  expect(checkTypes([1, 2, 3])).to.equal(6);\n});\n\nit(\"checkTypes(['a', 'b', 'c']) should return 'abc'\", () => {\n  expect(checkTypes(['a', 'b', 'c'])).to.equal('abc');\n});\n\nit(\"checkTypes([true, false, true]) should return 3\", () => {\n  expect(checkTypes([true, false, true])).to.equal(3);\n});\n\nit(\"checkTypes([true, false, 'a']) should return 'There are different types in array'\", () => {\n  expect(checkTypes([true, false, 'a'])).to.equal('There are different types in array');\n});\n\nit(\"checkTypes([false, 55, true]) should return 'There are different types in array'\", () => {\n  expect(checkTypes([false, 55, true])).to.equal('There are different types in array');\n});\n\nit(\"checkTypes([1, 2, 3, 'test']) should return 'There are different types in array'\", () => {\n  expect(checkTypes([1, 2, 3, 'test'])).to.equal('There are different types in array');\n});\n\nit(\"checkTypes([1, 2, 3, 'a', 'b', 'c', true, false, true]) should return 'There are different types in array'\", () => {\n  expect(checkTypes([1, 2, 3, 'a', 'b', 'c', true, false, true])).to.equal('There are different types in array');\n});\n\nit(\"checkTypes([]) should return 'There is nothing to do here :('\", () => {\n  expect(checkTypes([])).to.equal('There is nothing to do here :(');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}