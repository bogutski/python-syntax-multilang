{
  "_id": "6696c2ca763f0712c198ef47",
  "name": {
    "en": "Sorting letters by case",
    "ru": "Сортировка букв по регистру"
  },
  "instruction": {
    "en": "Write a function `sortLettersByCase` that takes an array of uppercase and lowercase letters.\n\nThe function should return a new array where all lowercase letters come first, followed by all uppercase letters.\n\nThe order of the letters should correspond to the order in the original array.\n\nFor example, the array `['a', 'B', 'c', 'D']` should return `['a', 'c', 'B', 'D']`.\n\nIf the array is empty, return the string 'Array is empty'.\n\nIn this task, you can use the spread operator. You can review the material on the spread operator in the section:\n* `JavaScript Syntax -> Section 11 Arrays -> Copying arrays`\n\nExample function calls:\n```javascript\nsortLettersByCase(['a', 'B']) // ['a', 'B']\nsortLettersByCase(['A', 'b', 'c', 'd', 'e', 'F']) // ['b', 'c', 'd', 'e', 'A', 'F']\nsortLettersByCase(['A', 'B', 'C', 'd', 'e', 'f']) // ['d', 'e', 'f', 'A', 'B', 'C']\nsortLettersByCase([]) // 'Array is empty'\n```",
    "ru": "Напишите функцию `sortLettersByCase`, которая принимает массив заглавных и строчных букв.\n\nФункция должна вернуть новый массив, в котором сначала идут все строчные буквы, а потом все заглавные.\n\nРасположение букв должно соответствовать порядку в исходном массиве.\n\nНапример, массив `['a', 'B', 'c', 'D']` должен вернуть `['a', 'c', 'B', 'D']`.\n\nЕсли массив пустой, то вернуть строку 'Array is empty'.\n\nВ данной задаче можно использовать оператор развертывания (Spread operator).\nВы можете повторить материал по `Spread operator` в разделе:\n* `JavaScript Syntax -> Section 11 Массивы -> Копирование массивов`\n\n\nПример запуска функции:\n```javascript\nsortLettersByCase(['a', 'B']) // ['a', 'B']\nsortLettersByCase(['A', 'b', 'c', 'd', 'e', 'F']) // ['b', 'c', 'd', 'e', 'A', 'F']\nsortLettersByCase(['A', 'B', 'C', 'd', 'e', 'f']) // ['d', 'e', 'f', 'A', 'B', 'C']\nsortLettersByCase([]) // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function sortLettersByCase(arr){\n  if(!arr.length) return 'Array is empty';\n  const lowerCase = [];\n  const upperCase = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] === arr[i].toLowerCase()) lowerCase.push(arr[i]);\n    else upperCase.push(arr[i]);\n  }\n  return [...lowerCase, ...upperCase];\n}",
  "openTest": "it('Created function sortLettersByCase', () => {\n  expect(sortLettersByCase).to.be.a('function');\n});\n\nit(\"sortLettersByCase(['a', 'B', 'c', 'D', 'e', 'F']) should return ['a', 'c', 'e', 'B', 'D', 'F']\", () => {\n  expect(sortLettersByCase(['a', 'B', 'c', 'D', 'e', 'F'])).to.deep.equal(['a', 'c', 'e', 'B', 'D', 'F']);\n});\n\nit(\"sortLettersByCase(['a', 'b', 'c', 'd', 'e', 'f']) should return ['a', 'b', 'c', 'd', 'e', 'f']\", () => {\n  expect(sortLettersByCase(['a', 'b', 'c', 'd', 'e', 'f'])).to.deep.equal(['a', 'b', 'c', 'd', 'e', 'f']);\n});\n\nit(\"sortLettersByCase(['A', 'B', 'C', 'D', 'E', 'F']) should return ['A', 'B', 'C', 'D', 'E', 'F']\", () => {\n  expect(sortLettersByCase(['A', 'B', 'C', 'D', 'E', 'F'])).to.deep.equal(['A', 'B', 'C', 'D', 'E', 'F']);\n});\n\nit(\"sortLettersByCase(['A', 'b', 'a', 'C', 'd', 'c', 'E', 'f', 'D', 'B', 'o']) should return ['b', 'a', 'd', 'c', 'f', 'o', 'A', 'C', 'E', 'D', 'B']\", () => {\n  expect(sortLettersByCase(['A', 'b', 'a', 'C', 'd', 'c', 'E', 'f', 'D', 'B', 'o'])).to.deep.equal(['b', 'a', 'd', 'c', 'f', 'o', 'A', 'C', 'E', 'D', 'B']);\n});\n\nit(\"sortLettersByCase([]) should return 'Array is empty'\", () => {\n  expect(sortLettersByCase([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}