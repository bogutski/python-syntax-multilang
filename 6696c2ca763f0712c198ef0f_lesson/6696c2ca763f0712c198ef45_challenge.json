{
  "_id": "6696c2ca763f0712c198ef45",
  "name": {
    "en": "",
    "ru": "Сумма всех чисел из массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sumAllNumbers`, которая принимает массив из численных и строковых значений.\n\nФункция должна вернуть новый массив, в который будут добавлены все числовые значения из исходного массива и последним элементом будет добавлена строка, следующего вида:\n\n * `'Sum of all numbers is 15'`, где 15 - это сумма всех числовых значений.\n\nЕсли массив пустой, то функция должна вернуть строку `'Array is empty'`.\n\n\nПримеры запуска функции:\n```javascript\nsumAllNumbers([]);                  // 'Array is empty'\nsumAllNumbers([1, 2, 3]);           // [1, 2, 3, 'Sum of all numbers is 6']\nsumAllNumbers(['1', '2', '3']);     // ['Sum of all numbers is 0']\nsumAllNumbers([0, 0, 0]);           // [0, 0, 0, 'Sum of all numbers is 0']\nsumAllNumbers([1, '2', 3, 'a', 5]); // [1, 3, 5, 'Sum of all numbers is 9']\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function sumAllNumbers(arr){\n  if(!arr.length) return 'Array is empty';\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++){\n    if (typeof arr[i] === 'number'){\n      sum += arr[i];\n      result.push(arr[i]);\n    }\n  }\n  result.push(`Sum of all numbers is ${sum}`);\n  return result;\n}",
  "openTest": "it('Created function sumAllNumbers', () => {\n  expect(sumAllNumbers).to.be.a('function');\n});\n\nit(\"sumAllNumbers([1, 2, 3, 'a', 5, 'b', 7, 'c', '9']) should return [1, 2, 3, 5, 7, 'Sum of all numbers is 18']\", () => {\n  expect(sumAllNumbers([1, 2, 3, 'a', 5, 'b', 7, 'c', '9'])).to.eql([1, 2, 3, 5, 7, 'Sum of all numbers is 18']);\n});\n\nit(\"sumAllNumbers([1, 2, 3]) should return [1, 2, 3, 'Sum of all numbers is 6']\", () => {\n  expect(sumAllNumbers([1, 2, 3])).to.eql([1, 2, 3, 'Sum of all numbers is 6']);\n});\n\nit(\"sumAllNumbers([500, 55, 5000]) should return [500, 55, 5000, 'Sum of all numbers is 5555']\", () => {\n  expect(sumAllNumbers([500, 55, 5000])).to.eql([500, 55, 5000, 'Sum of all numbers is 5555']);\n});\n\nit(\"sumAllNumbers(['a', 'b', 'c']) should return '['Sum of all numbers is 0']'\", () => {\n  expect(sumAllNumbers(['a', 'b', 'c'])).to.eql(['Sum of all numbers is 0']);\n});\n\nit(\"sumAllNumbers([0, 0, 0]) should return [0, 0, 0, 'Sum of all numbers is 0']\", () => {\n  expect(sumAllNumbers([0, 0, 0])).to.eql([0, 0, 0, 'Sum of all numbers is 0']);\n});\n\nit(\"sumAllNumbers(['1', '2', '3']) should return '['Sum of all numbers is 0']'\", () => {\n  expect(sumAllNumbers(['1', '2', '3'])).to.eql(['Sum of all numbers is 0']);\n});\n\nit(\"sumAllNumbers([]) should return 'Array is empty'\", () => {\n  expect(sumAllNumbers([])).to.eql('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}