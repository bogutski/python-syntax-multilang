{
  "_id": "6696c2ca763f0712c198ef46",
  "name": {
    "en": "",
    "ru": "Сумма и количество всех чисел в массиве"
  },
  "instruction": {
    "en": "",
    "ru": "В этом решении мы улучшим нашу прошлую функцию по суммированию чисел.\n\nНапишите функцию `sumAndCount`, которая принимает массив из строковых и числовых значений.\n\nЧисла могут быть строкового типа, например, `['1', '2', '-30']`.\n\nФункция должна пройтись по массиву и найти все числа, не зависимо от типа данных, и посчитать сумму и количество найденных чисел.\n\n * Если массив пустой, то функция должна вернуть строку `'Array is empty'`.\n * Если в массиве нет чисел, то функция должна вернуть строку `'No numbers were found'`.\n * Если в массиве есть числа, то функция должна вернуть строку: `'Count of numbers: 3, sum of numbers: 6'`, где `3` - количество найденных чисел, а `6` - сумма найденных чисел.\n\n\nПримеры запуска функции:\n```javascript\nsumAndCount([]) // 'Array is empty'\nsumAndCount(['a', 'b', 'c']) // 'No numbers were found'\nsumAndCount(['1', '2', '3']) // 'Count of numbers: 3, sum of numbers: 6'\nsumAndCount(['1', '2', '3', 'a', 'b', 'c', 10]) // 'Count of numbers: 4, sum of numbers: 16'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function sumAndCount(arr){\n  if(!arr.length) return 'Array is empty'\n  let sum = 0;\n  let numCount = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(!isNaN(Number(arr[i]))){\n      sum += Number(arr[i]);\n      numCount++;\n    }\n  }\n  if(!numCount) return 'No numbers were found in array'\n  return `Count of numbers: ${numCount}, sum of numbers: ${sum}`\n}",
  "openTest": "it('Created function sumAndCount', () => {\n  expect(sumAndCount).to.be.a('function');\n});\n\nit(\"sumAndCount(['a', 'b', 'c']) should return 'No numbers were found in array'\", () => {\n  expect(sumAndCount(['a', 'b', 'c'])).to.equal('No numbers were found in array');\n});\n\nit(\"sumAndCount(['1', '2', '3']) should return 'Count of numbers: 3, sum of numbers: 6'\", () => {\n  expect(sumAndCount(['1', '2', '3'])).to.equal('Count of numbers: 3, sum of numbers: 6');\n});\n\nit(\"sumAndCount(['1', '2', '3', 'a', 'b', 'c', 10]) should return 'Count of numbers: 4, sum of numbers: 16'\", () => {\n  expect(sumAndCount(['1', '2', '3', 'a', 'b', 'c', 10])).to.equal('Count of numbers: 4, sum of numbers: 16');\n});\n\nit(\"sumAndCount([10, 20, 100, 5000]) should return 'Count of numbers: 4, sum of numbers: 5130'\", () => {\n  expect(sumAndCount([10, 20, 100, 5000])).to.equal('Count of numbers: 4, sum of numbers: 5130');\n});\n\nit(\"sumAndCount([-5, -16, '55', 'test', 0, '-4', -74, '100']) should return 'Count of numbers: 7, sum of numbers: 56'\", () => {\n  expect(sumAndCount([-5, -16, '55', 'test', 0, '-4', -74, '100'])).to.equal('Count of numbers: 7, sum of numbers: 56');\n});\n\nit(\"sumAndCount([]) should return 'Array is empty'\", () => {\n  expect(sumAndCount([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}