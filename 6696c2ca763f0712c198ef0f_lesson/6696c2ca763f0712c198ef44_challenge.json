{
  "_id": "6696c2ca763f0712c198ef44",
  "name": {
    "en": "",
    "ru": "Найти квадратный корень всех позитивных чисел"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `squareRoot`, которая принимает массив позитивных и негативных чисел.\n\nЧисла могут иметь числовой или строковый тип данных.\n\nПример массив `[1, '2', -3, '-4']`.\n\nФункция должна вернуть новый массив со значениями квадратного корня каждого позитивного числа, не зависимо от типа данных.\n\nЕсли число отрицательное, то на его место в новом массиве, должно быть значение `false`.\n\nПосле вычисления квадратного корня, число должно быть округлено до ближайшего целого числа.\n\n\n`Hint`:\nДля нахождения квадратного корня можно использовать:\n* метод `Math.sqrt()`, например: `Math.sqrt(100)` вернет `10`.\n* оператор `**` (возведение в степень), например: `100 ** 0.5` вернет `10`.\n\nДля округления:\n* метод `Math.round()`, например: `Math.round(10.5)` вернет `11`.\n\n\nПример запуска функции:\n```javascript\nsquareRoot([1, '2', -3, '-4']) // [ 1, 1, false, false ]\nsquareRoot([0, -1, 4, '9', 16, '25', 36, 49, '64', 81, 100]) // [ 0, false, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\nsquareRoot([]) // []\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function squareRoot(arr){\n  const squareRootArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if(arr[i] < 0) squareRootArr.push(false);\n    else {\n      let sqrt = Math.round(arr[i] ** 0.5);\n      squareRootArr.push(sqrt);\n    }\n  }\n  return squareRootArr;\n}",
  "openTest": "it('Created function squareRoot', () => {\n  expect(squareRoot).to.be.a('function');\n});\n\nit(\"squareRoot([1, 4, '9', 16, '25', 36, 49, '64', 81, 100]) returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\", () => {\n  expect(squareRoot([1, 4, '9', 16, '25', 36, 49, '64', 81, 100])).to.deep.equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n});\n\nit(\"squareRoot([-5, 4, -69, 16, -43, 2, -6, 88, 34]) returns [false, 2, false, 4, false, 1, false, 9, 6]\", () => {\n  expect(squareRoot([-5, 4, -69, 16, -43, 2, -6, 88, 34])).to.deep.equal([false, 2, false, 4, false, 1, false, 9, 6]);\n});\n\nit(\"squareRoot([0, -5, 55, 23, -43, 2, -6, 88, 34]) returns [0, false, 7, 5, false, 1, false, 9, 6]\", () => {\n  expect(squareRoot([0, -5, 55, 23, -43, 2, -6, 88, 34])).to.deep.equal([0, false, 7, 5, false, 1, false, 9, 6]);\n});\n\nit(\"squareRoot([-1, -100, -1000, -10000]) returns [false, false, false, false]\", () => {\n  expect(squareRoot([-1, -100, -1000, -10000])).to.deep.equal([false, false, false, false]);\n});\n\nit(\"squareRoot([5, 50, '500', 5000]) returns [2, 7, 22, 71]\", () => {\n  expect(squareRoot([5, 50, '500', 5000])).to.deep.equal([2, 7, 22, 71]);\n});\n\nit(\"squareRoot([]) returns []\", () => {\n  expect(squareRoot([])).to.deep.equal([]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}