{
  "_id": "6696c2ca763f0712c198ef48",
  "name": {
    "en": "Determine array element types",
    "ru": "Определить типы элементов массива"
  },
  "instruction": {
    "en": "Write a function `typesOfElements` that takes an array of elements of any type.\n\nThe function should return an array of strings that lists the types of elements in the original array.\n\nFor example, the array `[1, 'a', true]` should return `['number', 'string', 'boolean']`.\n\nIf the array is empty, the function should return the string `'Array is empty'`.\n\n\nExample function calls:\n```javascript\ntypesOfElements([123, 'test', true, null, undefined]); // ['number', 'string', 'boolean', 'object', 'undefined']\ntypesOfElements([[1, 2, 3], {a: 1, b: 2, c: 3}]);      // ['object', 'object']\ntypesOfElements([123, 'abc', false]);                  // ['number', 'string', 'boolean']\ntypesOfElements([true, false, true]);                  // ['boolean', 'boolean', 'boolean']\ntypesOfElements([]);                                   // 'Array is empty'\n```",
    "ru": "Напишите функцию `typesOfElements`, которая принимает массив элементов произвольного типа.\n\nФункция должна вернуть массив строк, в котором будут перечислены типы элементов исходного массива.\n\nНапример, массив `[1, 'a', true]` должен вернуть `['number', 'string', 'boolean']`.\n\nЕсли массив пустой, то функция должна вернуть строку `'Array is empty'`.\n\n\nПример запуска функции:\n```javascript\ntypesOfElements([123, 'test', true, null, undefined]); // ['number', 'string', 'boolean', 'object', 'undefined']\ntypesOfElements([[1, 2, 3], {a: 1, b: 2, c: 3}]);      // ['object', 'object']\ntypesOfElements([123, 'abc', false]);                  // ['number', 'string', 'boolean']\ntypesOfElements([true, false, true]);                  // ['boolean', 'boolean', 'boolean']\ntypesOfElements([]);                                   // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function typesOfElements(arr){\n  if(!arr.length) return 'Array is empty';\n  let types = [];\n  for(let i = 0; i < arr.length; i++){\n    types.push(typeof arr[i])\n  }\n  return types;\n}",
  "openTest": "it('Created function typesOfElements', () => {\n  expect(typesOfElements).to.be.a('function');\n});\n\nit(\"typesOfElements([123, 'test', true, null, undefined, {}, []]) should return ['number', 'string', 'boolean', 'object', 'undefined', 'object', 'object']\", () => {\n  expect(typesOfElements([123, 'test', true, null, undefined, {}, []])).to.eql(['number', 'string', 'boolean', 'object', 'undefined', 'object', 'object']);\n});\n\nit(\"typesOfElements([1, 2, 3, 'a', 'b', 'c']) should return ['number', 'number', 'number', 'string', 'string', 'string']\", () => {\n  expect(typesOfElements([1, 2, 3, 'a', 'b', 'c'])).to.eql(['number', 'number', 'number', 'string', 'string', 'string']);\n});\n\nit(\"typesOfElements([true, false, null, undefined, NaN]) should return ['boolean', 'boolean', 'object', 'undefined', 'number']\", () => {\n  expect(typesOfElements([true, false, null, undefined, NaN])).to.eql(['boolean', 'boolean', 'object', 'undefined', 'number']);\n});\n\nit(\"typesOfElements([[], {}, [1, 2, 3], {a: 1, b: 2, c: 3}]) should return ['object', 'object', 'object', 'object']\", () => {\n  expect(typesOfElements([[], {}, [1, 2, 3], {a: 1, b: 2, c: 3}])).to.eql(['object', 'object', 'object', 'object']);\n});\n\nit(\"typesOfElements([]) should return 'Array is empty'\", () => {\n  expect(typesOfElements([])).to.eql('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}