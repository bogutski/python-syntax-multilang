{
  "_id": "6696c2cb763f0712c198f91c",
  "name": {
    "en": "/*",
    "ru": "Проверка наличия строки с определенными условиями после обработки массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `hasProcessedString`, которая принимает массив строк и объект с условиями.\n\nУсловия включают два свойства: `minLength` (минимальная длина строки после обработки) и `contains` (подстрока, которая должна присутствовать в строке после обработки).\n\nФункция должна вернуть `true`, если хотя бы одна строка после удаления всех пробелов и приведения к нижнему регистру удовлетворяет указанным условиям, и `false` в противном случае.\n\n\nПримеры запуска функции:\n```javascript\nhasProcessedString(['foo', 'bar', 'baz'], {minLength: 3, contains: 'ba'}); // true\nhasProcessedString(['foo', 'bar', 'baz'], {minLength: 4, contains: 'ba'}); // false\nhasProcessedString(['Hello World', 'JavaScript', '  OpenAI   '], {minLength: 5, contains: 'openai'}); // true\nhasProcessedString(['Hello World', 'JavaScript', '  OpenAI   '], {minLength: 10, contains: 'openai'}); // false\n```"
  },
  "initialSolution": "function hasProcessedString(){\n\n}",
  "completedSolution": "function hasProcessedString(arr, condition) {\n  const noSpacesAndLowerCase = str => {\n    let res = ''\n    for(let char of str) {\n      if(char !== ' ') res += char\n    }\n    return res.toLowerCase()\n  }\n\n  return arr.some(str => {\n    const result = noSpacesAndLowerCase(str)\n    return result.length >= condition.minLength && result.includes(condition.contains)\n  });\n}",
  "openTest": "it('Created function hasProcessedString', () => {\n  expect(hasProcessedString).to.be.a('function');\n});\n\nit('hasProcessedString([\"Hello World\", \"JavaScript\", \"  OpenAI   \"], {minLength: 5, contains: \"openai\"}) should return true', function() {\n  expect(hasProcessedString([\"Hello World\", \"JavaScript\", \"  OpenAI   \"], {minLength: 5, contains: \"openai\"})).to.equal(true);\n});\n\nit('hasProcessedString([\"Hello World\", \"JavaScript\", \"  OpenAI   \"], {minLength: 10, contains: \"openai\"}) should return false', function() {\n  expect(hasProcessedString([\"Hello World\", \"JavaScript\", \"  OpenAI   \"], {minLength: 10, contains: \"openai\"})).to.equal(false);\n});\n\nit('hasProcessedString([\"foo\", \"bar\", \"baz\"], {minLength: 3, contains: \"ba\"}) should return true', function() {\n  expect(hasProcessedString([\"foo\", \"bar\", \"baz\"], {minLength: 3, contains: \"ba\"})).to.equal(true);\n});\n\nit('hasProcessedString([\"foo\", \"bar\", \"baz\"], {minLength: 4, contains: \"ba\"}) should return false', function() {\n  expect(hasProcessedString([\"foo\", \"bar\", \"baz\"], {minLength: 4, contains: \"ba\"})).to.equal(false);\n});\n\nit('hasProcessedString([\" aBc dEf \", \"ghi jkl\", \" mnoPqRs\"], {minLength: 6, contains: \"def\"}) should return true', function() {\n  expect(hasProcessedString([\" aBc dEf \", \"ghi jkl\", \" mnoPqRs\"], {minLength: 6, contains: \"def\"})).to.equal(true);\n});\n\nit('hasProcessedString([\" aBc dEf \", \"ghi jkl\", \" mnoPqRs\"], {minLength: 10, contains: \"def\"}) should return false', function() {\n  expect(hasProcessedString([\" aBc dEf \", \"ghi jkl\", \" mnoPqRs\"], {minLength: 10, contains: \"def\"})).to.equal(false);\n});\n\nit('hasProcessedString([\"E xampl e\", \"  Te ST in g\", \" 12 34 5\"], {minLength: 5, contains: \"test\"}) should return true', function() {\n  expect(hasProcessedString([\"E xampl e\", \"  Te ST in g\", \" 12 34 5\"], {minLength: 5, contains: \"test\"})).to.equal(true);\n});\n\nit('hasProcessedString([\"Example\", \"  TeSTing\", \" 12345\"], {minLength: 8, contains: \"test\"}) should return false', function() {\n  expect(hasProcessedString([\"Example\", \"  TeSTing\", \" 12345\"], {minLength: 8, contains: \"test\"})).to.equal(false);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}