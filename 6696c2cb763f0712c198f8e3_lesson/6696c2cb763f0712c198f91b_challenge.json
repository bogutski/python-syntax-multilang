{
  "_id": "6696c2cb763f0712c198f91b",
  "name": {
    "en": "/*",
    "ru": "Проверка, что хотя бы один элемент массива удовлетворяет комплексному условию"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `hasElementSatisfyingCondition`, которая принимает массив и объект с условием.\n\nФункция должна возвращать `true`, если в массиве есть хотя бы один элемент, который удовлетворяет указанному условию, и `false` в противном случае.\n\nУсловие представляет собой объект с двумя свойствами: `type` и `value`.\n\n* Если `type` равен `number`, то `value` содержит пороговое значение, и элемент должен быть числом, превышающим этот порог.\n* Если `type` равен `string`, то `value` содержит подстроку, и элемент должен быть строкой, содержащей эту подстроку.\n* Если `type` равен `object`, то `value` содержит ключ, и элемент должен быть объектом, содержащим этот ключ.\n\n\nПримеры запуска функции:\n```javascript\nhasElementSatisfyingCondition([1, 2, 3, 4], {type: 'number', value: 3}); // true\nhasElementSatisfyingCondition([1, 2, 3, 4], {type: 'number', value: 5}); // false\nhasElementSatisfyingCondition(['apple', 'banana', 'cherry'], {type: 'string', value: 'an'}); // true\nhasElementSatisfyingCondition(['apple', 'banana', 'cherry'], {type: 'string', value: 'xyz'}); // false\nhasElementSatisfyingCondition([{a: 1}, {b: 2}, {c: 3}], {type: 'object', value: 'b'}); // true\nhasElementSatisfyingCondition([{a: 1}, {b: 2}, {c: 3}], {type: 'object', value: 'd'}); // false\n```"
  },
  "initialSolution": "function hasElementSatisfyingCondition(){\n\n}",
  "completedSolution": "function hasElementSatisfyingCondition(arr, condition) {\n  return arr.some(element => {\n    if(condition.type === 'number') return typeof element === 'number' && element > condition.value;\n    else if(condition.type === 'string') return typeof element === 'string' && element.includes(condition.value);\n    else if(condition.type === 'object') return typeof element === 'object' && Object.keys(element).includes(condition.value);\n  });\n}",
  "openTest": "it('Created function hasElementSatisfyingCondition', () => {\n  expect(hasElementSatisfyingCondition).to.be.a('function');\n});\n\nit('hasElementSatisfyingCondition([1, 2, 3, 4], {type: \"number\", value: 3}) should return true', function() {\n  expect(hasElementSatisfyingCondition([1, 2, 3, 4], {type: \"number\", value: 3})).to.equal(true);\n});\n\nit('hasElementSatisfyingCondition([1, 2, 3, 4], {type: \"number\", value: 5}) should return false', function() {\n  expect(hasElementSatisfyingCondition([1, 2, 3, 4], {type: \"number\", value: 5})).to.equal(false);\n});\n\nit('hasElementSatisfyingCondition([\"1\", \"2\", \"3\", \"4\"], {type: \"number\", value: 3}) should return false', function() {\n  expect(hasElementSatisfyingCondition(['1', '2', '3', '4'], {type: \"number\", value: 3})).to.equal(false);\n});\n\nit('hasElementSatisfyingCondition([\"apple\", \"banana\", \"cherry\"], {type: \"string\", value: \"an\"}) should return true', function() {\n  expect(hasElementSatisfyingCondition([\"apple\", \"banana\", \"cherry\"], {type: \"string\", value: \"an\"})).to.equal(true);\n});\n\nit('hasElementSatisfyingCondition([11, 21, 0, -5], {type: \"string\", value: \"a\"}) should return false', function() {\n  expect(hasElementSatisfyingCondition([11, 21, 0, -5], {type: \"string\", value: \"a\"})).to.equal(false);\n});\n\nit('hasElementSatisfyingCondition([\"apple\", \"banana\", \"cherry\"], {type: \"string\", value: \"xyz\"}) should return false', function() {\n  expect(hasElementSatisfyingCondition([\"apple\", \"banana\", \"cherry\"], {type: \"string\", value: \"xyz\"})).to.equal(false);\n});\n\nit('hasElementSatisfyingCondition([{a: 1}, {b: 2}, {c: 3}], {type: \"object\", value: \"b\"}) should return true', function() {\n  expect(hasElementSatisfyingCondition([{a: 1}, {b: 2}, {c: 3}], {type: \"object\", value: \"b\"})).to.equal(true);\n});\n\nit('hasElementSatisfyingCondition([{ab: \"a\"}, {ac: \"b\"}, {ad: \"c\"}], {type: \"object\", value: \"a\"}) should return false', function() {\n  expect(hasElementSatisfyingCondition([{ab: 'a'}, {ac: 'b'}, {ad: 'c'}], {type: \"object\", value: \"a\"})).to.equal(false);\n});\n\nit('hasElementSatisfyingCondition([{a: 1}, {b: 2}, {c: 3}], {type: \"object\", value: \"d\"}) should return false', function() {\n  expect(hasElementSatisfyingCondition([{a: 1}, {b: 2}, {c: 3}], {type: \"object\", value: \"d\"})).to.equal(false);\n});\n\nit('hasElementSatisfyingCondition([null, undefined, \"hello\"], {type: \"string\", value: \"o\"}) should return true', function() {\n  expect(hasElementSatisfyingCondition([null, undefined, \"hello\"], {type: \"string\", value: \"o\"})).to.equal(true);\n});\n\nit('hasElementSatisfyingCondition([true, false, 42], {type: \"number\", value: 40}) should return true', function() {\n  expect(hasElementSatisfyingCondition([true, false, 42], {type: \"number\", value: 40})).to.equal(true);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}