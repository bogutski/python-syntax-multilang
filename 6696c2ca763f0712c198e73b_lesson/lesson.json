{
  "_id": "6696c2ca763f0712c198e73b",
  "content": {
    "ru": "JavaScript предоставляет несколько способов для проверки наличия элемента в массиве. В этой лекции мы рассмотрим методы `includes()`, `indexOf()` и `lastIndexOf()`\n\n### Метод `includes()`\n\nСинтаксис метода `includes()` выглядит следующим образом:\n\n```javascript\narray.includes(searchElement, fromIndex)\n```\n\n* `searchElement` - обязательный параметр, представляющий элемент, наличие которого необходимо проверить в массиве.\n\n* `fromIndex` - необязательный параметр, определяющий индекс элемента, с которого начинается поиск.\n\nМетод `includes()` возвращает `true`, если элемент найден в массиве, и `false`, если нет.\n\nТакже следует отметить, что метод `includes()` чувствителен к типу данных и регистру. Если искомый элемент имеет другой тип данных, или регистр, чем элементы массива, метод всегда вернет `false`.\n\nРассмотрим пример:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\n\nconsole.log(fruits.includes('cherry')) // true, 'cherry' есть в массиве\nconsole.log(fruits.includes('Cherry')) // false, 'Cherry' отсутствует в массиве\n```\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/boy-search.png)\n\nПринципы `fromIndex`:\n\n* Если `fromIndex` не передан или его значение не является числом, поиск начинается с индекса `0`.\n* Если `fromIndex` - положительное число, то поиск начинается с этого индекса включительно.\n* Если `fromIndex` - отрицательное число, то поиск начинается с индекса, равного `array.length + fromIndex`, включая этот индекс.\n* Если передать его значение, которое превышает количество элементов в массиве, метод `includes()` всегда вернет `false`.\n\nРассмотрим пример с использованием `fromIndex`:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\nconst element = 'banana'\n\nconsole.log(fruits.includes(element, 1)) // false, проверка начинается с 'orange', 'banana' отсутствует\nconsole.log(fruits.includes(element, -2)); // false, 3+(-2)=1, проверка начинается с 'orange', 'banana' отсутствует\n```\n\n### Метод `indexOf()`\n\nСинтаксис метода `indexOf()` выглядит следующим образом:\n\n```javascript\narray.indexOf(searchElement, fromIndex)\n```\n\n* `searchElement` - обязательный параметр, представляющий элемент, наличие которого необходимо проверить в массиве.\n\n* `fromIndex` - необязательный параметр, определяющий индекс элемента, с которого начинается поиск.\n\nМетод `indexOf()` - это метод, который возвращает индекс (позицию) **первого** вхождения элемента в массиве. Если элемент не найден в массиве, метод возвращает `-1`.\n\nРассмотрим пример:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\n\nconsole.log(fruits.indexOf('orange')) // 1, 'orange' есть в массиве, индекс элемента 'orange' = 1\nconsole.log(fruits.indexOf(' orange')) // -1, ' orange' отсутствует в массиве\nconsole.log(fruits.indexOf('banana.')) // -1, 'banana.' отсутствует в массиве\n```\n\nЕсли в массиве будет несколько одинаковых элементов, `indexOf()` вернет индекс первого найденного:\n\n```javascript\nconst fruits = ['orange', 'orange', 'cherry']\n\nconsole.log(fruits.indexOf('orange')) // 0, 'orange' есть в массиве, индекс элемента 'orange' = 0\n```\n\nПринцип работы `fromIndex` точно такой же как и у метода `includes()`:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\nconst element = 'orange'\n\n// ищем индекс 'orange', начиная с 1 индекса в массиве\nconsole.log(fruits.indexOf(element, 1)) // 1, 'orange' есть в массиве, индекс элемента 'orange' = 1\nconsole.log(fruits.indexOf(element, 2)) // -1, 'orange' отсутствует при поиске с 2 индекса в массиве\n```\n\n### Метод `lastIndexOf()`\n\nСинтаксис метода `lastIndexOf()` выглядит следующим образом:\n\n```javascript\narray.lastIndexOf(searchElement, fromIndex)\n```\n\n* `searchElement` - обязательный параметр, представляющий элемент, наличие которого необходимо проверить в массиве.\n\n* `fromIndex` - необязательный параметр, определяющий индекс элемента, с которого начинается поиск. Поиск начинается с конца массива.\n\nМетод `lastIndexOf()` - это метод, который возвращает индекс (позицию) **последнего** вхождения элемента в массиве. Если элемент не найден в массиве, метод возвращает `-1`.\n\nРассмотрим пример:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\n\nconsole.log(fruits.lastIndexOf('orange'))  //  1, 'orange' есть в массиве, индекс элемента 'orange' = 1\nconsole.log(fruits.lastIndexOf(' orange')) // -1, ' orange' отсутствует в массиве\nconsole.log(fruits.lastIndexOf('banana.')) // -1, 'banana.' отсутствует в массиве\n```\n\nЕсли в массиве будет несколько одинаковых элементов, `lastIndexOf()` вернет индекс первого найденного, начиная с конца:\n\n```javascript\nconst fruits = ['orange', 'orange', 'cherry']\n\nconsole.log(fruits.lastIndexOf('orange')) // 1, 'orange' есть в массиве, индекс элемента 'orange' = 1\n```\n\nНапишем функцию `search` которая будет принимать массив со строками, и элемент который надо проверить на вхождение в массив. Функция должна возвращать результат вне зависимости от регистра.\n\n```javascript\nfunction search(arr, el) {\n  return arr.includes(el.trim().toLowerCase())\n}\n\nconsole.log(search(['a', 'd', 'lq', 'rw'], 'LQ'))   // true\nconsole.log(search(['a', 'd', 'lq', 'rw'], 'LQ  ')) // true\nconsole.log(search(['a', 'd', 'lq', 'rw'], ' lQ'))  // true\n```\n\nПерепишем `search`, чтобы функция принимала массив чисел, и количество сотен:\n\n```javascript\nfunction search(arr, el) {\n  return arr.includes(el * 100)\n}\n\n// Проверяем, содержит ли массив 4 сотни\nconsole.log(search([100, 200, 400, 500], 4)) // true\n```\n\nА теперь напишем функцию, которая будет проверять, присутствует ли искомый элемент в массиве 2 или более раз.\n\n```javascript\nfunction countTwo(arr, el) {\n  const firstIndex = arr.indexOf(el)\n  const secondIndex = arr.indexOf(el, firstIndex + 1)\n\n  return firstIndex >= 0 && secondIndex >= 0\n}\n\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 4)) // true\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 1)) // false\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 5)) // true\n```\n\nПерепишем эту функцию с использованием метода `lastIndexOf()`:\n\n```javascript\nfunction countTwo(arr, el) {\n  const firstIndex = arr.indexOf(el)\n  const secondIndex = arr.lastIndexOf(el)\n\n  return firstIndex >= 0 && secondIndex >= 0 && firstIndex !== secondIndex\n}\n\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 4)) // true\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 1)) // false\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 5)) // true\n```\n",
    "en": "JavaScript provides several ways to check if an element exists in an array. In this lesson, we will examine the `includes()`, `indexOf()` and `lastIndexOf()` methods.\n\n### Method `includes()`\n\nThe syntax of the `includes()` method looks like this\n\n```javascript\narray.includes(searchElement, fromIndex)\n```\n\n* The `searchElement` is a mandatory parameter that represents the element whose presence should be checked in the array.\n\n* `fromIndex` is an optional parameter that specifies the index of the element from which the search starts.\n\nThe `includes()` method returns `true` if the element is found in the array, and `false` if not.\n\nAlso note that the `includes()` method is sensitive to data type and case. If the item being searched for has a different data type, or case, than the array elements, the method will always return `false`.\n\nLet's look at an example:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\n\nconsole.log(fruits.includes('cherry')) // true, 'cherry' is in the array\nconsole.log(fruits.includes('Cherry')) // false, 'Cherry' is absent in the array\n```\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/boy-search.png)\n\nThe principles of `fromIndex`:\n\n* If `fromIndex` is not passed or its value is not a number, the search starts with index `0`.\n* If `fromIndex` is a positive number, the search starts from that index inclusive.\n* If `fromIndex` is a negative number, the search starts with an index equal to `array.length + fromIndex`, including that index.\n* If you pass a value that exceeds the number of elements in the array, the `includes()` method will always return `false`.\n\nConsider an example using `fromIndex`:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\nconst element = 'banana'\n\nconsole.log(fruits.includes(element, 1)) // false, check starts with 'orange', no 'banana'\nconsole.log(fruits.includes(element, -2)); // false, 3+(-2)=1, check starts with 'orange', no 'banana'\n```\n\n### The `indexOf()` method\n\nThe syntax of the `indexOf()` method looks like this\n\n```javascript\narray.indexOf(searchElement, fromIndex)\n```\n\n* The `searchElement` is a mandatory parameter that represents the element whose presence should be checked in the array.\n\n* `fromIndex` is an optional parameter that specifies the index of the element from which the search starts.\n\nThe `indexOf()` method is a method that returns the index (position) of the **first** occurrence of an element in the array. If no element is found in the array, the method returns `-1`.\n\nLet's look at an example:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\n\nconsole.log(fruits.indexOf('orange')) // 1, 'orange' is in the array, element index 'orange' = 1\nconsole.log(fruits.indexOf(' orange')) // -1, 'orange' is not in the array\nconsole.log(fruits.indexOf('banana.')) // -1, 'banana.' is missing in the array\n```\n\nIf there are several identical elements in the array, `indexOf()` will return the index of the first one found:\n\n```javascript\nconst fruits = ['orange', 'orange', 'cherry']\n\nconsole.log(fruits.indexOf('orange')) // 0, 'orange' is in the array, element index 'orange' = 0\n```\n\nThe principle of `fromIndex` is exactly the same as the `includes()` method:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\nconst element = 'orange'\n\n// search for 'orange' index starting from index 1 in the array\nconsole.log(fruits.indexOf(element, 1)) // 1, 'orange' is in the array, element index 'orange' = 1\nconsole.log(fruits.indexOf(element, 2)) // -1, 'orange' is missing when searching from 2 indexes in the array\n```\n\n### The `lastIndexOf()` method\n\nThe syntax of the `lastIndexOf()` method looks like this\n\n```javascript\narray.lastIndexOf(searchElement, fromIndex)\n```\n\n* The `searchElement` is a mandatory parameter that represents the element whose presence should be checked in the array.\n\n* `fromIndex` is an optional parameter that defines the index of the element from which the search starts. The search starts from the end of the array.\n\nThe `lastIndexOf()` method is a method that returns the index (position) of the **last** occurrence of an element in the array. If no element is found in the array, the method returns `-1`.\n\nLet's look at an example:\n\n```javascript\nconst fruits = ['banana', 'orange', 'cherry']\n\nconsole.log(fruits.indexOf('orange')) // 1, 'orange' is in the array, element index 'orange' = 1\nconsole.log(fruits.indexOf(' orange')) // -1, 'orange' is not in the array\nconsole.log(fruits.indexOf('banana.')) // -1, 'banana.' is missing in the array\n```\n\nIf there are several identical elements in the array, `indexOf()` will return the index of the first one found, starting from the end:\n\n```javascript\nconst fruits = ['orange', 'orange', 'cherry']\n\nconsole.log(fruits.indexOf('orange')) // 1, 'orange' is in the array, element index 'orange' = 1\n```\n\nLet's write a function `search` that will take an array of strings, and an element that should be checked to be in the array. The function should return the result regardless of the case.\n\n```javascript\nfunction search(arr, el) {\n  return arr.includes(el.trim().toLowerCase())\n}\n\nconsole.log(search(['a', 'd', 'lq', 'rw'], 'LQ')) // true\nconsole.log(search(['a', 'd', 'lq', 'rw'], 'LQ  ')) // true\nconsole.log(search(['a', 'd', 'lq', 'rw'], ' lQ')) // true\n```\n\nLet's rewrite `search` so that the function takes an array of numbers, and the number of hundreds:\n\n```javascript\nfunction search(arr, el) {\n  return arr.includes(el * 100)\n}\n\n// check if the array contains 4 hundreds\nconsole.log(search([100, 200, 400, 500], 4)) // true\n```\n\nNow let's write a function that will check if the sought element is present in the array 2 or more times.\n\n```javascript\nfunction countTwo(arr, el) {\n  const firstIndex = arr.indexOf(el)\n  const secondIndex = arr.indexOf(el, firstIndex + 1)\n\n  return firstIndex >= 0 && secondIndex >= 0\n}\n\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 4)) // true\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 1)) // false\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 5)) // true\n```\n\nLet's rewrite this function using the `lastIndexOf()` method:\n\n```javascript\nfunction countTwo(arr, el) {\n  const firstIndex = arr.indexOf(el)\n  const secondIndex = arr.lastIndexOf(el)\n\n  return firstIndex >= 0 && secondIndex >= 0 && firstIndex !== secondIndex\n}\n\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 4)) // true\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 1)) // false\nconsole.log(countTwo([1, 2, 5, 4, 6, 7, 4, 5], 5)) // true\n```\n",
    "es": "# Проверка наличия элемента в массиве language: es"
  },
  "video": {
    "ru": "https://youtu.be/lTd79uv7pDA",
    "en": "",
    "es": ""
  }
}