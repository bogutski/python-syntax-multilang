{
  "_id": "6696c2ca763f0712c198e771",
  "name": {
    "en": "The indices of the first and last occurrence. Arrays",
    "ru": "Индексы первого и последнего вхождения. Массивы"
  },
  "instruction": {
    "en": "The `search` function takes the following parameters:\n* `array` - array of strings\n* `str` - string\n\nYou need to find the first and last occurrence of string `str` in array `array`.\n\nIf there is one occurrence, then return the index of this occurrence.\n\nIf there are two occurrences then return array of two indexes `[indexFirst, indexLast]`.\n\nIf the string is not found in this array, return `str is not found`, where `str` is the string we were looking for.\n\nExamples of running the function:\n```javascript\nsearch(['one', 'two', 'three', 'two', 'one'], 'two'); // [1, 3]\nsearch(['one', 'two', 'three', 'two', 'one'], 'three'); // 2\nsearch(['one', 'two', 'three', 'two', 'one'], 'four'); // 'four is not found'\n```",
    "ru": "Функция `search` принимает следующие параметры:\n* `array` - массив строк\n* `str` - строка\n\nНеобходимо найти в массиве `array` первое и последнее вхождение строки `str`.\n\nЕсли вхождение одно, то вернуть индекс этого вхождения.\n\nЕсли вхождений два, то вернуть массив из двух индексов `[indexFirst, indexLast]`.\n\nЕсли строка не встречается в данном массиве, то вернуть `str is not found`, где `str` - это строка, которую мы искали.\n\nПримеры запуска функции:\n```javascript\nsearch(['one', 'two', 'three', 'two', 'one'], 'two'); // [1, 3]\nsearch(['one', 'two', 'three', 'two', 'one'], 'three'); // 2\nsearch(['one', 'two', 'three', 'two', 'one'], 'four'); // 'four is not found'\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function search(array, str) {\n    const indexFirst = array.indexOf(str);\n    const indexLast = array.lastIndexOf(str);\n    if (indexFirst === -1) {\n        return `${str} is not found`;\n    }\n    return indexFirst === indexLast ? indexFirst : [indexFirst, indexLast];\n}",
  "openTest": "it('Created function search', () => {\n    expect(search).to.be.a('function');\n});\n\nit('search([\"one\", \"two\", \"three\", \"two\", \"one\"], \"two\") should return [1, 3]', () => {\n    expect(search(['one', 'two', 'three', 'two', 'one'], 'two')).to.be.eql([1, 3]);\n});\n\nit('search([\"apple\", \"banana\", \"apple\", \"apple\", \"banana\", \"orange\"], \"apple\") should return [0, 3]', () => {\n    expect(search([\"apple\", \"banana\", \"apple\", \"apple\", \"banana\", \"orange\"], \"apple\")).to.be.eql([0, 3]);\n});\n\nit('search([\"apple\", \"banana\", \"apple\", \"apple\", \"banana\", \"orange\"], \"lemon\") should return \"lemon is not found\"', () => {\n    expect(search([\"apple\", \"banana\", \"apple\", \"apple\", \"banana\", \"orange\"], \"lemon\")).to.be.eql(\"lemon is not found\");\n});\n\nit('search([\"apple\", \"banana\", \"apple\", \"apple\", \"banana\", \"orange\"], \"orange\") should return 5', () => {\n    expect(search([\"apple\", \"banana\", \"apple\", \"apple\", \"banana\", \"orange\"], \"orange\")).to.be.eql(5);\n});\n\nit('search([\"Paris\", \"New York\", \"Deli\", \"Deli\", \"Milan\", \"London\"], \"Paris\") should return 0', () => {\n    expect(search([\"Paris\", \"New York\", \"Deli\", \"Deli\", \"Milan\", \"London\"], \"Paris\")).to.be.eql(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}