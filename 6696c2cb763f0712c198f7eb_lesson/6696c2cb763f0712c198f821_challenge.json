{
  "_id": "6696c2cb763f0712c198f821",
  "name": {
    "en": "/*",
    "ru": "Найти последний индекс элемента с длиной, равной заданному значению"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastIndexByLength`, которая принимает массив строк и число.\n\nФункция должна вернуть объект с модифицированным массивом длин строк и индексом последнего элемента, длина которого равна заданному числу.\n\nЕсли такой элемент не найден, функция должна вернуть -1 для индекса.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLastIndexByLength(['apple', 'banana', 'cherry', 'date'], 5));\n// { modifiedArray: [ 5, 6, 6, 4 ], index: 0 }\n\nconsole.log(findLastIndexByLength(['cat', 'dog', 'fish'], 3));\n// { modifiedArray: [ 3, 3, 4 ], index: 1 }\n\nconsole.log(findLastIndexByLength(['apple', 'banana', 'cherry'], 2));\n// { modifiedArray: [ 5, 6, 6 ], index: -1 }\n\nconsole.log(findLastIndexByLength(['one', 'two', 'three', 'four'], 3));\n// { modifiedArray: [ 3, 3, 5, 4 ], index: 1 }\n```"
  },
  "initialSolution": "function findLastIndexByLength(){\n\n}",
  "completedSolution": "function findLastIndexByLength(arr, length) {\n  const modified = arr.map(str => str.length)\n  return {modifiedArray: modified, index: modified.lastIndexOf(length)};\n}",
  "openTest": "it('Created function findLastIndexByLength', () => {\n  expect(findLastIndexByLength).to.be.a('function');\n});\n\nit(\"Function findLastIndexByLength should include lastIndexOf method\", () => {\n  const result = findLastIndexByLength.toString();\n  expect(result).to.include('.lastIndexOf(');\n});\n\nit('findLastIndexByLength([\"apple\", \"banana\", \"cherry\", \"date\"], 5) should return { modifiedArray: [ 5, 6, 6, 4 ], index: 0 }', function() {\n  expect(findLastIndexByLength([\"apple\", \"banana\", \"cherry\", \"date\"], 5)).to.deep.equal({ modifiedArray: [ 5, 6, 6, 4 ], index: 0 });\n});\n\nit('findLastIndexByLength([\"cat\", \"dog\", \"fish\"], 3) should return { modifiedArray: [ 3, 3, 4 ], index: 1 }', function() {\n  expect(findLastIndexByLength([\"cat\", \"dog\", \"fish\"], 3)).to.deep.equal({ modifiedArray: [ 3, 3, 4 ], index: 1 });\n});\n\nit('findLastIndexByLength([\"apple\", \"banana\", \"cherry\"], 6) should return { modifiedArray: [ 5, 6, 6 ], index: 2 }', function() {\n  expect(findLastIndexByLength([\"apple\", \"banana\", \"cherry\"], 6)).to.deep.equal({ modifiedArray: [ 5, 6, 6 ], index: 2 });\n});\n\nit('findLastIndexByLength([\"one\", \"two\", \"three\", \"four\"], 3) should return { modifiedArray: [ 3, 3, 5, 4 ], index: 1 }', function() {\n  expect(findLastIndexByLength([\"one\", \"two\", \"three\", \"four\"], 3)).to.deep.equal({ modifiedArray: [ 3, 3, 5, 4 ], index: 1 });\n});\n\nit('findLastIndexByLength([\"hello\", \"world\", \"hi\"], 4) should return { modifiedArray: [ 5, 5, 2 ], index: -1 }', function() {\n  expect(findLastIndexByLength([\"hello\", \"world\", \"hi\"], 4)).to.deep.equal({ modifiedArray: [ 5, 5, 2 ], index: -1 });\n});\n\nit('findLastIndexByLength([\"a\", \"ab\", \"abc\"], 1) should return { modifiedArray: [ 1, 2, 3 ], index: 0 }', function() {\n  expect(findLastIndexByLength([\"a\", \"ab\", \"abc\"], 1)).to.deep.equal({ modifiedArray: [ 1, 2, 3 ], index: 0 });\n});\n\nit('findLastIndexByLength([], 1) should return { modifiedArray: [], index: -1 }', function() {\n  expect(findLastIndexByLength([], 1)).to.deep.equal({ modifiedArray: [], index: -1 });\n});\n\nit('findLastIndexByLength([\"short\", \"medium\", \"longest\"], 6) should return { modifiedArray: [ 5, 6, 7 ], index: 1 }', function() {\n  expect(findLastIndexByLength([\"short\", \"medium\", \"longest\"], 6)).to.deep.equal({ modifiedArray: [ 5, 6, 7 ], index: 1 });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}