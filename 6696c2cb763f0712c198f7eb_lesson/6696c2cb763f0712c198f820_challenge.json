{
  "_id": "6696c2cb763f0712c198f820",
  "name": {
    "en": "/*",
    "ru": "Найти последний индекс элемента с учетом регистра"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastIndexIgnoreCase`, которая принимает массив строк и строку.\n\nФункция должна вернуть индекс последнего вхождения строки в массиве без учета регистра.\n\nЕсли строка не найдена, функция должна вернуть `-1`.\n\n\nПримеры запуска функции:\n```javascript\nfindLastIndexIgnoreCase(['Apple', 'banana', 'Mango', 'banana'], 'BANANA'); // 3\nfindLastIndexIgnoreCase(['Cat', 'Dog', 'Fish', 'cat'], 'CAT'); // 3\nfindLastIndexIgnoreCase(['hello', 'world', 'Hello'], 'HELLO'); // 2\nfindLastIndexIgnoreCase(['apple', 'banana', 'cherry'], 'grape'); // -1\n```"
  },
  "initialSolution": "function findLastIndexIgnoreCase(){\n\n}",
  "completedSolution": "function findLastIndexIgnoreCase(arr, str) {\n  const modified = arr.map(el => el.toLowerCase())\n  return modified.lastIndexOf(str.toLowerCase());\n}",
  "openTest": "it('Created function findLastIndexIgnoreCase', () => {\n  expect(findLastIndexIgnoreCase).to.be.a('function');\n});\n\nit(\"Function findLastIndexIgnoreCase should include lastIndexOf method\", () => {\n  const result = findLastIndexIgnoreCase.toString();\n  expect(result).to.include('.lastIndexOf(');\n});\n\nit('findLastIndexIgnoreCase([\"Apple\", \"banana\", \"Mango\", \"banana\"], \"BANANA\") should return 3', function() {\n  expect(findLastIndexIgnoreCase([\"Apple\", \"banana\", \"Mango\", \"banana\"], \"BANANA\")).to.equal(3);\n});\n\nit('findLastIndexIgnoreCase([\"Cat\", \"Dog\", \"Fish\", \"cat\"], \"CAT\") should return 3', function() {\n  expect(findLastIndexIgnoreCase([\"Cat\", \"Dog\", \"Fish\", \"cat\"], \"CAT\")).to.equal(3);\n});\n\nit('findLastIndexIgnoreCase([\"hello\", \"world\", \"Hello\"], \"HELLO\") should return 2', function() {\n  expect(findLastIndexIgnoreCase([\"hello\", \"world\", \"Hello\"], \"HELLO\")).to.equal(2);\n});\n\nit('findLastIndexIgnoreCase([\"apple\", \"banana\", \"cherry\"], \"grape\") should return -1', function() {\n  expect(findLastIndexIgnoreCase([\"apple\", \"banana\", \"cherry\"], \"grape\")).to.equal(-1);\n});\n\nit('findLastIndexIgnoreCase([\"JavaScript\", \"Java\", \"TypeScript\"], \"java\") should return 1', function() {\n  expect(findLastIndexIgnoreCase([\"JavaScript\", \"Java\", \"TypeScript\"], \"java\")).to.equal(1);\n});\n\nit('findLastIndexIgnoreCase([\"Python\", \"Ruby\", \"Perl\"], \"ruby\") should return 1', function() {\n  expect(findLastIndexIgnoreCase([\"Python\", \"Ruby\", \"Perl\"], \"ruby\")).to.equal(1);\n});\n\nit('findLastIndexIgnoreCase([\"Red\", \"Green\", \"Blue\", \"red\"], \"RED\") should return 3', function() {\n  expect(findLastIndexIgnoreCase([\"Red\", \"Green\", \"Blue\", \"red\"], \"RED\")).to.equal(3);\n});\n\nit('findLastIndexIgnoreCase([], \"anything\") should return -1', function() {\n  expect(findLastIndexIgnoreCase([], \"anything\")).to.equal(-1);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}