{
  "_id": "6696c2cb763f0712c198f827",
  "name": {
    "en": "/*",
    "ru": "Найти последний индекс модифицированной строки"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastIndexOfModifiedString`, которая принимает массив строк и слово.\n\nФункция должна вернуть объект, содержащий массив модифицированных строк и индекс последнего элемента массива, который равен данному слову после выполнения следующих преобразований:\n\n* Каждая строка массива модифицируется таким образом, что между всеми буквами должен быть пробел.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLastIndexOfModifiedString(['do g', 'car  ', '  cow'], 'c a t'));\n// { modifiedString: [ 'c a t', 'd o g', 'c a r', 'c o w' ], index: -1 }\n\nconsole.log(findLastIndexOfModifiedString(['applepie', 'banana  split', 'cherrytart', 'blueberry pie'], 'c h e r r y t a r t'));\n// {\n//   modifiedString: [\n//     'a p p l e p i e',\n//     'b a n a n a s p l i t',\n//     'c h e r r y t a r t',\n//     'b l u e b e r r y p i e'\n//   ],\n//   index: 2\n// }\n```"
  },
  "initialSolution": "function findLastIndexOfModifiedString(){\n\n}",
  "completedSolution": "function findLastIndexOfModifiedString(arr, word) {\n  const result = []\n\n  for(let str of arr){\n    let newStr = ''\n\n    for(let i = 0; i < str.length; i++){\n      if(str[i] !== ' ' && newStr.length) newStr += ' ' + str[i]\n      else if(str[i] !== ' ') newStr += str[i]\n    }\n\n    result.push(newStr)\n  }\n\n  return {modifiedString: result, index: result.lastIndexOf(word)};\n}",
  "openTest": "it('Created function findLastIndexOfModifiedString', () => {\n  expect(findLastIndexOfModifiedString).to.be.a('function');\n});\n\nit('findLastIndexOfModifiedString([\"cat\", \"do  g\", \"car  \", \"  cow\"], \"c a t\") should return { modifiedString: [ \"c a t\", \"d o g\", \"c a r\", \"c o w\" ], index: 0 }', function() {\n  expect(findLastIndexOfModifiedString([\"cat\", \"do  g\", \"car  \", \"  cow\"], \"c a t\")).to.deep.equal({ modifiedString: [ \"c a t\", \"d o g\", \"c a r\", \"c o w\" ], index: 0 });\n});\n\nit('findLastIndexOfModifiedString([\"applepie\", \"banana  split\", \"cherrytart\", \"blueberry pie\"], \"c h e r r y t a r t\") should return correct object', function() {\n  expect(findLastIndexOfModifiedString([\"applepie\", \"banana  split\", \"cherrytart\", \"blueberry pie\"], \"c h e r r y t a r t\")).to.deep.equal({\n    modifiedString: [\n      'a p p l e p i e',\n      'b a n a n a s p l i t',\n      'c h e r r y t a r t',\n      'b l u e b e r r y p i e'\n    ],\n    index: 2\n  });\n});\n\nit('findLastIndexOfModifiedString([\"hello\", \"world\", \"hi\"], \"h e l l o\") should return correct object', function() {\n  expect(findLastIndexOfModifiedString([\"hello\", \"world\", \"hi\"], \"h e l l o\")).to.deep.equal({\n    modifiedString: [ 'h e l l o', 'w o r l d', 'h i' ],\n    index: 0\n  });\n});\n\nit('findLastIndexOfModifiedString([\"one\", \"two\", \"three\"], \"t w o\") should return correct object', function() {\n  expect(findLastIndexOfModifiedString([\"one\", \"two\", \"three\"], \"t w o\")).to.deep.equal({\n    modifiedString: [ 'o n e', 't w o', 't h r e e' ],\n    index: 1\n  });\n});\n\nit('findLastIndexOfModifiedString([\"cat\", \"dog\", \"car\", \"cow\"], \"d o g\") should return correct object', function() {\n  expect(findLastIndexOfModifiedString([\"cat\", \"dog\", \"car\", \"cow\"], \"d o g\")).to.deep.equal({\n    modifiedString: [ 'c a t', 'd o g', 'c a r', 'c o w' ],\n    index: 1\n  });\n});\n\nit('findLastIndexOfModifiedString([\"apple\", \"banana\", \"cherry\"], \"b a n a n a\") should return correct object', function() {\n  expect(findLastIndexOfModifiedString([\"apple\", \"banana\", \"cherry\"], \"b a n a n a\")).to.deep.equal({\n    modifiedString: [ 'a p p l e', 'b a n a n a', 'c h e r r y' ],\n    index: 1\n  });\n});\n\nit('findLastIndexOfModifiedString([\"apple\", \"banana\", \"cherry\"], \"g r a p e\") should return correct object with index -1', function() {\n  expect(findLastIndexOfModifiedString([\"apple\", \"banana\", \"cherry\"], \"g r a p e\")).to.deep.equal({\n    modifiedString: [ 'a p p l e', 'b a n a n a', 'c h e r r y' ],\n    index: -1\n  });\n});\n\nit('findLastIndexOfModifiedString([], \"anything\") should return empty object with index -1', function() {\n  expect(findLastIndexOfModifiedString([], \"anything\")).to.deep.equal({ modifiedString: [], index: -1 });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}