{
  "_id": "6696c2cb763f0712c198f825",
  "name": {
    "en": "/*",
    "ru": "Найти последний индекс элемента после модификации массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastIndexAfterModification`, которая принимает массив и число.\n\nФункция должна создать новый массив и пройтись по массиву и\n\nФункция должна вернуть объект, содержащий модифицированный массив и индекс последнего элемента, равного заданному числу после выполнения следующих преобразований:\n\n* Если элемент массива является числом, его значение заменяется на округленный квадратный корень этого числа.\n* Все остальные элементы остаются без изменений.\n\nПример объекта: `{modifiedArray: [<elements>], lastIndex: <number>}`.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLastIndexAfterModification([10, '3', 'a', 5, 'b', 7, false, 9], 3));\n// {\n//   modifiedArray: [3, '3', 'a', 2, 'b', 3, false, 3],\n//   lastIndex: 7\n// }\n\nconsole.log(findLastIndexAfterModification([4, 16, 'hello', 25, 'world'], 4));\n// {\n//   modifiedArray: [2, 4, 'hello', 5, 'world'],\n//   lastIndex: 1\n// }\n\nconsole.log(findLastIndexAfterModification([1, 2, 3, 4, 5], 2));\n// {\n//   modifiedArray: [1, 1, 2, 2, 2],\n//   lastIndex: 4\n// }\n\nconsole.log(findLastIndexAfterModification([1, 2, 3, 4, 5], 10));\n// {\n//   modifiedArray: [1, 1, 2, 2, 2],\n//   lastIndex: -1\n// }\n```"
  },
  "initialSolution": "function findLastIndexAfterModification(){\n\n}",
  "completedSolution": "function findLastIndexAfterModification(arr, n) {\n  const modified = arr.map(el => {\n    if(typeof el === 'number') return Math.round(el ** 0.5)\n    else return el\n  })\n\n  return {modifiedArray: modified, lastIndex: modified.lastIndexOf(n)};\n}",
  "openTest": "it('Created function findLastIndexAfterModification', () => {\n  expect(findLastIndexAfterModification).to.be.a('function');\n});\n\nit('findLastIndexAfterModification([10, \"3\", \"a\", 5, \"b\", 7, false, 9], 3) should return { modifiedArray: [3, \"3\", \"a\", 2, \"b\", 3, false, 3], lastIndex: 7 }', function() {\n  expect(findLastIndexAfterModification([10, \"3\", \"a\", 5, \"b\", 7, false, 9], 3)).to.deep.equal({ modifiedArray: [3, \"3\", \"a\", 2, \"b\", 3, false, 3], lastIndex: 7 });\n});\n\nit('findLastIndexAfterModification([4, 16, \"hello\", 25, \"world\"], 4) should return { modifiedArray: [2, 4, \"hello\", 5, \"world\"], lastIndex: 1 }', function() {\n  expect(findLastIndexAfterModification([4, 16, \"hello\", 25, \"world\"], 4)).to.deep.equal({ modifiedArray: [2, 4, \"hello\", 5, \"world\"], lastIndex: 1 });\n});\n\nit('findLastIndexAfterModification([1, 2, 3, 4, 5], 2) should return { modifiedArray: [1, 1, 2, 2, 2], lastIndex: 4 }', function() {\n  expect(findLastIndexAfterModification([1, 2, 3, 4, 5], 2)).to.deep.equal({ modifiedArray: [1, 1, 2, 2, 2], lastIndex: 4 });\n});\n\nit('findLastIndexAfterModification([1, 2, 3, 4, 5], 10) should return { modifiedArray: [1, 1, 2, 2, 2], lastIndex: -1 }', function() {\n  expect(findLastIndexAfterModification([1, 2, 3, 4, 5], 10)).to.deep.equal({ modifiedArray: [1, 1, 2, 2, 2], lastIndex: -1 });\n});\n\nit('findLastIndexAfterModification([9, \"text\", 25, true, 4, 36], 6) should return { modifiedArray: [3, \"text\", 5, true, 2, 6], lastIndex: 5 }', function() {\n  expect(findLastIndexAfterModification([9, \"text\", 25, true, 4, 36], 6)).to.deep.equal({ modifiedArray: [3, \"text\", 5, true, 2, 6], lastIndex: 5 });\n});\n\nit('findLastIndexAfterModification([49, \"seven\", 81, 10], 7) should return { modifiedArray: [7, \"seven\", 9, 3], lastIndex: 0 }', function() {\n  expect(findLastIndexAfterModification([49, \"seven\", 81, 10], 7)).to.deep.equal({ modifiedArray: [7, \"seven\", 9, 3], lastIndex: 0 });\n});\n\nit('findLastIndexAfterModification([16, 8, 64, 2], 4) should return { modifiedArray: [4, 3, 8, 1], lastIndex: 0 }', function() {\n  expect(findLastIndexAfterModification([16, 8, 64, 2], 4)).to.deep.equal({ modifiedArray: [4, 3, 8, 1], lastIndex: 0 });\n});\n\nit('findLastIndexAfterModification([], 1) should return { modifiedArray: [], lastIndex: -1 }', function() {\n  expect(findLastIndexAfterModification([], 1)).to.deep.equal({ modifiedArray: [], lastIndex: -1 });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}