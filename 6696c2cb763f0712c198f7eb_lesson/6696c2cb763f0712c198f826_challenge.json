{
  "_id": "6696c2cb763f0712c198f826",
  "name": {
    "en": "/*",
    "ru": "Найти индексы первого и последнего вхождения буквы в каждой строке массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLetterIndices`, которая принимает массив строк и букву.\n\nФункция должна вернуть объект, где:\n * ключами являются строки,\n * значениями — объект с индексом строки и индексами первого и последнего вхождения буквы в этой строке.\n\nЕсли буква не найдена, вместо индекса будет строка: `Not found`.\n\nОбратите внимание, ключи в объекте зависят от того сколько вхождений буквы в строке.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLetterIndices(['apple', 'banana', 'apricot', 'blueberry'], 'a'));\n// {\n//   apple: { indexOfString: 0, indexOfLetter: 0 },\n//   banana: { indexOfString: 1, firstIndexOfLetter: 1, lastIndexOfLetter: 5 },\n//   apricot: { indexOfString: 2, indexOfLetter: 0 },\n//   blueberry: { indexOfString: 3, indexOfLetter: 'Not found' }\n// }\n\nconsole.log(findLetterIndices(['cat', 'dog', 'car', 'cow'], 'o'));\n// {\n//   cat: { indexOfString: 0, indexOfLetter: 'Not found' },\n//   dog: { indexOfString: 1, indexOfLetter: 1 },\n//   car: { indexOfString: 2, indexOfLetter: 'Not found' },\n//   cow: { indexOfString: 3, indexOfLetter: 1 }\n// }\n\nconsole.log(findLetterIndices(['hello', 'world', 'hi'], 'l'));\n// {\n//   hello: { indexOfString: 0, firstIndexOfLetter: 2, lastIndexOfLetter: 3 },\n//   world: { indexOfString: 1, indexOfLetter: 3 },\n//   hi: { indexOfString: 2, indexOfLetter: 'Not found' }\n// }\n\nconsole.log(findLetterIndices(['one', 'two', 'three'], 'z'));\n// {\n//   one: { indexOfString: 0, indexOfLetter: 'Not found' },\n//   two: { indexOfString: 1, indexOfLetter: 'Not found' },\n//   three: { indexOfString: 2, indexOfLetter: 'Not found' }\n// }\n```"
  },
  "initialSolution": "function findLetterIndices(){\n\n}",
  "completedSolution": "function findLetterIndices(arr, letter) {\n  let result = {}\n\n  arr.forEach((str, i) => {\n    const firstIndexOfLetter = str.indexOf(letter)\n    const lastIndexOfLetter = str.lastIndexOf(letter)\n\n    if(firstIndexOfLetter === -1) result[str] = {indexOfString: i, indexOfLetter: 'Not found'}\n    else if(firstIndexOfLetter === lastIndexOfLetter) result[str] = {indexOfString: i, indexOfLetter: firstIndexOfLetter}\n    else result[str] = {indexOfString: i, firstIndexOfLetter, lastIndexOfLetter}\n  })\n\n  return result;\n}",
  "openTest": "it('Created function findLetterIndices', () => {\n  expect(findLetterIndices).to.be.a('function');\n});\n\nit('findLetterIndices([\"apple\", \"banana\", \"apricot\", \"blueberry\"], \"a\") should return correct object', function() {\n  expect(findLetterIndices([\"apple\", \"banana\", \"apricot\", \"blueberry\"], \"a\")).to.deep.equal({\n    apple: { indexOfString: 0, indexOfLetter: 0 },\n    banana: { indexOfString: 1, firstIndexOfLetter: 1, lastIndexOfLetter: 5 },\n    apricot: { indexOfString: 2, indexOfLetter: 0 },\n    blueberry: { indexOfString: 3, indexOfLetter: 'Not found' }\n  });\n});\n\nit('findLetterIndices([\"cat\", \"dog\", \"car\", \"cow\"], \"o\") should return correct object', function() {\n  expect(findLetterIndices([\"cat\", \"dog\", \"car\", \"cow\"], \"o\")).to.deep.equal({\n    cat: { indexOfString: 0, indexOfLetter: 'Not found' },\n    dog: { indexOfString: 1, indexOfLetter: 1 },\n    car: { indexOfString: 2, indexOfLetter: 'Not found' },\n    cow: { indexOfString: 3, indexOfLetter: 1 }\n  });\n});\n\nit('findLetterIndices([\"hello\", \"world\", \"hi\"], \"l\") should return correct object', function() {\n  expect(findLetterIndices([\"hello\", \"world\", \"hi\"], \"l\")).to.deep.equal({\n    hello: { indexOfString: 0, firstIndexOfLetter: 2, lastIndexOfLetter: 3 },\n    world: { indexOfString: 1, indexOfLetter: 3 },\n    hi: { indexOfString: 2, indexOfLetter: 'Not found' }\n  });\n});\n\nit('findLetterIndices([\"one\", \"two\", \"three\"], \"z\") should return correct object', function() {\n  expect(findLetterIndices([\"one\", \"two\", \"three\"], \"z\")).to.deep.equal({\n    one: { indexOfString: 0, indexOfLetter: 'Not found' },\n    two: { indexOfString: 1, indexOfLetter: 'Not found' },\n    three: { indexOfString: 2, indexOfLetter: 'Not found' }\n  });\n});\n\nit('findLetterIndices([\"apple\", \"banana\", \"apricot\", \"blueberry\"], \"e\") should return correct object', function() {\n  expect(findLetterIndices([\"apple\", \"banana\", \"apricot\", \"blueberry\"], \"e\")).to.deep.equal({\n    apple: { indexOfString: 0, indexOfLetter: 4 },\n    banana: { indexOfString: 1, indexOfLetter: 'Not found' },\n    apricot: { indexOfString: 2, indexOfLetter: 'Not found' },\n    blueberry: { indexOfString: 3, firstIndexOfLetter: 3, lastIndexOfLetter: 5 }\n  });\n});\n\nit('findLetterIndices([\"cat\", \"dog\", \"car\", \"cow\"], \"c\") should return correct object', function() {\n  expect(findLetterIndices([\"cat\", \"dog\", \"car\", \"cow\"], \"c\")).to.deep.equal({\n    cat: { indexOfString: 0, indexOfLetter: 0 },\n    dog: { indexOfString: 1, indexOfLetter: 'Not found' },\n    car: { indexOfString: 2, indexOfLetter: 0 },\n    cow: { indexOfString: 3, indexOfLetter: 0 }\n  });\n});\n\nit('findLetterIndices([\"hello\", \"world\", \"hi\"], \"h\") should return correct object', function() {\n  expect(findLetterIndices([\"hello\", \"world\", \"hi\"], \"h\")).to.deep.equal({\n    hello: { indexOfString: 0, indexOfLetter: 0 },\n    world: { indexOfString: 1, indexOfLetter: 'Not found' },\n    hi: { indexOfString: 2, indexOfLetter: 0 }\n  });\n});\n\nit('findLetterIndices([], \"a\") should return empty object', function() {\n  expect(findLetterIndices([], \"a\")).to.deep.equal({});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}