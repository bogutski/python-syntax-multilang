{
  "_id": "6696c2cb763f0712c198f2cd",
  "name": {
    "en": "Count the number of elements of each type in the array",
    "ru": "Посчитать количество элементов каждого типа в массиве"
  },
  "instruction": {
    "en": "The `countEachType` function takes an array and returns an object with the number of elements of each type in the array.\n\nThere can be elements of three types in the array: `number`, `string` and `boolean`.\n\nThe object that the function returns must have three properties: `number`, `string`, and `boolean`.\nThe values of these properties must be numbers that correspond to the number of elements of each type in the array.\n\nIf the array is empty, the function must return the string \"Array is empty\".\n\nExamples of how to run the function:\n```javascript\ncountEachType([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) // {number: 10, string: 0, boolean: 0}\ncountEachType([1, \"a\"]) // {number: 1, string: 1, boolean: 0}\ncountEachType([true, false, true, false]) // {number: 0, string: 0, boolean: 4}\ncountEachType([]) // \"Array is empty\"",
    "ru": "Функция `countEachType` принимает массив и возвращает объект с количеством элементов каждого типа в массиве.\n\nВ массиве могут быть элементы трех типов: `number`, `string` и `boolean`.\n\nОбъект, который возвращает функция, должен иметь три свойства: `number`, `string` и `boolean`.\nЗначениями этих свойств должны быть числа, которые соответствуют количеству элементов каждого типа в массиве.\n\nЕсли массив пустой, то функция должна вернуть строку \"Array is empty\".\n\nПримеры запуска функции:\n```javascript\ncountEachType([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) // {number: 10, string: 0, boolean: 0}\ncountEachType([1, \"a\"]) // {number: 1, string: 1, boolean: 0}\ncountEachType([true, false, true, false]) // {number: 0, string: 0, boolean: 4}\ncountEachType([]) // \"Array is empty\""
  },
  "initialSolution": "fun",
  "completedSolution": "function countEachType(arr) {\n  if (!arr.length) return 'Array is empty'\n  const obj = {};\n  obj.number = 0;\n  obj.string = 0;\n  obj.boolean = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (typeof arr[i] === 'number') obj.number++;\n    if (typeof arr[i] === 'string') obj.string++;\n    if (typeof arr[i] === 'boolean') obj.boolean++;\n  }\n  return obj;\n}",
  "openTest": "it('Created function countEachType', () => {\n  expect(countEachType).to.be.a('function');\n});\n\nit('countEachType([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) should return {number: 10, string: 0, boolean: 0}', () => {\n  expect(countEachType([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])).to.deep.equal({number: 10, string: 0, boolean: 0});\n});\n\nit('countEachType([1, \"a\"]) should return {number: 1, string: 1, boolean: 0}', () => {\n  expect(countEachType([1, \"a\"])).to.deep.equal({number: 1, string: 1, boolean: 0});\n});\n\nit('countEachType([true, false, true, false]) should return {number: 0, string: 0, boolean: 4}', () => {\n  expect(countEachType([true, false, true, false])).to.deep.equal({number: 0, string: 0, boolean: 4});\n});\n\nit('countEachType([1, \"a\", true, false]) should return {number: 1, string: 1, boolean: 2}', () => {\n  expect(countEachType([1, \"a\", true, false])).to.deep.equal({number: 1, string: 1, boolean: 2});\n});\n\nit('countEachType([1, \"a\", true, false, 2, \"b\", true, false]) should return {number: 2, string: 2, boolean: 4}', () => {\n  expect(countEachType([1, \"a\", true, false, 2, \"b\", true, false])).to.deep.equal({number: 2, string: 2, boolean: 4});\n});\n\nit('countEachType([\"a\", \"b\", \"c\"]) should return {number: 0, string: 3, boolean: 0}', () => {\n  expect(countEachType([\"a\", \"b\", \"c\"])).to.deep.equal({number: 0, string: 3, boolean: 0});\n});\n\nit('countEachType([]) should return \"Array is empty\"', () => {\n  expect(countEachType([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}