{
  "_id": "6696c2cb763f0712c198f2d1",
  "name": {
    "en": "Count the number of occurrences of each element in the array",
    "ru": "Посчитать количество вхождений каждого элемента в массив"
  },
  "instruction": {
    "en": "The function `countEachEl` takes an array of strings and returns an object where the keys are the elements of the array and the values are the number of times these elements appear in the array.\n\nExamples of function execution:\n```javascript\ncountEachEl([\"hello\", \"js\", \"js\"]) // {hello: 1, js: 2}\ncountEachEl([\"a\", \"b\", \"c\", \"a\", \"c\", \"a\", \"x\"]) // {a: 3, b: 1, c: 2, x: 1}\n```",
    "ru": "Функция `countEachEl` принимает массив строк и возвращает объект, в котором ключами являются элементы массива, а значениями - количество повторений этих элементов в массиве.\n\nПримеры запуска функции:\n```javascript\ncountEachEl([\"hello\", \"js\", \"js\"]) // {hello: 1, js: 2}\ncountEachEl([\"a\", \"b\", \"c\", \"a\", \"c\", \"a\", \"x\"]) // {a: 3, b: 1, c: 2, x: 1}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function countEachEl(arr) {\n    let count = {};\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}",
  "openTest": "it('Created function countEachEl', () => {\n    expect(countEachEl).to.be.a('function');\n});\n\nit('countEachEl([\"hello\", \"js\", \"js\"]) should return {hello: 1, js: 2}', () => {\n    expect(countEachEl([\"hello\", \"js\", \"js\"])).to.deep.equal({hello: 1, js: 2});\n});\n\nit('countEachEl([\"a\", \"b\", \"c\", \"a\", \"c\", \"a\", \"x\"]) should return {a: 3, b: 1, c: 2, x: 1}', () => {\n    expect(countEachEl([\"a\", \"b\", \"c\", \"a\", \"c\", \"a\", \"x\"])).to.deep.equal({a: 3, b: 1, c: 2, x: 1});\n});\n\n//array of strings\nit('countEachEl([\"a\", \"b\", \"a\", \"a\", \"bc\", \"b\", \"c\"]) should return {a: 3, b: 2, c: 1, bc: 1}', () => {\n    expect(countEachEl([\"a\", \"b\", \"a\", \"a\", \"bc\", \"b\", \"c\"])).to.deep.equal({a: 3, b: 2, c: 1, bc: 1});\n});\n\nit('countEachEl([\"js\", \"practice\", \"js\", \"code\", \"practice\", \"code\", \"code\"]) should return {js: 2, practice: 2, code: 3}', () => {\n    expect(countEachEl([\"js\", \"practice\", \"js\", \"code\", \"practice\", \"code\", \"code\"])).to.deep.equal({js: 2, practice: 2, code: 3});\n});\n\nit('countEachEl([\"dog\", \"cat\", \"dog\", \"cow\", \"cow\", \"cow\"]) should return {dog: 2, cat: 1, cow: 3}', () => {\n    expect(countEachEl([\"dog\", \"cat\", \"dog\", \"cow\", \"cow\", \"cow\"])).to.deep.equal({dog: 2, cat: 1, cow: 3});\n});\n\nit('countEachEl([\"\"]) should return {\"\": 1}', () => {\n    expect(countEachEl([\"\"])).to.deep.equal({\"\": 1});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}