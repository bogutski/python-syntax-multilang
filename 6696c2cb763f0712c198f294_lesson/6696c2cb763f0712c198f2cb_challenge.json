{
  "_id": "6696c2cb763f0712c198f2cb",
  "name": {
    "en": "Counting the number of even elements",
    "ru": "Подсчет количество четных элементов"
  },
  "instruction": {
    "en": "The function `countEachEvenEl` takes an array of numbers.\n\nThe function should return an object, where the keys are the even elements of the array, and the values are the number of their occurrences in the array.\n\nThe function will not receive zero or an empty array.\n\nFix the errors for the function to work correctly.\n\nExamples of function calls:\n```javascript\ncountEachEvenEl([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // {2: 1, 4: 1, 6: 1, 8: 1, 10: 1}\ncountEachEvenEl([2, 2, 4, 4, 4, 4]); // {2: 2, 4: 4}\ncountEachEvenEl([1, 1, 1, 1, 1, 1]); // {}\n```",
    "ru": "Функция `countEachEvenEl` принимает массив чисел.\n\nФункция должна возвращать объект, в котором ключами будут четные элементы массива, а значениями - количество их повторений в массиве.\n\nВ функцию не будет приходить ноль или пустой массив.\n\nИсправьте ошибки, чтобы функция работала правильно.\n\nПримеры запуска функции:\n```javascript\ncountEachEvenEl([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // {2: 1, 4: 1, 6: 1, 8: 1, 10: 1}\ncountEachEvenEl([2, 2, 4, 4, 4, 4]); // {2: 2, 4: 4}\ncountEachEvenEl([1, 1, 1, 1, 1, 1]); // {}\n```"
  },
  "initialSolution": "Function countEachEvenEl([arr]) {\n  const result = empty.object;\n  for (let i = 0; i <= arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      result[arr[i]] = (result[arr[i]] || 0) + 1;\n    }\n  }\n  return 'result';\n}",
  "completedSolution": "function countEachEvenEl(arr) {\n  const result = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      result[arr[i]] = (result[arr[i]] || 0) + 1;\n    }\n  }\n  return result;\n}",
  "openTest": "it('Created function countEachEvenEl', () => {\n  expect(countEachEvenEl).to.be.a('function');\n});\n\nit('countEachEvenEl([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) should return {2: 1, 4: 1, 6: 1, 8: 1, 10: 1}', () => {\n  expect(countEachEvenEl([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])).to.deep.equal({2: 1, 4: 1, 6: 1, 8: 1, 10: 1});\n});\n\nit('countEachEvenEl([2, 2, 4, 4, 4, 4]) should return {2: 2, 4: 4}', () => {\n  expect(countEachEvenEl([2, 2, 4, 4, 4, 4])).to.deep.equal({2: 2, 4: 4});\n});\n\nit('countEachEvenEl([1, 1, 1, 1, 1, 1]) should return {}', () => {\n  expect(countEachEvenEl([1, 1, 1, 1, 1, 1])).to.deep.equal({});\n});\n\nit('countEachEvenEl([1, 3, 5, 7, 9]) should return {}', () => {\n  expect(countEachEvenEl([1, 3, 5, 7, 9])).to.deep.equal({});\n});\n\nit('countEachEvenEl([200, 200, 200, 200, 200, 200]) should return {200: 6}', () => {\n  expect(countEachEvenEl([200, 200, 200, 200, 200, 200])).to.deep.equal({200: 6});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}