{
  "_id": "6696c2cb763f0712c198f2ce",
  "name": {
    "en": "List all items by data type",
    "ru": "Перечислить все элементы по типам данных"
  },
  "instruction": {
    "en": "The function `elementListByType` takes an array with different data types and returns an object with three properties: `number`, `string`, and `boolean`.\n\nElements with other data types should not be included in the resulting object.\n\nEach property contains a string in which all elements of the corresponding type are written separated by spaces.\n\nIf there are no elements of the corresponding type in the array, the property should be an empty string.\n\nThere should be no space at the end of each line.\n\nExamples of function execution:\n```javascript\nelementListByType([1, 2, 3, \"a\", \"b\", \"c\", true, false]) // {number: \"1 2 3\", string: \"a b c\", boolean: \"true false\"}\nelementListByType([NaN, \"\", null, 2<1]) // {number: \"NaN\", string: \"\", boolean: \"false\"}\nelementListByType([]) // {number: \"\", string: \"\", boolean: \"\"}\n```",
    "ru": "Функция `elementListByType` принимает массив с разными типами данных и возвращает объект с тремя свойствами: `number`, `string` и `boolean`.\n\nЭлементы с другими типами данных не должны попасть в результирующий объект.\n\nКаждое свойство содержит строку, в которой через пробел записаны все элементы массива соответствующего типа.\n\nЕсли в массиве нет элементов соответствующего типа, то в свойстве должна быть пустая строка.\n\nВ конце каждой строки не должно быть пробела.\n\nПримеры запуска функции:\n```javascript\nelementListByType([1, 2, 3, \"a\", \"b\", \"c\", true, false]) // {number: \"1 2 3\", string: \"a b c\", boolean: \"true false\"}\nelementListByType([NaN, \"\", null, 2<1]) // {number: \"NaN\", string: \"\", boolean: \"false\"}\nelementListByType([]) // {number: \"\", string: \"\", boolean: \"\"}\n```"
  },
  "initialSolution": "function elementListByType",
  "completedSolution": "function elementListByType(arr) {\n  const obj = {};\n  obj.number = '';\n  obj.string = '';\n  obj.boolean = '';\n  for (let i = 0; i < arr.length; i++) {\n    if (typeof arr[i] === 'number') {\n      obj.number += arr[i] + ' ';\n    } else if (typeof arr[i] === 'string') {\n      obj.string += arr[i] + ' ';\n    } else if (typeof arr[i] === 'boolean') {\n      obj.boolean += arr[i] + ' '\n    }\n  }\n  obj.number = obj.number.trim();\n  obj.string = obj.string.trim();\n  obj.boolean = obj.boolean.trim();\n  return obj;\n}",
  "openTest": "it('Created function elementListByType', () => {\n  expect(elementListByType).to.be.a('function');\n});\n\nit('elementListByType([1, 2, 3, \"a\", \"b\", \"c\", true, false]) should return {number: \"1 2 3\", string: \"a b c\", boolean: \"true false\"}', () => {\n  expect(elementListByType([1, 2, 3, \"a\", \"b\", \"c\", true, false])).to.deep.equal({number: \"1 2 3\", string: \"a b c\", boolean: \"true false\"});\n});\n\nit('elementListByType([1, 2, 3, \"a\", \"b\", \"c\", true, false, 4, 5, 6, \"d\", \"e\", \"f\", true, false]) should return {number: \"1 2 3 4 5 6\", string: \"a b c d e f\", boolean: \"true false true false\"}', () => {\n  expect(elementListByType([1, 2, 3, \"a\", \"b\", \"c\", true, false, 4, 5, 6, \"d\", \"e\", \"f\", true, false])).to.deep.equal({number: \"1 2 3 4 5 6\", string: \"a b c d e f\", boolean: \"true false true false\"});\n});\n\nit('elementListByType([NaN, \"\", null, 2<1]) should return {number: \"NaN\", string: \"\", boolean: \"false\"}', () => {\n  expect(elementListByType([NaN, \"\", null, 2<1])).to.deep.equal({number: \"NaN\", string: \"\", boolean: \"false\"});\n});\n\nit('elementListByType([]) should return {number: \"\", string: \"\", boolean: \"\"}', () => {\n  expect(elementListByType([])).to.deep.equal({number: \"\", string: \"\", boolean: \"\"});\n});\n\nit('elementListByType([2>1, 2<1, 2===2]) should return {number: \"\", string: \"\", boolean: \"true false true\"}', () => {\n  expect(elementListByType([2>1, 2<1, 2===2])).to.deep.equal({number: \"\", string: \"\", boolean: \"true false true\"});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}