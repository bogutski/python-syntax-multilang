{
  "_id": "6696c2cb763f0712c198f2d0",
  "name": {
    "en": "Counting the number of elements of different types in an array",
    "ru": "Подсчет количества элементов разных типов в массиве"
  },
  "instruction": {
    "en": "The function `countByType` takes an array with different data types.\n\nIt is necessary to count the occurrences of each element for three data types: `number`, `string`, and `boolean`.\n\nElements of other data types are not considered.\n\nThe function should return an array with 4 elements:\n* an object\n* an array of all numbers from the original array,\n* an array of all strings,\n* an array of all booleans\n\nThe object should have the following structure:\n* number: the count of all number elements,\n* string: the count of all string elements,\n* boolean: the count of all boolean elements\n\nFix the errors in the code to make the function work correctly.\n\nTry to understand the code and replicate it.\n\nExample function calls:\n```javascript\ncountByType([1, 2, 3, \"a\", \"b\", \"c\", true, false, true]) // [{number: 3, string: 3, boolean: 3}, [1, 2, 3], [\"a\", \"b\", \"c\"], [true, false, true]]\ncountByType([undefined, undefined, undefined]) // [{number: 0, string: 0, boolean: 0}, [], [], []]\ncountByType([1, 2, 3, false, true]) // [{number: 3, string: 0, boolean: 2}, [1, 2, 3], [], [false, true]]\n```",
    "ru": "Функция `countByType` принимает массив с разными типами данных.\n\nНеобходимо посчитать количество вхождений каждого элемента для трех типов данных `number`, `string` и `boolean`.\n\nЭлементы других типов данных не учитываются.\n\nФункция должна вернуть массив с 4 элементами:\n* объект\n* массив всех чисел из первоначального массива,\n* массив всех строк,\n* массив всех boolean\n\nОбъект должен иметь следующую структуру:\n* number: количество всех элементов чисел,\n* string: количество всех элементов строк,\n* boolean: количество всех элементов boolean\n\nИсправьте ошибки в коде, чтобы функция работала правильно.\n\nПостарайтесь понять код и повторить его.\n\nПример запуска функции:\n```javascript\ncountByType([1, 2, 3, \"a\", \"b\", \"c\", true, false, true]) // [{number: 3, string: 3, boolean: 3}, [1, 2, 3], [\"a\", \"b\", \"c\"], [true, false, true]]\ncountByType([undefined, undefined, undefined]) // [{number: 0, string: 0, boolean: 0}, [], [], []]\ncountByType([1, 2, 3, false, true]) // [{number: 3, string: 0, boolean: 2}, [1, 2, 3], [], [false, true]]\n```"
  },
  "initialSolution": "function countByType([arr]) {\n  const number=[empty];\n  const string=[empty];\n  const boolean=[empty];\n  const obj = {};\n  obj.number = 0;\n  obj.string = 0;\n  obj.boolean = 0;\n\n  for (let i = 0, i <= arr.length, i+1) {\n\n    if (typeof arr[i] = 'number') {\n      number.push(arr[i]); obj[typeof arr[i]]++;\n    } else if (typeof arr[i] = 'string') {\n     obj[typeof arr[i]]++; string.push(arr[i])\n    } else if (typeof arr[i] = 'boolean') {\n    obj[typeof arr[i]]++; boolean.push(arr[i])\n    }\n  }\n  return [obj, number, string, boolean];\n}",
  "completedSolution": "function countByType(arr) {\n  const number=[];\n  const string=[];\n  const boolean=[];\n  const obj = {};\n  obj.number = 0;\n  obj.string = 0;\n  obj.boolean = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n\n    if (typeof arr[i] === 'number') {\n      number.push(arr[i]); obj[typeof arr[i]]++;\n    } else if (typeof arr[i] === 'string') {\n      obj[typeof arr[i]]++; string.push(arr[i])\n    } else if (typeof arr[i] === 'boolean') {\n      obj[typeof arr[i]]++; boolean.push(arr[i])\n    }\n  }\n  return [obj, number, string, boolean];\n}",
  "openTest": "it('Created function countByType', () => {\n  expect(countByType).to.be.a('function');\n});\n\nit('countByType([1, 2, 3, \"a\", \"b\", \"c\", true, false, true]) should return [{\"boolean\": 3, \"number\": 3, \"string\": 3}, [1, 2, 3], [\"a\", \"b\", \"c\"], [true, false, true]]', () => {\n  expect(countByType([1, 2, 3, \"a\", \"b\", \"c\", true, false, true])).to.deep.equal([{\"boolean\": 3, \"number\": 3, \"string\": 3}, [1, 2, 3], [\"a\", \"b\", \"c\"], [true, false, true]]);\n});\n\nit('countByType([undefined, undefined, undefined]) should return [{number: 0, string: 0, boolean: 0}, [], [], []] ', () => {\n  expect(countByType([undefined, undefined, undefined])).to.deep.equal([{number: 0, string: 0, boolean: 0}, [], [], []]);\n});\n\nit('countByType([]) should return [{number: 0, string: 0, boolean: 0}, [], [], []]', () => {\n  expect(countByType([])).to.deep.equal([{number: 0, string: 0, boolean: 0}, [], [], []]);\n});\n\nit('countByType([1, 2, 3, false, true]) should return [{number: 3, string: 0, boolean: 2}, [1, 2, 3], [], [false, true]]', () => {\n  expect(countByType([1, 2, 3, false, true])).to.deep.equal([{number: 3, string: 0, boolean: 2}, [1, 2, 3], [], [false, true]]);\n});\n\nit('countByType([\"a\", \"b\", \"c\"]) should return [{number: 0, string: 3, boolean: 0}, [], [\"a\", \"b\", \"c\"], []]', () => {\n  expect(countByType([\"a\", \"b\", \"c\"])).to.deep.equal([{number: 0, string: 3, boolean: 0}, [], [\"a\", \"b\", \"c\"], []]);\n});\n\nit('countByType([true, false, true]) should return [{number: 0, string: 0, boolean: 3}, [], [], [true, false, true]]', () => {\n  expect(countByType([true, false, true])).to.deep.equal([{number: 0, string: 0, boolean: 3}, [], [], [true, false, true]]);\n});\n\nit('countByType([1, 2, 3]) should return [{number: 3, string: 0, boolean: 0}, [1, 2, 3], [], []]', () => {\n  expect(countByType([1, 2, 3])).to.deep.equal([{number: 3, string: 0, boolean: 0}, [1, 2, 3], [], []]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}