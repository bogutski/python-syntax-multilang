{
  "_id": "6696c2cb763f0712c198f5fa",
  "content": {
    "ru": "В последних обновлениях стандарта ECMAScript 2023, в JavaScript был добавлен новый метод для работы с массивами — `toSorted()`. \n\nЭтот метод обеспечивает безопасный способ сортировки массивов, при этом не изменяя исходный массив. \n\n\n### Определение и Синтаксис\n\nМетод `toSorted()` возвращает новый массив, который является отсортированной копией исходного массива, при этом сам исходный массив остаётся без изменений.\n\n\n#### Синтаксис метода следующий:\n\n```javascript\nlet newArray = oldArray.toSorted(compareFunction);\n```\n\n`compareFunction` (необязательный) — функция, определяющая порядок сортировки элементов. Если функция не предоставлена, сортировка происходит по умолчанию в порядке возрастания значений элементов.\n\n\n### Отличия от `sort()`\n\nГлавное отличие `toSorted()` от `sort()` заключается в том, что `toSorted()` не изменяет исходный массив, тогда как `sort()` модифицирует исходный массив и возвращает его же в отсортированном виде.\n\n\n### Примеры использования\n\nРассмотрим несколько примеров использования `toSorted()`:\n\nБазовый пример:\n```javascript\nconst numbers = [5, 3, 9, 1];\nconst sortedNumbers = numbers.toSorted();\n\nconsole.log(numbers);        // Вывод: [5, 3, 9, 1]\nconsole.log(sortedNumbers);  // Вывод: [1, 3, 5, 9]\n```\n\nЗдесь видно, что исходный массив `numbers` остался неизменным после сортировки.\n\nПример с функцией сравнения:\n```javascript\nconst items = [{ name: \"Tomato\", price: 50 }, { name: \"Potato\", price: 30 }];\nconst sortedItems = items.toSorted((a, b) => a.price - b.price);\n\nconsole.log(sortedItems);\n// Вывод: [{ name: \"Potato\", price: 30 }, { name: \"Tomato\", price: 50 }]\n```\n\nВ этом случае массив сортируется по цене продуктов в порядке возрастания.\n\n\nИспользование `toSorted()` рекомендуется в сценариях, где требуется сохранение исходного порядка данных или при работе с неизменяемыми структурами данных. \n\nТакой подход может быть особенно актуален в функциональном программировании и при разработке сложных пользовательских интерфейсов.",
    "en": "# Array.prototype.toSorted() – возвращает отсортированный массив language: en",
    "es": "# Array.prototype.toSorted() – возвращает отсортированный массив language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}