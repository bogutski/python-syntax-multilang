{
  "_id": "6696c2cb763f0712c198f634",
  "name": {
    "en": "/*",
    "ru": "Сортировка массива с числами и строками"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortMixedArray`, которая принимает массив, включающий как числовые, так и строковые элементы, представляющие числа.\n\nФункция должна преобразовывать все строковые элементы в числа, затем сортировать весь массив по возрастанию и возвращать новый, отсортированный массив чисел.\n\n\nПримеры запуска функции:\n```javascript\nsortMixedArray([4, 6, 2, '3', 0, '5', '1']); // [0, 1, 2, 3, 4, 5, 6]\nsortMixedArray([10, '-15', '20', -5, '0']); // [-15, -5, 0, 10, 20]\nsortMixedArray(['007', 3, '2', '0001']); //  [1, 2, 3, 7]\n```"
  },
  "initialSolution": "function sortMixedArray(){\n\n}",
  "completedSolution": "function sortMixedArray(arr) {\n  return arr.map(el => +el).toSorted((a, b) => a - b);\n}",
  "openTest": "Array.prototype.toSorted = function(compareFunction){\n  const newArray = this.slice()\n  if(compareFunction) return newArray.sort(compareFunction)\n  else return newArray.sort()\n}\n\nit('Created function sortMixedArray', () => {\n  expect(sortMixedArray).to.be.a('function');\n});\n\nit('Function sortMixedArray should include method toSorted()', () => {\n  const res = sortMixedArray.toString()\n  expect(res).to.include('.toSorted(')\n});\n\nit('Function sortMixedArray should not include method sort()', () => {\n  const res = sortMixedArray.toString()\n  expect(res).to.not.include('.sort(')\n});\n\nit(\"sortMixedArray should not modify the original array\", () => {\n  const originalArray = [4, '6', 2, '3', 0, '5', '1'];\n  sortMixedArray(originalArray);\n  expect(originalArray).to.deep.equal([4, '6', 2, '3', 0, '5', '1']);\n});\n\nit(\"sortMixedArray([4, 6, 2, '3', 0, '5', '1']) should return [0, 1, 2, 3, 4, 5, 6]\", () => {\n  expect(sortMixedArray([4, 6, 2, '3', 0, '5', '1'])).to.deep.equal([0, 1, 2, 3, 4, 5, 6]);\n});\n\nit(\"sortMixedArray(['10', 9, '8', 7]) should return [7, 8, 9, 10]\", () => {\n  expect(sortMixedArray(['10', 9, '8', 7])).to.deep.equal([7, 8, 9, 10]);\n});\n\nit(\"sortMixedArray([]) should return an empty array\", () => {\n  expect(sortMixedArray([])).to.deep.equal([]);\n});\n\nit(\"sortMixedArray(['0', '1', '2']) should return [0, 1, 2]\", () => {\n  expect(sortMixedArray(['0', '1', '2'])).to.deep.equal([0, 1, 2]);\n});\n\nit(\"sortMixedArray([5, '11', 2, '1']) should sort numeric strings as numbers\", () => {\n  expect(sortMixedArray([5, '11', 2, '1'])).to.deep.equal([1, 2, 5, 11]);\n});\n\nit(\"sortMixedArray(['100', 50, '25', 75]) should convert all to numbers and sort\", () => {\n  expect(sortMixedArray(['100', 50, '25', 75])).to.deep.equal([25, 50, 75, 100]);\n});\n\nit(\"sortMixedArray(['004', 2, '3', 1]) should handle leading zeros in strings correctly\", () => {\n  expect(sortMixedArray(['004', 2, '3', 1])).to.deep.equal([1, 2, 3, 4]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}