{
  "_id": "6696c2cb763f0712c198f633",
  "name": {
    "en": "/*",
    "ru": "Двойная сортировка объектов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `doubleSortObjects`, которая принимает массив объектов.\n\nКаждый объект содержит три ключа: `id`, `numericKey` (числовое значение), и `stringKey` (строковое значение).\n\nФункция должна создать два новых массива: первый будет отсортирован по значению `numericKey` в порядке возрастания, а второй — по значению `stringKey` в порядке убывания.\n\nФункция возвращает объект, где ключи указывают, по какому свойству была выполнена сортировка: `sortedByNumericKey`, `sortedByStringKey`, а значения — это отсортированные массивы.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(doubleSortObjects([\n  { id: 1, numericKey: 25, stringKey: 'apple' },\n  { id: 2, numericKey: 5, stringKey: 'banana' },\n  { id: 3, numericKey: 10, stringKey: 'cherry' }\n]));\n// Вывод:\n// {\n//   sortedByNumericKey: [\n//     { id: 3, numericKey: 10, stringKey: 'cherry' },\n//     { id: 2, numericKey: 15, stringKey: 'banana' },\n//     { id: 1, numericKey: 20, stringKey: 'apple' }\n//   ],\n//   sortedByStringKey: [\n//     { id: 3, numericKey: 10, stringKey: 'cherry' },\n//     { id: 2, numericKey: 15, stringKey: 'banana' },\n//     { id: 1, numericKey: 20, stringKey: 'apple' }\n//   ]\n// }\n```"
  },
  "initialSolution": "function doubleSortObjects(){\n\n}",
  "completedSolution": "function doubleSortObjects(arr) {\n  const sortedByNumericKey = arr.toSorted((a, b) => a.numericKey - b.numericKey)\n  const sortedByStringKey = arr.toSorted((a, b) => b.stringKey.localeCompare(a.stringKey))\n  return {sortedByNumericKey, sortedByStringKey};\n}",
  "openTest": "Array.prototype.toSorted = function(compareFunction){\n  const newArray = this.slice()\n  if(compareFunction) return newArray.sort(compareFunction)\n  else return newArray.sort()\n}\n\nit('Created function doubleSortObjects', () => {\n  expect(doubleSortObjects).to.be.a('function');\n});\n\nit('Function doubleSortObjects should include method toSorted()', () => {\n  const res = doubleSortObjects.toString()\n  expect(res).to.include('.toSorted(')\n});\n\nit('Function doubleSortObjects should not include method sort()', () => {\n  const res = doubleSortObjects.toString()\n  expect(res).to.not.include('.sort(')\n});\n\nit(\"doubleSortObjects sorts array by numericKey ascending\", () => {\n  const input = [\n    { id: 1, numericKey: 20, stringKey: 'apple' },\n    { id: 2, numericKey: 15, stringKey: 'banana' },\n    { id: 3, numericKey: 10, stringKey: 'cherry' }\n  ];\n  const result = doubleSortObjects(input);\n  expect(result.sortedByNumericKey).to.deep.equal([\n    { id: 3, numericKey: 10, stringKey: 'cherry' },\n    { id: 2, numericKey: 15, stringKey: 'banana' },\n    { id: 1, numericKey: 20, stringKey: 'apple' }\n  ]);\n});\n\nit(\"doubleSortObjects sorts array by stringKey descending\", () => {\n  const input = [\n    { id: 1, numericKey: 20, stringKey: 'apple' },\n    { id: 2, numericKey: 15, stringKey: 'banana' },\n    { id: 3, numericKey: 10, stringKey: 'cherry' }\n  ];\n  const result = doubleSortObjects(input);\n  expect(result.sortedByStringKey).to.deep.equal([\n    { id: 3, numericKey: 10, stringKey: 'cherry' },\n    { id: 2, numericKey: 15, stringKey: 'banana' },\n    { id: 1, numericKey: 20, stringKey: 'apple' }\n  ]);\n});\n\nit(\"doubleSortObjects handles empty array correctly\", () => {\n  expect(doubleSortObjects([])).to.deep.equal({ sortedByNumericKey: [], sortedByStringKey: [] });\n});\n\nit(\"doubleSortObjects handles single item array correctly\", () => {\n  const input = [{ id: 1, numericKey: 10, stringKey: 'apple' }];\n  const result = doubleSortObjects(input);\n  expect(result.sortedByNumericKey).to.deep.equal([{ id: 1, numericKey: 10, stringKey: 'apple' }]);\n  expect(result.sortedByStringKey).to.deep.equal([{ id: 1, numericKey: 10, stringKey: 'apple' }]);\n});\n\nit(\"doubleSortObjects verifies that sorting by numericKey does not affect stringKey order in the resulting object\", () => {\n  const input = [\n    { id: 1, numericKey: 10, stringKey: 'cherry' },\n    { id: 2, numericKey: 5, stringKey: 'banana' },\n    { id: 3, numericKey: 20, stringKey: 'apple' }\n  ];\n  const result = doubleSortObjects(input);\n  expect(result.sortedByNumericKey).to.deep.equal([\n    { id: 2, numericKey: 5, stringKey: 'banana' },\n    { id: 1, numericKey: 10, stringKey: 'cherry' },\n    { id: 3, numericKey: 20, stringKey: 'apple' }\n  ]);\n  // Verifying that the stringKey order remains intact within the sortedByNumericKey array\n  expect(result.sortedByNumericKey.map(item => item.stringKey)).to.deep.equal(['banana', 'cherry', 'apple']);\n});\n\nit(\"doubleSortObjects handles numericKey ties by maintaining original order\", () => {\n  const input = [\n    { id: 1, numericKey: 25, stringKey: 'banana' },\n    { id: 2, numericKey: 25, stringKey: 'apple' },\n    { id: 3, numericKey: 25, stringKey: 'cherry' }\n  ];\n  const result = doubleSortObjects(input);\n  expect(result.sortedByNumericKey).to.deep.equal([\n    { id: 1, numericKey: 25, stringKey: 'banana' },\n    { id: 2, numericKey: 25, stringKey: 'apple' },\n    { id: 3, numericKey: 25, stringKey: 'cherry' }\n  ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}