{
  "_id": "6696c2cb763f0712c198f62e",
  "name": {
    "en": "/*",
    "ru": "Сортировка массива чисел"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortNumbersAscending`, которая принимает массив чисел и возвращает новый массив, где все числа отсортированы по возрастанию.\n\nФункция должна использовать новый метод `toSorted()` для создания отсортированного массива, сохраняя исходный массив неизменным.\n\n\nПримеры запуска функции:\n```javascript\nsortNumbersAscending([5, 3, 8, 1]); // [1, 3, 5, 8]\nsortNumbersAscending([10, 22, 15, 2]); // [2, 10, 15, 22]\nsortNumbersAscending([-1, -3, 2, 0]); // [-3, -1, 0, 2]\n```"
  },
  "initialSolution": "function sortNumbersAscending(){\n\n}",
  "completedSolution": "function sortNumbersAscending(arr) {\n  return arr.toSorted((a, b) => a - b);\n}",
  "openTest": "Array.prototype.toSorted = function(compareFunction){\n  const newArray = this.slice()\n  if(compareFunction) return newArray.sort(compareFunction)\n  else return newArray.sort()\n}\n\nit('Created function sortNumbersAscending', () => {\n  expect(sortNumbersAscending).to.be.a('function');\n});\n\nit('Function sortNumbersAscending should include method toSorted()', () => {\n  const res = sortNumbersAscending.toString()\n  expect(res).to.include('.toSorted(')\n});\n\nit(\"sortNumbersAscending([4, 1, 3]) should return [1, 3, 4]\", () => {\n  expect(sortNumbersAscending([4, 1, 3])).to.deep.equal([1, 3, 4]);\n});\n\nit(\"sortNumbersAscending([0, -1, 1]) should return [-1, 0, 1]\", () => {\n  expect(sortNumbersAscending([0, -1, 1])).to.deep.equal([-1, 0, 1]);\n});\n\nit(\"sortNumbersAscending([100, 10, 1000]) should return [10, 100, 1000]\", () => {\n  expect(sortNumbersAscending([100, 10, 1000])).to.deep.equal([10, 100, 1000]);\n});\n\nit(\"sortNumbersAscending([-2, -2, -2]) should return [-2, -2, -2]\", () => {\n  expect(sortNumbersAscending([-2, -2, -2])).to.deep.equal([-2, -2, -2]);\n});\n\nit(\"sortNumbersAscending([]) should return []\", () => {\n  expect(sortNumbersAscending([])).to.deep.equal([]);\n});\n\nit(\"sortNumbersAscending([5]) should return [5]\", () => {\n  expect(sortNumbersAscending([5])).to.deep.equal([5]);\n});\n\nit(\"sortNumbersAscending([3, 3, 3, 3]) should return [3, 3, 3, 3]\", () => {\n  expect(sortNumbersAscending([3, 3, 3, 3])).to.deep.equal([3, 3, 3, 3]);\n});\n\nit(\"sortNumbersAscending([-10, -20, -30]) should return [-30, -20, -10]\", () => {\n  expect(sortNumbersAscending([-10, -20, -30])).to.deep.equal([-30, -20, -10]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}