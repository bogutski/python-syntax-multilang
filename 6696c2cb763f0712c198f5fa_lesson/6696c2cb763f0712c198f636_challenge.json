{
  "_id": "6696c2cb763f0712c198f636",
  "name": {
    "en": "/*",
    "ru": "Нормализация и сортировка массива строк"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `normalizeAndSortStrings`, которая принимает массив строк.\n\nКаждая строка может содержать пробелы в начале и в конце, а также использовать разный регистр букв.\n\nФункция должна обработать каждую строку, убрав пробелы и приведя все буквы к нижнему регистру, и возвращать новый массив с отсортированными строками по убыванию.\n\n\nПримеры запуска функции:\n```javascript\nnormalizeAndSortStrings([' Apple ', 'banana ', ' Cherry', 'date']);\n// ['date', 'cherry', 'banana', 'apple']\n\nnormalizeAndSortStrings([' new york', 'Los Angeles  ', '  CHICAGO', 'houston ']);\n// ['new york', 'los angeles', 'houston', 'chicago']\n\nnormalizeAndSortStrings([\"  mango\", \"Banana\", \"  apple \", \"CHERRY \"]);\n// ['mango', 'cherry', 'banana', 'apple']\n```"
  },
  "initialSolution": "function normalizeAndSortStrings(){\n\n}",
  "completedSolution": "function normalizeAndSortStrings(arr) {\n  return arr\n      .map(el => el.trim().toLowerCase())\n      .toSorted((a, b) => b.localeCompare(a));\n}",
  "openTest": "Array.prototype.toSorted = function(compareFunction){\n  const newArray = this.slice()\n  if(compareFunction) return newArray.sort(compareFunction)\n  else return newArray.sort()\n}\n\nit('Created function normalizeAndSortStrings', () => {\n  expect(normalizeAndSortStrings).to.be.a('function');\n});\n\nit(\"normalizeAndSortStrings sorts array of strings in descending order after trimming and converting to lowercase\", () => {\n  expect(normalizeAndSortStrings([\" Apple \", \"banana \", \" Cherry\", \"date\"])).to.deep.equal([\"date\", \"cherry\", \"banana\", \"apple\"]);\n});\n\nit(\"normalizeAndSortStrings should not modify the original array\", () => {\n  const originalArray = [\" Apple \", \"banana \", \" Cherry\", \"date\"];\n  normalizeAndSortStrings(originalArray);\n  expect(originalArray).to.deep.equal([\" Apple \", \"banana \", \" Cherry\", \"date\"]);\n});\n\nit(\"normalizeAndSortStrings handles empty array correctly\", () => {\n  expect(normalizeAndSortStrings([])).to.deep.equal([]);\n});\n\nit(\"normalizeAndSortStrings correctly processes an array with mixed spaces and cases\", () => {\n  expect(normalizeAndSortStrings([\"  hello\", \"HELLO \", \" World\", \"world  \"])).to.deep.equal([\"world\", \"world\", \"hello\", \"hello\"]);\n});\n\nit(\"normalizeAndSortStrings returns an empty string if only spaces were present\", () => {\n  expect(normalizeAndSortStrings([\" \", \"  \", \"\\t\", \"\\n\"])).to.deep.equal(['', '', '', '']);\n});\n\nit(\"normalizeAndSortStrings handles strings with non-alphanumeric characters correctly\", () => {\n  expect(normalizeAndSortStrings([\"#hashtag\", \" hello!\", \"@mention \"])).to.deep.equal([\"hello!\", \"#hashtag\", \"@mention\"]);\n});\n\nit(\"normalizeAndSortStrings processes an array of mixed-case strings uniformly\", () => {\n  expect(normalizeAndSortStrings([\"TeSt\", \"tEsT\", \"TEST\", \"test\"])).to.deep.equal([\"test\", \"test\", \"test\", \"test\"]);\n});\n\nit(\"normalizeAndSortStrings should return an array sorted in descending order for similar strings with different spacings\", () => {\n  expect(normalizeAndSortStrings([\"test  \", \" test\", \"  test   \"])).to.deep.equal([\"test\", \"test\", \"test\"]);\n});\n\nit(\"normalizeAndSortStrings effectively trims and converts empty strings and spaces to a single empty string sorted as such\", () => {\n  expect(normalizeAndSortStrings([\"\", \"  \", \"    \"])).to.deep.equal([\"\", \"\", \"\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}