{
  "_id": "6696c2cb763f0712c198f635",
  "name": {
    "en": "/*",
    "ru": "Фильтрация и сортировка массива с разнообразными типами данных"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterAndSortNumbers`, которая принимает массив, содержащий элементы различных типов (строки, числа, NaN, undefined, null и другие).\n\nФункция должна извлекать из этого массива только те элементы, которые могут быть корректно преобразованы в числа (исключая NaN, undefined и null), преобразовывать их в числовой тип и возвращать новый массив, отсортированный по убыванию.\n\n\nПримеры запуска функции:\n```javascript\nconst arr = ['2', NaN, 'sd', 'NaN', 100, '-100', undefined, null];\nconsole.log(filterAndSortNumbers(arr)); // [100, 2, -100]\n\nconst arr1 = ['004', 3.14159, '0.01', '100.5', 'NaN', 200];\nconsole.log(filterAndSortNumbers(arr1)); // [200, 100.5, 4, 3.14159, 0.01]\n\nconst arr2 = ['1e2', '-2.5e2', 50, '0003'];\nconsole.log(filterAndSortNumbers(arr2)); // [100, 50, 3, -250]\n```"
  },
  "initialSolution": "function filterAndSortNumbers(){\n\n}",
  "completedSolution": "function filterAndSortNumbers(arr) {\n  const onlyNumbers = []\n  arr.forEach(el => {\n    if(typeof +el === 'number' && !isNaN(+el) && el !== null) onlyNumbers.push(+el)\n  })\n\n  return onlyNumbers.sort((a, b) => b - a);\n}",
  "openTest": "Array.prototype.toSorted = function(compareFunction){\n  const newArray = this.slice()\n  if(compareFunction) return newArray.sort(compareFunction)\n  else return newArray.sort()\n}\n\nit('Created function filterAndSortNumbers', () => {\n  expect(filterAndSortNumbers).to.be.a('function');\n});\n\nit(\"filterAndSortNumbers(['2', NaN, 'sd', 'NaN', 100, '-100', undefined, null]) should return [100, 2, -100]\", () => {\n  expect(filterAndSortNumbers(['2', NaN, 'sd', 'NaN', 100, '-100', undefined, null])).to.deep.equal([100, 2, -100]);\n});\n\nit(\"filterAndSortNumbers should not modify the original array\", () => {\n  const originalArray = ['2', NaN, 'sd', 'NaN', 100, '-100', undefined, null];\n  filterAndSortNumbers(originalArray);\n  expect(originalArray).to.deep.equal(['2', NaN, 'sd', 'NaN', 100, '-100', undefined, null]);\n});\n\nit(\"filterAndSortNumbers handles empty array correctly\", () => {\n  expect(filterAndSortNumbers([])).to.deep.equal([]);\n});\n\nit(\"filterAndSortNumbers filters and sorts an array with positive and negative numbers and numeric strings\", () => {\n  expect(filterAndSortNumbers(['-1', '1', 0, '0', '100', '-100', 'NaN', NaN, undefined, null])).to.deep.equal([100, 1, 0, 0, -1, -100]);\n});\n\nit(\"filterAndSortNumbers ignores non-numeric strings and non-convertible types\", () => {\n  expect(filterAndSortNumbers(['apple', '20', 'banana', undefined, '30', null])).to.deep.equal([30, 20]);\n});\n\nit(\"filterAndSortNumbers correctly sorts a mix of integers and floating point numbers\", () => {\n  expect(filterAndSortNumbers([1.5, '2.5', 3, '0.5'])).to.deep.equal([3, 2.5, 1.5, 0.5]);\n});\n\nit(\"filterAndSortNumbers handles scientific notation and sorts correctly\", () => {\n  expect(filterAndSortNumbers(['1e3', '1e2', 5, '10'])).to.deep.equal([1000, 100, 10, 5]);\n});\n\nit(\"filterAndSortNumbers returns an empty array when no convertible numbers are present\", () => {\n  expect(filterAndSortNumbers(['apple', 'banana', NaN, undefined, null])).to.deep.equal([]);\n});\n\nit(\"filterAndSortNumbers treats zero and negative zero as equal and maintains their order\", () => {\n  expect(filterAndSortNumbers(['-0', 0, '0', '-0'])).to.deep.equal([-0, 0, 0, -0]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}