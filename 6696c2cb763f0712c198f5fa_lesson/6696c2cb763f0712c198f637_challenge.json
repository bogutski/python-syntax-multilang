{
  "_id": "6696c2cb763f0712c198f637",
  "name": {
    "en": "/*",
    "ru": "Сортировка массива строк по длине слов с игнорированием пробелов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortStringsByLengthIgnoringSpaces`, которая принимает массив строк.\n\nФункция должна отсортировать массив по длине строк (по убыванию), не учитывая пробелы, в начале и конце каждой строки.\n\nФункция возвращает возвращать новый массив.\n\n\nПримеры запуска функции:\n```javascript\nsortStringsByLengthIgnoringSpaces([' short', '   miniature', 'tiny  ', ' prolonged  ']);\n// ['   miniature', ' prolonged  ', ' short', 'tiny  ']\n\nsortStringsByLengthIgnoringSpaces(['  Hello world!  ', ' Greetings, Earthlings!   ', 'Hi', ' Salutations ']);\n// [' Greetings, Earthlings!   ', '  Hello world!  ', ' Salutations ', 'Hi']\n\nsortStringsByLengthIgnoringSpaces([' 12345 ', ' 1234', ' Hello', ' World  ']);\n// [' 12345 ', ' Hello', ' World  ', ' 1234']\n```"
  },
  "initialSolution": "function sortStringsByLengthIgnoringSpaces(){\n\n}",
  "completedSolution": "function sortStringsByLengthIgnoringSpaces(arr) {\n  return arr.toSorted((a, b) => {\n    const noSpaceA = a.trim()\n    const noSpaceB = b.trim()\n\n    return noSpaceB.length - noSpaceA.length\n  });\n}",
  "openTest": "Array.prototype.toSorted = function(compareFunction){\n  const newArray = this.slice()\n  if(compareFunction) return newArray.sort(compareFunction)\n  else return newArray.sort()\n}\n\nit('Created function sortStringsByLengthIgnoringSpaces', () => {\n  expect(sortStringsByLengthIgnoringSpaces).to.be.a('function');\n});\n\nit(\"sorts array of strings by length in descending order, ignoring leading and trailing spaces\", () => {\n  expect(sortStringsByLengthIgnoringSpaces([' short', '   miniature', 'tiny  ', ' prolonged  '])).to.deep.equal(['   miniature', ' prolonged  ', ' short', 'tiny  ']);\n});\n\nit(\"does not modify the original array\", () => {\n  const originalArray = [' short', '   miniature', 'tiny  ', ' prolonged  '];\n  sortStringsByLengthIgnoringSpaces(originalArray);\n  expect(originalArray).to.deep.equal([' short', '   miniature', 'tiny  ', ' prolonged  ']);\n});\n\nit(\"handles empty array correctly\", () => {\n  expect(sortStringsByLengthIgnoringSpaces([])).to.deep.equal([]);\n});\n\nit(\"sorts array with strings of equal length after trimming\", () => {\n  expect(sortStringsByLengthIgnoringSpaces(['one ', ' two', '  three', 'four  '])).to.deep.equal(['  three', 'four  ', 'one ', ' two']);\n});\n\nit(\"processes an array with multiple spaces correctly\", () => {\n  expect(sortStringsByLengthIgnoringSpaces(['  dog  ', 'cat', '  pig   ', 'owl'])).to.deep.equal(['  dog  ', 'cat', '  pig   ', 'owl']);\n});\n\nit(\"handles strings that become equal in length after trimming\", () => {\n  expect(sortStringsByLengthIgnoringSpaces(['  abc  ', ' def ', ' ghi'])).to.deep.equal(['  abc  ', ' def ', ' ghi']);\n});\n\nit(\"correctly sorts an array where all strings are the same length after trimming\", () => {\n  expect(sortStringsByLengthIgnoringSpaces(['   a   ', ' b ', ' c  '])).to.deep.equal(['   a   ', ' b ', ' c  ']);\n});\n\nit(\"sorts strings that include numeric characters correctly\", () => {\n  expect(sortStringsByLengthIgnoringSpaces(['1234', '  123  ', '12  ', '12345'])).to.deep.equal(['12345', '1234', '  123  ', '12  ']);\n});\n\nit(\"handles an array containing only whitespace strings\", () => {\n  expect(sortStringsByLengthIgnoringSpaces(['  ', ' ', '   ', '    '])).to.deep.equal(['  ', ' ', '   ', '    ']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}