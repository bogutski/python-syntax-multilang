{
  "_id": "6696c2cb763f0712c198f3c7",
  "name": {
    "en": "/*",
    "ru": "Реверс массива с помощью shift()"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `reverseArrayUsingShift`, которая принимает массив элементов.\n\nФункция должна использовать метод `shift()` для последовательного извлечения элементов из начала исходного массива и метод `unshift()` для добавления этих элементов в новый массив в обратном порядке.\n\nВ конечном итоге, функция должна возвращать новый массив, элементы которого являются элементами исходного массива, расположенными в обратном порядке.\n\nИсходный массив должен остаться без изменений.\n\n\nПример запуска функции:\n```javascript\nreverseArrayUsingShift([1, 2, 3, 4]); // [ 4, 3, 2, 1 ]\nreverseArrayUsingShift(['a', 'b', 'c']); // [ 'c', 'b', 'a' ]\nreverseArrayUsingShift([]); // []]\n```"
  },
  "initialSolution": "function reverseArrayUsingShift(){\n\n}",
  "completedSolution": "function reverseArrayUsingShift(arr) {\n  let original = [...arr]\n  let res = []\n\n  while(original.length){\n    res.unshift(original.shift())\n  }\n\n  return res;\n}",
  "openTest": "it('Created function reverseArrayUsingShift', () => {\n  expect(reverseArrayUsingShift).to.be.a('function');\n});\n\nit('Function reverseArrayUsingShift should include methods: push(), shift()', () => {\n  const res = reverseArrayUsingShift.toString()\n  expect(res).to.include('.shift()')\n  expect(res).to.include('.unshift(')\n\n});it('Function reverseArrayUsingShift should not include method .reverse()', () => {\n  const res = reverseArrayUsingShift.toString()\n  expect(res).to.not.include('.reverse()')\n});\n\nit(\"reverseArrayUsingShift([1, 2, 3, 4]) should return [4, 3, 2, 1]\", () => {\n  expect(reverseArrayUsingShift([1, 2, 3, 4])).to.deep.equal([4, 3, 2, 1]);\n});\n\nit(\"reverseArrayUsingShift([5]) should return [5] when array contains only one element\", () => {\n  expect(reverseArrayUsingShift([5])).to.deep.equal([5]);\n});\n\nit(\"reverseArrayUsingShift(['apple', 'banana', 'cherry', 'date']) should return ['date', 'cherry', 'banana', 'apple']\", () => {\n  expect(reverseArrayUsingShift(['apple', 'banana', 'cherry', 'date'])).to.deep.equal(['date', 'cherry', 'banana', 'apple']);\n});\n\nit(\"reverseArrayUsingShift(['a', 'b', 'c']) should return ['c', 'b', 'a']\", () => {\n  expect(reverseArrayUsingShift(['a', 'b', 'c'])).to.deep.equal(['c', 'b', 'a']);\n});\n\nit(\"reverseArrayUsingShift([]) should return an empty array\", () => {\n  expect(reverseArrayUsingShift([])).to.deep.equal([]);\n});\n\nit(\"reverseArrayUsingShift([true, false, true]) should return [true, false, true]\", () => {\n  expect(reverseArrayUsingShift([true, false, true])).to.deep.equal([true, false, true]);\n});\n\nit(\"should not modify the original array\", () => {\n  let originalArray = [1, 2, 3];\n  reverseArrayUsingShift(originalArray);\n  expect(originalArray).to.deep.equal([1, 2, 3]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}