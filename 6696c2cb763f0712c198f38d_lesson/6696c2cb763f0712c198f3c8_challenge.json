{
  "_id": "6696c2cb763f0712c198f3c8",
  "name": {
    "en": "/*",
    "ru": "Объединение и переворачивание двух массивов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `mergeAndReverse`, которая принимает два массива в качестве аргументов.\n\nФункция должна сначала объединить эти два массива в один, а затем перевернуть порядок элементов в полученном массиве.\n\nДля реализации используйте методы `unshift()` и `shift()`.\n\nФункция должна возвращать новый массив, содержащий элементы исходных массивов в обратном порядке.\n\n\nПример запуска функции:\n```javascript\nmergeAndReverse([1, 2, 3], [4, 5, 6]);   // [ 6, 5, 4, 3, 2, 1 ]\nmergeAndReverse(['a', 'b'], ['c', 'd']); // [ 'd', 'c', 'b', 'a' ]\nmergeAndReverse([], [7, 8]); // [ 8, 7 ]\nmergeAndReverse(['x'], []);  // [ 'x' ]\n```"
  },
  "initialSolution": "function mergeAndReverse(){\n\n}",
  "completedSolution": "function mergeAndReverse(arr1, arr2) {\n  const merged = [...arr1, ...arr2]\n  const res = []\n\n  while(merged.length){\n    const el = merged.shift()\n    res.unshift(el)\n  }\n\n  return res;\n}",
  "openTest": "it('Created function mergeAndReverse', () => {\n  expect(mergeAndReverse).to.be.a('function');\n});\n\nit('Function mergeAndReverse should include methods: push(), shift()', () => {\n  const res = mergeAndReverse.toString()\n  expect(res).to.include('.shift()')\n  expect(res).to.include('.unshift(')\n});\n\nit('Function mergeAndReverse should not include method .reverse()', () => {\n  const res = mergeAndReverse.toString()\n  expect(res).to.not.include('.reverse()')\n});\n\nit(\"mergeAndReverse([1, 2, 3], [4, 5, 6]) should return [6, 5, 4, 3, 2, 1]\", () => {\n  expect(mergeAndReverse([1, 2, 3], [4, 5, 6])).to.deep.equal([6, 5, 4, 3, 2, 1]);\n});\n\nit(\"mergeAndReverse(['a', 'b'], ['c', 'd']) should return ['d', 'c', 'b', 'a']\", () => {\n  expect(mergeAndReverse(['a', 'b'], ['c', 'd'])).to.deep.equal(['d', 'c', 'b', 'a']);\n});\n\nit(\"mergeAndReverse([], [7, 8]) should return [8, 7]\", () => {\n  expect(mergeAndReverse([], [7, 8])).to.deep.equal([8, 7]);\n});\n\nit(\"mergeAndReverse(['x'], []) should return ['x']\", () => {\n  expect(mergeAndReverse(['x'], [])).to.deep.equal(['x']);\n});\n\nit(\"mergeAndReverse([true, false], [false, true]) should return [true, false, false, true]\", () => {\n  expect(mergeAndReverse([true, false], [false, true])).to.deep.equal([true, false, false, true]);\n});\n\nit(\"should return an empty array when both input arrays are empty\", () => {\n  expect(mergeAndReverse([], [])).to.deep.equal([]);\n});\n\nit(\"mergeAndReverse(['1', '2'], ['3', '4', '5']) should return ['5', '4', '3', '2', '1']\", () => {\n  expect(mergeAndReverse(['1', '2'], ['3', '4', '5'])).to.deep.equal(['5', '4', '3', '2', '1']);\n});\n\nit(\"mergeAndReverse([null, undefined], [NaN, 0]) should correctly process non-standard values\", () => {\n  let result = mergeAndReverse([null, undefined], [NaN, 0]);\n  expect(result.length).to.equal(4);\n  expect(result).to.deep.include.members([0, NaN, undefined, null]);\n});\n\nit(\"mergeAndReverse(['start'], ['end']) should return ['end', 'start']\", () => {\n  expect(mergeAndReverse(['start'], ['end'])).to.deep.equal(['end', 'start']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}