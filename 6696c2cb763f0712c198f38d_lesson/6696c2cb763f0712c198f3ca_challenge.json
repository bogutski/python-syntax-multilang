{
  "_id": "6696c2cb763f0712c198f3ca",
  "name": {
    "en": "/*",
    "ru": "Определение наличия и удаление специального элемента"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `removeFirstSpecial`, которая принимает массив и специальное значение (`specialValue`) в качестве аргументов.\n\nФункция должна пройти через массив и с помощью удаления (`shift()`) и проверки каждого элемента, перенести все элементы кроме первого вхождения `specialValue` в новый массив.\n\nЕсли `specialValue` не найден, новый массив остается неизменным.\n\nФункция должна возвращать новый массив.\n\nПример запуска функции:\n```javascript\nremoveFirstSpecial([1, 2, 3, 4, 3, 2, 1], 3);   // [ 1, 2, 4, 3, 2, 1 ]\nremoveFirstSpecial(['a', 'b', 'c', 'b'], 'b');  // [ 'a', 'c', 'b' ]\nremoveFirstSpecial([true, false, true], false); // [ true, true ]\nremoveFirstSpecial([1, 2, 3], 4); // [ 1, 2, 3 ]\n```"
  },
  "initialSolution": "function removeFirstSpecial(){\n\n}",
  "completedSolution": "function removeFirstSpecial(arr, specialElement) {\n  let res = []\n  let isDeleted = false\n\n  while(arr.length){\n    const el = arr.shift()\n\n    if(el === specialElement && !isDeleted) isDeleted = true\n    else if(el !== specialElement || el === specialElement && isDeleted) res.push(el)\n  }\n\n  return res;\n}",
  "openTest": "it('Created function removeFirstSpecial', () => {\n  expect(removeFirstSpecial).to.be.a('function');\n});\n\nit('Function removeFirstSpecial should include methods shift()', () => {\n  const res = removeFirstSpecial.toString()\n  expect(res).to.include('.shift()')\n});\n\nit(\"removeFirstSpecial([1, 2, 3, 4, 3, 2, 1], 3) should return [1, 2, 4, 3, 2, 1]\", () => {\n  expect(removeFirstSpecial([1, 2, 3, 4, 3, 2, 1], 3)).to.deep.equal([1, 2, 4, 3, 2, 1]);\n});\n\nit(\"removeFirstSpecial(['a', 'b', 'c', 'b'], 'b') should return ['a', 'c', 'b']\", () => {\n  expect(removeFirstSpecial(['a', 'b', 'c', 'b'], 'b')).to.deep.equal(['a', 'c', 'b']);\n});\n\nit(\"removeFirstSpecial([true, false, true], false) should return [true, true]\", () => {\n  expect(removeFirstSpecial([true, false, true], false)).to.deep.equal([true, true]);\n});\n\nit(\"removeFirstSpecial([1, 2, 3], 4) should return [1, 2, 3] when the special value is not found\", () => {\n  expect(removeFirstSpecial([1, 2, 3], 4)).to.deep.equal([1, 2, 3]);\n});\n\nit(\"removeFirstSpecial([], 'a') should return an empty array if the input array is initially empty\", () => {\n  expect(removeFirstSpecial([], 'a')).to.deep.equal([]);\n});\n\nit(\"removeFirstSpecial(['x'], 'x') should return an empty array when the only element is the special value\", () => {\n  expect(removeFirstSpecial(['x'], 'x')).to.deep.equal([]);\n});\n\nit(\"removeFirstSpecial(['apple', 'banana', 'apple', 'cherry', 'banana'], 'banana') should return ['apple', 'apple', 'cherry', 'banana']\", () => {\n  expect(removeFirstSpecial(['apple', 'banana', 'apple', 'cherry', 'banana'], 'banana')).to.deep.equal(['apple', 'apple', 'cherry', 'banana']);\n});\n\nit(\"removeFirstSpecial([10, 20, 30, 10, 20, 30], 20) should return [10, 30, 10, 20, 30] and the original array should be empty\", () => {\n  let originalArray = [10, 20, 30, 10, 20, 30];\n  let resultArray = removeFirstSpecial(originalArray, 20);\n  expect(resultArray).to.deep.equal([10, 30, 10, 20, 30]);\n  expect(originalArray).to.be.empty;\n});\n\nit(\"removeFirstSpecial([1, 2, 3, 4, 5], 6) should return a new array [1, 2, 3, 4, 5] and the original array should be empty (specialValue not found)\", () => {\n  let originalArray = [1, 2, 3, 4, 5];\n  let resultArray = removeFirstSpecial(originalArray, 6);\n  expect(resultArray).to.deep.equal([1, 2, 3, 4, 5]);\n  expect(originalArray).to.be.empty;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}