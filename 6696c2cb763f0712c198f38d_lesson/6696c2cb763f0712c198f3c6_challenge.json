{
  "_id": "6696c2cb763f0712c198f3c6",
  "name": {
    "en": "/*",
    "ru": "Перемещение минимального элемента в начало"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `moveMinToFront`, которая принимает массив чисел.\n\nФункция должна найти минимальный/ые элемент/ы в массиве, и добавить в начало массива.\n\nЕсли минимальный элемент повторяется,\n\nИспользуйте комбинацию методов `shift()`,` push()` и `unshift()` для выполнения этой задачи.\n\nЕсли массив пуст, функция должна вернуть пустой массив.\n\nФункция возвращает новый массив и переданный массив должен быть пустой.\n\n\nПример запуска функции:\n```javascript\nmoveMinToFront([10, 22, 5, 1]); // [ 1, 10, 22, 5 ]\nmoveMinToFront([4, 2, 1, 3, 5]); // [ 1, 4, 2, 3, 5 ]\nmoveMinToFront([-3, -1, -2, -10]); // [ -10, -3, -1, -2 ]\nmoveMinToFront([5, 0, 5, 0, 5, 5]); // [ 0, 0, 5, 5, 5, 5 ]\nmoveMinToFront([]); // Должен вернуть []\n```"
  },
  "initialSolution": "function moveMinToFront(){\n\n}",
  "completedSolution": "function moveMinToFront(arr) {\n  let res = []\n  const min = Math.min(...arr)\n\n  while(arr.length){\n    const el = arr.shift()\n    if(el === min) res.unshift(el)\n    else res.push(el)\n  }\n\n  return res;\n}",
  "openTest": "it('Created function moveMinToFront', () => {\n  expect(moveMinToFront).to.be.a('function');\n});\n\nit('Function moveMinToFront should include methods: push(), shift(), unshift()', () => {\n  const res = moveMinToFront.toString()\n  expect(res).to.include('.shift()')\n  expect(res).to.include('.push(')\n  expect(res).to.include('.unshift(')\n});\n\n\nit(\"moveMinToFront([4, 2, 1, 3, 5]) should return [1, 4, 2, 3, 5]\", () => {\n  expect(moveMinToFront([4, 2, 1, 3, 5])).to.deep.equal([1, 4, 2, 3, 5]);\n});\n\nit(\"moveMinToFront([10, 22, 5, 1]) should return [1, 10, 22, 5]\", () => {\n  expect(moveMinToFront([10, 22, 5, 1])).to.deep.equal([1, 10, 22, 5]);\n});\n\nit(\"moveMinToFront([-3, -1, -2]) should correctly leave the array unchanged because -3 is already the minimum at the front\", () => {\n  expect(moveMinToFront([-3, -1, -2])).to.deep.equal([-3, -1, -2]);\n});\n\nit(\"moveMinToFront([]) should return an empty array for an initially empty array\", () => {\n  expect(moveMinToFront([])).to.deep.equal([]);\n});\n\nit(\"moveMinToFront([5]) should return the same array when there is only one element\", () => {\n  expect(moveMinToFront([5])).to.deep.equal([5]);\n});\n\nit(\"moveMinToFront([3, 1, 4, 1, 5]) should return [1, 1, 3, 4, 5] when there are duplicate minimum values\", () => {\n  expect(moveMinToFront([3, 1, 4, 1, 5])).to.deep.equal([1, 1, 3, 4, 5]);\n});\n\nit(\"moveMinToFront([2, 3, 1]) should return a new array\", () => {\n  let originalArray = [2, 3, 1];\n  let resultArray = moveMinToFront(originalArray);\n  expect(resultArray).to.not.equal(originalArray);\n  expect(resultArray).to.deep.equal([1, 2, 3]);\n  expect(originalArray).to.deep.equal([]);\n});\n\nit(\"moveMinToFront([5, -5, 0, -5, 1, -4, -5, 3]) should return [-5, -5, -5, 5, 0, 1, -4, 3]\", () => {\n  expect(moveMinToFront([5, -5, 0, -5, 1, -4, -5, 3])).to.deep.equal([-5, -5, -5, 5, 0, 1, -4, 3]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}