{
  "_id": "6696c2ca763f0712c198e554",
  "name": {
    "en": "Amount from the object",
    "ru": "Сумма из объекта"
  },
  "instruction": {
    "en": "Create a function `sumFromObject` that takes an object with two properties `a` and `b`.\n\nAn example of an object that will be passed to the function:\n```javascript\n{\n  a: 10,\n  b: 20\n}\n```\n\nThe function should return the sum of the properties `a` and `b` of the object.\n\nAn example of running the function:\n```javascript\nsumFromObject({a: 10, b: 20}) // 30\n```\n\n\nA similar example:\n```javascript\nfunction multi(obj) {\n  return obj.a * obj.b;\n}\n```",
    "ru": "Создайте функцию `sumFromObject`, которая принимает объект с двумя свойствами `a` и `b`.\n\nПример объекта, который будет передан в функцию:\n```javascript\n{\n  a: 10,\n  b: 20\n}\n```\n\nФункция должна вернуть сумму свойств `a` и `b` объекта.\n\nПример запуска функции:\n```javascript\nsumFromObject({a: 10,  b: 20}) // 30\n```\n\n\nПохожий пример:\n```javascript\nfunction multi(obj) {\n  return obj.a * obj.b;\n}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function sumFromObject(obj) {\n  return obj.a + obj.b;\n}",
  "openTest": "it('Created function sumFromObject', () => {\n  expect(sumFromObject).to.be.a('function');\n});\n\nit('sumFromObject({a: 10,  b: 20}) should return 30', () => {\n  expect(sumFromObject({ a: 10, b: 20 })).to.equal(30);\n});\n\nit('sumFromObject({a: 1,  b: 2}) should return 3', () => {\n  expect(sumFromObject({ a: 1, b: 2 })).to.equal(3);\n});\n\nit('sumFromObject({a: 0,  b: 0}) should return 0', () => {\n  expect(sumFromObject({ a: 0, b: 0 })).to.equal(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}