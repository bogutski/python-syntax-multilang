{
  "_id": "6696c2cb763f0712c198f446",
  "name": {
    "en": "/*",
    "ru": "Гибкое изменение массива с возвратом изменений"
  },
  "instruction": {
    "en": "",
    "ru": "Разработайте функцию `flexibleModifyAndTrack`, которая принимает исходный массив `originalArray` и объект с произвольным количеством операций изменения.\n\nКаждая операция представлена объектом с тремя ключами: [{start: 2, deleteCount: 1, items: [6]}, ...], где:\n* `start` - начальный индекс для изменения,\n* `deleteCount` - количество удаляемых элементов,\n* `items` - массив элементов для добавления.\n\nФункция должна применять все операции к исходному массиву последовательно, и возвращать объект с двумя массивами:\n* `finalArray` - итоговый массив после всех изменений,\n* `changes` - массив, содержащий информацию обо всех добавленных или удаленных элементах в формате:\n {added: [элементы], removed: [элементы]} для каждой операции.\n\nИсходный массив должен оставаться неизменным.\n\n\nПример запуска функции:\n```javascript\nconst originalArray = [1, 2, 3, 4, 5];\nconst operations = [\n  { start: 2, deleteCount: 1, items: [6] },\n  { start: 4, deleteCount: 0, items: [7, 8] }\n];\n\nconsole.log(flexibleModifyAndTrack(originalArray, operations));\n// {\n// finalArray: [1, 2, 6, 4, 7, 8, 5],\n// changes: [\n// { added: [6], removed: [3] },\n// { added: [7, 8], removed: [] }]\n// }\n```"
  },
  "initialSolution": "function flexibleModifyAndTrack(){\n\n}",
  "completedSolution": "function flexibleModifyAndTrack(arr, toDo) {\n  let finalArray = [...arr]\n  let changes = []\n\n  for(let {start, deleteCount, items} of toDo){\n    const removedEl = finalArray.splice(start, deleteCount, ...items)\n    changes.push({added: items, removed: removedEl})\n  }\n\n  return {finalArray, changes};\n}",
  "openTest": "Array.prototype.toSpliced = function(start, deleteCount, ...items) {\n  let newArray = this.slice();\n  if(deleteCount === undefined) deleteCount = newArray.length - start\n  newArray.splice(start, deleteCount, ...items);\n  return newArray;\n};\n\nit('Created function flexibleModifyAndTrack', () => {\n  expect(flexibleModifyAndTrack).to.be.a('function');\n});\n\nit(\"correctly modifies and tracks array changes\", () => {\n  const originalArray = [1, 2, 3, 4, 5];\n  const operations = [\n    { start: 2, deleteCount: 1, items: [6] },\n    { start: 4, deleteCount: 0, items: [7, 8] }\n  ];\n\n  const { finalArray, changes } = flexibleModifyAndTrack(originalArray, operations);\n  expect(finalArray).to.deep.equal([1, 2, 6, 4, 7, 8, 5]);\n  expect(changes).to.deep.equal([\n    { added: [6], removed: [3] },\n    { added: [7, 8], removed: [] }\n  ]);\n});\n\nit(\"handles adding at the start\", () => {\n  const { finalArray, changes } = flexibleModifyAndTrack([1, 2, 3], [{ start: 0, deleteCount: 0, items: [0] }]);\n  expect(finalArray).to.deep.equal([0, 1, 2, 3]);\n  expect(changes).to.deep.equal([{ added: [0], removed: [] }]);\n});\n\nit(\"handles adding at the end\", () => {\n  const { finalArray, changes } = flexibleModifyAndTrack([1, 2, 3], [{ start: 3, deleteCount: 0, items: [4] }]);\n  expect(finalArray).to.deep.equal([1, 2, 3, 4]);\n  expect(changes).to.deep.equal([{ added: [4], removed: [] }]);\n});\n\nit(\"handles removing from the start\", () => {\n  const { finalArray, changes } = flexibleModifyAndTrack([1, 2, 3, 4], [{ start: 0, deleteCount: 2, items: [] }]);\n  expect(finalArray).to.deep.equal([3, 4]);\n  expect(changes).to.deep.equal([{ added: [], removed: [1, 2] }]);\n});\n\nit(\"handles removing from the end\", () => {\n  const { finalArray, changes } = flexibleModifyAndTrack([1, 2, 3, 4], [{ start: 2, deleteCount: 2, items: [] }]);\n  expect(finalArray).to.deep.equal([1, 2]);\n  expect(changes).to.deep.equal([{ added: [], removed: [3, 4] }]);\n});\n\nit(\"handles replacing in the middle\", () => {\n  const { finalArray, changes } = flexibleModifyAndTrack([1, 2, 3, 4], [{ start: 1, deleteCount: 2, items: [5, 6] }]);\n  expect(finalArray).to.deep.equal([1, 5, 6, 4]);\n  expect(changes).to.deep.equal([{ added: [5, 6], removed: [2, 3] }]);\n});\n\nit(\"no operations result in the same array\", () => {\n  const { finalArray, changes } = flexibleModifyAndTrack([1, 2, 3], []);\n  expect(finalArray).to.deep.equal([1, 2, 3]);\n  expect(changes).to.deep.equal([]);\n});\n\nit(\"handles complex multiple operations\", () => {\n  const { finalArray, changes } = flexibleModifyAndTrack([1, 2, 3, 4, 5], [\n    { start: 1, deleteCount: 1, items: [6] },\n    { start: 4, deleteCount: 1, items: [7, 8] }\n  ]);\n  expect(finalArray).to.deep.equal([1, 6, 3, 4, 7, 8]);\n  expect(changes).to.deep.equal([\n    { added: [6], removed: [2] },\n    { added: [7, 8], removed: [5] }\n  ]);\n});\n\nit(\"operation with deleteCount greater than array length\", () => {\n  const { finalArray, changes } = flexibleModifyAndTrack([1, 2, 3], [{ start: 1, deleteCount: 5, items: [4, 5] }]);\n  expect(finalArray).to.deep.equal([1, 4, 5]);\n  expect(changes).to.deep.equal([{ added: [4, 5], removed: [2, 3] }]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}