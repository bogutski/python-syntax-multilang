{
  "_id": "6696c2cb763f0712c198f444",
  "name": {
    "en": "/*",
    "ru": "Комбинирование списков с исключениями"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `combineAndFilter`, которая принимает три массива: `list1`, `list2` и `exclusions`.\n\nФункция должна объединить `list1` и `list2`, затем удалить из результата все элементы, присутствующие в массиве `exclusions`.\n\nФункция должна вернуть новый массив.\n\n\nПример запуска функции:\n```javascript\nconst list1 = ['apple', 'banana', 'carrot'];\nconst list2 = ['date', 'fig', 'grape'];\nconst exclusions = ['banana', 'date'];\nconsole.log(combineAndFilter(list1, list2, exclusions)); // [ 'apple', 'carrot', 'fig', 'grape' ]\n\nconst list1 = [1, 2, 3, 4, 5];\nconst list2 = [10, 11, 12];\nconst exclusions = [11, 12, 2, 3, 4];\nconsole.log(combineAndFilter(list1, list2, exclusions)); // [ 1, 5, 10 ]\n```"
  },
  "initialSolution": "function combineAndFilter(){\n\n}",
  "completedSolution": "function combineAndFilter(arr1, arr2, exclusions) {\n  let merged = [...arr1, ...arr2]\n\n  for(let el of exclusions){\n    const index = merged.indexOf(el)\n    if(index !== -1) merged.splice(index, 1)\n  }\n\n  return merged;\n}",
  "openTest": "Array.prototype.toSpliced = function(start, deleteCount, ...items) {\n  let newArray = this.slice();\n  if(deleteCount === undefined) deleteCount = newArray.length - start\n  newArray.splice(start, deleteCount, ...items);\n  return newArray;\n};\n\nit('Created function combineAndFilter', () => {\n  expect(combineAndFilter).to.be.a('function');\n});\n\nit(\"correctly combines two lists and filters out exclusions\", () => {\n  const list1 = ['apple', 'banana', 'carrot'];\n  const list2 = ['date', 'fig', 'grape'];\n  const exclusions = ['banana', 'date'];\n  expect(combineAndFilter(list1, list2, exclusions)).to.deep.equal(['apple', 'carrot', 'fig', 'grape']);\n});\n\nit(\"returns the first list unchanged when the second list and exclusions are empty\", () => {\n  const list1 = ['apple', 'banana'];\n  const list2 = [];\n  const exclusions = [];\n  expect(combineAndFilter(list1, list2, exclusions)).to.deep.equal(['apple', 'banana']);\n});\n\nit(\"returns the second list unchanged when the first list and exclusions are empty\", () => {\n  const list1 = [];\n  const list2 = ['banana', 'carrot'];\n  const exclusions = [];\n  expect(combineAndFilter(list1, list2, exclusions)).to.deep.equal(['banana', 'carrot']);\n});\n\nit(\"returns an empty array when all elements are excluded\", () => {\n  const list1 = ['apple'];\n  const list2 = ['banana'];\n  const exclusions = ['apple', 'banana'];\n  expect(combineAndFilter(list1, list2, exclusions)).to.deep.equal([]);\n});\n\nit(\"handles the case with no exclusions correctly\", () => {\n  const list1 = ['apple'];\n  const list2 = ['banana'];\n  const exclusions = [];\n  expect(combineAndFilter(list1, list2, exclusions)).to.deep.equal(['apple', 'banana']);\n});\n\nit(\"works correctly when lists have overlapping elements not in exclusions\", () => {\n  const list1 = ['apple', 'banana'];\n  const list2 = ['banana', 'carrot'];\n  const exclusions = ['fig'];\n  expect(combineAndFilter(list1, list2, exclusions)).to.deep.equal(['apple', 'banana', 'banana', 'carrot']);\n});\n\nit(\"correctly handles an empty initial list\", () => {\n  const list1 = [];\n  const list2 = ['apple', 'banana'];\n  const exclusions = ['banana'];\n  expect(combineAndFilter(list1, list2, exclusions)).to.deep.equal(['apple']);\n});\n\nit(\"excludes all elements if they all are in exclusions\", () => {\n  const list1 = ['apple'];\n  const list2 = ['banana'];\n  const exclusions = ['apple', 'banana'];\n  expect(combineAndFilter(list1, list2, exclusions)).to.deep.equal([]);\n});\n\nit(\"returns a combined list unchanged if exclusions are not present in it\", () => {\n  const list1 = ['carrot', 'date'];\n  const list2 = ['eggplant', 'fig'];\n  const exclusions = ['apple', 'banana'];\n  expect(combineAndFilter(list1, list2, exclusions)).to.deep.equal(['carrot', 'date', 'eggplant', 'fig']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}