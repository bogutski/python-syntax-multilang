{
  "_id": "6696c2cb763f0712c198f445",
  "name": {
    "en": "/*",
    "ru": "Фильтрация и добавление элементов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterAndAppend`, которая принимает массив `arr`, массив нежелательных элементов `filterOut`, и массив элементов `toAdd`.\n\nФункция должна сначала удалить все элементы из `arr`, которые присутствуют в `filterOut`, а затем добавить к концу массива все элементы из `toAdd`.\n\nВ переданном массиве могут быть дубликаты элементов. Убедитесь, что все дубликаты удалены, если они в списке на удаление.\n\nФункция должна возвращать новый массив, переданный массив должен остаться не измененным.\n\n\nПример запуска функции:\n```javascript\nconst originalArray = ['apple', 'banana', 'carrot', 'date', 'eggplant'];\nconst filterOut = ['banana', 'carrot'];\nconst toAdd = ['fig', 'grape'];\n\nconsole.log(filterAndAppend(originalArray, filterOut, toAdd)); // [ 'apple', 'date', 'eggplant', 'fig', 'grape' ]\n\nconst originalArray = ['apple', 'banana', 'banana', 'carrot'];\nconst filterOut = ['banana'];\nconst toAdd = ['date'];\n\nconsole.log(filterAndAppend(originalArray, filterOut, toAdd)) // [ 'apple', 'carrot', 'date' ]\n```"
  },
  "initialSolution": "function filterAndAppend(){\n\n}",
  "completedSolution": "function filterAndAppend(arr, filterOut, toAdd) {\n  const copy = [...arr]\n\n  for(let el of filterOut){\n    let index = copy.indexOf(el)\n\n    while(index !== -1){\n      copy.splice(index, 1)\n      index = copy.indexOf(el)\n    }\n\n  }\n\n  return copy.toSpliced(copy.length, 0, ...toAdd);\n}",
  "openTest": "Array.prototype.toSpliced = function(start, deleteCount, ...items) {\n  let newArray = this.slice();\n  if(deleteCount === undefined) deleteCount = newArray.length - start\n  newArray.splice(start, deleteCount, ...items);\n  return newArray;\n};\n\nit('Created function filterAndAppend', () => {\n  expect(filterAndAppend).to.be.a('function');\n});\n\nit(\"correctly filters out specified elements and appends new ones\", () => {\n  const originalArray = ['apple', 'banana', 'carrot', 'date', 'eggplant'];\n  const filterOut = ['banana', 'carrot'];\n  const toAdd = ['fig', 'grape'];\n  const resultArray = filterAndAppend(originalArray, filterOut, toAdd);\n  expect(resultArray).to.deep.equal(['apple', 'date', 'eggplant', 'fig', 'grape']);\n});\n\nit(\"returns the original array when no elements are filtered out and nothing is added\", () => {\n  const originalArray = ['apple', 'banana'];\n  const filterOut = [];\n  const toAdd = [];\n  const resultArray = filterAndAppend(originalArray, filterOut, toAdd);\n  expect(resultArray).to.deep.equal(['apple', 'banana']);\n});\n\nit(\"works correctly with empty original array\", () => {\n  const originalArray = [];\n  const filterOut = ['banana', 'carrot'];\n  const toAdd = ['fig', 'grape'];\n  const resultArray = filterAndAppend(originalArray, filterOut, toAdd);\n  expect(resultArray).to.deep.equal(['fig', 'grape']);\n});\n\nit(\"correctly appends elements when no elements are filtered out\", () => {\n  const originalArray = ['apple', 'banana'];\n  const filterOut = ['carrot'];\n  const toAdd = ['date', 'eggplant'];\n  expect(filterAndAppend(originalArray, filterOut, toAdd)).to.deep.equal(['apple', 'banana', 'date', 'eggplant']);\n});\n\nit(\"leaves the array unchanged when filterOut and toAdd are empty\", () => {\n  const originalArray = ['fig', 'grape'];\n  expect(filterAndAppend(originalArray, [], [])).to.deep.equal(['fig', 'grape']);\n});\n\nit(\"removes all instances of filtered out elements\", () => {\n  const originalArray = ['apple', 'banana', 'banana', 'carrot'];\n  const filterOut = ['banana'];\n  const toAdd = ['date'];\n  expect(filterAndAppend(originalArray, filterOut, toAdd)).to.deep.equal(['apple', 'carrot', 'date']);\n});\n\nit(\"handles filtering out non-existent elements gracefully\", () => {\n  const originalArray = ['fig', 'grape'];\n  const filterOut = ['apple'];\n  const toAdd = ['honeydew'];\n  expect(filterAndAppend(originalArray, filterOut, toAdd)).to.deep.equal(['fig', 'grape', 'honeydew']);\n});\n\nit(\"correctly appends multiple copies of the same element\", () => {\n  const originalArray = ['apple', 'banana'];\n  const filterOut = ['banana'];\n  const toAdd = ['carrot', 'carrot'];\n  expect(filterAndAppend(originalArray, filterOut, toAdd)).to.deep.equal(['apple', 'carrot', 'carrot']);\n});\n\nit(\"successfully filters out every element in the original array\", () => {\n  const originalArray = ['apple', 'banana', 'carrot'];\n  const filterOut = ['apple', 'banana', 'carrot'];\n  const toAdd = ['date'];\n  expect(filterAndAppend(originalArray, filterOut, toAdd)).to.deep.equal(['date']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}