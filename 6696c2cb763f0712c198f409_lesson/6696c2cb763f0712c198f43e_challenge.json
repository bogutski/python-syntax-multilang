{
  "_id": "6696c2cb763f0712c198f43e",
  "name": {
    "en": "/*",
    "ru": "Уникальное добавление элементов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `addUnique`, которая принимает два параметра: массив `arr` и произвольное количество элементов `newElements`.\n\nФункция должна использовать метод `toSpliced()` для добавления новых элементов в копию массива.\n\nТолько уникальные элементы должны быть добавлены, это те, которых в оригинальном массиве еще нет.\n\nВаша функция должна возвращать новый массив с уникальными элементами.\n\n\nПример запуска функции:\n```javascript\nconst originalArray = ['apple', 'banana', 'cherry'];\nconst newArray = addUnique(originalArray, 'banana', 'cherry', 'durian', 'elderberry');\n\nconsole.log(originalArray); // Вывод: ['apple', 'banana', 'cherry']\nconsole.log(newArray);      // Вывод: ['apple', 'banana', 'cherry', 'durian', 'elderberry']\n```"
  },
  "initialSolution": "function addUnique(){\n\n}",
  "completedSolution": "function addUnique(arr, ...elements) {\n  const newElements = elements.filter(el => !arr.includes(el))\n  return arr.toSpliced(arr.length, 0, ...newElements);\n}",
  "openTest": "Array.prototype.toSpliced = function(start, deleteCount, ...items) {\n  let newArray = this.slice();\n  if(deleteCount === undefined) deleteCount = newArray.length - start\n  newArray.splice(start, deleteCount, ...items);\n  return newArray;\n};\n\nit('Created function addUnique', () => {\n  expect(addUnique).to.be.a('function');\n});\n\nit('Function addUnique should include method toSpliced()', () => {\n  const res = addUnique.toString()\n  expect(res).to.include('.toSpliced(')\n});\n\nit(\"addUnique(['apple', 'banana', 'cherry'], 'banana', 'cherry', 'durian', 'elderberry') should return ['apple', 'banana', 'cherry', 'durian', 'elderberry']\", () => {\n  expect(addUnique(['apple', 'banana', 'cherry'], 'banana', 'cherry', 'durian', 'elderberry')).to.deep.equal(['apple', 'banana', 'cherry', 'durian', 'elderberry']);\n});\n\nit(\"addUnique(['apple'], 'banana') should return ['apple', 'banana']\", () => {\n  expect(addUnique(['apple'], 'banana')).to.deep.equal(['apple', 'banana']);\n});\n\nit(\"addUnique(['apple', 'banana'], 'apple') should not add duplicate 'apple'\", () => {\n  expect(addUnique(['apple', 'banana'], 'apple')).to.deep.equal(['apple', 'banana']);\n});\n\nit(\"addUnique([], 'apple', 'banana') should return ['apple', 'banana'] for an empty original array\", () => {\n  expect(addUnique([], 'apple', 'banana')).to.deep.equal(['apple', 'banana']);\n});\n\nit(\"addUnique(['apple', 'banana'], 'cherry', 'durian') should return ['apple', 'banana', 'cherry', 'durian']\", () => {\n  expect(addUnique(['apple', 'banana'], 'cherry', 'durian')).to.deep.equal(['apple', 'banana', 'cherry', 'durian']);\n});\n\nit(\"addUnique(['apple'], 'banana', 'apple') should ignore the second 'apple'\", () => {\n  expect(addUnique(['apple'], 'banana', 'apple')).to.deep.equal(['apple', 'banana']);\n});\n\nit(\"addUnique(['apple', 'banana'], 'banana', 'banana') should ignore repeated 'banana'\", () => {\n  expect(addUnique(['apple', 'banana'], 'banana', 'banana')).to.deep.equal(['apple', 'banana']);\n});\n\nit(\"addUnique([], 'apple') should return ['apple'] when starting from an empty array\", () => {\n  expect(addUnique([], 'apple')).to.deep.equal(['apple']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}