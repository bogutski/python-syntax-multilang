{
  "_id": "6696c2cb763f0712c198f43f",
  "name": {
    "en": "/*",
    "ru": "Фильтрация и добавление элементов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterAndAdd`, которая принимает исходный массив и произвольное количество элементов elementsToAdd.\n\nФункция должна отфильтровать `elementsToAdd`, оставляя только числа, и добавить их в новую копию исходного массива с использованием метода `toSpliced()`.\n\nВозвращаемый результат должен быть новым массивом, содержащим исходные элементы плюс добавленные числовые элементы из `elementsToAdd`. Исходный массив должен оставаться неизменным.\n\n\nПример запуска функции:\n```javascript\nconst originalArray = ['apple', 5, 'banana'];\nconst resultArray = filterAndAdd(originalArray, 'cherry', 10, 'durian', 15);\n\nconsole.log(originalArray); // Вывод: ['apple', 5, 'banana']\nconsole.log(resultArray);   // Вывод: ['apple', 5, 'banana', 10, 15]\n```"
  },
  "initialSolution": "function filterAndAdd(){\n\n}",
  "completedSolution": "function filterAndAdd(arr, ...elements) {\n  const elementsToAdd = elements.filter(el => typeof el === 'number')\n  return arr.toSpliced(arr.length, 0, ...elementsToAdd);\n}",
  "openTest": "Array.prototype.toSpliced = function(start, deleteCount, ...items) {\n  let newArray = this.slice();\n  if(deleteCount === undefined) deleteCount = newArray.length - start\n  newArray.splice(start, deleteCount, ...items);\n  return newArray;\n};\n\nit('Created function filterAndAdd', () => {\n  expect(filterAndAdd).to.be.a('function');\n});\n\nit('Function filterAndAdd should include method toSpliced()', () => {\n  const res = filterAndAdd.toString()\n  expect(res).to.include('.toSpliced(')\n});\n\nit(\"filterAndAdd(['apple', 5, 'banana'], 'cherry', 10, 'durian', 15) should return ['apple', 5, 'banana', 10, 15]\", () => {\n  expect(filterAndAdd(['apple', 5, 'banana'], 'cherry', 10, 'durian', 15)).to.deep.equal(['apple', 5, 'banana', 10, 15]);\n});\n\nit(\"filterAndAdd([1, 2], 3, '4', 5) should return [1, 2, 3, 5]\", () => {\n  expect(filterAndAdd([1, 2], 3, '4', 5)).to.deep.equal([1, 2, 3, 5]);\n});\n\nit(\"filterAndAdd([], 'hello', 20, 'world', 30) should return [20, 30] for an empty original array\", () => {\n  expect(filterAndAdd([], 'hello', 20, 'world', 30)).to.deep.equal([20, 30]);\n});\n\nit(\"filterAndAdd(['a', 'b'], 'c', 'd') should return ['a', 'b'] when no numbers are added\", () => {\n  expect(filterAndAdd(['a', 'b'], 'c', 'd')).to.deep.equal(['a', 'b']);\n});\n\nit(\"filterAndAdd(['x'], 100) should return ['x', 100]\", () => {\n  expect(filterAndAdd(['x'], 100)).to.deep.equal(['x', 100]);\n});\n\nit(\"filterAndAdd([10, 20], 30, 40, '50') should ignore string '50' and return [10, 20, 30, 40]\", () => {\n  expect(filterAndAdd([10, 20], 30, 40, '50')).to.deep.equal([10, 20, 30, 40]);\n});\n\nit(\"filterAndAdd(['first'], 1, 'second') should return ['first', 1]\", () => {\n  expect(filterAndAdd(['first'], 1, 'second')).to.deep.equal(['first', 1]);\n});\n\nit(\"filterAndAdd([null, undefined], 0, false, 2) should return [null, undefined, 0, 2]\", () => {\n  expect(filterAndAdd([null, undefined], 0, false, 2)).to.deep.equal([null, undefined, 0, 2]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}