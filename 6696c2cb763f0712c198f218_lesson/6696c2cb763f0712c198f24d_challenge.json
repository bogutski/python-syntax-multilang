{
  "_id": "6696c2cb763f0712c198f24d",
  "name": {
    "en": "Compare arrays using the object",
    "ru": "Сравнить массивы с помощью объекта"
  },
  "instruction": {
    "en": "The function `checkArray1` takes two arrays `arr1` and `arr2`.\n\nThe function should return `true` if all elements of array `arr2` are contained in array `arr1`, otherwise return `false`.\n\nIf the arrays are empty, then return the string 'Nothing to check'.\n\nTo solve this task, we will use a `for` loop and an object.\n\nFix the code so that the function works correctly.\n\nExample function calls:\ncheckArray1([1, 2, 3, 10, 20, 1], [1, 2, 3, 1]) // true\ncheckArray1([1, 2, 3, 10, 20, 1], [1, 2, 3, 1, 4]) // false\ncheckArray1([1, 2, 3, 10, 20, 1], []) // true\ncheckArray1([], [1, 2, 3, 1]) // false\ncheckArray1([], []) // 'Nothing to check'",
    "ru": "Функция `checkArray1` принимает два массива `arr1` и `arr2`.\n\nФункция должна вернуть `true` если все элементы массива `arr2` содержатся в массиве `arr1`, иначе вернуть `false`.\n\nЕсли массивы пустые, то вернуть строку 'Nothing to check'\n\nДля решения этой задачи мы будем использовать цикл `for` и объект.\n\nИсправьте код, чтобы функция работала правильно.\n\nПример запуска функции:\n```javascript\ncheckArray1([1, 2, 3, 10, 20, 1], [1, 2, 3, 1]) // true\ncheckArray1([1, 2, 3, 10, 20, 1], [1, 2, 3, 1, 4]) // false\ncheckArray1([1, 2, 3, 10, 20, 1], []) // true\ncheckArray1([], [1, 2, 3, 1]) // false\ncheckArray1([], []) // 'Nothing to check'\n```"
  },
  "initialSolution": "function checkArray1(arr1, arr2) {\n  if(arr1.length === 0 || arr2.length === 0) return 'Nothing to check'\n  let elements = {empty};\n\n  for (let i = 0; i < arr1.length; i++) {\n    elements[arr1[i]] = true;\n  }\n\n  for (let i = 0; i < arr2.length; i++) {\n    if (!elements.hasOwnProperty(arr2[i])) {\n      return not true;\n    }\n  }\n\n  return true;\n}",
  "completedSolution": "function checkArray1(arr1, arr2) {\n  if (arr1.length === 0 && arr2.length === 0) return 'Nothing to check'\n  let elements = {};\n\n  for (let i = 0; i < arr1.length; i++) {\n    elements[arr1[i]] = true;\n  }\n\n  for (let i = 0; i < arr2.length; i++) {\n    if (!elements.hasOwnProperty(arr2[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}",
  "openTest": "it('Created function checkArray1', () => {\n  expect(checkArray1).to.be.a('function');\n});\n\nit('checkArray1([1, 2, 3, 10, 20, 1], [1, 2, 3, 1]) should return true', () => {\n  expect(checkArray1([1, 2, 3, 10, 20, 1], [1, 2, 3, 1])).to.be.true;\n});\n\nit('checkArray1([1, 2, 3, 10, 20, 1], [1, 2, 3, 1, 4]) should return false', () => {\n  expect(checkArray1([1, 2, 3, 10, 20, 1], [1, 2, 3, 1, 4])).to.be.false;\n});\n\nit('checkArray1([1, 2, 3, 10, 20, 1], []) should return true', () => {\n  expect(checkArray1([1, 2, 3, 10, 20, 1], [])).to.be.true;\n});\n\nit('checkArray1([], [1, 2, 3, 1]) should return false', () => {\n  expect(checkArray1([], [1, 2, 3, 1])).to.be.false;\n});\n\nit('checkArray1([], []) should return \"Nothing to check\"', () => {\n  expect(checkArray1([], [])).to.be.equal('Nothing to check');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}