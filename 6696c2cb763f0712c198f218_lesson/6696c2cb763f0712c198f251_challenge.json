{
  "_id": "6696c2cb763f0712c198f251",
  "name": {
    "en": "Which elements of the second array are not in the first array?",
    "ru": "Какие элементы второго массива не входят в первый массив?"
  },
  "instruction": {
    "en": "The function `whatNotIncluded` takes two arrays consisting of strings or numbers.\n\nThe function should return an array of elements that are present in the second array but not in the first.\n\nIf one of the arrays is empty, the function should return the string \"Array is empty\".\n\nIf all elements of the second array are present in the first, the function should return an empty array.\n\nExamples of function execution:\n```javascript\nwhatNotIncluded([1, 2, 3], [1, 2, 3]) // []\nwhatNotIncluded([1, 2, 3], [1, 2, 3, 4]) // [\"4\"]\nwhatNotIncluded([\"js\", \"needs\", \"more\", \"practice\"], [\"js\", \"js\", \"challenge\"]) // [\"js\", \"challenge\"]\nwhatNotIncluded([\"hello\", \"world\"], [\"js\", \"needs\", \"more\", \"practice\"]) // [\"js\", \"needs\", \"more\", \"practice\"]\nwhatNotIncluded([\"hello\", \"world\"], []) // \"Array is empty\"\n```\n\nHint:\nThe task is similar to the solution of previous tasks, but with slight changes.\nWhen checking the property of an object, if the value is zero, the property should be removed from the object.\n\nAnd output the keys of the object into an array.",
    "ru": "Функция `whatNotIncluded` принимает два массива, состоящие из строк или чисел.\n\nФункция должна вернуть массив элементов, которые есть во втором массиве, но не встречаются в первом.\n\nЕсли один из массивов пустой, то функция должна вернуть строку \"Array is empty\".\n\nЕсли все элементы второго массива встречаются в первом, то функция должна вернуть пустой массив.\n\nПримеры запуска функции:\n```javascript\nwhatNotIncluded([1, 2, 3], [1, 2, 3]) // []\nwhatNotIncluded([1, 2, 3], [1, 2, 3, 4]) // [\"4\"]\nwhatNotIncluded([\"js\", \"needs\", \"more\", \"practice\"], [\"js\", \"js\", \"challenge\"]) // [\"js\", \"challenge\"]\nwhatNotIncluded([\"hello\", \"world\"], [\"js\", \"needs\", \"more\", \"practice\"]) // [\"js\", \"needs\", \"more\", \"practice\"]\nwhatNotIncluded([\"hello\", \"world\"], []) // \"Array is empty\"\n```\n\nПодсказка:\nЗадача повторяет решение предыдущих задач, но с небольшими изменениями.\nПри проверке свойства объекта, если значение равно нулю, то нужно удалить свойство из объекта.\n\nИ вывести ключи объекта в массив."
  },
  "initialSolution": "fun",
  "completedSolution": "function whatNotIncluded(arr1, arr2) {\n  if (!arr2.length || !arr1.length) return \"Array is empty\"\n  const obj = {};\n  for (let i = 0; i < arr2.length; i++) {\n    if (!obj[arr2[i]]) obj[arr2[i]] = 1;\n    else obj[arr2[i]]++;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n\n    if (obj[arr1[i]]) {\n      obj[arr1[i]]--;\n    }\n    if (obj[arr1[i]] === 0) {\n      delete obj[arr1[i]]\n    }\n  }\n  return Object.keys(obj)\n}",
  "openTest": "it('Created function whatNotIncluded', () => {\n  expect(whatNotIncluded).to.be.a('function');\n});\n\nit('whatNotIncluded([1, 2, 3], [1, 2, 3]) should return []', () => {\n  expect(whatNotIncluded([1, 2, 3], [1, 2, 3])).to.deep.equal([]);\n});\n\nit('whatNotIncluded([1, 2, 3], [1, 2, 3, 4]) should return [\"4\"]', () => {\n  expect(whatNotIncluded([1, 2, 3], [1, 2, 3, 4])).to.deep.equal([\"4\"]);\n});\n\nit('whatNotIncluded([\"js\", \"needs\", \"more\", \"practice\"], [\"js\", \"js\", \"challenge\"]) should return [\"js\", \"challenge\"]', () => {\n  expect(whatNotIncluded([\"js\", \"needs\", \"more\", \"practice\"], [\"js\", \"js\", \"challenge\"])).to.deep.equal([\"js\", \"challenge\"]);\n});\n\nit('whatNotIncluded([\"hello\", \"world\"], [\"js\", \"needs\", \"more\", \"practice\"]) should return [\"js\", \"needs\", \"more\", \"practice\"]', () => {\n  expect(whatNotIncluded([\"hello\", \"world\"], [\"js\", \"needs\", \"more\", \"practice\"])).to.deep.equal([\"js\", \"needs\", \"more\", \"practice\"]);\n});\n\nit('whatNotIncluded([\"hello\", \"world\"], []) should return \"Array is empty\"', () => {\n  expect(whatNotIncluded([\"hello\", \"world\"], [])).to.equal(\"Array is empty\");\n});\n\nit('whatNotIncluded([], []) should return \"Array is empty\"', () => {\n  expect(whatNotIncluded([], [])).to.equal(\"Array is empty\");\n});\n\nit('whatNotIncluded([10,20,30,30,30], [10,10,20,20]) should return [\"10\", \"20\"]', () => {\n  expect(whatNotIncluded([10, 20, 30, 30, 30], [10, 10, 20, 20])).to.deep.equal([\"10\", \"20\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}