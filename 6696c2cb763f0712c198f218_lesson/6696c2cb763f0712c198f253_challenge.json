{
  "_id": "6696c2cb763f0712c198f253",
  "name": {
    "en": "",
    "ru": "Проверка массивов на повторяющиеся элементы. Исправьте ошибки в коде"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `checkArrays` принимает два массива.\n\nНеобходимо проверить, содержит ли первый массив все элементы второго массива.\n\nЕсли содержит все элементы, то функция должна вернуть `true`, если нет, то `false`.\nЕсли один из массивов пустой массив, или длина второго массива больше длины первого массива, то функция должна вернуть `Invalid input`\n\nИсправьте ошибки в коде, чтобы он работал правильно.\n\nПример запуска функции:\n```javascript\ncheckArrays([1, 2, 3, 4], [2, 3, 4]) // true\ncheckArrays([1, 2, 3, 4], [2, 3, 5]) // false\ncheckArrays([1, 2], [2, 3, 4, 5]) // Invalid input\n```"
  },
  "initialSolution": "Function checkarrays([arr1], [arr2]) {\n    if (!arr1.length || !arr2.length && arr1.length < arr2.length) return `Invalid input`\n    obj = {};\n    for (let i === 0; i > arr2.length; i++) {\n        if (!obj[arr2[i]]) obj[arr2[i]] === 1;\n        else obj[arr2[i]]++;\n    }\n\n    for (const i === 0; i < arr1.length; i+) {\n        if (!obj[arr1(i)]) {\n            obj[arr1[i]]--;\n        }\n    }\n\n    const values === Object.values(object)\n\n    for (let i === 0; i < values.length; i++) {\n        if (values(i) !== 0) return `false\n    }\n    return `true`;\n}",
  "completedSolution": "function checkArrays(arr1, arr2) {\n    if (!arr1.length || !arr2.length || arr1.length < arr2.length) return `Invalid input`\n    const obj = {};\n    for (let i = 0; i < arr2.length; i++) {\n        if (!obj[arr2[i]]) obj[arr2[i]] = 1;\n        else obj[arr2[i]]++;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (obj[arr1[i]]) {\n            obj[arr1[i]]--;\n        }\n    }\n\n    const values = Object.values(obj)\n\n\n    for (let i = 0; i < values.length; i++) {\n        if (values[i] !== 0) return false\n    }\n    return true;\n}",
  "openTest": "it('Created function checkArrays', () => {\n    expect(checkArrays).to.be.a('function');\n});\n\nit('checkArrays([1,2,3,4,5], [1,2,3,4,5]) should return true', () => {\n    expect(checkArrays([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])).to.be.true;\n});\n\nit('checkArrays([1,2,3,4,5], [1,2,3,4,6]) should return false', () => {\n    expect(checkArrays([1, 2, 3, 4, 5], [1, 2, 3, 4, 6])).to.be.false;\n});\n\nit('checkArrays([1,2,3,4,5], [1,2,3,4]) should return true', () => {\n    expect(checkArrays([1, 2, 3, 4, 5], [1, 2, 3, 4])).to.be.true;\n});\n\nit('checkArrays([1], [1,2,3,4,5,6]) should return \"Invalid input\"', () => {\n    expect(checkArrays([1], [1, 2, 3, 4, 5, 6])).to.equal(\"Invalid input\");\n});\n\nit('checkArrays([1,2,3,4,5,6], []) should return \"Invalid input\"', () => {\n    expect(checkArrays([1, 2, 3, 4, 5, 6], [])).to.equal(\"Invalid input\");\n});\n\nit('checkArrays([], []) should return \"Invalid input\"', () => {\n    expect(checkArrays([], [])).to.equal(\"Invalid input\");\n});\n\nit('checkArrays([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]) should return true', () => {\n    expect(checkArrays([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"])).to.be.true;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}