{
  "_id": "6696c2cb763f0712c198f250",
  "name": {
    "en": "Check for insertion of elements of one array into another array",
    "ru": "Проверка на вхождение элементов одного массива в другой"
  },
  "instruction": {
    "en": "The problem is similar to the previous one, but without a solution algorithm.\n\nThe `isFirstContainsSecond` function must accept two arrays that can contain strings and numbers\n\nThe function must return `true` if the first array contains all the elements of the second array, otherwise `false`.\n\nIf at least one of the arrays is empty, the function must return `false`.\n\nExamples of how to run the function:\n```javascript\nisFirstContainsSecond([1, 2, 3], [3, 2]) // true\nisFirstContainsSecond([\"hello\", \"hello\", \"js\"], [\"js\", \"practice\") // false\nisFirstContainsSecond([1, 2, 3], []) // false\n```",
    "ru": "Задача похожа на предыдущую, но уже без алгоритма решения.\n\nФункция `isFirstContainsSecond` должна принимать два массива, в котором могут содержаться строки и числа\n\nФункция должна возвращать `true`, если первый массив содержит все элементы второго массива, иначе `false`.\n\nЕсли хоть один из массивов пустой, то функция должна возвращать `false`.\n\nПримеры запуска функции:\n```javascript\nisFirstContainsSecond([1, 2, 3], [3, 2]) // true\nisFirstContainsSecond([\"hello\", \"hello\", \"js\"], [\"js\", \"practice\") // false\nisFirstContainsSecond([1, 2, 3], []) // false\n```"
  },
  "initialSolution": "function isFirstContainsSecond",
  "completedSolution": "function isFirstContainsSecond(arr1, arr2) {\n  if (!arr1.length || !arr2.length || arr1.length < arr2.length) return false\n  const obj = {};\n  for (let i = 0; i < arr2.length; i++) {\n    if (!obj[arr2[i]]) obj[arr2[i]] = 1;\n    else obj[arr2[i]]++;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (obj[arr1[i]]) {\n      obj[arr1[i]]--;\n    }\n  }\n\n  const values = Object.values(obj)\n\n\n  for (let i = 0; i < values.length; i++) {\n    if (values[i] !== 0) return false\n  }\n  return true;\n}",
  "openTest": "it('Created function isFirstContainsSecond', () => {\n  expect(isFirstContainsSecond).to.be.a('function');\n});\n\nit('isFirstContainsSecond([1, 2, 3], [3, 2]) should return true', () => {\n  expect(isFirstContainsSecond([1, 2, 3], [3, 2])).to.be.true;\n});\n\nit('isFirstContainsSecond([\"hello\", \"hello\", \"js\"], [\"js\", \"practice\") should return false', () => {\n  expect(isFirstContainsSecond([\"hello\", \"hello\", \"js\"], [\"js\", \"practice\"])).to.be.false;\n});\n\nit('isFirstContainsSecond([1, 2, 3], [3, 2, 1, 1]) should return false', () => {\n  expect(isFirstContainsSecond([1, 2, 3], [3, 2, 1, 1])).to.be.false;\n});\n\nit('isFirstContainsSecond([1, 2, 3], []) should return false', () => {\n  expect(isFirstContainsSecond([1, 2, 3], [])).to.be.false;\n});\n\nit('isFirstContainsSecond([], [1, 2, 3]) should return false', () => {\n  expect(isFirstContainsSecond([], [1, 2, 3])).to.be.false;\n});\n\nit('isFirstContainsSecond([], []) should return false', () => {\n  expect(isFirstContainsSecond([], [])).to.be.false;\n});\n\nit('isFirstContainsSecond([\"\", \"challenge\", \"solved\"], [\"\", \"\"]) should return false', () => {\n  expect(isFirstContainsSecond([\"\", \"challenge\", \"solved\"], [\"\", \"\"])).to.be.false;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}