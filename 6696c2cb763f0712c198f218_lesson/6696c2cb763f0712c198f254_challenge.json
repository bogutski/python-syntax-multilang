{
  "_id": "6696c2cb763f0712c198f254",
  "name": {
    "en": "/*",
    "ru": "Найти пересечение двух массивов"
  },
  "instruction": {
    "en": "",
    "ru": "Создайте функцию `findArrayIntersection`, которая принимает два массива в качестве аргументов и возвращает массив, содержащий их пересечение.\n\nВ пересечении не должно быть дубликатов.\n\nЕсли один из массивов пустой, либо нет пересечений - вернуть пустой массив.\n\nПример запуска функции:\n```javascript\nfindArrayIntersection([ ], [3, 4, 5])    // [ ]\nfindArrayIntersection([1, 2], [3, 4, 5]) // [ ]\nfindArrayIntersection([1, 2, 3], [1, 7, 6, 5, 4, 3])       // [ 1, 3 ]\nfindArrayIntersection([10, 11, 12], [8, 10, 1, 12, 11, 7]) // [ 10, 11, 12 ]\nfindArrayIntersection(['a1', 'b2', 'c3', 'd4'], ['a', 'd4', 'b3', 'c3']) // [ 'c3', 'd4' ]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function findArrayIntersection(arr1, arr2) {\n  const intersection = [];\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr2.includes(arr1[i]) && !intersection.includes(arr1[i])) {\n      intersection.push(arr1[i]);\n    }\n  }\n\n  return intersection;\n}",
  "openTest": "it('Function findArrayIntersection is created', () => {\n  expect(findArrayIntersection).to.be.a('function');\n});\n\nit('findArrayIntersection([1, 2, 3], [2, 3, 4]) should return [2, 3]', () => {\n  expect(findArrayIntersection([1, 2, 3], [2, 3, 4])).to.deep.equal([2, 3]);\n});\n\nit('findArrayIntersection([\"apple\", \"banana\", \"cherry\"], [\"cherry\", \"fig\", \"apple\"]) should return [\"apple\", \"cherry\"]', () => {\n  expect(findArrayIntersection([\"apple\", \"banana\", \"cherry\"], [\"cherry\", \"fig\", \"apple\"])).to.deep.equal([\"apple\", \"cherry\"]);\n});\n\nit('findArrayIntersection([], [\"banana\", \"apple\", \"cherry\"]) should return []', () => {\n  expect(findArrayIntersection([], [\"banana\", \"apple\", \"cherry\"])).to.deep.equal([]);\n});\n\nit('findArrayIntersection([\"apple\", \"banana\"], []) should return []', () => {\n  expect(findArrayIntersection([\"apple\", \"banana\"], [])).to.deep.equal([]);\n});\n\nit('findArrayIntersection([\"apple\", \"banana\"], [\"apple\", \"banana\"]) should return [\"apple\", \"banana\"]', () => {\n  expect(findArrayIntersection([\"apple\", \"banana\"], [\"apple\", \"banana\"])).to.deep.equal([\"apple\", \"banana\"]);\n});\n\nit('findArrayIntersection([\"apple\", \"banana\"], []) should return []', () => {\n  expect(findArrayIntersection([\"apple\", \"banana\"], [])).to.deep.equal([]);\n});\n\nit('findArrayIntersection([], []) should return []', () => {\n  expect(findArrayIntersection([], [])).to.deep.equal([]);\n});\n\nit('findArrayIntersection([\"apple\", \"banana\"], [\"cherry\", \"date\"] should return []', () => {\n  expect(findArrayIntersection([\"apple\", \"banana\"], [\"cherry\", \"date\"])).to.deep.equal([]);\n});\n\nit('findArrayIntersection([\"1\", \"2\", \"3\"], [1, 2, 3]) should return []', () => {\n  expect(findArrayIntersection([\"1\", \"2\", \"3\"], [1, 2, 3])).to.deep.equal([]);\n});\n\nit('findArrayIntersection([\"apple\", \"apple\", \"banana\"], [\"banana\", \"banana\", \"apple\"]) should return [\"apple\", \"banana\"]', () => {\n  expect(findArrayIntersection([\"apple\", \"apple\", \"banana\"], [\"banana\", \"banana\", \"apple\"])).to.deep.equal([\"apple\", \"banana\"]);\n});\n\nit('expect(findArrayIntersection([obj1, obj2], [obj1, obj2]) should return [obj1, obj2]', () => {\n  const obj1 = { key: 'value1' };\n  const obj2 = { key: 'value2' };\n  expect(findArrayIntersection([obj1, obj2], [obj1, obj2])).to.deep.equal([obj1, obj2]);\n});\n\nit('findArrayIntersection([{ key: \"value1\" }, { key: \"value2\" }], [{ key: \"value1\" }, { key: \"value2\" }]) should return []', () => {\n  expect(findArrayIntersection([{ key: 'value1' }, { key: 'value2' }], [{ key: 'value1' }, { key: 'value2' }])).to.deep.equal([]);\n});\n\nit('findArrayIntersection([true, false], [false, true, false]) should return [true, false]', () => {\n  expect(findArrayIntersection([true, false], [false, true, false])).to.deep.equal([true, false]);\n});\n\nit('findArrayIntersection([null, undefined], [undefined, null, \"test\"]) should return [null, undefined]', () => {\n  expect(findArrayIntersection([null, undefined], [undefined, null, \"test\"])).to.deep.equal([null, undefined]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}