{
  "_id": "6696c2ca763f0712c198f03e",
  "name": {
    "en": "",
    "ru": "Найти минимальное и максимальное число среди разных типов данных"
  },
  "instruction": {
    "en": "",
    "ru": "Исправьте функцию `minAndMax`, которая принимает два массива.\n\nМассивы могут включать в себя числа, числа в строковом формате, строки с текстом и пустые строки.\n\nПример массива: `[5, '-10', 'abc', '']`.\n\nФункция должна найти минимальное и максимальное число, включая числа в строковом формате, и вернуть их в виде массива: `[min, max]`.\n\nВ возвращаемом массиве числа должны быть в числовом формате.\n\n* Если оба массива пустые, то вернуть строку `'Both arrays are empty'`.\n\n* Если числа не найдены, то вернуть массив: `[undefined, undefined]`.\n\n\nВ коде три ошибки и все они до цикла. Разберитесь в функции и перепишите код самостоятельно.\n\n\nПримеры запуска функции:\n```javascript\nminAndMax([1, 2, 3], [1, '22', '0', '', 'ssss']);      // [0, 22]\nminAndMax([], [-14, '-2', '000', '', 'text', '-515']); // [-515, 0]\nminAndMax(['', 'word'], ['', 'text', 'test']);         // [undefined, undefined]\nminAndMax([], []);                                     // 'Both arrays are empty'\n```"
  },
  "initialSolution": "function minAndMax(arr1, arr2){\n  const newArr = [...arr1, ...arr2];\n  if(!newArr.length) 'Both arrays are empty';\n  let min = 0;\n  let max = 0;\n\n  for(let i = 0; i < newArr.length; i++){\n    if ( newArr[i] !== '' && !isNaN(newArr[i]) ) {\n      if(min === undefined) {\n        min = +newArr[i];\n        max = +newArr[i];\n      } else {\n        if(newArr[i] < min) min = +newArr[i];\n        if(newArr[i] > max) max = +newArr[i];\n      }\n    }\n  }\n  return [min, max];\n}",
  "completedSolution": "function minAndMax(arr1, arr2){\n  const newArr = [...arr1, ...arr2];\n  if(!newArr.length) return 'Both arrays are empty';\n  let min;\n  let max;\n\n  for(let i = 0; i < newArr.length; i++){\n    if ( newArr[i] !== '' && !isNaN(newArr[i]) ) {\n      if(min === undefined) {\n        min = +newArr[i];\n        max = +newArr[i];\n      } else {\n        if(newArr[i] < min) min = +newArr[i];\n        if(newArr[i] > max) max = +newArr[i];\n      }\n    }\n  }\n  return [min, max];\n}",
  "openTest": "it('Created function minAndMax', () => {\n  expect(minAndMax).to.be.a('function');\n});\n\nit('Function minAndMax does not include Math.min', () => {\n  expect(minAndMax.toString()).to.not.include('Math.min');\n});\n\nit('Function minAndMax does not include Math.max', () => {\n  expect(minAndMax.toString()).to.not.include('Math.max');\n});\n\nit(\"minAndMax([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, '2', '000', '', 'ss']) should return [0, 9]\", () => {\n  expect(minAndMax([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, '2', '000', '', 'ss'])).to.deep.equal([0, 9]);\n});\n\nit(\"minAndMax([], [14, '2', '000', '', 'text', '-55']) should return [-55, 14]\", () => {\n  expect(minAndMax([], [14, '2', '000', '', 'text', '-55'])).to.deep.equal([-55, 14]);\n});\n\nit(\"minAndMax(['test', 5, -25, '', 78, '-41', 0], []) should return [-41, 78]\", () => {\n  expect(minAndMax(['test', 5, -25, '', 78, '-41', 0], [])).to.deep.equal([-41, 78]);\n});\n\nit(\"minAndMax([236, '555', 12, 89, ''], [11, '22', 69, '']) should return [11, 555]\", () => {\n  expect(minAndMax([236, '555', 12, 89, ''], [11, '22', 69, ''])).to.deep.equal([11, 555]);\n});\n\nit(\"minAndMax(['test','',], ['', 'text', '']) should return [undefined, undefined]\", () => {\n  expect(minAndMax(['test','',], ['', 'text', ''])).to.deep.equal([undefined, undefined]);\n});\n\nit(\"minAndMax([], []) should return 'Both arrays are empty'\", () => {\n  expect(minAndMax([], [])).to.deep.equal('Both arrays are empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}