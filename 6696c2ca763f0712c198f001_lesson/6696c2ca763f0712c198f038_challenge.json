{
  "_id": "6696c2ca763f0712c198f038",
  "name": {
    "en": "",
    "ru": "Найти минимальное и максимальное положительное число"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `minAndMaxOfPositive`, которая принимает массив из чисел с типом данных `number` и `string`.\n\nФункция должна перевести все элементы массива в тип `number` и вернуть массив из двух элементов, где:\n\n* первый элемент - `минимальное положительное` число,\n* а второй - `максимальное положительное` число.\n\nЕсли массив пустой или в нем нет положительных чисел, то функция должна вернуть массив: `[undefined, undefined]`.\n\nМетоды использовать нельзя.\n\n\nПримеры запуска функции:\n```javascript\nminAndMaxOfPositive([-1, '5', 4, -5, '3', 2, '1']) // [1, 5]\nminAndMaxOfPositive([-22, '-45', -47, '2', 6, 22, '45', '47']) // [2, 47]\nminAndMaxOfPositive([-75, '-55', -41, -75, '-666', -25]) // [undefined, undefined]\nminAndMaxOfPositive([]) // [undefined, undefined]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function minAndMaxOfPositive(arr){\n  let min;\n  let max;\n\n  for (let i = 0; i < arr.length; i++){\n    if(Number(arr[i]) > 0 && min === undefined) {\n      min = Number(arr[i]);\n      max = Number(arr[i]);\n    }\n    if(Number(arr[i]) > 0 && Number(arr[i]) < min) min = Number(arr[i]);\n    if(Number(arr[i]) > 0 && Number(arr[i]) > max) max = Number(arr[i]);\n  }\n\n  return [min, max];\n}",
  "openTest": "it('Created function minAndMaxOfPositive', () => {\n  expect(minAndMaxOfPositive).to.be.a('function');\n});\n\nit('Function minAndMaxOfPositive should not include Math.min', () => {\n  expect(minAndMaxOfPositive.toString()).to.not.include('Math.min');\n});\n\nit('Function minAndMaxOfPositive should not include Math.max', () => {\n  expect(minAndMaxOfPositive.toString()).to.not.include('Math.max');\n});\n\nit(\"minAndMaxOfPositive([-1, '5', 4, -5, '3', 2, '1']) should return [1, 5]\", () => {\n  expect(minAndMaxOfPositive([-1, '5', 4, -5, '3', 2, '1'])).to.deep.equal([1, 5]);\n});\n\nit(\"minAndMaxOfPositive([-12, 55, 43, -65, 10, -33, 125, 111]) should return [10, 125]\", () => {\n  expect(minAndMaxOfPositive([-12, '55', 43, '-65', '10', -33, '125', '111'])).to.deep.equal([10, 125]);\n});\n\nit(\"minAndMaxOfPositive([-5, -36, -41, 10, -666, -452]) should return [10, 10]\", () => {\n  expect(minAndMaxOfPositive([-5, -36, -41, '10', -666, -452])).to.deep.equal([10, 10]);\n});\n\nit(\"minAndMaxOfPositive([-5, -36, -41, -666, -452]) should return [undefined, undefined]\", () => {\n  expect(minAndMaxOfPositive([-5, -36, -41, -666, -452])).to.deep.equal([undefined, undefined]);\n});\n\nit(\"minAndMaxOfPositive([]) should return [undefined, undefined]\", () => {\n  expect(minAndMaxOfPositive([])).to.deep.equal([undefined, undefined]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}