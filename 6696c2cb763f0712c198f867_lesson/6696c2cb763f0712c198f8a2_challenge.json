{
  "_id": "6696c2cb763f0712c198f8a2",
  "name": {
    "en": "/*",
    "ru": "Найти индекс последнего элемента с заданной суммой цифр"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastIndexByDigitSum`, которая принимает массив строк и число.\n\nФункция должна вернуть объект, содержащий отформатированный массив строк (только цифры) и индекс последнего элемента, сумма цифр которого равна заданному числу.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLastIndexByDigitSum(['123', '4a5 6', 'hello', '789', ' 3!2#+1 '], 15));\n// { modifiedArray: [ '123', '456', '', '789', '321' ], index: 1 }\n\nconsole.log(findLastIndexByDigitSum(['a-10', 'b-20', 'c-30', 'd-40'], 3));\n// { modifiedArray: [ '10', '20', '30', '40' ], index: 2 }\n\nconsole.log(findLastIndexByDigitSum(['abc', 'def', 'ghi'], 0));\n// { modifiedArray: [ '', '', '' ], index: 2 }\n\nconsole.log(findLastIndexByDigitSum(['1a2b3c', '4d5e6f', '7g8h9i'], 10));\n// { modifiedArray: [ '123', '456', '789' ], index: -1 }\n```"
  },
  "initialSolution": "function findLastIndexByDigitSum(){\n\n}",
  "completedSolution": "function findLastIndexByDigitSum(arr, target) {\n  const modified = arr.map(str => str.replace(/[^0-9]/g, ''))\n  const index = modified.findLastIndex(el => {\n    let sum = 0;\n\n    for(let char of el){\n      sum += +char\n    }\n\n    return sum === target\n  })\n\n  return {modifiedArray: modified, index};\n}",
  "openTest": "it('Created function findLastIndexByDigitSum', () => {\n  expect(findLastIndexByDigitSum).to.be.a('function');\n});\n\nit('findLastIndexByDigitSum([\"123\", \"4a5 6\", \"hello\", \"789\", \" 3!2#+1 \"], 15) should return { modifiedArray: [\"123\", \"456\", \"\", \"789\", \"321\"], index: 1 }', function() {\n  expect(findLastIndexByDigitSum([\"123\", \"4a5 6\", \"hello\", \"789\", \" 3!2#+1 \"], 15)).to.deep.equal({ modifiedArray: [\"123\", \"456\", \"\", \"789\", \"321\"], index: 1 });\n});\n\nit('findLastIndexByDigitSum([\"10\", \"20\", \"30\", \"40\"], 3) should return { modifiedArray: [\"10\", \"20\", \"30\", \"40\"], index: 2 }', function() {\n  expect(findLastIndexByDigitSum([\"10\", \"20\", \"30\", \"40\"], 3)).to.deep.equal({ modifiedArray: [\"10\", \"20\", \"30\", \"40\"], index: 2 });\n});\n\nit('findLastIndexByDigitSum([\"abc\", \"def\", \"ghi\"], 0) should return { modifiedArray: [\"\", \"\", \"\"], index: 2 }', function() {\n  expect(findLastIndexByDigitSum([\"abc\", \"def\", \"ghi\"], 0)).to.deep.equal({ modifiedArray: [\"\", \"\", \"\"], index: 2 });\n});\n\nit('findLastIndexByDigitSum([\"1a2b3c\", \"4d5e6f\", \"7g8h9i\"], 10) should return { modifiedArray: [\"123\", \"456\", \"789\"], index: -1 }', function() {\n  expect(findLastIndexByDigitSum([\"1a2b3c\", \"4d5e6f\", \"7g8h9i\"], 10)).to.deep.equal({ modifiedArray: [\"123\", \"456\", \"789\"], index: -1 });\n});\n\nit('findLastIndexByDigitSum([\"12x3\", \"4#5 6\", \"hello\", \"78@9\", \" 3!2#+1 \"], 6) should return { modifiedArray: [\"123\", \"456\", \"\", \"789\", \"321\"], index: 4 }', function() {\n  expect(findLastIndexByDigitSum([\"12x3\", \"4#5 6\", \"hello\", \"78@9\", \" 3!2#+1 \"], 6)).to.deep.equal({ modifiedArray: [\"123\", \"456\", \"\", \"789\", \"321\"], index: 4 });\n});\n\nit('findLastIndexByDigitSum([\"123abc\", \"456def\", \"789ghi\"], 10) should return { modifiedArray: [\"123\", \"456\", \"789\"], index: -1 }', function() {\n  expect(findLastIndexByDigitSum([\"123abc\", \"456def\", \"789ghi\"], 10)).to.deep.equal({ modifiedArray: [\"123\", \"456\", \"789\"], index: -1 });\n});\n\nit('findLastIndexByDigitSum([\"11\", \"22\", \"33\", \"44\"], 4) should return { modifiedArray: [\"11\", \"22\", \"33\", \"44\"], index: 1 }', function() {\n  expect(findLastIndexByDigitSum([\"11\", \"22\", \"33\", \"44\"], 4)).to.deep.equal({ modifiedArray: [\"11\", \"22\", \"33\", \"44\"], index: 1 });\n});\n\nit('findLastIndexByDigitSum([\"abc123\", \"def456\", \"ghi789\"], 12) should return { modifiedArray: [\"123\", \"456\", \"789\"], index: -1 }', function() {\n  expect(findLastIndexByDigitSum([\"abc123\", \"def456\", \"ghi789\"], 12)).to.deep.equal({ modifiedArray: [\"123\", \"456\", \"789\"], index: -1 });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}