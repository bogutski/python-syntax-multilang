{
  "_id": "6696c2cb763f0712c198f89d",
  "name": {
    "en": "/*",
    "ru": "Найти индекс последнего элемента с четной или нечетной длиной строки"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastIndexByLength`, которая принимает массив строк и опцию (`even` или `odd`).\n\nФункция должна вернуть индекс последнего элемента в массиве, длина строки которого четная или нечетная в зависимости от переданной опции.\n\nЕсли такого элемента нет, функция должна вернуть `-1`.\n\n\nПримеры запуска функции:\n```javascript\nfindLastIndexByLength([\"hello\", \"world\", \"hi\"], 'odd'); // 1\nfindLastIndexByLength([\"one\", \"two\", \"three\"], 'even'); // -1\nfindLastIndexByLength([\"cat\", \"dog\", \"elephant\"], 'odd'); // 1\nfindLastIndexByLength([\"apple\", \"banana\", \"cherry\"], 'even'); // 2\n```"
  },
  "initialSolution": "function findLastIndexByLength(){\n\n}",
  "completedSolution": "function findLastIndexByLength(arr, opt) {\n  let num\n  if(opt === 'even') num = 0\n  else if(opt === 'odd') num = 1\n\n  return arr.findLastIndex(str => str.length % 2 === num);\n}",
  "openTest": "it('Created function findLastIndexByLength', () => {\n  expect(findLastIndexByLength).to.be.a('function');\n});\n\nit(\"Function findLastIndexByLength should include findLastIndex method\", () => {\n  const result = findLastIndexByLength.toString();\n  expect(result).to.include('.findLastIndex(');\n});\n\nit('findLastIndexByLength([\"one\", \"two\", \"three\"], \"even\") should return -1', function() {\n  expect(findLastIndexByLength([\"one\", \"two\", \"three\"], \"even\")).to.equal(-1);\n});\n\nit('findLastIndexByLength([\"hello\", \"world\", \"hi\"], \"odd\") should return 1', function() {\n  expect(findLastIndexByLength([\"hello\", \"world\", \"hi\"], \"odd\")).to.equal(1);\n});\n\nit('findLastIndexByLength([\"apple\", \"banana\", \"cherry\"], \"even\") should return 2', function() {\n  expect(findLastIndexByLength([\"apple\", \"banana\", \"cherry\"], \"even\")).to.equal(2);\n});\n\nit('findLastIndexByLength([\"cat\", \"dog\", \"elephant\"], \"odd\") should return 1', function() {\n  expect(findLastIndexByLength([\"cat\", \"dog\", \"elephant\"], \"odd\")).to.equal(1);\n});\n\nit('findLastIndexByLength([\"lemon\", \"lime\", \"banana\", \"berry\"], \"even\") should return 2', function() {\n  expect(findLastIndexByLength([\"lemon\", \"lime\", \"banana\", \"berry\"], \"even\")).to.equal(2);\n});\n\nit('findLastIndexByLength([\"apple\", \"banana\", \"apricot\", \"blueberry\"], \"odd\") should return 3', function() {\n  expect(findLastIndexByLength([\"apple\", \"banana\", \"apricot\", \"blueberry\"], \"odd\")).to.equal(3);\n});\n\nit('findLastIndexByLength([\"strawberry\", \"raspberry\", \"blueberry\"], \"even\") should return 0', function() {\n  expect(findLastIndexByLength([\"strawberry\", \"raspberry\", \"blueberry\"], \"even\")).to.equal(0);\n});\n\nit('findLastIndexByLength([\"kiwi\", \"melon\", \"orange\"], \"odd\") should return 1', function() {\n  expect(findLastIndexByLength([\"kiwi\", \"melon\", \"orange\"], \"odd\")).to.equal(1);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}