{
  "_id": "6696c2cb763f0712c198f89c",
  "name": {
    "en": "/*",
    "ru": "Найти индекс последнего элемента с определенным значением свойства"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastIndexByProperty`, которая принимает массив объектов, ключ и значение свойства.\n\nФункция должна вернуть индекс последнего объекта в массиве, у которого значение свойства, указанного ключом, равно переданному значению.\n\nЕсли такого объекта нет, функция должна вернуть `-1`.\n\n\nПримеры запуска функции:\n```javascript\nfindLastIndexByProperty([{age: 25}, {age: 30}, {age: 35}, {age: 30}], 'age', 30); // 3\nfindLastIndexByProperty([{type: 'fruit'}, {type: 'vegetable'}, {type: 'fruit'}], 'type', 'meat'); // -1\nfindLastIndexByProperty([{status: 'active'}, {status: 'inactive'}, {status: 'active'}], 'status', 'active'); // 2\nfindLastIndexByProperty([{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}, {name: 'Alice'}], 'name', 'Alice'); // 3\n```"
  },
  "initialSolution": "function findLastIndexByProperty(){\n\n}",
  "completedSolution": "function findLastIndexByProperty(arr, key, value) {\n  return arr.findLastIndex(object => object[key] === value);\n}",
  "openTest": "it('Created function findLastIndexByProperty', () => {\n  expect(findLastIndexByProperty).to.be.a('function');\n});\n\nit(\"Function findLastIndexByProperty should include findLastIndex method\", () => {\n  const result = findLastIndexByProperty.toString();\n  expect(result).to.include('.findLastIndex(');\n});\n\nit('findLastIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}, {name: \"Alice\"}], \"name\", \"Alice\") should return 3', function() {\n  expect(findLastIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}, {name: \"Alice\"}], \"name\", \"Alice\")).to.equal(3);\n});\n\nit('findLastIndexByProperty([{age: 25}, {age: 30}, {age: 35}, {age: 30}], \"age\", 30) should return 3', function() {\n  expect(findLastIndexByProperty([{age: 25}, {age: 30}, {age: 35}, {age: 30}], \"age\", 30)).to.equal(3);\n});\n\nit('findLastIndexByProperty([{type: \"fruit\"}, {type: \"vegetable\"}, {type: \"fruit\"}], \"type\", \"meat\") should return -1', function() {\n  expect(findLastIndexByProperty([{type: \"fruit\"}, {type: \"vegetable\"}, {type: \"fruit\"}], \"type\", \"meat\")).to.equal(-1);\n});\n\nit('findLastIndexByProperty([{status: \"active\"}, {status: \"inactive\"}, {status: \"active\"}], \"status\", \"active\") should return 2', function() {\n  expect(findLastIndexByProperty([{status: \"active\"}, {status: \"inactive\"}, {status: \"active\"}], \"status\", \"active\")).to.equal(2);\n});\n\nit('findLastIndexByProperty([{color: \"red\"}, {color: \"green\"}, {color: \"blue\"}, {color: \"red\"}], \"color\", \"red\") should return 3', function() {\n  expect(findLastIndexByProperty([{color: \"red\"}, {color: \"green\"}, {color: \"blue\"}, {color: \"red\"}], \"color\", \"red\")).to.equal(3);\n});\n\nit('findLastIndexByProperty([{height: 150}, {height: 160}, {height: 150}], \"height\", 150) should return 2', function() {\n  expect(findLastIndexByProperty([{height: 150}, {height: 160}, {height: 150}], \"height\", 150)).to.equal(2);\n});\n\nit('findLastIndexByProperty([], \"anyKey\", \"anyValue\") should return -1', function() {\n  expect(findLastIndexByProperty([], \"anyKey\", \"anyValue\")).to.equal(-1);\n});\n\nit('findLastIndexByProperty([{category: \"A\"}, {category: \"B\"}, {category: \"A\"}], \"category\", \"A\") should return 2', function() {\n  expect(findLastIndexByProperty([{category: \"A\"}, {category: \"B\"}, {category: \"A\"}], \"category\", \"A\")).to.equal(2);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}