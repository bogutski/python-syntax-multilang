{
  "_id": "6696c2cb763f0712c198f8a0",
  "name": {
    "en": "/*",
    "ru": "Найти индекс последнего элемента, содержащего заданный символ указанное количество раз"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastIndexBySymbolCount`, которая принимает массив строк, символ и целевое количество вхождений символа.\n\nСтроки в массиве могут состоять из букв в разном регистре, и передаваемый символ также может быть в разных регистрах.\n\nФункция должна вернуть индекс последнего элемента в массиве, который содержит указанный символ заданное количество раз, игнорируя регистр.\n\nЕсли такого элемента нет, функция должна вернуть `-1`.\n\n\nПримеры запуска функции:\n```javascript\nfindLastIndexBySymbolCount(['hello', 'WORLD', 'JAVAScript'], 'a', 2); // 2\nfindLastIndexBySymbolCount(['BanAna', 'ApPle', 'GraPe'], 'A', 2); // 0\nfindLastIndexBySymbolCount(['cat', 'dOg', 'eLePhant'], 'E', 1); // 2\nfindLastIndexBySymbolCount(['One', 'tWo', 'Three'], 'b', 1); // -1\n```"
  },
  "initialSolution": "function findLastIndexBySymbolCount(){\n\n}",
  "completedSolution": "function findLastIndexBySymbolCount(arr, symbol, target) {\n  symbol = symbol.toLowerCase()\n\n  return arr.findLastIndex(str => {\n    str = str.toLowerCase();\n    let count = 0\n\n    for(let char of str) {\n      if(char === symbol) count++\n      if(count === target) return true\n    }\n    return false\n  });\n}",
  "openTest": "it('Created function findLastIndexBySymbolCount', () => {\n  expect(findLastIndexBySymbolCount).to.be.a('function');\n});\n\nit('findLastIndexBySymbolCount([\"hello\", \"WORLD\", \"JAVAScript\"], \"a\", 2) should return 2', function() {\n  expect(findLastIndexBySymbolCount([\"hello\", \"WORLD\", \"JAVAScript\"], \"a\", 2)).to.equal(2);\n});\n\nit('findLastIndexBySymbolCount([\"BanAna\", \"ApPle\", \"GraPe\"], \"a\", 2) should return 0', function() {\n  expect(findLastIndexBySymbolCount([\"BanAna\", \"ApPle\", \"GraPe\"], \"a\", 2)).to.equal(0);\n});\n\nit('findLastIndexBySymbolCount([\"cat\", \"dOg\", \"eLePhant\"], \"e\", 1) should return 2', function() {\n  expect(findLastIndexBySymbolCount([\"cat\", \"dOg\", \"eLePhant\"], \"e\", 1)).to.equal(2);\n});\n\nit('findLastIndexBySymbolCount([\"One\", \"tWo\", \"Three\"], \"O\", 1) should return 1', function() {\n  expect(findLastIndexBySymbolCount([\"One\", \"tWo\", \"Three\"], \"O\", 1)).to.equal(1);\n});\n\nit('findLastIndexBySymbolCount([\"aPple\", \"bAnAnA\", \"chErrY\"], \"e\", 2) should return -1', function() {\n  expect(findLastIndexBySymbolCount([\"aPple\", \"bAnAnA\", \"chErrY\"], \"e\", 2)).to.equal(-1);\n});\n\nit('findLastIndexBySymbolCount([\"kIwI\", \"mElOn\", \"OrAngE\"], \"N\", 1) should return 2', function() {\n  expect(findLastIndexBySymbolCount([\"kIwI\", \"mElOn\", \"OrAngE\"], \"N\", 1)).to.equal(2);\n});\n\nit('findLastIndexBySymbolCount([\"PiNeApple\", \"PeAr\", \"PeAch\"], \"P\", 3) should return 0', function() {\n  expect(findLastIndexBySymbolCount([\"PiNeApple\", \"PeAr\", \"PeAch\"], \"P\", 3)).to.equal(0);\n});\n\nit('findLastIndexBySymbolCount([\"aAA\", \"bBB\", \"cCC\"], \"c\", 2) should return 2', function() {\n  expect(findLastIndexBySymbolCount([\"aAA\", \"bBB\", \"cCC\"], \"c\", 2)).to.equal(2);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}