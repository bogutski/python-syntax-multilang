{
  "_id": "6696c2ca763f0712c198dd1e",
  "name": {
    "en": "Assign undefined value to the variable",
    "ru": "Присвойте переменной значение undefined"
  },
  "instruction": {
    "en": "You can create a variable with the value `undefined` by assigning it the value `undefined`.\nCreate a variable named `name` and assign it the value `undefined`.\nCreate a variable named `typeOfName` and assign it the type of the variable `name`.\n\nHere is an example that is fundamentally similar to what needs to be done, but adapt it to the task requirements:\n```javascript\nlet salary = undefined;\nconst typeOfSalary = typeof salary;\n```",
    "ru": "Переменную со значением `undefined` можно создать, присвоив ей значение `undefined`.\nСоздайте переменную с именем `name` и присвойте ей значение `undefined`.\nСоздайте переменную с именем `typeOfName` и присвойте ей значение типа переменной `name`.\n\nПриведем пример, который принципиально похож на то, что нужно сделать, но адаптируйте его к требованиям задачи:\n```javascript\nlet salary = undefined;\nconst typeOfSalary = typeof salary;\n```"
  },
  "initialSolution": "",
  "completedSolution": "let name = undefined;\nconst typeOfName = typeof name;",
  "openTest": "it('Variable `name` exists and is undefined', () => {\n  expect(name).to.be.undefined;\n});\n\nit('Variable `name` is of type undefined', () => {\n  expect(typeof name).eq('undefined');\n});\n\nit('The `typeOfName` variable exists and has a value', () => {\n  expect(typeOfName).not.undefined;\n});\n\nit('Variable `typeOfName` has type string', () => {\n  expect(typeOfName).a('string');\n});\n\nit('Variable `typeOfName` has value `undefined`', () => {\n  expect(typeOfName).equal('undefined');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "```javascript\nlet name = undefined;\nconst typeOfName = typeof name;\n```",
    "ru": "```javascript\nlet name = undefined;\nconst typeOfName = typeof name;\n```"
  }
}