{
  "_id": "6696c2ca763f0712c198e739",
  "name": {
    "en": "Array with a \"hole\"",
    "ru": "Массив с \"дыркой\""
  },
  "instruction": {
    "en": "Write a function `arrWithHole` that takes one parameter, an array.\n\nThe array consists of numbers in which the second element can be `undefined`.\n\nThe function returns the value of the second element of the array.\n\nIf the second element of the array is `undefined` - assign to it the value of the sum of the first and the last element of the array.\n\nOtherwise, raise the second element of the array to the power of the third element of the array.\n\nAn example of running a function:\n```javascript\narrWithHole([11, 2, 5, 13, 3]) // 2 ** 5 = 32\narrWithHole([13, undefined, 3, 51, 87]) // 13 + 87 = 100\n```",
    "ru": "Напишите функцию `arrWithHole`, которая принимает один параметр - массив.\n\nМассив состоит из чисел, в котором второй элемент может быть равен `undefined`.\n\nФункция возвращает значение второго элемента массива.\n\nЕсли второй элемент массива равен `undefined` - присвойте ему значение суммы первого и последнего элемента массива.\n\nВ противном случае возведите второй элемент массива в степень третьего элемента массива.\n\nПример запуска функции:\n```javascript\narrWithHole([11, 2, 5, 13, 3]) // 2 ** 5 = 32\narrWithHole([13, undefined, 3, 51, 87]) // 13 + 87 = 100\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function arrWithHole(arr) {\n    if (arr[1] === undefined) {\n        return arr[1] = arr[0] + arr[arr.length - 1]\n    } else {\n        return arr[1] ** arr[2]\n    }\n}",
  "openTest": "it('Created function arrWithHole', () => {\n    expect(arrWithHole).to.be.a('function');\n});\n\nit('arrWithHole([11, 2, 5, 13, 3]) should return 32', () => {\n    expect(arrWithHole([11, 2, 5, 13, 3])).to.be.equal(32);\n});\n\nit('arrWithHole([13, undefined, 3, 51, 87]) should return 87', () => {\n    expect(arrWithHole([13, undefined, 3, 51, 87])).to.be.equal(100);\n});\n\nit('arrWithHole([13, 2, 3, 51, 87]) should return 8', () => {\n    expect(arrWithHole([13, 2, 3, 51, 87])).to.be.equal(8);\n});\n\nit('arrWithHole([13, undefined, 5, 51, 87, 7, 90, 132]) should return 132', () => {\n    expect(arrWithHole([13, undefined, 5, 51, 87, 7, 90, 132])).to.be.equal(145);\n});\n\nit('arrWithHole([13, 12, 3, 51, 87, 7, 90, 132]) should return 1728', () => {\n    expect(arrWithHole([13, 12, 3, 51, 87, 7, 90, 132])).to.be.equal(1728);\n});\n\nit('arrWithHole([13, undefined, 3, 51, 87, 7, 90]) should return 90', () => {\n    expect(arrWithHole([13, undefined, 3, 51, 87, 7, 90])).to.be.equal(103);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}