{
  "_id": "6696c2ca763f0712c198efff",
  "name": {
    "en": "Find the arithmetic mean of all numbers in the subarrays",
    "ru": "Найти среднее арифметическое всех чисел в подмассивах"
  },
  "instruction": {
    "en": "The function `averageInSubArr` takes one parameter - an array `arr`.\n\nThe array `arr` consists of an arbitrary number of subarrays that contain only integers or can be empty.\n\nThe function calculates the total number of all numbers and their sum in all subarrays and returns the arithmetic mean.\n\nThe result is rounded to the nearest integer.\n\nIf all subarrays are empty, the function returns the string `'Arrays are empty'`.\n\nFix the errors in the code for the function to work correctly.\n\nExample function calls:\n```javascript\naverageInSubArr([[2, 2], [3, 3, 5]]); // (2 + 2 + 3 + 3 + 5) / 5 = 3\naverageInSubArr([[12, -3, 474], [], [-9, -474]]); // (12 + (-3) + 474 + (-9) + (-474)) / 5 = 0\naverageInSubArr([[], [3, 3, 5], []]); // (3 + 3 + 5) / 3 = 4\naverageInSubArr([[], [], [], []]); // 'Arrays are empty'\n```",
    "ru": "Функция `averageInSubArr` принимает один параметр - массив `arr`.\n\nМассив `arr` состоит из произвольного количества подмассивов, которые содержат только целые числа или могут быть пустыми.\n\nФункция рассчитывает количество всех чисел и их сумму во всех подмассивах и возвращает среднее арифметическое.\n\nРезультат округляется до ближайшего `целого числа`.\n\nЕсли все подмассивы пустые, то функция возвращает строку `'Arrays are empty'`.\n\nИсправьте ошибки в коде, чтобы функция работала правильно.\n\nПример запуска функции:\n```javascript\naverageInSubArr([[2, 2], [3, 3, 5]]); // (2 + 2 + 3 + 3 + 5) / 5 = 3\naverageInSubArr([[12, -3, 474], [], [-9, -474]]); // (12 + (-3) + 474 + (-9) + (-474)) / 5 = 0\naverageInSubArr([[], [3, 3, 5], []]); // (3 + 3 + 5) / 3 = 4\naverageInSubArr([[], [], [], []]); // 'Arrays are empty'\n```"
  },
  "initialSolution": "function averageInSubArr(arr) {\n  let sum === 0;\n  let count === 0;\n  for (let i === 0; i < arr.length; i++) {\n    for (let j === 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      count--;\n    }\n  }\n  if (count !== 0) return 'Arrays are empty';\n  return Math.round(sum / count);",
  "completedSolution": "function averageInSubArr(arr) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      count++;\n    }\n  }\n  if (count === 0) return 'Arrays are empty';\n  return Math.round(sum / count);\n}",
  "openTest": "it('Created function averageInSubArr', () => {\n  expect(averageInSubArr).to.be.a('function');\n});\n\nit(\"averageInSubArr([[2, 2], [3, 3, 5]]) should return 3\", () => {\n  expect(averageInSubArr([[2, 2], [3, 3, 5]])).to.equal(3);\n});\n\nit(\"averageInSubArr([[4], [11], [9]]) should return 8\", () => {\n  expect(averageInSubArr([[4], [11], [9]])).to.equal(8);\n});\n\nit(\"averageInSubArr([[12, -3, 474], [], [-9, -474]]) should return 0\", () => {\n  expect(averageInSubArr([[12, -3, 474], [], [-9, -474]])).to.equal(0);\n});\n\nit(\"averageInSubArr([[], [3, 3, 5], [], [14, -50]]) should return -5\", () => {\n  expect(averageInSubArr([[], [3, 3, 5], [], [14, -50]])).to.equal(-5);\n});\n\nit(\"averageInSubArr([[100], [-50]]) should return 25\", () => {\n  expect(averageInSubArr([[100], [-50]])).to.equal(25);\n});\n\nit(\"averageInSubArr([[], [3, 3, 5], []]) should return 4\", () => {\n  expect(averageInSubArr([[], [3, 3, 5], []])).to.equal(4);\n});\n\nit(\"averageInSubArr([[], [], [], []]) should return 'Arrays are empty'\", () => {\n  expect(averageInSubArr([[], [], [], []])).to.equal('Arrays are empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}