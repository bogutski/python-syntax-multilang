{
  "_id": "6696c2ca763f0712c198effe",
  "name": {
    "en": "",
    "ru": "Найти среднее арифметическое всех чисел до середины массива"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `averageFromStartToMiddle` принимает один параметр - массив чисел `arr`.\n\nМассив произвольной длины и содержит только положительные и/или отрицательные целые числа.\n\nФункция осуществляет подсчет суммы всех чисел до середины массива и возвращает среднее арифметическое этих чисел.\n\nЕсли массив пустой, то функция возвращает строку `'Array is empty'`.\n\nЕсли длина массива меньше 2, то функция возвращает строку `'Array is not long enough'`.\n\nПри расчете середины массива `middle`, округление производится в `меньшую сторону`.\n\nРезультат подсчета среднеарифметического значения округляется до `ближайшего целого`.\n\nМсправьте ошибки в коде, чтобы функция работала правильно.\n\nПример запуска функции:\n```javascript\naverageFromStartToMiddle([1, 2, 3, 4, 5, 6, 7, 8]); // (1 + 2 + 3 + 4) / 4 = 3\naverageFromStartToMiddle([3, -3, 5, -5, 6, -6, 7, -7]); // (3 + (-3) + 5 + (-5)) / 4 = 0\naverageFromStartToMiddle([77]); // 'Array is not long enough'\naverageFromStartToMiddle([]); // 'Array is empty'\n```"
  },
  "initialSolution": "function averageFromStartToMiddle(arr) {\n  if(!arr.length) return 'Array is empty';\n  if(arr.length <= 2) return 'Array is not long enough';\n  let middle = Math.round(arr.length / 2);\n  let sum != 0;\n  for (let i === 0; i <= middle; i++) {\n    sum += arr[i];\n  }\n  return Math.ceil(sum * middle);\n}",
  "completedSolution": "function averageFromStartToMiddle(arr) {\n  if(!arr.length) return 'Array is empty';\n  if(arr.length < 2) return 'Array is not long enough';\n  let middle = Math.floor(arr.length / 2);\n  let sum = 0;\n  for (let i = 0; i < middle; i++) {\n    sum += arr[i];\n  }\n  return Math.round(sum / middle);\n}",
  "openTest": "it('Created function averageFromStartToMiddle', () => {\n  expect(averageFromStartToMiddle).to.be.a('function');\n});\n\nit(\"averageFromStartToMiddle([1, 2, 3, 4, 5, 6, 7, 8]) should return 3\", () => {\n  expect(averageFromStartToMiddle([1, 2, 3, 4, 5, 6, 7, 8])).to.equal(3);\n});\n\nit(\"averageFromStartToMiddle([-4, -5, -6, -7, -8]) should return -4\", () => {\n  expect(averageFromStartToMiddle([-4, -5, -6, -7, -8])).to.equal(-4);\n});\n\nit(\"averageFromStartToMiddle([3, -3, 5, -5, 6, -6, 7, -7]) should return 0\", () => {\n  expect(averageFromStartToMiddle([3, -3, 5, -5, 6, -6, 7, -7])).to.equal(0);\n});\n\nit(\"averageFromStartToMiddle([10, -200, 30, 7]) should return -95\", () => {\n  expect(averageFromStartToMiddle([10, -200, 30, 7])).to.equal(-95);\n});\n\nit(\"averageFromStartToMiddle([23, -3]) should return 23\", () => {\n  expect(averageFromStartToMiddle([23, -3])).to.equal(23);\n});\n\nit(\"averageFromStartToMiddle([77]) should return 'Array is not long enough'\", () => {\n  expect(averageFromStartToMiddle([77])).to.equal('Array is not long enough');\n});\n\nit(\"averageFromStartToMiddle([]) should return 'Array is empty'\", () => {\n  expect(averageFromStartToMiddle([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}