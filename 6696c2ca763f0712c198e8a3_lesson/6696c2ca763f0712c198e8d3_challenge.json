{
  "_id": "6696c2ca763f0712c198e8d3",
  "name": {
    "en": "An array of integers from 0 to n",
    "ru": "Массив целых чисел от 0 до n"
  },
  "instruction": {
    "en": "The function `consecutiveNumbers` takes one parameter - the number `n`.\n\nThe function must return an array of integers from 0 to `n` inclusive.\n\nIf the passed number `n` is less than zero, the function should return an empty array.\n\nAn example of filling an array with numbers from 1 to 5:\n\n```javascript\nconst arr = [];\nfor (let i = 1; i <= 5; i++) {\narr.push(i);\n}\nconsole.log(arr); // [1, 2, 3, 4, 5]\n```\n\nExamples of running a function:\n\n```javascript\nconsecutiveNumbers(5); // [0, 1, 2, 3, 4, 5]\nconsecutiveNumbers(10); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsecutiveNumbers(0); // [0]\n```",
    "ru": "Функция `consecutiveNumbers` принимает один параметр – число `n`.\n\nФункция должна вернуть массив целых чисел от 0 до `n` включительно.\n\nЕсли переданное число `n` меньше нуля, то функция должна вернуть пустой массив.\n\nПример заполнения массива числами от 1 до 5:\n\n```javascript\nconst arr = [];\nfor (let i = 1; i <= 5; i++) {\n  arr.push(i);\n}\nconsole.log(arr); // [1, 2, 3, 4, 5]\n```\n\nПримеры запуска функции:\n\n```javascript\nconsecutiveNumbers(5);  // [0, 1, 2, 3, 4, 5]\nconsecutiveNumbers(10); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsecutiveNumbers(0);  // [0]\n```"
  },
  "initialSolution": "function sum(num1, num2){\n\n}",
  "completedSolution": "function consecutiveNumbers(n) {\n  const arr = [];\n  for (let i = 0; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}",
  "openTest": "it('Created function consecutiveNumbers', () => {\n  expect(consecutiveNumbers).to.be.a('function');\n});\n\nit('consecutiveNumbers(5) should return [0, 1, 2, 3, 4, 5]', () => {\n  expect(consecutiveNumbers(5)).eql([0, 1, 2, 3, 4, 5]);\n});\n\nit('consecutiveNumbers(10) should return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', () => {\n  expect(consecutiveNumbers(10)).eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n});\n\nit('consecutiveNumbers(0) should return [0]', () => {\n  expect(consecutiveNumbers(0)).eql([0]);\n});\n\nit('consecutiveNumbers(-4) should return []', () => {\n  expect(consecutiveNumbers(-4)).eql([]);\n});\n\nit('consecutiveNumbers(1) should return [0, 1]', () => {\n  expect(consecutiveNumbers(1)).eql([0, 1]);\n});\n\nit('consecutiveNumbers(20) should return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]', () => {\n  expect(consecutiveNumbers(20)).eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}