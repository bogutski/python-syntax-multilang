{
  "_id": "6696c2ca763f0712c198e8d5",
  "name": {
    "en": "Fill the array with odd numbers from m to n",
    "ru": "Заполнить массив нечетными числами от m до n"
  },
  "instruction": {
    "en": "Write a function `oddFromRange` that takes two integers `m` and `n` such that `m` <= `n`, and returns an array filled with odd numbers from the range `m` to `n` inclusive.\n\nIf there are no odd numbers in the specified range, the function should return an empty array.\n\nExamples of running the function:\n\n```javascript\nfillArray(1, 5); // [1, 3, 5]\nfillArray(-5, 5); // [-5, -3, -1, 1, 3, 5]\nfillArray(5, 5); // [5]\n```",
    "ru": "Напишите функцию `oddFromRange`, которая принимает два целых числа `m` и `n`, таких что `m` <= `n`, и возвращает массив, заполненный нечетными числами из диапазона от `m` до `n` включительно.\n\nЕсли нечетных чисел в указанном диапазоне не содержится, то функция должна вернуть пустой массив.\n\nПримеры запуска функции:\n\n```javascript\nfillArray(1, 5);   // [1, 3, 5]\nfillArray(-5, 5);  // [-5, -3, -1, 1, 3, 5]\nfillArray(5, 5);   // [5]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function oddFromRange(m, n) {\n  const result = [];\n  for (let i = m; i <= n; i += 1) {\n    if (i % 2 !== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}",
  "openTest": "it('Created function oddFromRange', () => {\n  expect(oddFromRange).to.be.a('function');\n});\n\nit(`oddFromRange(1, 5) should return [1, 3, 5]`, () => {\n  expect(oddFromRange(1, 5)).to.deep.equal([1, 3, 5]);\n});\n\nit(`oddFromRange(-10, 15) should return [-9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15]`, () => {\n  expect(oddFromRange(-10, 15)).to.deep.equal([-9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15]);\n});\n\nit(`oddFromRange(1, 1) should return [1]`, () => {\n  expect(oddFromRange(1, 1)).to.deep.equal([1]);\n});\n\nit(`oddFromRange(-2, 2) should return [-1, 1]`, () => {\n  expect(oddFromRange(-2, 2)).to.deep.equal([-1, 1]);\n});\n\nit(`oddFromRange(0, 0) should return []`, () => {\n  expect(oddFromRange(0, 0)).to.deep.equal([]);\n});\n\nit(`oddFromRange(0, 1) should return [1]`, () => {\n  expect(oddFromRange(0, 1)).to.deep.equal([1]);\n});\n\nit(`oddFromRange(0, 25) should return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]`, () => {\n  expect(oddFromRange(0, 25)).to.deep.equal([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]);\n});\n\nit(`oddFromRange(1, 26) should return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]`, () => {\n  expect(oddFromRange(1, 26)).to.deep.equal([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}