{
  "_id": "6696c2ca763f0712c198e8dc",
  "name": {
    "en": "Geometric progression",
    "ru": "Геометрическая прогрессия"
  },
  "instruction": {
    "en": "A geometric progression is a sequence of numbers in which each successive number, starting with the second, is obtained from the previous one by multiplying it by a certain number `q' (called the `denominator of the progression').\n\nFor example, the sequence 2, 6, 18, 54, 162, ... is a geometric progression with first term 2 and denominator 3.\n\nThe value of `n`th term of the geometric progression is calculated by one of the formulas:\n\n`an = a1 * q^(n-1)`\n\nwhere `a1` is the first term of the progression and `q` the denominator or\n\n`an = an-1 * q`\n\nwhere `an-1` is the previous term of the progression and `q` the denominator.\n\nWrite a function `progressionMembers` that takes three arguments:\n\n* `firstMember` - the first member of the progression,\n* `denominator` - denominator of the progression\n* `n` - number of members of the progression\n\nThe function should return an array filled with the first `n` members of the geometric progression.\n\nExample of calculating the first 4 members of a progression with the first term 2 and the denominator 5:\n\n```javascript\nconst first = 2;\nconst denominator = 5;\nconst n = 4;\nfor (let i = 1; i <= n; i++) {\nconsole.log(first * denominator ** (i - 1));\n}\n// 2\n// 10\n// 50\n// 250\n```\n\nExamples of running a function:\n\n```javascript\nprogressionMembers(2, 3, 5); // [2, 6, 18, 54, 162]\nprogressionMembers(1, 2, 10); // [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\nprogressionMembers(0, 4, 3); // [0, 0, 0]\nprogressionMembers(5, 0, 6); // [5, 0, 0, 0, 0, 0]\nprogressionMembers(1, 10, 0); // []\n```",
    "ru": "`Геометрическая прогрессия` — это последовательность чисел, в которой каждое последующее число, начиная со второго, получается из предыдущего умножением его на определённое число `q` (называемое `знаменателем прогрессии`).\n\nНапример, последовательность 2, 6, 18, 54, 162, … — геометрическая прогрессия с первым членом 2 и знаменателем 3.\n\nЗначение `n`-го члена геометрической прогрессии вычисляется по одной из формул:\n\n`an = a1 * q^(n-1)`\n\nгде `a1` - первый член прогрессии и `q` знаменатель или\n\n`an = an-1 * q`\n\nгде `an-1` - предыдущий член прогрессии и `q` знаменатель.\n\nНапишите функцию `progressionMembers`, которая принимает три аргумента:\n\n* `firstMember` - первый член прогрессии,\n* `denominator` - знаменатель прогрессии\n* `n` - количество членов прогрессии\n\nФункция должна возвращать массив, заполненный первыми `n` членами геометрической прогрессии.\n\nПример вычисления первых 4х членов прогрессии с первым членом 2 и знаменателем 5:\n\n```javascript\nconst first = 2;\nconst denominator = 5;\nconst n = 4;\nfor (let i = 1; i <= n; i++) {\n  console.log(first * denominator ** (i - 1));\n}\n// 2\n// 10\n// 50\n// 250\n```\n\nПримеры запуска функции:\n\n```javascript\nprogressionMembers(2, 3, 5); // [2, 6, 18, 54, 162]\nprogressionMembers(1, 2, 10); // [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\nprogressionMembers(0, 4, 3); // [0, 0, 0]\nprogressionMembers(5, 0, 6); // [5, 0, 0, 0, 0, 0]\nprogressionMembers(1, 10, 0); // []\n```"
  },
  "initialSolution": "function progressionMembers(firstMember, denominator, n) {",
  "completedSolution": "function progressionMembers(firstMember, denominator, n) {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(firstMember * denominator ** (i - 1));\n  }\n  return result;\n}",
  "openTest": "it('Created function progressionMembers', () => {\n  expect(progressionMembers).to.be.a('function');\n});\n\nit('progressionMembers(3, 4, 10) should return [3, 12, 48, 192, 768, 3072, 12288, 49152, 196608, 786432]', () => {\n  expect(progressionMembers(3, 4, 10)).to.deep.equal([3, 12, 48, 192, 768, 3072, 12288, 49152, 196608, 786432]);\n});\n\nit('progressionMembers(1, 1, 10) should return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', () => {\n  expect(progressionMembers(1, 1, 10)).to.deep.equal([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n});\n\nit('progressionMembers(0, 2, 10) should return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]', () => {\n  expect(progressionMembers(0, 2, 10)).to.deep.equal([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n});\n\nit('progressionMembers(1, 0, 10) should return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]', () => {\n  expect(progressionMembers(1, 0, 10)).to.deep.equal([1, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n});\n\nit('progressionMembers(1, 2, 0) should return []', () => {\n  expect(progressionMembers(1, 2, 0)).to.deep.equal([]);\n});\n\nit('progressionMembers(5, 2, 1) should return [5]', () => {\n  expect(progressionMembers(5, 2, 1)).to.deep.equal([5]);\n});\n\nit('progressionMembers(-5, 2, 5) should return [-5, -10, -20, -40, -80]', () => {\n  expect(progressionMembers(-5, 2, 5)).to.deep.equal([-5, -10, -20, -40, -80]);\n});\n\nit('progressionMembers(5, -2, 5) should return [5, -10, 20, -40, 80]', () => {\n  expect(progressionMembers(5, -2, 5)).to.deep.equal([5, -10, 20, -40, 80]);\n});\n\nit('progressionMembers(-5, -2, 5) should return [-5, 10, -20, 40, -80]', () => {\n  expect(progressionMembers(-5, -2, 5)).to.deep.equal([-5, 10, -20, 40, -80]);\n});\n\nit('progressionMembers(5, 2, -5) should return []', () => {\n  expect(progressionMembers(5, 2, -5)).to.deep.equal([]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}