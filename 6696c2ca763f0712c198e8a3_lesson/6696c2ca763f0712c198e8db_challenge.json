{
  "_id": "6696c2ca763f0712c198e8db",
  "name": {
    "en": "Arithmetic progression",
    "ru": "Арифметическая прогрессия"
  },
  "instruction": {
    "en": "\"An arithmetic progression is a numerical sequence in which each subsequent number, starting from the second, is obtained by adding a constant value called the 'difference' or 'progression step' to the previous number.\n\nFor example, the sequence '1, 3, 5, 7, 9, 11, 13, 15, 17, 19' is an arithmetic progression with a step of '2'.\n\nEach 'n'-th term of an arithmetic progression can be calculated using the formula: 'a1 + (n - 1) * d', where 'a1' is the first term of the progression and 'd' is the progression step.\n\nOr as the 'sum' of the previous 'n-1' term and the progression 'step'.\n\nWrite a function 'fillProgression' that takes three integers 'a1', 'd', and 'n':\n\n* 'a1' - the first term of the progression\n* 'd' - the progression step\n* 'n' - the number of terms in the progression\n\nThe function should return an array filled with the first 'n' terms of the arithmetic progression.\n\nExample of filling an array with five elements of an arithmetic progression with the first term '1' and a step of '3':\n\n```javascript\nconst array = [];\nconst startElement = 1;\nconst step = 3;\nlet element = startElement;\nfor (let i = 0; i < 5; i += 1) {\n  array.push(element);\n  element += step;\n}\n\nconsole.log(array); // [1, 4, 7, 10, 13]\n```\n\nExamples of function calls:\n\n```javascript\n\nfillProgression(1, 2, 10); // [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nfillProgression(-11, 4, 6); // [-11, -7, -3, 1, 5, 9]\nfillProgression(0, 0, 11); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nfillProgression(0, 1, 3); // [0, 1, 2]\nfillProgression(5, 5, 0); // []\n\n```\"",
    "ru": "`Арифметической прогрессией` называется числовая последовательность, в которой каждое последующее число, начиная со второго, получается прибавлением к предыдущему числу некоторого постоянного значения, называемого `разностью` или `шагом прогрессии`.\n\nНапример, последовательность `1, 3, 5, 7, 9, 11, 13, 15, 17, 19` является арифметической прогрессией с шагом `2`.\n\nКаждый `n`-ый член арифметической прогрессии можно вычислить по формуле: `a1 + (n - 1) * d`, где `a1` - первый член прогрессии, `d` - шаг прогрессии.\n\nИли как `сумму` предыдущего `n-1`го члена и `шага` прогрессии.\n\nНапишите функцию `fillProgression`, которая принимает три целых числа `a1`, `d` и `n`:\n\n* `a1` - первый член прогрессии\n* `d` - шаг прогрессии\n* `n` - количество членов прогрессии\n\nФункция должна вернуть массив, заполненный первыми `n` членами арифметической прогрессии.\n\nПример заполнения массива пятью элементами арифметической прогрессии с первым членом `1` и шагом `3`:\n\n```javascript\nconst array = [];\nconst startElement = 1;\nconst step = 3;\nlet element = startElement;\nfor (let i = 0; i < 5; i += 1) {\n  array.push(element);\n  element += step;\n}\n\nconsole.log(array); // [1, 4, 7, 10, 13]\n```\n\nПримеры запуска функции:\n\n```javascript\n\nfillProgression(1, 2, 10); // [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nfillProgression(-11, 4, 6); // [-11, -7, -3, 1, 5, 9]\nfillProgression(0, 0, 11); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nfillProgression(0, 1, 3); // [0, 1, 2]\nfillProgression(5, 5, 0); // []\n\n```"
  },
  "initialSolution": "function fillProgression(a1, d, n) {\n\n}",
  "completedSolution": "function fillProgression(a1, d, n) {\n  const array = [];\n  for (let i = 0; i < n; i += 1) {\n    array.push(a1 + i * d);\n  }\n  return array;\n}",
  "openTest": "it('Created function fillProgression', () => {\n  expect(fillProgression).to.be.a('function');\n});\n\nit('fillProgression(1, 2, 10) should return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]', () => {\n  expect(fillProgression(1, 2, 10)).to.eql([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]);\n});\n\nit('fillProgression(-20, 5, 6) should return [-20, -15, -10, -5, 0, 5]', () => {\n  expect(fillProgression(-20, 5, 6)).to.eql([-20, -15, -10, -5, 0, 5]);\n});\n\nit('fillProgression(0, 0, 4) should return [0, 0, 0, 0]', () => {\n  expect(fillProgression(0, 0, 4)).to.eql([0, 0, 0, 0]);\n});\n\nit('fillProgression(0, 1, 15  ) should return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]', () => {\n  expect(fillProgression(0, 1, 15)).to.eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\n});\n\nit('fillProgression(5, 1, 0) should return []', () => {\n  expect(fillProgression(5, 1, 0)).to.eql([]);\n});\n\nit('fillProgression(5, 5, 0) should return []', () => {\n  expect(fillProgression(5, 5, 0)).to.eql([]);\n});\n\nit('fillProgression(5, 5, 1) should return [5]', () => {\n  expect(fillProgression(5, 5, 1)).to.eql([5]);\n});\n\nit('fillProgression(5, 0, 5) should return [5, 5, 5, 5, 5]', () => {\n  expect(fillProgression(5, 0, 5)).to.eql([5, 5, 5, 5, 5]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}