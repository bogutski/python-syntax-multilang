{
  "_id": "6696c2ca763f0712c198e8da",
  "name": {
    "en": "Whole numbers from the range",
    "ru": "Целые числа из диапазона"
  },
  "instruction": {
    "en": "Write a function `fillArray` that takes two integers `n` and `m` and returns an array filled with consecutive integers.\n\nIf `n` is greater than `m`, the function should return an array filled with consecutive integers from `m` to `n`.\n\nIf `n` is less than `m`, the function must return an array filled with consecutive numbers from `n` to `m`.\n\nIf `n` and `m` are equal, the function must return an array containing one number.\n\nProblem solving algorithm:\n\n1. Create an empty array `result`.\n\n2. Create a variable `start` and assign it an initial value `n`.\n\n3. Create a variable `end` and give it an initial value `m`.\n\n4. Compare `n` and `m`. If `n` is greater than `m`, then write into the variable `start` the value of `m`, and into the variable `end` the value of `n`.\n\n5. Create a loop `for` which will be executed from `start` to `end` inclusive.\n\n6. In the body of the loop add the next number to the array `result`.\n\n7. Return array `result`.\n\nExamples of running a function:\n\n```javascript\nfillArray(1, 5); // [1, 2, 3, 4, 5]\nfillArray(5, 1); // [1, 2, 3, 4, 5]\nfillArray(5, 5); // [5]\nfillArray(-5, 5); // [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n```",
    "ru": "Напишите функцию `fillArray`, которая принимает два целых числа `n` и `m` и возвращает массив, заполненный целыми последовательными числами.\n\nЕсли `n` больше чем `m`, то функция должна вернуть массив, заполненный последовательными числами от `m` до `n`.\n\nЕсли `n` меньше чем `m`, то функция должна вернуть массив, заполненный последовательными числами от `n` до `m`.\n\nЕсли `n` и `m` равны, то функция должна вернуть массив, содержащий одно число.\n\nАлгоритм решения задачи:\n\n1. Создать пустой массив `result`.\n\n2. Создать переменную `start` и присвоить ей начальное значение `n`.\n\n3. Создать переменную `end` и присвоить ей начальное значение `m`.\n\n4. Сравнить `n` и `m`. Если `n` больше чем `m`, то записать в переменную `start` значение `m`, а в переменную `end` значение `n`.\n\n5. Создать цикл `for`, который будет выполняться от `start` до `end` включительно.\n\n6. В теле цикла добавить в массив `result` очередное число.\n\n7. Вернуть массив `result`.\n\nПримеры запуска функции:\n\n```javascript\nfillArray(1, 5); // [1, 2, 3, 4, 5]\nfillArray(5, 1); // [1, 2, 3, 4, 5]\nfillArray(5, 5); // [5]\nfillArray(-5, 5); //  [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n```"
  },
  "initialSolution": "func",
  "completedSolution": "function fillArray(n, m) {\n  let result = [];\n  let start = n;\n  let end = m;\n  if (n > m) {\n    start = m;\n    end = n;\n  }\n  for (let i = start; i <= end; i = i + 1) {\n    result.push(i);\n  }\n  return result;\n}",
  "openTest": "it('Created function fillArray', () => {\n  expect(fillArray).to.be.a('function');\n});\n\nit('fillArray(1, 10) should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', () => {\n  expect(fillArray(1, 10)).to.eql([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n});\n\nit('fillArray(10, 1) should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', () => {\n  expect(fillArray(10, 1)).to.eql([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n});\n\nit('fillArray(1, 1) should return [1]', () => {\n  expect(fillArray(1, 1)).to.eql([1]);\n});\n\nit('fillArray(-8, 3) should return [- 8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3]', () => {\n  expect(fillArray(-8, 3)).to.eql([-8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3]);\n});\n\nit('fillArray(3, -8) should return [- 8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3]', () => {\n  expect(fillArray(3, -8)).to.eql([-8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3]);\n});\n\nit('fillArray(-8, -8) should return [-8]', () => {\n  expect(fillArray(-8, -8)).to.eql([-8]);\n});\n\nit('fillArray(-16, -1) should return [-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1]', () => {\n  expect(fillArray(-16, -1)).to.eql([-16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}