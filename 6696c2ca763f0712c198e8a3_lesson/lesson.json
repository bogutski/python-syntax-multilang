{
  "_id": "6696c2ca763f0712c198e8a3",
  "content": {
    "ru": "В процессе написания программы может возникнуть необходимость повторить один и тот же фрагмент кода несколько раз.\nНапример, вывести на печать одну и ту же строку 5 или 10 раз.\n\n```javascript\nconsole.log('Hello');\nconsole.log('Hello');\nconsole.log('Hello');\nconsole.log('Hello');\nconsole.log('Hello');\n```\n\n```javascript\nHello\nHello\nHello\nHello\nHello\n```\n\nЧтобы не переписывать один и тот же код много раз, в JavaScript используются специальные языковые конструкции - `циклы`.\n\nВ качестве аналогии цикла можно рассмотреть бегуна, который бежит по кругу.\nОн начинает забег со старта, который является и финишем.\nБегун должен пробежать заданное количество кругов.\nКаждый раз, когда он пересекает стартовую черту, считается, что он пробежал один круг, и счетчик кругов увеличивается на `1`.\nБегун сверяет счетчик с заданным количеством кругов, и когда эти значения сравняются, он должен остановиться.\n\nПо такому же принципу работает и цикл в программировании.\n\n##### Цикл состоит из следующих частей:\n\n* `Счетчика цикла` - переменной, которую также часто называют параметром цикла или управляющей переменной цикла; \n\n\n* `условия`, определяющего момент остановки цикла;\n\n\n* `тела цикла` - последовательности действий (`операторов)`, которые выполняются при каждом проходе цикла.\n\nКаждый пробег цикла называется `итерацией`.\n\nСчетчик цикла часто называют `итератором`.\n\n#### Цикл FOR\n\nСамый распространенный цикл в JavaScript - цикл `for`.\n\n```javascript\nfor (<начальное значение>; <условие>; <изменение счетчика после каждой итерации>){\n  // тело цикла\n}\n```\n\n##### Заголовок цикла состоит из трех частей, разделенных точкой с запятой.\n\n`В первой части заголовка цикла` задаются стартовые значения. Для этого создается специальная переменная, которая\nназывается `счетчиком цикла` или `итератором`.\nСчетчику цикла присваивается начальное значение.\nЭти действия выполняются перед началом работы цикла.\n\n`Во второй части заголовка цикла` указывается условие, при котором цикл будет выполняться.\nУсловие записывается в виде логического выражения, которое должно возвращать `true` или `false`.\nУсловие проверяется перед каждым выполнением цикла. Если условие вернуло `true`, то цикл выполняется, если `false` - то\nцикл завершается.\n\n`В третьей части заголовка цикла` указывается действие, которое будет выполняться после каждого прохода цикла - каждой\nитерации.\nОбычно это увеличение или уменьшение счетчика цикла.\n\n`Тело цикла` - это последовательность действий (их также называют командами или операторами), которые выполняются при каждом проходе цикла.\nЕсли в теле цикла содержится несколько команд, они заключаются в фигурные скобки `{}`.\n\n`Внимание!` Счетчик цикла изменяется автоматически после каждой итерации, поэтому в теле цикла его изменять НЕ РЕКОММЕНДУЕТСЯ!\n\n#### Рассмотрим по шагам алгоритм работы цикла `for`:\n\n1. Создается и `инициализируется счетчик цикла` - ему присваивается начальное значение.\n2. Выполняется `проверка условия` цикла. Если условие вернуло `true`, то выполняется тело цикла, если `false` - цикл завершается.\n3. Выполняется `тело цикла`.\n4. Выполняется `изменение счетчика цикла`.\n5. Управление переходит к пункту 2.\n\n#### Примеры цикла `for`\n\n```javascript\nfor (let count = 0; count <= 3; count = count + 1) {\n  console.log('Run ' + count);\n}\n```\n\nРезультат работы цикла:\n\n```javascript\nRun 0\nRun 1\nRun 2\nRun 3\n```\n\nЦикл выполнился четыре раза. Разберемся, как он работает:\n\n1) count = 0 и 0 <= 3 - в консоль выводится `'Run 0'`, count+1.\n2) count = 1 и 1 <= 3 - в консоль выводится `'Run 1'`, count+1.\n3) count = 2 и 2 <= 3 - в консоль выводится `'Run 2'`, count+1.\n4) count = 3 и 3 <= 3 - условие все еще истинно - в консоль выводится `'Run 3'`, count+1.\n5) count = 4 и 4 <= 3 - условие цикла не выполняется, цикл завершается.\n\nИсправим стартовое значение счетчика цикла, чтобы цикл выполнялся три раза и выводил числа от 1 до 3.\n```javascript\nfor (let count = 1; count <= 3; count = count + 1) {\n  console.log('Run ' + count);\n}\n```\nРезультаты работы цикла:\n\n```javascript\nRun 1\nRun 2\nRun 3\n```\n\nМожно исправить цикл иначе: оставить счетчик цикла равным 0, но изменить условие цикла.\n\n```javascript\nfor (let count = 0; count < 3; count = count + 1) {\n  console.log('Run ' + count);\n}\n```\n\nВ этом случае цикл также выполнится три раза, но результаты вывода в консоль будут другими:\n\n```javascript\nRun 0\nRun 1\nRun 2\n```\n\n#### Вариации цикла for:\n\n1. Счетчик цикла может начинаться с любого числа.\n2. Счетчик цикла может увеличиваться или уменьшаться.\n3. Счетчик цикла может изменяться на любое число.\n\nЦикл, который выводит в консоль последовательные числа от 10 до 20:\n\n```javascript\nfor (let count = 10; count <= 20; count = count + 1) {\n  console.log('Run ' + count);\n}\n```\n\nВ результате выполнения цикла выводится 11 значений:\n\n```javascript\nRun 10\nRun 11\nRun 12\nRun 13\nRun 14\nRun 15\nRun 16\nRun 17\nRun 18\nRun 19\nRun 20\n```\n\n#### Шаг цикла\n\nИзменение счетчика цикла после каждой итерации на некоторое постоянное значение называют `шагом цикла`.\nШаг цикла может быть любым числом, в том числе и отрицательным.\nВ циклах, рассмотренных ранее, шаг цикла был равен `1`.\n\nПример цикла с шагом равным `2`:\n\n```javascript\nfor (let count = 10; count <= 20; count = count + 2) {\n  console.log('Run ' + count);\n}\n```\n\nВ результате выполнения цикла выводится 6 значений:\n\n```javascript\nRun 10\nRun 12\nRun 14\nRun 16\nRun 18\nRun 20\n```\n\nПример цикла с шагом равным `5`:\n\n```javascript\nfor (let count = 10; count <= 20; count = count + 5) {\n  console.log('Run ' + count);\n}\n```\n\nВ результате выполнения цикла выводится 3 значения:\n\n```javascript\nRun 10\nRun 15\nRun 20\n```\n\nПринято в качестве `итератора цикла (счетчика цикла)` использовать переменную с именем `i` (от английского\nслова `iterator` - итератор).\n\nЦикл от 10 до 100 с шагом `10` ( где `i += 10` - это сокращенная запись `i = i + 10`)\n\n```javascript\nfor (let i = 10; i <= 100; i += 10) {\n  console.log('Run ' + i);\n}\n```\n\nВ результате выполнения цикла выводится 10 значений:\n\n```javascript\nRun 10\nRun 20\nRun 30\nRun 40\nRun 50\nRun 60\nRun 70\nRun 80\nRun 90\nRun 100\n```\n\nДо этого момента мы рассматривали только циклы, в которых `итератор изменялся от меньшего значения к большему`.\n\n##### Итератор цикла может изменяться и от большего значения к меньшему.\n\nНапишем цикл, который будет выполняться от 10 до 0.\n\nДля этого изменим начальное значение итератора и условие продолжения цикла.\n\n#### Пример цикла, который не выполнится ни разу.\n\n```javascript\nfor (let i = 10; i <= 0; i++) {\n  console.log('Run ' + i);\n}\n```\n\nВ этом цикле начальное значение переменной `i` равно 10, а в условии цикла указано, что цикл должен выполняться,\nпока `i <= 0`.\n`10 <= 0` - ложное утверждение. При ложном условии цикл не запускается.\n\nПопробуем снова изменить условие цикла:\n\n#### Пример цикла, который выполнится бесконечное количество раз.\n\n```javascript\nfor (let i = 10; i >= 0; i++) {\n  console.log('Run ' + i);\n}\n```\n\nМы получили бесконечный цикл.\nДля всех значений переменной `i`, изменяющейся от 10 с шагом +1 ,\nусловие `i >= 0` всегда будет истинным, поэтому цикл будет выполняться бесконечно.\n\nБудьте осторожны при составлении условия цикла, чтобы избежать бесконечных циклов.\nСовременные браузеры обнаруживают бесконечные циклы и останавливают их, но лучше не доводить до этого.\n\n#### Цикл от большего значения к меньшему.\n\nИзменим шаг цикла на отрицательный, чтобы после каждого прохода цикла значение переменной `i` уменьшалось на 1.\n\n```javascript\nfor (let i = 10; i >= 0; i--) {\n  console.log('Run ' + i);\n}\n```\n\nЦикл запускается с начальным значением счетчика 10. После каждой итерации значение счетчика уменьшается на 1.\nЦикл выполняется до тех пор, пока значение счетчика не станет меньше 0. `i--` сокращенная запись `i = i - 1`.\n\nВ результате выполнения цикла выводится 11 значений:\n\n```javascript\nRun 10\nRun 9\nRun 8\nRun 7\nRun 6\nRun 5\nRun 4\nRun 3\nRun 2\nRun 1\nRun 0\n```\n\nМожно изменить условие так, чтобы в консоль выводились и отрицательные значения.\nВыведем в консоль числа от 10 до -10 с шагом -3.\n\n```javascript\nfor (let i = 10; i >= -10; i = i - 3) {\n  console.log('Run ' + i);\n}\n```\n\nЧисло, следующее за -8 - это -11. Условие `-11 >= -10` ложно, и цикл завершается,\nпоэтому последнее выведенное значение -8.\n\n```javascript\nRun 10\nRun 7\nRun 4\nRun 1\nRun -2\nRun -5\nRun -8\n```\n\n#### Использование циклов для вычисления суммы ряда чисел.\n\nПример ряда чисел - последовательные числа от 1 до 10:\n\n```javascript\n1  2  3  4  5  6  7  8  9  10\n```\n\nПеред началом цикла создадим переменную `sum`, в которую будем накапливать значение суммы, и присвоим ей начальное значение 0.\nПри каждом проходе цикла будем увеличивать `sum` на текущее значение `i`.\n\n```javascript\nlet sum = 0;\n\nfor (let i = 1; i <= 10; i++) {\n  sum = sum + i;\n}\n\nconsole.log(sum); // 55\n```\n\nКак работает этот цикл:\n\n1. Переменная `sum` создается перед началом цикла и ее начальное значение равно 0.\n2. При первом проходе цикла `i` = 1, `sum` = 0, `sum + i` равна 1.\n3. При втором проходе цикла `i` = 2, `sum` = 1, `sum + i` равна 3.\n4. При третьем проходе цикла `i` = 3, `sum` = 3, `sum + i` равна 6.\n5. При четвертом проходе цикла `i` = 4, `sum` = 6, `sum + i` равна 10.\n...\n11. При десятом проходе цикла `i` = 10, `sum` = 45, `sum + i` равна 55.\n\nПосле завершения работы цикла переменная `sum` будет содержать значение 55.\n\nВычисление суммы чисел от 1 до 1000:\n\n```javascript\nlet sum = 0;\n\nfor (let i = 1; i <= 1000; i++) {\n  sum = sum + i;\n}\n\nconsole.log(sum); // 500500\n```\n\n#### Использование циклов для вычисления произведения ряда чисел.\n\nПри вычислении произведения ряда чисел также используется накопительная переменная, в которую в цикле записываются\nпромежуточные результаты вычислений.\n\nПеременная `product` создается перед началом цикла, и ее начальное значение должно равняться 1.\n\nВычисление произведения последовательных чисел от 1 до 100:\n\n```javascript\nlet product = 1;\n\nfor (let i = 1; i <= 100; i++) {\n  product = product * i;\n}\n\nconsole.log(product); // 9.33262154439441e+157\n```\n\nУмножение чисел от 1 до 10:\n\n```javascript\nlet product = 1;\n\nfor (let i = 1; i <= 10; i++) {\n  product = product * i;\n}\n\nconsole.log(product); // 3628800\n```\n\nРассмотрим, как работает этот цикл:\n\n1. Переменная `product` создается перед началом цикла и ее начальное значение равно 1.\n2. При первом проходе цикла `i` = 1, `product` = 1, `product * i` равно 1.\n3. При втором проходе цикла `i` = 2, `product` = 1, `product * i` равно 2.\n4. При третьем проходе цикла `i` = 3, `product` = 2, `product * i` равно 6.\n5. При четвертом проходе цикла `i` = 4, `product` = 6, `product * i` равно 24.\n...\n11. При десятом проходе цикла `i` = 10, `product` = 362880, `product * i` равно 3628800.\n\nПосле завершения работы цикла переменная `product` будет содержать значение 3628800.\n\nУмножение чисел от 5 до 25 с шагом `5`:\n```javascript\nlet product = 1;\n\nfor (let i = 5; i <= 25; i += 5) {\n  product = product * i;\n}\n\nconsole.log(product); // 375000\n```\n### Использование цикла для прохода по строке.\n\nПервый символ в строке имеет индекс 0, а последний - индекс `length - 1`, где `length` - длина строки.\n\nДля прохода по строке используется цикл `for` с переменной-счетчиком, которая принимает значения от 0 до `length - 1`.\nВ цикле последовательно перебираются все символы строки.\nОбращение к отдельному символу строки осуществляется по индексу, который равен значению переменной-счетчика.\n\nПример. Вывести по одному все символы строки:\n\n```javascript\nlet message = 'Hello JavaScript';\n\nfor (let i = 0; i <= message.length - 1; i++) {\n  console.log(message[i]);\n}\n```\n\nРезультат работы цикла:\n\n```javascript\nH\ne\nl\nl\no\n\nJ\na\nv\na\nS\nc\nr\ni\np\nt\n```\nУсловие цикла можно записать иначе - это не повлияет на результат:\n```javascript\nlet message = 'Hello JavaScript';\n\nfor (let i = 0; i < message.length; i++) {\n  console.log(message[i]);\n}\n```\n### Использование цикла для наполнения массива числами.\n#### Наполнение массива числами от 0 до 9.\n\nЧисла добавляются в конец массива с помощью метода `push()`:\n```javascript\nlet numbers = [];\n\nfor (let i = 0; i < 10; i++) {\n  numbers.push(i) // добавление элемента в конец массива;\n}\n\nconsole.log(numbers); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n#### Наполнение массива числами от 0 до 9 в обратном порядке.\n\nИспользуем метод `unshift()` для добавления элемента в начало массива:\n```javascript\nlet numbers = [];\n\nfor (let i = 0; i < 10; i++) {\n  numbers.unshift(i) // добавление элемента в начало массива;\n}\n\nconsole.log(numbers); // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n```\n#### Примеры наполнения массива числами.\nЗаполнение массива четными числами из диапазона от 20 до 30 в обратном порядке:\n```javascript\nlet numbers = [];\n\nfor (let i = 30; i >= 20; i -= 2) {\n  numbers.push(i);\n}\n\nconsole.log(numbers); // [30, 28, 26, 24, 22, 20]\n```\nЗаполнение массива нечетными отрицательными числами от -11 до -1:\n```javascript\nlet numbers = [];\n\nfor (let i = -11; i < 0; i += 2) {\n  numbers.push(i);\n}\n\nconsole.log(numbers); // [-11, -9, -7, -5, -3, -1]\n```\n#### Вывод элементов массива в консоль:\n```javascript\nlet numbers = [1, 2, 3, 4, 5];\n\nfor (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}\n```\nРезультат работы цикла:\n```javascript\n1\n2\n3\n4\n5\n```",
    "en": "In the process of writing a program it may be necessary to repeat the same piece of code several times.\nFor example, print the same line 5 or 10 times.\n\n```javascript\nconsole.log('Hello');\nconsole.log('Hello');\nconsole.log('Hello');\nconsole.log('Hello');\nconsole.log('Hello');\n```\n\n```javascript\nHello\nHello\nHello\nHello\nHello\n```\n\nTo avoid rewriting the same code many times, JavaScript uses special language constructs - `cycles`.\n\nAs an analogy of the cycle, consider a runner who runs in a circle.\nHe starts the race with the start, which is also the finish line.\nThe runner must run a given number of laps.\nEach time he crosses the start line, he is considered to have run one lap, and the lap counter is incremented by `1`.\nThe runner checks the counter against the set number of laps, and when these values are equal, he must stop.\n\nThe same principle is applied to the loop in programming.\n\n##### The cycle consists of the following parts:\n\n* The `Cycle Counter` variable, also often called the cycle parameter or the cycle control variable; \n\n\n* The `condition` defining the moment of cycle stopping;\n\n\n* The `bodies of the loop` - sequences of actions (`operators`) that are executed at each pass of the loop.\n\nEach run of the cycle is called an `iteration`.\n\nThe loop counter is often called an `iterator`.\n\n#### Cycle FOR\n\nThe most common loop in JavaScript is the `for` loop.\n\n```javascript\nfor (<starting value>; <condition>; <change of the counter after each iteration>){\n  // cycle body\n}\n```\n\n##### The loop header consists of three parts, separated by semicolons.\n\n`In the first part of the loop header` the starting values are set. To do this, a special variable is created which is\n`loop counter` or `iterrator` is created for this purpose.\nThe loop counter is given a starting value.\nThese actions are performed before the start of the loop.\n\n`The second part of the loop header` contains the condition under which the loop will be executed.\nThe condition is written as a logical expression that must return `true` or `false`.\nThe condition is checked before each execution of the loop. If the condition returns `true` the loop is executed, if `false` the\nThe loop is terminated.\n\n`The third part of the loop header` specifies the action to be performed after each pass of the loop - each\niteration.\nUsually this is an increase or decrease of the loop counter.\n\nThe `loop` is a sequence of actions (also called commands or operators) that are executed on each pass of the loop.\nIf the loop body contains several commands, they are enclosed in curly braces `{}`.\n\n`Attention!` The cycle counter changes automatically after each iteration, so it is NOT RECOMMENDED to change it in the body of the cycle!\n\n#### Let's look at the algorithm of the `for` loop step by step:\n\n1. A loop counter is created and `initialized` - an initial value is assigned to it.\n2. The `check condition` of the loop is executed. If the condition returns `true` the loop body is executed, if `false` the loop is terminated.\n3. The `body of the cycle` is performed.\n4. A `change cycle counter` is performed.\n5. Management moves on to point 2.\n\n#### Examples of the `for` cycle\n\n```javascript\nfor (let count = 0; count <= 3; count = count + 1) {\n  console.log('Run ' + count);\n}\n```\n\nThe result of the cycle:\n\n```javascript\nRun 0\nRun 1\nRun 2\nRun 3\n```\n\nThe cycle ran four times. Let's see how it works:\n\n1) count = 0 and 0 <= 3 - the console outputs `'Run 0'`, count+1.\n2) count = 1 and 1 <= 3 - the console outputs `'Run 1'`, count+1.\n3) count = 2 and 2 <= 3 - the console outputs `'Run 2'`, count+1.\n4) count = 3 and 3 <= 3 - condition is still true - the console outputs `'Run 3'`, count+1.\n5) count = 4 and 4 <= 3 - the loop condition is not true, the loop terminates.\n\nLet's correct the starting value of the loop counter so that the loop is executed three times and outputs numbers from 1 to 3.\n```javascript\nfor (let count = 1; count <= 3; count = count + 1) {\n  console.log('Run ' + count);\n}\n```\nCycle results:\n\n```javascript\nRun 1\nRun 2\nRun 3\n```\n\nYou can fix the loop in a different way: leave the loop counter equal to 0, but change the loop condition.\n\n```javascript\nfor (let count = 0; count < 3; count = count + 1) {\n  console.log('Run ' + count);\n}\n```\n\nIn this case the loop will also execute three times, but the output to the console will be different:\n\n```javascript\nRun 0\nRun 1\nRun 2\n```\n\n#### Variations of the for loop:\n\n1. The cycle counter can start with any number.\n2. The cycle counter can increase or decrease.\n3. The cycle counter can change by any number.\n\nA loop that outputs consecutive numbers from 10 to 20 to the console:\n\n```javascript\nfor (let count = 10; count <= 20; count = count + 1) {\n  console.log('Run ' + count);\n}\n```\n\nThe cycle outputs 11 values:\n\n```javascript\nRun 10\nRun 11\nRun 12\nRun 13\nRun 14\nRun 15\nRun 16\nRun 17\nRun 18\nRun 19\nRun 20\n```\n\n#### Step cycle\n\nThe change of the loop counter after each iteration by some constant value is called `loop step`.\nThe cycle step can be any number, including a negative number.\nIn the loops considered earlier, the loop step was `1`.\n\nAn example of a loop with a step of `2`:\n\n```javascript\nfor (let count = 10; count <= 20; count = count + 2) {\n  console.log('Run ' + count);\n}\n```\n\nThe cycle outputs 6 values:\n\n```javascript\nRun 10\nRun 12\nRun 14\nRun 16\nRun 18\nRun 20\n```\n\nAn example of a loop with a step of `5`:\n\n```javascript\nfor (let count = 10; count <= 20; count = count + 5) {\n  console.log('Run ' + count);\n}\n```\n\nThe result of the cycle is the output of 3 values:\n\n```javascript\nRun 10\nRun 15\nRun 20\n```\n\nIt is customary to use a variable named `i` as the `iterator of the loop (loop counter)`.\n\nCycle from 10 to 100 in increments of `10` (where `i += 10` is a shortened notation `i = i + 10`)\n\n```javascript\nfor (let i = 10; i <= 100; i += 10) {\n  console.log('Run ' + i);\n}\n```\n\nThe cycle outputs 10 values:\n\n```javascript\nRun 10\nRun 20\nRun 30\nRun 40\nRun 50\nRun 60\nRun 70\nRun 80\nRun 90\nRun 100\n```\n\nUp to this point, we have only considered cycles in which the `iterator has changed from a smaller value to a larger one`.\n\n##### The loop iterator can also change from a larger value to a smaller one.\n\nLet's write a loop that will run from 10 to 0.\n\nTo do this, change the initial value of the iterator and the condition for continuing the loop.\n\n#### An example of a loop that will not execute once.\n\n```javascript\nfor (let i = 10; i <= 0; i++) {\n  console.log('Run ' + i);\n}\n```\n\nIn this loop, the initial value of the variable `i` is 10, and the loop condition specifies that the loop must be executed\nuntil `i <= 0`.\n`10 <= 0` is a false statement. If the condition is false, the loop will not start.\n\nLet's try to change the loop condition again:\n\n#### An example of a loop that will execute an infinite number of times.\n\n```javascript\nfor (let i = 10; i >= 0; i++) {\n  console.log('Run ' + i);\n}\n```\n\nWe obtained an infinite loop.\nFor all values of variable `i` varying from 10 with step +1 ,\nthe condition `i >= 0` will always be true, so the loop will be executed infinitely.\n\nBe careful when formulating the loop condition to avoid infinite loops.\nModern browsers detect infinite loops and stop them, but it's best not to let it get to that point.\n\n#### Cycle from a larger value to a smaller one.\n\nChange the cycle step to negative, so that after each pass of the cycle the value of the variable `i` decreases by 1.\n\n```javascript\nfor (let i = 10; i >= 0; i--) {\n  console.log('Run ' + i);\n}\n```\n\nThe cycle starts with an initial counter value of 10. After each iteration the counter value is reduced by 1.\nThe cycle is executed until the counter value is less than 0. The `i--` abbreviated notation `i = i - 1`.\n\nThe cycle outputs 11 values:\n\n```javascript\nRun 10\nRun 9\nRun 8\nRun 7\nRun 6\nRun 5\nRun 4\nRun 3\nRun 2\nRun 1\nRun 0\n```\n\nYou can change the condition so that the console will print negative values as well.\nDisplay numbers from 10 to -10 in increments of -3.\n\n```javascript\nfor (let i = 10; i >= -10; i = i - 3) {\n  console.log('Run ' + i);\n}\n```\n\nThe number following -8 is -11. The condition `-11 >= -10` is false, and the loop terminates,so the last output value is -8.\n\n```javascript\nRun 10\nRun 7\nRun 4\nRun 1\nRun -2\nRun -5\nRun -8\n```\n\n#### Using cycles to calculate the sum of a series of numbers.\n\nAn example of a series of numbers is consecutive numbers from 1 to 10:\n\n```javascript\n1  2  3  4  5  6  7  8  9  10\n```\n\nBefore starting the cycle, create a variable `sum`, in which we will accumulate the value of the sum, and assign it an initial value of 0.\nWith each pass of the loop we will increase `sum` by the current value of `i`.\n\n```javascript\nlet sum = 0;\n\nfor (let i = 1; i <= 10; i++) {\n  sum = sum + i;\n}\n\nconsole.log(sum); // 55\n```\n\nHow this cycle works:\n\n1. The `sum` variable is created before the beginning of the cycle and its initial value is 0.\n2. During the first pass of the loop `i` = 1, `sum` = 0, `sum + i` equals 1.\n3. During the second pass of the loop `i` = 2, `sum` = 1, `sum + i` equals 3.\n4. For the third pass of the loop `i` = 3, `sum` = 3, `sum + i` equals 6.\n5. During the fourth pass of the loop `i` = 4, `sum` = 6, `sum + i` equals 10.\n...\n11. For the tenth pass of the loop `i` = 10, `sum` = 45, `sum + i` is 55.\n\nThe `sum` variable will contain the value 55 when the loop ends.\n\nCalculating the sum of numbers from 1 to 1000:\n\n```javascript\nlet sum = 0;\n\nfor (let i = 1; i <= 1000; i++) {\n  sum = sum + i;\n}\n\nconsole.log(sum); // 500500\n```\n\n#### Using cycles to calculate the product of a series of numbers.\n\nWhen calculating the product of a series of numbers, an accumulative variable is also used, into which the intermediate results of\nintermediate results of calculations.\n\nThe `product` variable is created before the start of the cycle and its initial value must be 1.\n\nCalculating the product of consecutive numbers from 1 to 100:\n\n```javascript\nlet product = 1;\n\nfor (let i = 1; i <= 100; i++) {\n  product = product * i;\n}\n\nconsole.log(product); // 9.33262154439441e+157\n```\n\nMultiplication of numbers from 1 to 10:\n\n```javascript\nlet product = 1;\n\nfor (let i = 1; i <= 10; i++) {\n  product = product * i;\n}\n\nconsole.log(product); // 3628800\n```\n\nLet's look at how this cycle works:\n\n1. The `product` variable is created before the start of the cycle and its initial value is 1.\n2. On the first pass of the loop `i` = 1, `product` = 1, `product * i` equals 1.\n3. On the second pass of the loop `i` = 2, `product` = 1, `product * i` equals 2.\n4. On the third pass of the loop `i` = 3, `product` = 2, `product * i` equals 6.\n5. With the fourth pass of the loop `i` = 4, `product` = 6, `product * i` equals 24.\n...\n11. For the tenth pass of the loop `i` = 10, `product` = 362880, `product * i` equals 3628800.\n\nThe `product` variable will contain the value 3628800 when the loop is complete.\n\nMultiplication of numbers from 5 to 25 in increments of `5`:\n```javascript\nlet product = 1;\n\nfor (let i = 5; i <= 25; i += 5) {\n  product = product * i;\n}\n\nconsole.log(product); // 375000\n```\n### Using a loop to traverse a line.\n\nThe first character in the string has index 0, and the last character has index `length - 1`, where `length` is the length of the string.\n\nThe loop `for` with a variable-counter that takes values from 0 to `length - 1` is used to traverse the string.\nIn the loop all characters of the string are sequentially searched.\nAccess to a single character of the string is performed by an index, which is equal to the value of the variable-counter.\n\nExample. Output one by one all characters of the string:\n\n```javascript\nlet message = 'Hello JavaScript';\n\nfor (let i = 0; i <= message.length - 1; i++) {\n  console.log(message[i]);\n}\n```\n\nThe result of the cycle:\n\n```javascript\nH\ne\nl\nl\no\n\nJ\na\nv\na\nS\nc\nr\ni\np\nt\n```\nThe loop condition can be written differently - this will not affect the result:\n```javascript\nlet message = 'Hello JavaScript';\n\nfor (let i = 0; i < message.length; i++) {\n  console.log(message[i]);\n}\n```\n### Using a loop to fill an array with numbers.\n#### Filling the array with numbers from 0 to 9.\n\nThe numbers are added to the end of the array using the `push()` method:\n```javascript\nlet numbers = [];\n\nfor (let i = 0; i < 10; i++) {\n  numbers.push(i) // add an element to the end of the array;\n}\n\nconsole.log(numbers); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n#### Filling the array with numbers from 0 to 9 in reverse order.\n\nUse the `unshift()` method to add an element to the beginning of the array:\n```javascript\nlet numbers = [];\n\nfor (let i = 0; i < 10; i++) {\n  numbers.unshift(i) // add an element to the beginning of the array;\n}\n\nconsole.log(numbers); // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n```\n#### Examples of filling an array with numbers.\nFilling the array with even numbers from the range 20 to 30 in reverse order:\n```javascript\nlet numbers = [];\n\nfor (let i = 30; i >= 20; i -= 2) {\n  numbers.push(i);\n}\n\nconsole.log(numbers); // [30, 28, 26, 24, 22, 20]\n```\nFilling the array with odd negative numbers from -11 to -1:\n```javascript\nlet numbers = [];\n\nfor (let i = -11; i < 0; i += 2) {\n  numbers.push(i);\n}\n\nconsole.log(numbers); // [-11, -9, -7, -5, -3, -1]\n```\n#### Output the array elements to the console:\n```javascript\nlet numbers = [1, 2, 3, 4, 5];\n\nfor (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}\n```\nThe result of the cycle:\n```javascript\n1\n2\n3\n4\n5\n```",
    "es": "# Цикл for. Наполнение массива числами language: es"
  },
  "video": {
    "ru": "https://youtu.be/tuImsTN6REs",
    "en": "",
    "es": ""
  }
}