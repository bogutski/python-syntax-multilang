{
  "_id": "6696c2ca763f0712c198eb70",
  "name": {
    "en": "Character case-sensitive line reversal",
    "ru": "Переворот строки с учетом регистра символов"
  },
  "instruction": {
    "en": "Fix the `deepReverse` function so that it flips the string case-sensitive.\n\nFor example, if the string `Hello` was passed to the function, it should return `Olleh`. The capital letter is left at index `0`.\n\nThere are only 3 errors made in the example. The `for` loop and the code inside it are without errors for you to work through and understand.\n\nTry to work out and understand each step of the code.\n\n\nAn example of running a function:\n```js\ndeepReverse('Hello'); // 'Olleh'\ndeepReverse('BANana'); // 'ANAnab'\ndeepReverse('appLE'); // 'elpPA'\n```",
    "ru": "Исправьте функцию `deepReverse`, чтобы она переворачивала строку с учетом регистра символов.\n\nНапример, если строка `Hello` была передана в функцию, то она должна вернуть `Olleh`. Заглавная буква осталась по индексу `0`.\n\nВ примере сделано всего 3 ошибки. Цикл `for` и код внутри его без ошибок, что бы вы проработали и поняли.\n\nПостарайтесь разобрать и понять каждый шаг кода.\n\n\nПример запуска функции:\n```js\ndeepReverse('Hello'); // 'Olleh'\ndeepReverse('BANana'); // 'ANAnab'\ndeepReverse('appLE'); // 'elpPA'\n```"
  },
  "initialSolution": "function deepReverse(str) {\n  const newStr = emptyString;\n  for (let i = 0; i < str.length; i++) {\n    if(str[i].toUpperCase() === str[i]){\n      newStr += str[str.length - 1 - i].toUpperCase();\n    } else {\n      newStr += str[str.length - 1 - i].toLowerCase();\n    }\n  }\n  give newStr;\n}",
  "completedSolution": "function deepReverse(str) {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if(str[i].toUpperCase() === str[i]) newStr += str[str.length - 1 - i].toUpperCase();\n    else newStr += str[str.length - 1 - i].toLowerCase();\n  }\n  return newStr;\n}",
  "openTest": "it('Created function deepReverse', () => {\n  expect(deepReverse).to.be.a('function');\n});\n\nit('deepReverse(\\'Hello\\') should return \\'Olleh\\'', () => {\n  expect(deepReverse('Hello')).to.equal('Olleh');\n});\n\nit('deepReverse(\\'HeLlO\\') should return \\'OlLeH\\'', () => {\n  expect(deepReverse('HeLlO')).to.equal('OlLeH');\n});\n\nit('deepReverse(\\'aPPle\\') should return \\'eLPpa\\'', () => {\n  expect(deepReverse('aPPle')).to.equal('eLPpa');\n});\n\nit('deepReverse(\\'AbCdEfG\\') should return \\'GfEdCbA\\'', () => {\n  expect(deepReverse('AbCdEfG')).to.equal('GfEdCbA');\n});\n\nit('deepReverse(\\'A\\') should return \\'A\\'', () => {\n  expect(deepReverse('A')).to.equal('A');\n});\n\nit('deepReverse(\\'FORD\\') should return \\'DROF\\'', () => {\n  expect(deepReverse('FORD')).to.equal('DROF');\n});\n\nit('deepReverse(\\'cat\\') should return \\'tac\\'', () => {\n  expect(deepReverse('cat')).to.equal('tac');\n});\n\nit('deepReverse(\\'\\') should return \\'\\'', () => {\n  expect(deepReverse('')).to.equal('');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}