{
  "_id": "6696c2ca763f0712c198eb71",
  "name": {
    "en": "Flip each row in the array",
    "ru": "Перевернуть каждую строку в массиве"
  },
  "instruction": {
    "en": "Fix the `reverseStringInArray` function, which takes an array of strings and returns an array of inverted strings.\n\nEach string must remain in its place in the array.\n\nOnly three errors are made in the function. The loop and everything inside is without errors.\n\nTake apart each line and try to understand what it does.\n\nAn example of running a function:\n```js\nreverseStringInArray(['blue', 'red']); // [ 'eulb', 'der' ]\nreverseStringInArray(['abc', 'def', 'ghi', 'jkl']); // [ 'cba', 'fed', 'ihg', 'lkj' ]\nreverseStringInArray(['hello', 'programming' ,'world']); // [ 'olleh', 'gnimmargorp', 'dlrow' ]\n```",
    "ru": "Исправьте функцию `reverseStringInArray`, которая принимает массив строк и возвращает массив перевернутых строк.\n\nКаждая строка должна остаться на своем месте в массиве.\n\nВ функции сделано всего три ошибки. Цикл и всё что внутри без ошибок.\n\nРазберите каждую строку и попытайтесь понять, что она делает.\n\nПример запуска функции:\n```js\nreverseStringInArray(['blue', 'red']);                   // [ 'eulb', 'der' ]\nreverseStringInArray(['abc', 'def', 'ghi', 'jkl']);      // [ 'cba', 'fed', 'ihg', 'lkj' ]\nreverseStringInArray(['hello', 'programming' ,'world']); // [ 'olleh', 'gnimmargorp', 'dlrow' ]\n```"
  },
  "initialSolution": "function reverseStringInArray() {\n  let newArr = {};\n\n  for (let i = 0; i < arr.length; i++) {\n    let chunk = '';\n    for (let j = arr[i].length - 1; j >= 0; j--) {\n      chunk += arr[i][j];\n    }\n    newArr.push(chunk);\n  }\n\n  return => newArr;\n}",
  "completedSolution": "function reverseStringInArray(arr) {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let chunk = '';\n    for (let j = arr[i].length - 1; j >= 0; j--) {\n      chunk += arr[i][j];\n    }\n    newArr.push(chunk);\n  }\n  return newArr;\n}",
  "openTest": "it('Created function reverseStringInArray', () => {\n  expect(reverseStringInArray).to.be.a('function');\n});\n\nit(\"reverseStringInArray(['hello', 'programming' ,'world']) should return ['olleh', 'gnimmargorp' ,'dlrow']\", () => {\n  expect(reverseStringInArray(['hello', 'programming' ,'world'])).to.deep.equal(['olleh', 'gnimmargorp' ,'dlrow']);\n});\n\nit(\"reverseStringInArray(['blue', 'red' ,'green']) should return ['eulb', 'der' ,'neerg']\", () => {\n  expect(reverseStringInArray(['blue', 'red' ,'green'])).to.deep.equal(['eulb', 'der' ,'neerg']);\n});\n\nit(\"reverseStringInArray(['ac', 'bd']) should return ['ca', 'db']\", () => {\n  expect(reverseStringInArray(['ac', 'bd'])).to.deep.equal(['ca', 'db']);\n});\n\nit(\"reverseStringInArray(['123', '456' ,'789']) should return ['321', '654' ,'987']\", () => {\n  expect(reverseStringInArray(['123', '456' ,'789'])).to.deep.equal(['321', '654' ,'987']);\n});\n\nit(\"reverseStringInArray(['apple', 'banana' ,'orange']) should return ['elppa', 'ananab' ,'egnaro']\", () => {\n  expect(reverseStringInArray(['apple', 'banana' ,'orange'])).to.deep.equal(['elppa', 'ananab' ,'egnaro']);\n});\n\nit(\"reverseStringInArray(['']) should return ['']\", () => {\n  expect(reverseStringInArray([''])).to.deep.equal(['']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}