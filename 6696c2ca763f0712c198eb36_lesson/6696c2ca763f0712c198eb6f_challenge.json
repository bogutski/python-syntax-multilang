{
  "_id": "6696c2ca763f0712c198eb6f",
  "name": {
    "en": "Flip the big line",
    "ru": "Перевернуть большую строку"
  },
  "instruction": {
    "en": "Write a function `reverseBigger` that takes an array of two strings.\n\nDetermine which one of the strings is longer and reverse it.\n\nIf the strings are the same length, invert the second string.\n\nThe function should return an updated array with `first line`, `second line` and `inverted line`.\n\n\nExamples of running the function:\n```js\nreverseBigger(['Hello', 'World']) // => [ 'Hello', 'World', 'dlroW' ]\nreverseBigger(['blue', 'red']) // => [ 'blue', 'red', 'eulb' ]\nreverseBigger(['Hello', 'JS']) // => [ 'Hello', 'JS', 'olleH' ]\nreverseBigger(['', '']) // => [ '', '', '' ]\n```",
    "ru": "Напишите функцию `reverseBigger`, которая принимает массив из двух строк.\n\nОпределите какая из строк длиннее и переверните ее.\n\nЕсли строки одинаковой длины, то переверните вторую строку.\n\nФункция должна возвращать обновленный массив с `первой строкой`, `второй строкой` и `перевернутой строкой`.\n\n\nПримеры запуска функции:\n```js\nreverseBigger(['Hello', 'World']) // => [ 'Hello', 'World', 'dlroW' ]\nreverseBigger(['blue', 'red'])    // => [ 'blue', 'red', 'eulb' ]\nreverseBigger(['Hello', 'JS'])    // => [ 'Hello', 'JS', 'olleH' ]\nreverseBigger(['', ''])           // => [ '', '', '' ]\n```"
  },
  "initialSolution": "function sum(num1, num2){\n\n}",
  "completedSolution": "function reverseBigger(arr){\n  let string;\n  let reversed = '';\n  if(arr[0].length > arr[1].length) string = arr[0]\n  else string = arr[1]\n  for(let i = string.length - 1; i >= 0; i--){\n    reversed += string[i];\n  }\n  arr.push(reversed)\n  return arr;\n}",
  "openTest": "it('Created function reverseBigger', () => {\n  expect(reverseBigger).to.be.a('function');\n});\n\nit(\"reverseBigger(['Hello', 'World']) should return ['Hello', 'World', 'dlroW']\", () => {\n  expect(reverseBigger(['Hello', 'World'])).to.deep.equal(['Hello', 'World', 'dlroW']);\n});\n\nit(\"reverseBigger(['blue', 'red']) should return ['blue', 'red', 'eulb']\", () => {\n  expect(reverseBigger(['blue', 'red'])).to.deep.equal(['blue', 'red', 'eulb']);\n});\n\nit(\"reverseBigger(['Hello', 'JS']) should return ['Hello', 'JS', 'olleH']\", () => {\n  expect(reverseBigger(['Hello', 'JS'])).to.deep.equal(['Hello', 'JS', 'olleH']);\n});\n\nit(\"reverseBigger(['123', '12345']) should return ['123', '12345', '54321']\", () => {\n  expect(reverseBigger(['123', '12345'])).to.deep.equal(['123', '12345', '54321']);\n});\n\nit(\"reverseBigger(['', '']) should return ['', '', '']\", () => {\n  expect(reverseBigger(['', ''])).to.deep.equal(['', '', '']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}