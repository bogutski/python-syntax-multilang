{
  "_id": "6696c2ca763f0712c198eb6b",
  "name": {
    "en": "Reverse a string in an array",
    "ru": "Перевернуть строку в массиве"
  },
  "instruction": {
    "en": "Write a function `reverseStrInArray` that takes an array with one string.\n\nThe function should return an array in which the first element is the original string and the second element is the reversed string.\n\nFor example: `array = ['apple']`.\n* create a variable and assign it an empty string\n* the `for` loop will access the item with index `0` => `array[0]`\n* write an inverted string to the new variable\n* add an inverted string to the end of the array\n* return the updated array => `['apple', 'elppa' ]`\n\n\nAn example of running a function:\n```js\nreverseStrInArray(['apple']) // => [ 'apple', 'elppa' ]\nreverseStrInArray(['hello']) // => [ 'hello', 'olleh' ]\nreverseStrInArray(['123']) // => [ '123', '321' ]\n```",
    "ru": "Напишите функцию `reverseStrInArray`, которая принимает массив с одной строкой.\n\nФункция должна вернуть массив, в котором первым элементом будет исходная строка, а вторым - перевернутая строка.\n\nНапример: `array = ['apple']`\n* создать переменную и присвоить ей пустую строку\n* цикл `for` будет обращаться к элементу с индексом `0` => `array[0]`\n* записать в новую переменную перевернутую строку\n* добавить в конец массива перевернутую строку\n* вернуть обновленный массив => `[ 'apple', 'elppa' ]`\n\n\nПример запуска функции:\n```js\nreverseStrInArray(['apple']) // => [ 'apple', 'elppa' ]\nreverseStrInArray(['hello']) // => [ 'hello', 'olleh' ]\nreverseStrInArray(['123'])   // => [ '123', '321' ]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function reverseStrInArray(arr) {\n  let word = ''\n  for (let i = arr[0].length - 1; i >= 0; i--) {\n    word += arr[0][i]\n  }\n  arr.push(word)\n  return arr\n}",
  "openTest": "it('Created function reverseStrInArray', () => {\n  expect(reverseStrInArray).to.be.a('function');\n});\n\nit(\"reverseStrInArray(['apple']) should return ['apple', 'elppa']\", () => {\n  expect(reverseStrInArray(['apple'])).to.deep.equal(['apple', 'elppa']);\n});\n\nit(\"reverseStrInArray(['banana']) should return ['banana', 'ananab']\", () => {\n  expect(reverseStrInArray(['banana'])).to.deep.equal(['banana', 'ananab']);\n});\n\nit(\"reverseStrInArray(['cherry']) should return ['cherry', 'yrrehc']\", () => {\n  expect(reverseStrInArray(['cherry'])).to.deep.equal(['cherry', 'yrrehc']);\n});\n\nit(\"reverseStrInArray(['Anna']) should return ['Anna', 'annA']\", () => {\n  expect(reverseStrInArray(['Anna'])).to.deep.equal(['Anna', 'annA']);\n});\n\nit(\"reverseStrInArray(['']) should return ['', '']\", () => {\n  expect(reverseStrInArray([''])).to.deep.equal(['', '']);\n});\n\nit(\"reverseStrInArray(['12345']) should return ['12345', '54321']\", () => {\n  expect(reverseStrInArray(['12345'])).to.deep.equal(['12345', '54321']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}