{
  "_id": "6696c2ca763f0712c198e0e5",
  "content": {
    "ru": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/question-cat-girl.png)\n\nФункции могут принимать различные значения в качестве аргументов, в том числе те, которые были получены в результате работы другой функции.\n\nРассмотрим функцию `sum()`, результат работы которой — сложение двух чисел.\n\nВыведем в консоль результат для аргументов `2` и `5`:\n\n``` javascript\nfunction sum(n1, n2){\n  return n1 + n2;\n}\n\nconsole.log(sum(2, 5)); // 7\n``` \n\nРезультат работы функции `sum()` мы можем сохранить в переменной `run1` и вывести ее в консоль:\n``` javascript\nconst run1 = sum(2, 5);\nconsole.log(run1); // 7\n```\n\nТеперь в функцию `sum()` подставим в качестве аргументов значение переменной `run1`.\n\nСохраним результат в новой переменной `run2` и выведем его в консоль:\n\n```javascript\nconst run2 = sum(run1, run1);\nconsole.log(run2); // 14 \n```\n\n`run2` получен в результате сложения `run1 + run1`, т.е. `sum(2, 5) + sum(2, 5)` или `7 + 7`.\n\nПеременную `run2`, мы можем использовать в качестве одного из аргументов функции `sum()`.\n\nПример:\n```javascript\nconst run3 = sum(run1, run2);\nconsole.log(run3); // 21\n```\n\nРассмотрим еще пример работы одной функции в другую.\n```javascript\nfunction mult(n1, n2){\n  return n1 * n2;\n}\n\nconst m1 = mult(3, 4);\nconst m2 = mult(5, 2);\n\nconst run4 = sum(m1, m2);\nconsole.log(run4); // 22\n```\n\nЗадать переменную `run4` можно и другим способом:\n```javascript\nconst run4 = sum(mult(3, 4), mult(5, 2));\nconsole.log(run4); //22\n```\n\nПриоритет выполнения операций для `run4` находится внутри скобок функции `sum()`. \n\nВнешняя функция `sum()` выполнится после выполнения функций `mult()`.\n\nСтоит отметить, что запись кода в последнем примере плохо читаема. В подобных случаях удобнее использовать новые переменные, как в примере выше с использованием `m1` и `m2`. \n\n",
    "en": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/question-cat-girl.png)\n\nFunctions can take various values as arguments, including those from another function.\n\nConsider the `sum()` function, the result of which is the addition of two numbers.\n\nPrint the result for the arguments `2` and `5` into the console:\n\n``` javascript\nfunction sum(n1, n2){\n  return n1 + n2;\n}\n\nconsole.log(sum(2, 5)); // 7\n``` \n\nWe can save the result of the `sum()` function in the `run1` variable and display it in the console:\n``` javascript\nconst run1 = sum(2, 5);\nconsole.log(run1); // 7\n```\n\nNow substitute the value of variable `run1` as an argument in function `sum()`.\n\nLet's save the result in a new variable `run2` and display it in the console:\n\n```javascript\nconst run2 = sum(run1, run1);\nconsole.log(run2); // 14 \n```\n\n`run2` is the result of adding `run1 + run1`, i.e. `sum(2, 5) + sum(2, 5)` or `7 + 7`.\n\nThe variable `run2`, we can use as one of the arguments of the function `sum()`.\n\nExample:\n```javascript\nconst run3 = sum(run1, run2);\nconsole.log(run3); // 21\n```\n\nLet's look at another example of one function working into another.\n```javascript\nfunction mult(n1, n2){\n  return n1 * n2;\n}\n\nconst m1 = mult(3, 4);\nconst m2 = mult(5, 2);\n\nconst run4 = sum(m1, m2);\nconsole.log(run4); // 22\n```\n\nThere is another way to set the `run4` variable:\n```javascript\nconst run4 = sum(mult(3, 4), mult(5, 2));\nconsole.log(run4); //22\n```\n\nThe priority of operations for `run4` is inside the `sum()` brackets. \n\nThe external function `sum()` will be executed after the execution of `mult()`.\n\nIt is worth noting that the code entry in the last example is poorly readable. In such cases, it is more convenient to use new variables, as in the example above using `m1` and `m2`. \n\n",
    "es": "# Результат работы функции в другую функцию language: es"
  },
  "video": {
    "ru": "https://youtu.be/t1J-EyOcAH4",
    "en": "",
    "es": ""
  }
}