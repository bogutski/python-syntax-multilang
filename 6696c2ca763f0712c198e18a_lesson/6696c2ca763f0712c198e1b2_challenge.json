{
  "_id": "6696c2ca763f0712c198e1b2",
  "name": {
    "en": "Which car we will drive next",
    "ru": "На каком автомобиле проедем дальше"
  },
  "instruction": {
    "en": "The function `whichCar` takes parameters:\n\n* `car1OwnerName` - the name of the owner of the first car\n* `car1TankVolume` - how many gallons of fuel is in the tank of the first car\n* `car1Mpg` - fuel consumption of the first car, how many miles it will go on one gallon of fuel\n\n* `car2OwnerName` - name of the owner of the second car\n* `car2TankVolume` - how many gallons of fuel are in the second car's tank\n* `car2Mpg` - fuel consumption of the second car, how many miles it will travel on one gallon of fuel\n\nLet the function return a string of the form: `Congratulations, Bob, you win! Your car drive 45 miles more than Alice's car.`\n\nIf the distance is the same, then we return a string like this: `Congratulations, Bob and Alice, you win! Your cars drive the same distance.`. In this case the name of the owner of the first car must be first.\n\n\nTo solve this problem, find the distance each car will drive and compare them.\n\nHint: Distance = tank volume * fuel consumption.\n\nWhen outputting a string, you can use:\n * double quotes outside and single quotes inside: `\"Bob's\"``.\n * escape sign:  `'Bob\\'s'`, in which case single quotes can be used inside the string.",
    "ru": "Функция `whichCar` принимает параметры:\n\n* `car1OwnerName` - имя владельца первого автомобиля\n* `car1TankVolume` - сколько галлонов топлива находится в баке первого автомобиля\n* `car1Mpg` - расход топлива первого автомобиля, сколько он проедет миль на одном галлоне топлива\n\n* `car2OwnerName` - имя владельца второго автомобиля\n* `car2TankVolume` - сколько галлонов топлива находится в баке второго автомобиля\n* `car2Mpg` - расход топлива второго автомобиля, сколько он проедет миль на одном галлоне топлива\n\nПусть функция возвращает строку вида: `Congratulations, Bob, you win! Your car drive 45 miles more than Alice's car.`\n\nЕсли расстояние одинаковое, то возвращаем строку вида: `Congratulations, Bob and Alice, you win! Your cars drive the same distance.`. В этом случае имя владельца первого автомобиля должно быть первым.\n\n\nДля решения этой задачи найдите расстояние, которое проедет каждый автомобиль, и сравните их.\n\nПодсказка: расстояние = объем бака * расход топлива.\n\nПри выводе строки можно использовать:\n * двойные кавычки снаружи и одинарные внутри: `\"Bob's\"`\n * знак экранирования: `'Bob\\'s'`, в таком случаи одинарные кавычки можно использовать внутри строки."
  },
  "initialSolution": "fun",
  "completedSolution": "function whichCar(car1OwnerName, car1TankVolume, car1Mpg, car2OwnerName, car2TankVolume, car2Mpg) {\n  let car1Distance = car1TankVolume * car1Mpg;\n  let car2Distance = car2TankVolume * car2Mpg;\n\n  if (car1Distance > car2Distance) {\n    return `Congratulations, ${car1OwnerName}, you win! Your car drive ${car1Distance - car2Distance} miles more than ${car2OwnerName}'s car.`;\n  } else if (car1Distance < car2Distance) {\n    return `Congratulations, ${car2OwnerName}, you win! Your car drive ${car2Distance - car1Distance} miles more than ${car1OwnerName}'s car.`;\n  } else {\n    return `Congratulations, ${car1OwnerName} and ${car2OwnerName}, you win! Your cars drive the same distance.`;\n  }\n}",
  "openTest": "it('Created function whichCar', () => {\n  expect(whichCar).to.be.a('function');\n});\n\nit('whichCar(\"Bob\", 10, 30, \"Alice\", 10, 20) returns \"Congratulations, Bob, you win! Your car drive 100 miles more than Alice\\'s car.\"', () => {\n  expect(whichCar('Bob', 10, 30, 'Alice', 10, 20)).to.be.equal('Congratulations, Bob, you win! Your car drive 100 miles more than Alice\\'s car.');\n});\n\nit('whichCar(\"Sam\", 10, 20, \"Joe\", 10, 30) returns \"Congratulations, Joe, you win! Your car drive 100 miles more than Sam\\'s car.\"', () => {\n  expect(whichCar('Sam', 10, 20, 'Joe', 10, 30)).to.be.equal('Congratulations, Joe, you win! Your car drive 100 miles more than Sam\\'s car.');\n});\n\nit('whichCar(\"Sam\", 10, 20, \"Joe\", 10, 20) returns \"Congratulations, Sam and Joe, you win! Your cars drive the same distance.\"', () => {\n  expect(whichCar('Sam', 10, 20, 'Joe', 10, 20)).to.be.equal('Congratulations, Sam and Joe, you win! Your cars drive the same distance.');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}