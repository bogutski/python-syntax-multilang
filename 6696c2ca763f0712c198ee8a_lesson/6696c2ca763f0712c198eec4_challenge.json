{
  "_id": "6696c2ca763f0712c198eec4",
  "name": {
    "en": "Translating numbers from 0 to 99 into words",
    "ru": "Перевод чисел от 0 до 99 в слова"
  },
  "instruction": {
    "en": "Write a function `numToWord` that takes an array of numbers from `0` to `99` and returns a new array where each number is replaced with the corresponding word.\n\nFor example, the string `[0, 1, 23, 89]` will be transformed into the array `['zero', 'one', 'twenty-three', 'eighty-nine']`.\n\nIf the array is empty, the function should return the string `'Array is empty'`.\n\nExamples of function calls:\n```javascript\nnumToWord([1, 3, 7, 9]);          // ['one', 'three', 'seven', 'nine']\nnumToWord([11, 12, 16, 18]);      // ['eleven', 'twelve', 'sixteen', 'eighteen']\nnumToWord([23, 46, 72, 94]);      // ['twenty-three', 'forty-six', 'seventy-two', 'ninety-four']\nnumToWord([65, 0, 41, 13, 6, 7]); // ['sixty-five', 'zero', 'forty-one', 'thirteen', 'six', 'seven']\nnumToWord([]);                    // 'Array is empty'\n```",
    "ru": "Напишите функцию `numToWord`, которая принимает массив чисел от `0` до `99` и возвращает новый массив, в котором каждое число заменено на слово, соответствующее этому числу.\n\nНапример, строка `[0, 1, 23, 89]` превратится в массив `['zero', 'one', 'twenty-three', 'eighty-nine']`.\n\nЕсли массив пустой, то функция должна вернуть строку `'Array is empty'`.\n\n\nПримеры запуска функции:\n```javascript\nnumToWord([1, 3, 7, 9]);          // ['one', 'three', 'seven', 'nine']\nnumToWord([11, 12, 16, 18]);      // ['eleven', 'twelve', 'sixteen', 'eighteen']\nnumToWord([23, 46, 72, 94]);      // ['twenty-three', 'forty-six', 'seventy-two', 'ninety-four']\nnumToWord([65, 0, 41, 13, 6, 7]); // ['sixty-five', 'zero', 'forty-one', 'thirteen', 'six', 'seven']\nnumToWord([]);                    // 'Array is empty'\n```"
  },
  "initialSolution": "function numToWord(arr){\n  const objFrom0to9 = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\n  const objFrom11to19 = {11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen'}\n  const objFrom10to90 = {1: 'ten', 2: 'twenty', 3: 'thirty', 4: 'forty', 5: 'fifty', 6: 'sixty', 7: 'seventy', 8: 'eighty', 9: 'ninety'}\n\n  <code here...>\n\n}",
  "completedSolution": "function numToWord(arr){\n  const objFrom0to9 = { 0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', }\n  const objFrom11to19 = { 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen', }\n  const objFrom10to90 = { 1: 'ten', 2: 'twenty', 3: 'thirty', 4: 'forty', 5: 'fifty', 6: 'sixty', 7: 'seventy', 8: 'eighty', 9: 'ninety', }\n\n  if(!arr.length) return 'Array is empty';\n  let newArr = [];\n\n  for(let i = 0; i < arr.length; i++){\n    const num = arr[i].toString();\n    let word = '';\n\n    if(num.length === 1) word = objFrom0to9[num];\n    else if(num[1] === '0') word = objFrom10to90[num[0]];\n    else if(num[0] === '1') word = objFrom11to19[num];\n    else {\n      const part1 = objFrom10to90[num[0]];\n      const part2 = objFrom0to9[num[1]];\n      word = part1 + '-' + part2;\n    }\n\n    newArr.push(word);\n  }\n\n  return newArr;\n}",
  "openTest": "it('Created function numToWord', () => {\n  expect(numToWord).to.be.a('function');\n});\n\nit(\"numToWord([0, 2, 6, 9, 11, 12, 16, 19, 21, 46, 78, 99]) should return ['zero', 'two', 'six', 'nine', 'eleven', 'twelve', 'sixteen', 'nineteen', 'twenty-one', 'forty-six', 'seventy-eight', 'ninety-nine']\", () => {\n  expect(numToWord([0, 2, 6, 9, 11, 12, 16, 19, 21, 46, 78, 99])).to.deep.equal(['zero', 'two', 'six', 'nine', 'eleven', 'twelve', 'sixteen', 'nineteen', 'twenty-one', 'forty-six', 'seventy-eight', 'ninety-nine']);\n});\n\nit(\"numToWord([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) should return ['nine', 'eight', 'seven', 'six', 'five', 'four', 'three', 'two', 'one', 'zero']\", () => {\n  expect(numToWord([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])).to.deep.equal(['nine', 'eight', 'seven', 'six', 'five', 'four', 'three', 'two', 'one', 'zero']);\n});\n\nit(\"numToWord([19, 15, 10, 13, 14, 17, 18, 11, 12, 16]) should return ['nineteen', 'fifteen', 'ten', 'thirteen', 'fourteen', 'seventeen', 'eighteen', 'eleven', 'twelve', 'sixteen']\", () => {\n  expect(numToWord([19, 15, 10, 13, 14, 17, 18, 11, 12, 16])).to.deep.equal(['nineteen', 'fifteen', 'ten', 'thirteen', 'fourteen', 'seventeen', 'eighteen', 'eleven', 'twelve', 'sixteen']);\n});\n\nit(\"numToWord([98, 81, 76, 64, 52, 43, 29, 17]) should return ['ninety-eight', 'eighty-one', 'seventy-six', 'sixty-four', 'fifty-two', 'forty-three', 'twenty-nine', 'seventeen']\", () => {\n  expect(numToWord([98, 81, 76, 64, 52, 43, 29, 17])).to.deep.equal(['ninety-eight', 'eighty-one', 'seventy-six', 'sixty-four', 'fifty-two', 'forty-three', 'twenty-nine', 'seventeen']);\n});\n\nit(\"numToWord([10, 11, 27, 3, 44, 53, 6, 7, 89, 9]) should return ['ten', 'eleven', 'twenty-seven', 'three', 'forty-four', 'fifty-three', 'six', 'seven', 'eighty-nine', 'nine']\", () => {\n  expect(numToWord([10, 11, 27, 3, 44, 53, 6, 7, 89, 9])).to.deep.equal(['ten', 'eleven', 'twenty-seven', 'three', 'forty-four', 'fifty-three', 'six', 'seven', 'eighty-nine', 'nine']);\n});\n\nit(\"numToWord([99]) should return ['ninety-nine']\", () => {\n  expect(numToWord([99])).to.deep.equal(['ninety-nine']);\n});\n\nit(\"numToWord([]) should return 'Array is empty'\", () => {\n  expect(numToWord([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}