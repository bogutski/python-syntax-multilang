{
  "_id": "6696c2cb763f0712c198f53c",
  "name": {
    "en": "/*",
    "ru": "Создание ступенчатого массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `createStaircaseArray`, которая принимает два аргумента: количество ступеней `n` и булево значение `ascending`.\n\nЕсли `ascending` равно `true`, функция должна создать и вернуть массив, где каждый элемент представляет собой массив, начиная с одного элемента в первом и увеличивая количество на один в каждом следующем, до `n` элементов в последнем.\n\nЕсли `ascending` равно `false`, порядок должен быть обратным: от `n` элементов в первом до одного в последнем.\n\nВсе элементы вложенных массивов должны быть заполнены значением индекса вложенного массива, используя метод `Array.prototype.fill()`.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(createStaircaseArray(3, true));\n// [\n//   [0],\n//   [1, 1],\n//   [2, 2, 2]\n// ]\n\nconsole.log(createStaircaseArray(3, false));\n// [\n//   [0, 0, 0],\n//   [1, 1],\n//   [2]\n// ]\n\nconsole.log(createStaircaseArray(0, true));\n// []\n```"
  },
  "initialSolution": "function createStaircaseArray(){\n\n}",
  "completedSolution": "function createStaircaseArray(n, isTrue) {\n  let res = []\n\n  if(isTrue){\n    let start = 1\n\n    while(start <= n){\n      let chunk = new Array(start).fill(start -1)\n      res.push(chunk)\n\n      start++\n    }\n  } else {\n    let start = n\n\n    while(start > 0){\n      let chunk = new Array(start).fill(n - start)\n      res.push(chunk)\n\n      start--\n    }\n  }\n\n  return res;\n}",
  "openTest": "it('Created function createStaircaseArray', () => {\n  expect(createStaircaseArray).to.be.a('function');\n});\n\nit('Function createStaircaseArray should include method fill()', () => {\n  const res = createStaircaseArray.toString()\n  expect(res).to.include('.fill(')\n});\n\nit(\"createStaircaseArray(3, true) should return a staircase array ascending\", function() {\n  expect(createStaircaseArray(3, true)).to.deep.equal([[0], [1, 1], [2, 2, 2]]);\n});\n\nit(\"createStaircaseArray(3, false) should return a staircase array descending\", function() {\n  expect(createStaircaseArray(3, false)).to.deep.equal([[0, 0, 0], [1, 1], [2]]);\n});\n\nit(\"createStaircaseArray(1, true) should return an array with a single element\", function() {\n  expect(createStaircaseArray(1, true)).to.deep.equal([[0]]);\n});\n\nit(\"createStaircaseArray(0, true) should return an empty array\", function() {\n  expect(createStaircaseArray(0, true)).to.deep.equal([]);\n});\n\nit(\"createStaircaseArray(4, false) should return a staircase array descending from 4\", function() {\n  expect(createStaircaseArray(4, false)).to.deep.equal([[0, 0, 0, 0], [1, 1, 1], [2, 2], [3]]);\n});\n\nit(\"createStaircaseArray(2, true) should have arrays of increasing length\", function() {\n  const array = createStaircaseArray(2, true);\n  expect(array[0].length < array[1].length).to.be.true;\n});\n\nit(\"createStaircaseArray(5, true) should have last array filled with '4'\", function() {\n  const array = createStaircaseArray(5, true);\n  expect(array[4]).to.satisfy(lastArray => lastArray.every(val => val === 4));\n});\n\nit(\"createStaircaseArray(4, false) should start with an array filled with '0'\", function() {\n  const array = createStaircaseArray(4, false);\n  expect(array[0]).to.satisfy(firstArray => firstArray.every(val => val === 0));\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}