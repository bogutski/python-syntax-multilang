{
  "_id": "6696c2cb763f0712c198f53b",
  "name": {
    "en": "/*",
    "ru": "Заполнение диагонали матрицы"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `fillMatrixDiagonal`, которая принимает два аргумента:\n\n* размерность квадратной матрицы `n`,\n* значение `value`, которым будет заполнена главная диагональ матрицы.\n\nФункция должна создать и вернуть двумерный массив размером `n x n`, где каждый элемент главной диагонали равен `value`, а все остальные элементы равны `0`.\n\nИспользуйте метод `Array.prototype.fill()` для инициализации массива и элементов.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(fillMatrixDiagonal(3, 1));\n// [\n//   [1, 0, 0],\n//   [0, 1, 0],\n//   [0, 0, 1]\n// ]\n\nconsole.log(fillMatrixDiagonal(2, 'x'));\n// [\n//   ['x', 0],\n//   [0, 'x']\n// ]\n\nconsole.log(fillMatrixDiagonal(4, true));\n// [\n//   [true, 0, 0, 0],\n//   [0, true, 0, 0],\n//   [0, 0, true, 0],\n//   [0, 0, 0, true]\n// ]\n```"
  },
  "initialSolution": "function fillMatrixDiagonal(){\n\n}",
  "completedSolution": "function fillMatrixDiagonal(n, value) {\n  let res = []\n\n  for(let i = 0; i < n; i++){\n    let chunk = new Array(n).fill(0)\n    chunk[i] = value\n\n    res.push(chunk)\n  }\n\n  return res;\n}",
  "openTest": "it('Created function fillMatrixDiagonal', () => {\n  expect(fillMatrixDiagonal).to.be.a('function');\n});\n\nit('Function fillMatrixDiagonal should include method fill()', () => {\n  const res = fillMatrixDiagonal.toString()\n  expect(res).to.include('.fill(')\n});\n\nit(\"fillMatrixDiagonal(3, 1) should create a 3x3 matrix with 1s on the diagonal\", function() {\n  expect(fillMatrixDiagonal(3, 1)).to.deep.equal([[1, 0, 0], [0, 1, 0], [0, 0, 1]]);\n});\n\nit(\"fillMatrixDiagonal(2, 'x') should create a 2x2 matrix with 'x' on the diagonal\", function() {\n  expect(fillMatrixDiagonal(2, 'x')).to.deep.equal([['x', 0], [0, 'x']]);\n});\n\nit(\"fillMatrixDiagonal(4, true) should create a 4x4 matrix with true on the diagonal\", function() {\n  expect(fillMatrixDiagonal(4, true)).to.deep.equal([[true, 0, 0, 0], [0, true, 0, 0], [0, 0, true, 0], [0, 0, 0, true]]);\n});\n\nit(\"fillMatrixDiagonal(1, 5) should return a single element matrix [[5]]\", function() {\n  expect(fillMatrixDiagonal(1, 5)).to.deep.equal([[5]]);\n});\n\nit(\"fillMatrixDiagonal(0, 'empty') should return an empty array\", function() {\n  expect(fillMatrixDiagonal(0, 'empty')).to.deep.equal([]);\n});\n\nit(\"fillMatrixDiagonal(5, 2) should have 2 as each element on its diagonal\", function() {\n  const matrix = fillMatrixDiagonal(5, 2);\n  const diagonalValues = matrix.map((row, i) => row[i]);\n  expect(diagonalValues.every(value => value === 2)).to.be.true;\n});\n\nit(\"fillMatrixDiagonal(3, false) should create a matrix with false on the diagonal and 0 elsewhere\", function() {\n  expect(fillMatrixDiagonal(3, false)).to.deep.equal([[false, 0, 0], [0, false, 0], [0, 0, false]]);\n});\n\nit(\"fillMatrixDiagonal(2, null) should create a 2x2 matrix with null on the diagonal\", function() {\n  expect(fillMatrixDiagonal(2, null)).to.deep.equal([[null, 0], [0, null]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}