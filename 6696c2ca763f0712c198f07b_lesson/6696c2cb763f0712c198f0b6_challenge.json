{
  "_id": "6696c2cb763f0712c198f0b6",
  "name": {
    "en": "Double digits in an array of strings",
    "ru": "Удвоить цифры в массиве строк"
  },
  "instruction": {
    "en": "The function `doubleNumbers` takes an array of strings.\n\nReturn an array in which all the numbers in the strings are multiplied by 2. If the element is not a number, leave it as it is.\n\nMultiply the numbers from 0 to 9.\n\nFix the errors in the code to make it work correctly.\n\nThere are no errors in the loop. Analyze the code and try to repeat.\n\nExample function call:\n```javascript\ndoubleNumbers([\"hello\", \"hello 123\", \"0234\"]) // [\"hello\", \"hello 246\", \"0468\"]\n```",
    "ru": "Функция `doubleNumbers` принимает массив строк.\n\nВерните массив, в котором все цифры в строках умножены на 2. Если элемент не число, то оставьте его как есть.\n\nУмножать стоит цифры от 0 до 9.\n\nИсправьте ошибки в коде, чтобы он работал правильно.\n\nОшибок в цикле нет. Проанализируйте код и попробуйте повторить.\n\nПример запуска функции:\n```javascript\ndoubleNumbers([\"hello\", \"hello 123\", \"0234\"]) // [\"hello\", \"hello 246\", \"0468\"]\n```"
  },
  "initialSolution": "function doubleNumbers([arr]) {\n  const newArr = [empty];\n  const numbers = '123456789';\n  for (let i = 0; i < arr.length; i++) {\n    let str =''\n    for(let j = 0; j < arr[i].length; j++) {\n      if (numbers.includes(arr[i][j])) str += +arr[i][j] * 2;\n      else str +=arr[i][j]\n    }\n    newArr.push(str)\n  }\n  return newArr;\n}",
  "completedSolution": "function doubleNumbers(arr) {\n  const newArr = []\n  const numbers = '123456789'\n  for (let i = 0; i < arr.length; i++) {\n    let str = ''\n    for (let j = 0; j < arr[i].length; j++) {\n      if (numbers.includes(arr[i][j])) str += +arr[i][j] * 2;\n      else str += arr[i][j]\n    }\n    newArr.push(str)\n  }\n  return newArr;\n}",
  "openTest": "it('Created function doubleNumbers', () => {\n  expect(doubleNumbers).to.be.a('function');\n});\n\nit('doubleNumbers([\"hello\", \"hello 123\", \"0234\"]) should return [\"hello\", \"hello 246\", \"0468\"]]', () => {\n  expect(doubleNumbers([\"hello\", \"hello 123\", \"0234\"])).to.deep.equal([\"hello\", \"hello 246\", \"0468\"]);\n});\n\nit('doubleNumbers([\"a1b2c3\", \"abcde\", \"12345\"]) should return [\"a2b4c6\", \"abcde\", \"246810\"]]', () => {\n  expect(doubleNumbers([\"a1b2c3\", \"abcde\", \"12345\"])).to.deep.equal([\"a2b4c6\", \"abcde\", \"246810\"]);\n});\n\nit('doubleNumbers([\"abcde\"]) should return [\"abcde\"]', () => {\n  expect(doubleNumbers([\"abcde\"])).to.deep.equal([\"abcde\"]);\n});\n\nit('doubleNumbers([\"12345\"]) should return [\"246810\"]', () => {\n  expect(doubleNumbers([\"12345\"])).to.deep.equal([\"246810\"]);\n});\n\nit('doubleNumbers([\"\"]) should return [\"\"]', () => {\n  expect(doubleNumbers([\"\"])).to.deep.equal([\"\"]);\n});\n\nit('doubleNumbers([\"alice5943\", \"\", \"999\"]) should return [\"alice101886\", \"\", \"181818\"]', () => {\n  expect(doubleNumbers([\"alice5943\", \"\", \"999\"])).to.deep.equal([\"alice101886\", \"\", \"181818\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}