{
  "_id": "6696c2cb763f0712c198f0b8",
  "name": {
    "en": "",
    "ru": "Удвоение нечетных чисел"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `doubleOddNumbers` принимает массив в качестве параметра и возвращает массив, в котором все нечетные числа удвоены.\n\nСтроки и/или четные числа возвращаются без изменений в том же порядке.\n\nВ массиве встречаются только числа и строки.\n\nПример запуска функции:\n```javascript\ndoubleOddNumbers([1, 2, 3, 4, 5]); // [2, 2, 6, 4, 10]\ndoubleOddNumbers([2, 2, \"4\", 4, 6]); // [2, 2, \"4\", 4, 6]\ndoubleOddNumbers([\"hello\", 2, \"4\", 4]); // [\"hello\", 2, \"4\", 4]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function doubleOddNumbers(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    if ((typeof arr[i] === 'number' || !isNaN(arr[i])) && arr[i] % 2 === 1)\n      arr[i] *= 2;\n  }\n  return arr\n}",
  "openTest": "it('Created function doubleOddNumbers', () => {\n  expect(doubleOddNumbers).to.be.a('function');\n});\n\nit('doubleOddNumbers([1, 2, 3, 4, 5]) should return [2, 2, 6, 4, 10]', () => {\n  expect(doubleOddNumbers([1, 2, 3, 4, 5])).to.deep.equal([2, 2, 6, 4, 10]);\n});\n\nit('doubleOddNumbers([2, 2, \"4\", 4, 6]) should return [2, 2, \"4\", 4, 6]', () => {\n  expect(doubleOddNumbers([2, 2, \"4\", 4, 6])).to.deep.equal([2, 2, \"4\", 4, 6]);\n});\n\nit('doubleOddNumbers([\"hello\", 2, \"4\", 4]) should return [\"hello\", 2, \"4\", 4]', () => {\n  expect(doubleOddNumbers([\"hello\", 2, \"4\", 4])).to.deep.equal([\"hello\", 2, \"4\", 4]);\n});\n\nit('doubleOddNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) should return [2, 2, 6, 4, 10, 6, 14, 8, 18, 10]', () => {\n  expect(doubleOddNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])).to.deep.equal([2, 2, 6, 4, 10, 6, 14, 8, 18, 10]);\n});\n\nit('doubleOddNumbers([1, 3, 5, 7, 9) should return [2, 6, 10, 14, 18]', () => {\n  expect(doubleOddNumbers([1, 3, 5, 7, 9])).to.deep.equal([2, 6, 10, 14, 18]);\n});\n\nit('doubleOddNumbers([]) should return []', () => {\n  expect(doubleOddNumbers([])).to.deep.equal([]);\n});\n\nit('doubleOddNumbers([\"\"]) should return [\"\"]', () => {\n  expect(doubleOddNumbers([\"\"])).to.deep.equal([\"\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}