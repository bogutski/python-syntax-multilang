{
  "_id": "6696c2cb763f0712c198f0b4",
  "name": {
    "en": "",
    "ru": "Удвоенные числа записать в объект"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `doubleNumbers` принимает массив чисел и строк.\n\nОна должна вернуть объект, в котором ключами будут числа из массива, а значениями - удвоенные значения этих чисел, но число в объекте должно встречаться только один раз.\n\nПример запуска функции:\n```javascript\ndoubleNumbers([1, 1, 1, 4, \"hello\", \"test\"]); // {1: 2, 4: 8}\ndoubleNumbers([\"hello\", \"test\"]); // {}\ndoubleNumbers([0, 0, 0, 10, 10, 0, 5]); // {0: 0, 10: 20, 5: 10}\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function doubleNumbers(arr) {\n  const obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    if(!obj[arr[i]] && typeof arr[i] === 'number'){\n      obj[arr[i]] = arr[i] * 2;\n    }\n  }\n  return obj\n}",
  "openTest": "it('Created function doubleNumbers', () => {\n  expect(doubleNumbers).to.be.a('function');\n});\n\nit('doubleNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) should returns {1: 2, 2: 4, 3: 6, 4: 8, 5: 10}', () => {\n  expect(doubleNumbers([1, 2, 3, 4, 5])).to.deep.equal({1: 2, 2: 4, 3: 6, 4: 8, 5: 10});\n});\nit('doubleNumbers([1, 1, 1, 4, \"hello\", \"test\"]) should returns {1: 2, 4: 8}', () => {\n  expect(doubleNumbers([1, 1, 1, 4, \"hello\", \"test\"])).to.deep.equal({1: 2, 4: 8});\n});\n\nit('doubleNumbers([\"hello\", \"test\"]) should returns {}}', () => {\n  expect(doubleNumbers([\"hello\", \"test\"])).to.deep.equal({});\n});\n\nit('doubleNumbers([0, 0, 0, 10, 10, 0, 5]) should returns {0: 0, 10: 20, 5: 10}', () => {\n  expect(doubleNumbers([0, 0, 0, 10, 10, 0, 5])).to.deep.equal({0: 0, 10: 20, 5: 10});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}