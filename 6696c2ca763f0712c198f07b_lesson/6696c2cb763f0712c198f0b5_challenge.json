{
  "_id": "6696c2cb763f0712c198f0b5",
  "name": {
    "en": "",
    "ru": "Записать удвоенные числа в массив строк"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `doubleNumbers` принимает массив в качестве параметра.\n\nМассив может состоять из чисел и строк.\n\nЕсли массив пустой, то функция должна вернуть строку \"Array is empty\".\n\nЕсли в массиве нет чисел, то функция должна вернуть строку \"Array doesn't contain numbers\".\n\nЕсли в массиве есть числа, то функция должна вернуть массив из двух строк:\n[\"удвоенные четные числа\", \"удвоенные нечетные числа\"]\n\nКаждая строка должна содержать числа, разделенные пробелом. В конце строки пробела быть не должно.\n\nЧисла также могут быть написаны в виде строк. Их тоже нужно удвоить.\n\nЕсли в массиве есть пустые строки, то их нужно игнорировать.\n\nПример запуска функции:\n```javascript\ndoubleNumbers([1, 2, 3, 4, 5]); // [\"4 8\", \"2 6 10\"]\ndoubleNumbers([1, 2, 3, 4, 5, \"a\", \"b\", \"c\"]); // [\"4 8\", \"2 6 10\"]\ndoubleNumbers([\"a\", \"b\", \"c\", \"\"]); // \"Array doesn't contain numbers\"\ndoubleNumbers([]); // \"Array is empty\"\ndoubleNumbers([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"\"]); // [\"4 8\", \"2 6 10\"]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function doubleNumbers(arr) {\n  if (!arr.length) return \"Array is empty\";\n  let even = '';\n  let odd = '';\n  for (let i = 0; i < arr.length; i++) {\n    if (typeof arr[i] === \"number\" || !isNaN(arr[i]) && arr[i] !== '') {\n      if (arr[i] % 2 === 0) {\n        even += arr[i] * 2 + ' ';\n      } else {\n        odd += arr[i] * 2 + ' ';\n      }\n    }\n  }\n  if (!even.length && !odd.length) return 'Array doesn\\'t contain numbers';\n  return [even.trim(), odd.trim()];\n}",
  "openTest": "it('Created function doubleNumbers', () => {\n  expect(doubleNumbers).to.be.a('function');\n});\n\nit('doubleNumbers([1, 2, 3, 4, 5]) should returns [\"4 8\", \"2 6 10\"]', () => {\n  expect(doubleNumbers([1, 2, 3, 4, 5])).to.deep.equal([\"4 8\", \"2 6 10\"]);\n});\n\nit('doubleNumbers([1, 2, 3, 4, 5, \"a\", \"b\", \"c\"]) should returns [\"4 8\", \"2 6 10\"]', () => {\n  expect(doubleNumbers([1, 2, 3, 4, 5, \"a\", \"b\", \"c\"])).to.deep.equal([\"4 8\", \"2 6 10\"]);\n})\n\nit('doubleNumbers([1, \"2\", \"3\", 4, 5, \"a\", \"b\", \"c\"]) should returns [\"4 8\", \"2 6 10\"]', () => {\n  expect(doubleNumbers([1, \"2\", \"3\", 4, 5, \"a\", \"b\", \"c\"])).to.deep.equal([\"4 8\", \"2 6 10\"]);\n});\n\nit('doubleNumbers([\"a\", \"b\", \"c\", \"\"]) should returns \"Array doesn\\'t contain numbers\"', () => {\n  expect(doubleNumbers([\"a\", \"b\", \"c\", \"\"])).to.deep.equal(\"Array doesn\\'t contain numbers\");\n});\n\nit('doubleNumbers([]) should returns \"Array is empty\"', () => {\n  expect(doubleNumbers([])).to.deep.equal(\"Array is empty\");\n});\n\nit('doubleNumbers([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"\"]) should returns [\"4 8\", \"2 6 10\"]', () => {\n  expect(doubleNumbers([1, 2, 3, 4, 5, \"a\", \"b\", \"c\", \"\"])).to.deep.equal([\"4 8\", \"2 6 10\"]);\n});\n\nit('doubleNumbers([ \"\", \"\"]) should returns \"Array doesn\\'t contain numbers\"', () => {\n  expect(doubleNumbers([\"\", \"\"])).to.deep.equal(\"Array doesn\\'t contain numbers\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}