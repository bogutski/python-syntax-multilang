{
  "_id": "6696c2cb763f0712c198f0b1",
  "name": {
    "en": "Double all numbers, including number lines",
    "ru": "Удвоить все числа, включая строки с числами"
  },
  "instruction": {
    "en": "The function `doubleAllNumbers` takes an array as a parameter.\n\nThe array can contain strings, numbers, NaN, and numbers in the form of strings.\n\nThe function should double all numbers, including numbers in the form of strings, and return an array with the doubled numbers.\n\nIf an element of the array is not a number, it should remain unchanged.\n\nExample function calls:\n```javascript\ndoubleAllNumbers([1, 2, \"3\"]) // [2, 4, 6]\ndoubleAllNumbers([1, \"hello\", \"true\", \"5\"]) // [2, \"hello\", \"true\", 10]\ndoubleAllNumbers([\"hello\", \"35a\", NaN]) // [\"hello\", \"35a\", NaN]\n```",
    "ru": "Функция `doubleAllNumbers` принимает массив в качестве параметра.\n\nМассив может содержать строки, числа, NaN а также числа в виде строк.\n\nФункция должна удвоить все числа, включая числа в виде строк и вернуть массив с удвоенными числами.\n\nЕсли элемент массива не является числом, то он должен остаться неизменным.\n\nПример запуска функции:\n```javascript\ndoubleAllNumbers([1, 2, \"3\"]) // [2, 4, 6]\ndoubleAllNumbers([1, \"hello\", \"true\", \"5\"]) // [2, \"hello\", \"true\", 10]\ndoubleAllNumbers([\"hello\", \"35a\", NaN]) // [\"hello\", \"35a\", NaN]\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function doubleAllNumbers(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    if (typeof arr[i] === 'number' || !isNaN(arr[i]))\n    arr[i] *= 2;\n  }\n  return arr\n}",
  "openTest": "it('Created function doubleAllNumbers', () => {\n  expect(doubleAllNumbers).to.be.a('function');\n});\n\nit('doubleAllNumbers([1, 2, 3]) should returns [2, 4, 6]', () => {\n  expect(doubleAllNumbers([1, 2, 3])).to.deep.equal([2, 4, 6]);\n});\n\nit('doubleAllNumbers([1, \"hello\", \"true\", \"5\"]) should returns [2, \"hello\", \"true\", 10]', () => {\n  expect(doubleAllNumbers([1, \"hello\", \"true\", \"5\"])).to.deep.equal([2, \"hello\", \"true\", 10]);\n});\n\nit('doubleAllNumbers([\"hello\", \"35a\", NaN]) should returns [\"hello\", \"35a\", NaN]', () => {\n  expect(doubleAllNumbers([\"hello\", \"35a\", NaN])).to.deep.equal([\"hello\", \"35a\", NaN]);\n});\n\nit('doubleAllNumbers([1, 2, \"10\", \"greeting\", \"js\"]) should returns [2, 4, 20, \"greeting\", \"js\"]', () => {\n  expect(doubleAllNumbers([1, 2, \"10\", \"greeting\", \"js\"])).to.deep.equal([2, 4, 20, \"greeting\", \"js\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}