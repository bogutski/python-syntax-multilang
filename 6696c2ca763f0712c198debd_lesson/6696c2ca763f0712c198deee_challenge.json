{
  "_id": "6696c2ca763f0712c198deee",
  "name": {
    "en": "Split the chocolate bar",
    "ru": "Разделите шоколадку"
  },
  "instruction": {
    "en": "There is a bar of chocolate with size `n * m`. Calculate the minimum number of breaks to divide the bar into 1 * 1 pieces.\n\nDefine variables `m` and `n` and assign them values of arbitrary positive numbers.\nDefine variable `pieces` and assign to it the value of the expression for calculating the number of breaks `m * n - 1`.\n\nHere is an example that is fundamentally similar to what you need to do, but adapt it to the requirements of the problem:\n```\nconst a = 20;\nconst b = 5;\nconst sum = a * b - 1;\n```",
    "ru": "Есть плитка шоколада размером `n * m`. Вычислите, какое минимальное количество разломов надо сделать, чтобы разделить плитку на кусочки 1 * 1.\n\nЗадайте переменные `m` и `n` и присвойте им значения произвольных положительных чисел.\nЗадайте переменную `pieces` и присвойте ей значение выражения для вычисления количества разломов `m * n - 1`.\n\nПриведем пример, который принципиально похож на то, что нужно сделать, но адаптируйте его к требованиям задачи:\n```javascript\nconst a = 20;\nconst b = 5;\nconst sum = a * b - 1;\n```"
  },
  "initialSolution": "",
  "completedSolution": "const m = 35;\nconst n = 5;\nconst pieces = m * n - 1;",
  "openTest": "it('Variable `m` contains a value', () => {\n  expect(m).not.undefined;\n});\n\nit('The variable `m` type is a number', () => {\n  expect(m).a('number');\n});\n\nit('the variable type `m` is not NaN', () => {\n  expect(isNaN(m)).false;\n});\n\nit('the variable `m` is a positive number', () => {\n  expect(m > 0).true;\n});\n\nit('Variable `n` contains a value', () => {\n  expect(n).not.undefined;\n});\n\nit('Variable type `n` is a number', () => {\n  expect(n).a('number');\n});\n\nit('the variable type `n` is not NaN', () => {\n  expect(isNaN(n)).false;\n});\n\nit('the variable `n` is a positive number', () => {\n  expect(n > 0).true;\n});\n\nit('Variable `pieces` contains a value', () => {\n  expect(pieces).not.undefined;\n});\n\nit('The `pieces` variable type is a number', () => {\n  expect(pieces).a('number');\n});\n\nit('the variable type `pieces` is not NaN', () => {\n  expect(isNaN(pieces)).false;\n});\n\nit('the `pieces` variable is calculated correctly', () => {\n  expect(pieces).equal(m * n - 1);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": "```javascript\nconst m = 35;\nconst n = 5;\nconst pieces = m * n - 1;\n```"
  }
}