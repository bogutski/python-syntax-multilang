{
  "_id": "6696c2ca763f0712c198e07c",
  "content": {
    "ru": "### Ограничения области видимости переменных внутри функции\n\nСоздадим функцию и вызовем её:\n\n```javascript\nfunction hello(){\n  const driverName = 'Bob';\n}\n\nhello();\nconsole.log(driverName);\n```\n\nКак мы видим, в консоли появляется ошибка `driverName is not defined`.\n\nНо почему? Переменная, объявленная внутри функции видна **только внутри функции**, и если мы хотим получить доступ к переменной `driverName`, то это мы должны делать внутри функции.\n\n```javascript\nfunction hello(){\n  const driverName = 'Bob';\n  console.log(driverName);\n}\n\nhello();\n```\n\nКак мы видим, теперь `console.log(driverName);` находится внутри функции, тем самым мы получили доступ к переменной `driverName`.\n\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/limit-access.png)\n\n### Ограничения области видимости переменных внутри блока\n\nСоздадим блок кода в фигурных скобках:\n\n```javascript\n{\n  const driverName = 'Bob';\n  console.log(driverName);\n}\n```\n\nТеперь попробуем вынести `console.log(driverName);` за скобки и получим такой же результат, как и в примере с функцией: `driverName is not defined`, так как видимость переменной `driverName` ограничена блоком.\n\n```javascript\n{\n  const driverName = 'Bob';\n}\n\nconsole.log(driverName);\n```\n\n### Доступ в блоке к переменной, объявленной вне блока\n\nПоменяем условие и создадим переменную вне блока, а `console.log` напишем внутри блока:\n\n```javascript\nconst driverName = 'Bob';\n\n{\n  console.log(driverName);\n}\n```\n\nЧто же поразительного мы увидим? Всё то, что вне блока будет доступно внутри блока.\n\n### Доступ к переменной в функции, объявленной вне функции\n\nТо же самое будет работать с функцией, но обратите внимание, что это не очень хорошая практика, когда функция использует что-то за пределами самой функции.\n\n```javascript\nconst name = 'Alice';\n\nfunction hello() {\n  return name;\n}\n\nconsole.log(hello());\n```\n\nПопробуйте с этим поэкспериментировать.\n\nВ следующих задачах мы узнаем, где это реализовывается и для чего надо.\n\nПовторяйте все примеры, пропишите их сами, так как только за счёт многократно повторения можно научится писать код.\n",
    "en": "### Limiting the scope of variables within a function\n\nLet's create a function and call it:\n\n```javascript\nfunction hello(){\n  const driverName = 'Bob';\n}\n\nhello();\nconsole.log(driverName);\n```\n\nAs we can see, an error `driverName is not defined` appears in the console.\n\nBut why? A variable declared inside a function is visible **only inside the function**, and if we want to access the `driverName` variable, we have to do it inside the function.\n\n```javascript\nfunction hello(){\n  const driverName = 'Bob';\n  console.log(driverName);\n}\n\nhello();\n```\n\nAs we can see, now `console.log(driverName);` is inside the function, so we have access to the `driverName` variable.\n\n![](https://course-qa-basics.s3.us-west-1.amazonaws.com/limit-access.png)\n\n### Limiting the scope of variables within a block\n\nCreate a block of code in curly braces:\n\n```javascript\n{\n  const driverName = 'Bob';\n  console.log(driverName);\n}\n```\n\nNow let's try to put `console.log(driverName);` outside the brackets and get the same result as in the example with the function: `driverName is not defined`, because the visibility of the `driverName` variable is limited to a block.\n\n```javascript\n{\n  const driverName = 'Bob';\n}\n\nconsole.log(driverName);\n```\n\n### Access in a block to a variable declared outside the block\n\nLet's change the condition and create a variable outside the block, and write `console.log` inside the block:\n\n```javascript\nconst driverName = 'Bob';\n\n{\n  console.log(driverName);\n}\n```\n\nWhat will we see that strikes us? Everything that is outside the block will be available inside the block.\n\n### Accessing a variable in a function declared outside the function\n\nThe same will work with a function, but note that it is not good practice for a function to use something outside of the function itself.\n\n```javascript\nconst name = 'Alice';\n\nfunction hello() {\n  return name;\n}\n\nconsole.log(hello());\n```\n\nTry experimenting with it.\n\nIn the following tasks we will find out where this is implemented and what it is for.\n\nRepeat all the examples, write them yourself, because only through repetition can you learn to write code.\n",
    "es": "# Область видимости переменных language: es"
  },
  "video": {
    "ru": "https://youtu.be/cEEYwsvmKAs",
    "en": "",
    "es": ""
  }
}