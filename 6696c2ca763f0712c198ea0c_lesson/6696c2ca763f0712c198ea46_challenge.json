{
  "_id": "6696c2ca763f0712c198ea46",
  "name": {
    "en": "The sum of the powers of a number",
    "ru": "Сумма степеней числа"
  },
  "instruction": {
    "en": "The function `powerOfNum` takes two parameters: the number `num` and the degree `power`.\n\nYou need to find the sum of all degrees of the number `num` from `num ** power` to `num ** num`.\n\nFor example, if you pass a number 2 and a power of 4 into the `powerOfNum` function, the function should get the sum of 28, since:\n * 2 to the power of 4 equals 16,\n * 2 to the power of 3 equals 8,\n * 2 to the power of 2 equals 4.\n * The sum of these numbers is 28.\n\nIf `power` is less than `num`, the function should return a string like: `Sum is \"num ** power\"`.\n\nThe function must return a string of the form: `Sum is \"sum\"`.\n\nTo do this, create a loop from `power` to `num` inclusive and sum up the results of the power expansion sum = sum + num ** i.\n\nFix the code to make it work correctly.\n\nExamples of running the function:\n```javascript\npowerOfNum(2, 3) // 'Sum of 2 to the power of 3 is 12' (2 ** 3 + 2 ** 2 = 12)\n\npowerOfNum(2, 4) // 'Sum of 2 to the power of 4 is 28' (2 ** 4 + 2 ** 3 + 2 ** 2 = 28)\n\npowerOfNum(4, 1) // 'Sum of 4 to the power of 1 is 4' (4 ** 1 = 4)\n\n```",
    "ru": "Функция `powerOfNum` принимает два параметра: число `num` и степень `power`.\n\nНеобходимо найти сумму всех степеней числа `num` от `num ** power` до `num ** num`.\n\nНапример, если передать в функцию `powerOfNum` число 2 и степень 4, то функция должна получить сумму 28, так как:\n * 2 в степени 4 равно 16\n * 2 в степени 3 равно 8\n * 2 в степени 2 равно 4\n * Сумма этих чисел равна 28\n\nЕсли `power` меньше `num`, то функция должна вернуть строку вида: `Sum is \"num ** power\"`.\n\nФункция должна вернуть строку вида: `Sum is \"sum\"`.\n\nДля этого создайте цикл от `power` до `num` включительно и суммируйте результаты возведения в степень `sum = sum +  num ** i`.\n\nИсправьте код, чтобы он работал правильно.\n\nПримеры запуска функции:\n```javascript\npowerOfNum(2, 3) // 'Sum is 12'  (2 ** 3 + 2 ** 2 = 12)\n\npowerOfNum(2, 4) // 'Sum is 28' (2 ** 4 + 2 ** 3 + 2 ** 2 = 28)\n\npowerOfNum(4, 1) // 'Sum is 4'   (4 ** 1 = 4)\n\n```"
  },
  "initialSolution": "function PowerOfNum(num, power){\n  if (power < num) return `Sum is num ** power`;\n  let sum = 1;\n  for (let i = num ** power; i >= num ; i++){\n    sum = sum +  num ** i;\n  }\n  return `Sum is \"sum\"`;\n}",
  "completedSolution": "function powerOfNum(num, power){\n  if (power < num) return `Sum is ${num ** power}`;\n  let sum = 0;\n  for (let i = power; i >= num; i--){\n    sum = sum +  num ** i;\n  }\n  return `Sum is ${sum}`;\n}",
  "openTest": "it('Created function powerOfNum', () => {\n  expect(powerOfNum).to.be.a('function');\n});\n\nit('powerOfNum(2, 3) should return 12', () => {\n  expect(powerOfNum(2, 3)).to.equal('Sum is 12');\n});\n\nit('powerOfNum(3, 4) should return 108', () => {\n  expect(powerOfNum(3, 4)).to.equal('Sum is 108');\n});\n\nit('powerOfNum(2, 5) should return 60', () => {\n  expect(powerOfNum(2, 5)).to.equal('Sum is 60');\n});\n\nit('powerOfNum(3, 5) should return 351', () => {\n  expect(powerOfNum(3, 5)).to.equal('Sum is 351');\n});\n\nit('powerOfNum(2, 1) should return 2', () => {\n  expect(powerOfNum(2, 1)).to.equal('Sum is 2');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}