{
  "_id": "6696c2ca763f0712c198e1eb",
  "name": {
    "en": "We do not accept less than 10 gifts",
    "ru": "Меньше 10 подарков не принимаем"
  },
  "instruction": {
    "en": "For the birthday of a very cranky baby, each guest should bring at least 10 gifts.\n\nWrite a function `isEnough` that takes the number of gifts from the guest, and returns `true` if there are enough gifts, and `false` if there are not enough gifts.\n\nBy the way, you don't need to use `if` here, you can do without it.\n\nAn example with `if`:\n```javascript\nfunction isMoreThanFive(num) {\n  if (num > 5) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nThe result of the `num > 5` comparison will be `true` or `false`, so you can return it immediately:\n.```javascript\nfunction isMoreThanFive(num) {\n  return num > 5;\n}\n```\n\nUse this principle in the `isEnough` function.",
    "ru": "На день рождения очень капризного малыша каждый гость должен принести не менее 10 подарков.\n\nНапишите функцию `isEnough`, которая принимает количество подарков от гостя, и возвращает `true`, если подарков достаточно, и `false`, если подарков недостаточно.\n\nКстати тут не обязательно использовать `if`, можно обойтись без него.\n\nПример с `if`:\n```javascript\nfunction isMoreThanFive(num) {\n  if (num > 5) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nРезультат сравнения `num > 5` будет `true` или `false`, поэтому можно сразу вернуть его:\n```javascript\nfunction isMoreThanFive(num) {\n  return num > 5;\n}\n```\n\nИспользуйте этот принцип в функции `isEnough`."
  },
  "initialSolution": "fun",
  "completedSolution": "function isEnough(num) {\n  return num >= 10;\n}",
  "openTest": "it('Created function isEnough', () => {\n  expect(isEnough).to.be.a('function');\n});\n\nit('isEnough(10) should return true', () => {\n  expect(isEnough(10)).to.equal(true);\n});\n\nit('isEnough(9) should return false', () => {\n  expect(isEnough(9)).to.equal(false);\n});\n\nit('isEnough(0) should return false', () => {\n  expect(isEnough(0)).to.equal(false);\n});\n\nit('isEnough(-1) should return false', () => {\n  expect(isEnough(-1)).to.equal(false);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}