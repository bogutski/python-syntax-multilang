{
  "_id": "6696c2ca763f0712c198e1ef",
  "name": {
    "en": "Fizz, Buzz, FizzBuzz",
    "ru": "Fizz, Buzz, FizzBuzz"
  },
  "instruction": {
    "en": "This is a classic programming problem called FizzBuzz.\n\nWrite a function `fizzBuzz` that takes a number and returns a string.\n\nIf the number is divisible by 3, return the string `Fizz`.\n\nIf the number is divisible by 5, return the string `Buzz`.\n\nIf the number is divisible by 3 and by 5, return the string `FizzBuzz`. Hint - that is, if the number is divisible by 15.\n\nIf the number is not divisible by either 3 or 5 or 15, return the number itself.",
    "ru": "Это классическая задача на программирование, которая называется FizzBuzz.\n\nНапишите функцию `fizzBuzz`, которая принимает число и возвращает строку.\n\nЕсли число делится на 3, то вернуть строку `Fizz`.\n\nЕсли число делится на 5, то вернуть строку `Buzz`.\n\nЕсли число делится на 3 и на 5, то вернуть строку `FizzBuzz`. Подсказка – то есть, если число делится на 15.\n\nЕсли число не делится ни на 3, ни на 5, ни на 15, то вернуть само число."
  },
  "initialSolution": "fun",
  "completedSolution": "function fizzBuzz(num) {\n  if (num % 15 === 0) {\n    return 'FizzBuzz';\n  }\n\n  if (num % 3 === 0) {\n    return 'Fizz';\n  }\n\n  if (num % 5 === 0) {\n    return 'Buzz';\n  }\n\n  return num;\n}",
  "openTest": "it('Created function fizzBuzz', () => {\n  expect(fizzBuzz).to.be.a('function');\n});\n\nit('fizzBuzz(3) should return Fizz', () => {\n  expect(fizzBuzz(3)).to.equal('Fizz');\n} );\n\nit('fizzBuzz(5) should return Buzz', () => {\n  expect(fizzBuzz(5)).to.equal('Buzz');\n} );\n\nit('fizzBuzz(15) should return FizzBuzz', () => {\n  expect(fizzBuzz(15)).to.equal('FizzBuzz');\n} );\n\nit('fizzBuzz(1) should return 1', () => {\n  expect(fizzBuzz(1)).to.equal(1);\n} );\n\nit('fizzBuzz(2) should return 2', () => {\n  expect(fizzBuzz(2)).to.equal(2);\n} );\n\nit('fizzBuzz(4) should return 4', () => {\n  expect(fizzBuzz(4)).to.equal(4);\n} );\n\nit('fizzBuzz(30) should return FizzBuzz', () => {\n  expect(fizzBuzz(30)).to.equal('FizzBuzz');\n} );\n\nit('fizzBuzz(35) should return Buzz', () => {\n  expect(fizzBuzz(35)).to.equal('Buzz');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}