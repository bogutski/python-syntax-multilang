{
  "_id": "6696c2ca763f0712c198e1e7",
  "name": {
    "en": "A special greeting for a 100+ year old man",
    "ru": "Особое приветствие для 100+ летнего человека"
  },
  "instruction": {
    "en": "Write a function `greeting` that takes two parameters: `age` and `name`.\n\nIf `age` is greater than or equal to 100, then return the string `'Wow! Our special guest Sam!'`.\n\nIf `age` is less than 100, then return the string `'Hello, Sam!'`.\n\nInstead of `Sam` it must be the name that is passed in the second parameter.",
    "ru": "Напишите функцию `greeting`, которая принимает два параметра: `age` и `name`.\n\nЕсли `age` больше или равно 100, то вернуть строку `'Wow! Our special guest Sam!'`.\n\nЕсли `age` меньше 100, то вернуть строку `'Hello, Sam!'`.\n\nВместо `Sam` должно быть имя, которое передано вторым параметром."
  },
  "initialSolution": "fun 100",
  "completedSolution": "function greeting(age, name) {\n  if (age >= 100) {\n    return 'Wow! Our special guest ' + name + '!';\n  }\n  return 'Hello, ' + name + '!';\n}",
  "openTest": "it('Created function greeting', () => {\n  expect(greeting).to.be.a('function');\n});\n\nit('greeting(21, \"Jonny\") should return \"Hello, Jonny!\"', () => {\n  expect(greeting(21, 'Jonny')).to.equal('Hello, Jonny!');\n});\n\nit('greeting(101, \"Peter\") should return \"Wow! Our special guest Peter!\"', () => {\n  expect(greeting(101, 'Peter')).to.equal('Wow! Our special guest Peter!');\n});\n\nit('greeting(99, \"Peter\") should return \"Hello, Peter!\"', () => {\n  expect(greeting(99, 'Peter')).to.equal('Hello, Peter!');\n});\n\nit('greeting(100, \"Abby\") should return \"Wow! Our special guest Abby!\"', () => {\n  expect(greeting(100, 'Abby')).to.equal('Wow! Our special guest Abby!');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}