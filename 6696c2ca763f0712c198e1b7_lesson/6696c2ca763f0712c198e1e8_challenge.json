{
  "_id": "6696c2ca763f0712c198e1e8",
  "name": {
    "en": "Always even numbers",
    "ru": "Всегда четные числа"
  },
  "instruction": {
    "en": "Write a function `alwaysEven` that takes a number and returns the same number if it is even, and the next even number if it is odd.\n\nThis will help you:\n```javascript\nconst num = 10;\nconsole.log(num % 2); // 0\n```\n\nIf the number is even, then the remainder of division by 2 will be 0.\n\nIf the number is odd, the remainder of division by 2 will be greater than 0.\n\nExamples of function execution:\n```javascript\nalwaysEven(10); // 10\nalwaysEven(11); // 12\nalwaysEven(12); // 12\nalwaysEven(13); // 14\n```\n\nUse the `===` triple equal, strict equality operator to compare with zero.\n``javascript\nconst num = 0;\nconsole.log(num === 0); // true\n```",
    "ru": "Напишите функцию `alwaysEven`, которая принимает число и возвращает его же, если оно четное, и следующее четное, если нечетное.\n\nВам это поможет:\n```javascript\nconst num = 10;\nconsole.log(num % 2); // 0\n```\n\nЕсли число четное, то остаток от деления на 2 будет равен 0.\n\nЕсли число нечетное, то остаток от деления на 2 будет больше 0.\n\nПримеры исполнения функции:\n```javascript\nalwaysEven(10); // 10\nalwaysEven(11); // 12\nalwaysEven(12); // 12\nalwaysEven(13); // 14\n```\n\nДля сравнения с нулем используйте оператор `===` тройное равно, строгое равенство.\n```javascript\nconst num = 0;\nconsole.log(num === 0); // true\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function alwaysEven(num) {\n  return num % 2 < 1 ? num : num + 1;\n}",
  "openTest": "it('Created function alwaysEven', () => {\n  expect(alwaysEven).to.be.a('function');\n});\n\nit('alwaysEven(10) should return 10', () => {\n  expect(alwaysEven(10)).to.equal(10);\n});\n\nit('alwaysEven(11) should return 12', () => {\n  expect(alwaysEven(11)).to.equal(12);\n});\n\nit('alwaysEven(12) should return 12', () => {\n  expect(alwaysEven(12)).to.equal(12);\n});\n\nit('alwaysEven(13) should return 14', () => {\n  expect(alwaysEven(13)).to.equal(14);\n});\n\nit('alwaysEven(14) should return 14', () => {\n  expect(alwaysEven(14)).to.equal(14);\n});\n\nit('alwaysEven(15) should return 16', () => {\n  expect(alwaysEven(15)).to.equal(16);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}