{
  "_id": "6696c2ca763f0712c198f078",
  "name": {
    "en": "",
    "ru": "Второе максимальное нечетное число из массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `secondMaxOddNumber`, которая принимает массив чисел и возвращает второе максимальное нечетное число из массива.\n\n* Если массив пустой или в нем нет нечетных чисел, то функция должна вернуть `false`.\n* Если в массиве нет второго максимального нечетного числа, то функция должна вернуть `false`.\n* Второе максимальное число, не должно быть равно первому максимальному числу.\n\n\nПримеры запуска функции:\n```javascript\nsecondMaxOddNumber([1, 2, 3, 4, 5]);   // 3\nsecondMaxOddNumber([4, 3, -4, 2, -7]); // -7\nsecondMaxOddNumber([-2, 4, -10, 22]);  // false\nsecondMaxOddNumber([10, 10, 10]);      // false\nsecondMaxOddNumber([]);                // false\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function secondMaxOddNumber(arr){\n  if(!arr.length) return false;\n  let max = undefined;\n  let secondMax = undefined;\n\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2){\n      if(max === undefined || arr[i] > max) max = arr[i];\n    }\n  }\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2){\n      if((secondMax === undefined || arr[i] > secondMax) && arr[i] !== max) secondMax = arr[i];\n    }\n  }\n\n  if(secondMax === undefined) return false;\n  return secondMax;\n}",
  "openTest": "it('Created function secondMaxOddNumber', () => {\n  expect(secondMaxOddNumber).to.be.a('function');\n});\n\nit('Function secondMaxOddNumber does not include method sort', () => {\n  expect(secondMaxOddNumber.toString()).to.not.include('sort');\n});\n\nit('Function secondMaxOddNumber does not include method Math.max', () => {\n  expect(secondMaxOddNumber.toString()).to.not.include('Math.max');\n});\n\nit('secondMaxOddNumber([1, 2, 3, 4, 5]) should return 3', () => {\n  expect(secondMaxOddNumber([1, 2, 3, 4, 5])).to.equal(3);\n});\n\nit('secondMaxOddNumber([1, 8, 6, -2, -4, -8, -9]) should return -9', () => {\n  expect(secondMaxOddNumber([1, 8, 6, -2, -4, -8, -9])).to.equal(-9);\n});\n\nit('secondMaxOddNumber([20, 36, -45, -78, -22, -12, -6]) should return false', () => {\n  expect(secondMaxOddNumber([20, 36, -45, -78, -22, -12, -6])).to.equal(false);\n});\n\nit('secondMaxOddNumber([-5, -3, -1, 1, 3, 5]) should return 3', () => {\n  expect(secondMaxOddNumber([-5, -3, -1, 1, 3, 5])).to.equal(3);\n});\n\nit('secondMaxOddNumber([7, 7, 7]) should return false', () => {\n  expect(secondMaxOddNumber([7, 7, 7])).to.equal(false);\n});\n\nit('secondMaxOddNumber([]) should return false', () => {\n  expect(secondMaxOddNumber([])).to.equal(false);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}