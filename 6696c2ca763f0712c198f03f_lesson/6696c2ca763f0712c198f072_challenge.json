{
  "_id": "6696c2ca763f0712c198f072",
  "name": {
    "en": "",
    "ru": "Найти второе максимальное число в массиве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `secondMaxNumber`, которая принимает массив с числами и возвращает второе максимальное число из массива.\n\n* Если массив пустой, то функция должна вернуть `false`.\n* Если в массиве нет второго максимального числа, которое не равно максимальному, то функция должна вернуть `There is no second max number`.\n\n\nПримеры запуска функции:\n```javascript\nsecondMaxNumber([-1, -42, -2, -4, 10, 5]); // 5\nsecondMaxNumber([22, 36, 45, 31, 71, 18]); // 45\nsecondMaxNumber([5, 5, 5]);                // 'There is no second max number'\nsecondMaxNumber([]);                       // false\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function secondMaxNumber(arr){\n  if(arr.length === 0) return false;\n  let max = arr[0];\n  let secondMax = arr[0];\n\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i] > max){\n      secondMax = max;\n      max = arr[i];\n    } else if((secondMax === max || arr[i] > secondMax) && arr[i] !== max){\n      secondMax = arr[i];\n    }\n  }\n\n  if(secondMax === max) return 'There is no second max number';\n  else return secondMax;\n}",
  "openTest": "it('Created function secondMaxNumber', () => {\n  expect(secondMaxNumber).to.be.a('function');\n});\n\nit('Function secondMaxNumber does not include method sort', () => {\n  expect(secondMaxNumber.toString()).to.not.include('sort');\n});\n\nit('Function secondMaxNumber does not include method Math.max', () => {\n  expect(secondMaxNumber.toString()).to.not.include('Math.max');\n});\n\nit('secondMaxNumber([-1, -4, -2, -4, 0, 5]) should return 0', () => {\n  expect(secondMaxNumber([-1, -4, -2, -4, 0, 5])).to.be.equal(0);\n});\n\nit('secondMaxNumber([1, 1, 1, 1, 1, 1]) should return \"There is no second max number\"', () => {\n  expect(secondMaxNumber([1, 1, 1, 1, 1, 1])).to.be.equal('There is no second max number');\n});\n\nit('secondMaxNumber([1, 2, 3, 4, 5, 6]) should return 5', () => {\n  expect(secondMaxNumber([1, 2, 3, 4, 5, 6])).to.be.equal(5);\n});\n\nit('secondMaxNumber([99, 42, 32, 47, 55, 100]) should return 99', () => {\n  expect(secondMaxNumber([99, 42, 32, 47, 55, 100])).to.be.equal(99);\n});\n\nit('secondMaxNumber([9, 4, 8, 3, 4, 7, 0]) should return 8', () => {\n  expect(secondMaxNumber([9, 4, 8, 3, 4, 7, 0])).to.be.equal(8);\n});\n\nit('secondMaxNumber([]) should return false', () => {\n  expect(secondMaxNumber([])).to.be.false;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}