{
  "_id": "6696c2ca763f0712c198f07a",
  "name": {
    "en": "",
    "ru": "Найти максимальную длину строк"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `firstAndSecondMax`, которая принимает массив строк разной длины.\n\nФункция должна вернуть массив из двух элементов:\n\n* первый элемент - это длина самой длинной строки\n* второй элемент - это длина второй по длине строки\n\nЕсли массив пустой, то верните строку 'Array is empty'.\n\nЕсли все строки в массиве имеют одинаковую длину, то верните строку 'Strings are equal'.\n\n\nПримеры запуска функции:\n```javascript\nfirstAndSecondMax(['a', 'aa', 'abcd']);      // [4, 2]\nfirstAndSecondMax(['qwert', 'abc', 'a', 'a); // [5, 3]\nfirstAndSecondMax(['aaa', 'aaa', 'aaa']);    // 'Strings are equal'\nfirstAndSecondMax(['', '', '']);             // 'Strings are equal'\nfirstAndSecondMax([]);                       // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function firstAndSecondMax(arr){\n  if(!arr.length) return 'Array is empty';\n  let max = arr[0].length;\n  let secondMax = arr[0].length;\n\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i].length > max) max = arr[i].length;\n  }\n  for(let i = 1; i < arr.length; i++){\n    if((secondMax === max || arr[i].length > secondMax) && arr[i].length !== max) secondMax = arr[i].length;\n  }\n\n  if(secondMax === max) return 'Strings are equal';\n  else return [max, secondMax];\n}",
  "openTest": "it('Created function firstAndSecondMax', () => {\n  expect(firstAndSecondMax).to.be.a('function');\n});\n\nit('Function firstAndSecondMax does not include method sort', () => {\n  expect(firstAndSecondMax.toString()).to.not.include('sort');\n});\n\nit('Function firstAndSecondMax does not include method Math.max', () => {\n  expect(firstAndSecondMax.toString()).to.not.include('Math.max');\n});\n\nit(\"firstAndSecondMax(['a', 'ab', 'abc', 'abcd']) should return [4, 3]\", () => {\n  expect(firstAndSecondMax(['a', 'ab', 'abc', 'abcd'])).to.eql([4, 3]);\n});\n\nit(\"firstAndSecondMax(['abcde', 'abc', 'abcd', 'aa']) should return [5, 4]\", () => {\n  expect(firstAndSecondMax(['abcde', 'abc', 'abcd', 'aa'])).to.eql([5, 4]);\n});\n\nit(\"firstAndSecondMax(['abcde', 'abcsdw', 'abcad', 'awesa', 'aa']) should return [6, 5]\", () => {\n  expect(firstAndSecondMax(['abcde', 'abcsdw', 'abcad', 'awesa', 'aa'])).to.eql([6, 5]);\n});\n\nit(\"firstAndSecondMax(['', '', '']) should return 'Strings are equal'\", () => {\n  expect(firstAndSecondMax(['', '', ''])).to.eql('Strings are equal');\n});\n\nit(\"firstAndSecondMax(['aaa', 'aaa', 'aaa', 'aaa', 'aaa']) should return 'Strings are equal'\", () => {\n  expect(firstAndSecondMax(['aaa', 'aaa', 'aaa', 'aaa', 'aaa'])).to.eql('Strings are equal');\n});\n\nit(\"firstAndSecondMax([]) should return 'Array is empty'\", () => {\n  expect(firstAndSecondMax([])).to.eql('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}