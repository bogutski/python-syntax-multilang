{
  "_id": "6696c2ca763f0712c198e7b5",
  "content": {
    "ru": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/boy-and-cubes.png)\n\nМассивы в JavaScript представляют собой коллекцию элементов с индексами, начиная с нуля. Чтобы добавить новый элемент в массив, можно использовать несколько методов. Рассмотрим некоторые из них.\n\n### Метод `push()`\n\nМетод `push()` добавляет один или несколько элементов в конец массива. Этот метод изменяет исходный массив и возвращает новую длину массива.\n\nСинтаксис метода `push()`:\n\n```javascript\narr.push(element1, ..., elementN)\n```\n\nгде `arr` - это массив, в который нужно добавить элементы, `element1, ..., elementN` - элементы, которые необходимо добавить в конец массива.\n\nДобавим элемент `'Alex'` в конец массива `friends` с помощью метода `push()`. Затем выведем содержимое массива и его длину с помощью свойства `length`:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.push('Alex')\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', 'Alex']\nconsole.log(friends.length); // 4\n```\n\nМетод `push()` может принимать несколько аргументов. В следующем примере мы передадим два аргумента:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.push('Alex', 'Viktor')\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', 'Alex', 'Viktor']\nconsole.log(friends.length); // 5\n```\n\n### Метод `unshift()`\n\nМетод `unshift()` принимает один или несколько аргументов, которые станут новыми элементами массива, а затем сдвигает все существующие элементы вправо на одну позицию, чтобы освободить место для новых элементов. Этот метод также изменяет исходный массив и возвращает новую длину массива.\n\nСинтаксис метода `unshift()`:\n\n```javascript\narr.unshift(element1, ..., elementN)\n```\n\nгде `arr` - это массив, в который нужно добавить элементы, `element1, ..., elementN` - элементы, которые необходимо добавить в начало массива.\n\nДобавим элементы `'Alex'` и `'Viktor'` в начало массива `friends`:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.unshift('Alex', 'Viktor')\n\nconsole.log(friends); // ['Alex', 'Viktor', 'Alice', 'Bill', 'Carson']\n```\n\n### Изменение элементов массива\n\nТакже, элементы массива можно добавлять, присваивая им значение по индексу.\n\nДобавим в массив `friends` элемент `'Alex'`:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends[3] = 'Alex'\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', 'Alex']\n```\n\n### Добавление элементов за пределами массива\n\nМожно добавлять элементы в массив, указывая индекс, который находится за пределами текущей длины массива. В этом случае все индексы между последним элементом и добавляемым элементом будут заполнены значением `empty` (пустым значением).\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends[4] = 'Alex'\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', empty, 'Alex']\n```\n\nПри выводе массива с помощью `console.log()`, мы видим, что получился массив с пятью элементами, элемент `'Alex'` был успешно добавлен на место 4, а ячейка с индексом 3 осталась пустой (значение `empty`).\n\nМы можем добавлять элементы в массив в любой последовательности. Добавим элементы `'Alex'` и `'Viktor'` в ячейки с индексами 5 и 4 соответственно, используя прямое обращение к ячейке массива:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends[5] = 'Alex'\nfriends[4] = 'Viktor'\n\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', empty, 'Viktor', 'Alex']\n```\n\nЕсли индекс находится за границами существующих элементов массива, то элементы будут добавлены с соответствующими индексами и значениями `undefined`.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends[5] = 'Alex'\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', empty, empty, 'Alex']\nconsole.log(friends[4]); // undefined\n```\n\nЗаметьте, что если значение элемента массива не было явно задано, как в случае с элементом `undefined`, то в массиве отображается ключевое слово `undefined`.\n\n```javascript\nconst friends = ['Alice', 'Bill', undefined, 'Carson'];\n\nconsole.log(friends); // ['Alice', 'Bill', undefined, 'Carson']\n```\n\nВ данных примерах мы можем увидеть, что добавление элементов за пределы массива возможно, но это не рекомендуется. Вместо этого, для добавления элемента в конец массива используйте метод `push()`, а для добавления элемента в начало массива используйте метод `unshift()`.\n",
    "en": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/boy-and-cubes.png)\n\nArrays in JavaScript are collections of elements with indexes starting from zero. To add a new element to an array, you can use several methods. Let's take a look at some of them.\n\n### Method `push()`\n\nThe `push()` method adds one or more elements to the end of the array. This method changes the original array and returns the new length of the array.\n\nThe syntax of the `push()` method:\n\n```javascript\narr.push(element1, ..., elementN)\n```\n\nwhere `arr` is the array you want to add elements to, `element1, ..., elementN` are the elements you want to add to the end of the array.\n\nAdd an element `'Alex'` to the end of the array `friends` using the method `push()`. Then display the contents of the array and its length using the `length` property:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.push('Alex')\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', 'Alex']\nconsole.log(friends.length); // 4\n```\n\nThe `push()` method can take several arguments. In the following example we will pass two arguments:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.push('Alex', 'Viktor')\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', 'Alex', 'Viktor']\nconsole.log(friends.length); // 5\n```\n\n### The `unshift()` method\n\nThe `unshift()` method takes one or more arguments that will become new array elements, and then shifts all existing elements to the right by one position to make room for new elements. This method also changes the original array and returns the new length of the array.\n\nThe syntax of the `unshift()` method:\n\n```javascript\narr.unshift(element1, ..., elementN)\n```\n\nwhere `arr` is the array you want to add elements to, `element1, ..., elementN` are the elements you want to add to the beginning of the array.\n\nAdd the elements `'Alex'` and `'Viktor'` to the beginning of the array `friends`:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.unshift('Alex', 'Viktor')\n\nconsole.log(friends); // ['Alex', 'Viktor', 'Alice', 'Bill', 'Carson']\n```\n\n### Changing array elements\n\nAlso, array elements can be added by assigning them an index value.\n\nLet's add an element `'Alex'` to the `friends` array:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends[3] = 'Alex'\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', 'Alex']\n```\n\n### Adding elements outside the array\n\nYou can add elements to an array by specifying an index that is outside the current array length. In this case all indexes between the last element and the element to be added will be filled with `empty` value (empty value).\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends[4] = 'Alex'\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', empty, 'Alex']\n```\n\nWhen we output the array using `console.log()`, we see that we have an array with five elements, the element `'Alex'` was successfully added in place of 4, and the cell with index 3 was left empty (value `empty`).\n\nWe can add elements to the array in any sequence. Let's add elements `'Alex'` and `'Viktor'` to cells with indexes 5 and 4, respectively, using direct access to the array cell:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends[5] = 'Alex'\nfriends[4] = 'Viktor'\n\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', empty, 'Viktor', 'Alex']\n```\n\nIf the index is outside the boundaries of existing array elements, the elements will be added with the corresponding indexes and `undefined` values.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends[5] = 'Alex'\n\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', empty, empty, 'Alex']\nconsole.log(friends[4]); // undefined\n```\n\nNote that if the value of an array element has not been explicitly specified, as in the case of the `undefined` element, the `undefined` keyword is displayed in the array.\n\n```javascript\nconst friends = ['Alice', 'Bill', undefined, 'Carson'];\n\nconsole.log(friends); // ['Alice', 'Bill', undefined, 'Carson']\n```\n\nIn these examples, we can see that adding elements outside the array is possible, but it is not recommended. Instead, use the `push()` method to add an element to the end of the array, and use the `unshift()` method to add an element to the beginning of the array.\n",
    "es": "# Добавление элементов в массив language: es"
  },
  "video": {
    "ru": "https://youtu.be/isVMwlF6tdE",
    "en": "",
    "es": ""
  }
}