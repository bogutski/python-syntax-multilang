{
  "_id": "6696c2ca763f0712c198e7ee",
  "name": {
    "en": "Adding an object to an array",
    "ru": "Добавление объекта в массив"
  },
  "instruction": {
    "en": "Write a function `addObject` that takes an array `array` containing 3 primitive values.\n\nThe function must create an object with three properties `elm1`, `elm2`, `elm3` that are equal to the corresponding values from the received array and add this object to the end of the `array` array.\n\nThe function should return the modified array `array`.\n\nAn example of adding an object to an array:\n\n```javascript\nconst array = [1, 3];\nconst obj = { elm1: array[0],\nelm2: array[1],\nsum: array[0] + array[1] };\narray.push(obj);\nconsole.log(array); // [1, 3, { elm1: 1, elm2: 3, sum: 4 }]\n```\n\nExamples of running a function:\n\n```javascript\naddObject([1, 2, 3]); // [1, 2, 3, { elm1: 1, elm2: 2, elm3: 3 }]\naddObject([5, true, 'color']); // [5, true, 'color', { elm1: 5, elm2: true, elm3: 'color' }]\naddObject(['', 'a', 'bb']); // ['', 'a', 'bb', { elm1: '', elm2: 'a', elm3: 'bb' }]\n```",
    "ru": "Напишите функцию `addObject`, которая принимает массив `array`, содержащий 3 примитивных значения.\n\nФункция должна создать объект с тремя свойствами `elm1`, `elm2`, `elm3`, которые будут равны соответствующим значениям из полученного массива, и добавить этот объект в конец массива `array`.\n\nФункция должна вернуть измененный массив `array`.\n\nПример добавления объекта в массив:\n\n```javascript\nconst array = [1, 3];\nconst obj = { elm1: array[0],\n              elm2: array[1],\n              sum: array[0] + array[1] };\narray.push(obj);\nconsole.log(array); // [1, 3, { elm1: 1, elm2: 3, sum: 4 }]\n```\n\nПримеры запуска функции:\n\n```javascript\naddObject([1, 2, 3]);           // [1, 2, 3, { elm1: 1, elm2: 2, elm3: 3 }]\naddObject([5, true, 'color']);  // [5, true, 'color', { elm1: 5, elm2: true, elm3: 'color' }]\naddObject(['', 'a', 'bb']);     // ['', 'a', 'bb', { elm1: '', elm2: 'a', elm3: 'bb' }]\n```"
  },
  "initialSolution": "functio",
  "completedSolution": "function addObject(array) {\n  const obj = { elm1: array[0],\n                elm2: array[1],\n                elm3: array[2] };\n  array.push(obj);\n  return array;\n}",
  "openTest": "it('Created function addObject', () => {\n  expect(addObject).to.be.a('function');\n});\n\nit('Function addObject([1, 2, 3]) should return [1, 2, 3, { elm1: 1, elm2: 2, elm3: 3 }]', () => {\n  expect(addObject([1, 2, 3])).eql([1, 2, 3, { elm1: 1, elm2: 2, elm3: 3 }]);\n});\n\nit('Function addObject([8, 104, -65]) should return [8, 104, -65, { elm1: 8, elm2: 104, elm3: -65 }]', () => {\n  expect(addObject([8, 104, -65])).eql([8, 104, -65, { elm1: 8, elm2: 104, elm3: -65 }]);\n});\n\nit('Function addObject([true, 2.75, -3]) should return [true, 2.75, -3, { elm1: true, elm2: 2.75, elm3: -3 }]', () => {\n  expect(addObject([true, 2.75, -3])).eql([true, 2.75, -3, { elm1: true, elm2: 2.75, elm3: -3 }]);\n});\n\nit(\"Function addObject([false, '0', true]) should return [false, '0', true, { elm1: false, elm2: '0', elm3: true }]\", () => {\n  expect(addObject([false, '0', true])).eql([false, '0', true, { elm1: false, elm2: '0', elm3: true }]);\n});\n\nit(\"Function addObject(['abc', '', undefined]) should return ['abc', '', undefined, { elm1: 'abc', elm2: '', elm3: undefined }]\", () => {\n  expect(addObject(['abc', '', undefined])).eql(['abc', '', undefined, { elm1: 'abc', elm2: '', elm3: undefined }]);\n});\n\nit(\"Function addObject(['abcdefg', 'cc', 'zero']) should return ['abcdefg', 'cc', 'zero', { elm1: 'abcdefg', elm2: 'cc', elm3: 'zero' }]\", () => {\n  expect(addObject(['abcdefg', 'cc', 'zero'])).eql(['abcdefg', 'cc', 'zero', { elm1: 'abcdefg', elm2: 'cc', elm3: 'zero' }]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}