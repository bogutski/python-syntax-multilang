{
  "_id": "6696c2ca763f0712c198e7ea",
  "name": {
    "en": "Adding new elements to the beginning of an array",
    "ru": "Добавление новых элементов в начало массива"
  },
  "instruction": {
    "en": "Create a function `addNewElements`.\n\nThe function takes 3 parameters:\n* `array` - array of numbers\n* `elm1` and `elm2` - numbers\n\nAdd 3 new elements to the beginning of the `array` array: `elm1`, `elm2`, sum of `elm1` and `elm2`.\n\nThe function should return the array resulting from the addition of new elements.\n\nThe `array` array can be empty.\n\nUse the `unshift` method to solve the problem.\n\nExamples of running a function:\n\n```javascript\naddNewElements([1, 2, 3 ,4], -1, 1); // [-1, 1, 0, 1, 2, 3, 4]\naddNewElements([22, 53, 64], 3, 12); // [3, 12, 15, 22, 53, 64]\naddNewElements([10], 3, 4); // [3, 4, 7, 10]\naddNewElements([], 4, 6); // [4, 6, 10]\n```",
    "ru": "Создайте функцию `addNewElements`.\n\nФункция принимает 3 параметра:\n* `array` – массив чисел\n* `elm1` и `elm2` – числа\n\nДобавьте в начало массива `array` 3 новых элемента: `elm1`, `elm2`, сумму `elm1` и `elm2`.\n\nФункция должна вернуть массив, полученный в результате добавления новых элементов.\n\nМассив `array` может быть пустым.\n\nДля решения задачи используйте метод `unshift`.\n\nПримеры запуска функции:\n\n```javascript\naddNewElements([1, 2, 3 ,4], -1, 1); // [-1, 1, 0, 1, 2, 3, 4]\naddNewElements([22, 53, 64], 3, 12); // [3, 12, 15, 22, 53, 64]\naddNewElements([10], 3, 4);          // [3, 4, 7, 10]\naddNewElements([], 4, 6);            // [4, 6, 10]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function addNewElements(arr, elm1, elm2) {\n  arr.unshift(elm1, elm2, elm1 + elm2);\n  return arr;\n}",
  "openTest": "it('Created function addNewElements', () => {\n  expect(addNewElements).to.be.a('function');\n});\n\nit('addNewElements([11, 21, 31, 41], 4, 5) should return [4, 5, 9, 11, 21, 31, 41]', () => {\n  expect(addNewElements([11, 21, 31, 41], 4, 5)).eql([4, 5, 9, 11, 21, 31, 41]);\n});\n\nit('addNewElements([8, 104, -65], 2, 13) should return [2, 13, 15, 8, 104, -65]', () => {\n  expect(addNewElements([8, 104, -65], 2, 13)).eql([2, 13, 15, 8, 104, -65]);\n});\n\nit('addNewElements([10], -2, 4) should return [ -2, 4, 2, 10]', () => {\n  expect(addNewElements([10], -2, 4)).eql([-2, 4, 2, 10]);\n});\n\nit('addNewElements([], 3, 7) should return [3, 7, 10]', () => {\n  expect(addNewElements([], 3, 7)).eql([3, 7, 10]);\n});\n\nit('addNewElements([1, -2, 3, 4, -5, 26, 2, 0, 11, 77], 0, -15) should return [0, -15, -15, 1, -2, 3, 4, -5, 26, 2, 0, 11, 77]', () => {\n  expect(addNewElements([1, -2, 3, 4, -5, 26, 2, 0, 11, 77], 0, -15)).eql([0, -15, -15, 1, -2, 3, 4, -5, 26, 2, 0, 11, 77]);\n});\n\nit('addNewElements([1], 0, 0) should return [ 0, 0, 0, 1]', () => {\n  expect(addNewElements([1], 0, 0)).eql([0, 0, 0, 1]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}