{
  "_id": "6696c2ca763f0712c198e7f0",
  "name": {
    "en": "Write values from the object to an array.",
    "ru": "Записать значения из объекта в массив."
  },
  "instruction": {
    "en": "Have you ever thought that arrays and objects have some things in common?\n\nBoth arrays and objects are complex (referential) types, designed to store sets of data in an orderly fashion.\n\nEach is a collection of elements and provides a way to retrieve the values of those elements.\n\nTo get the value of an array element, you need to know its index, an integer value.\n\nTo get the value of an object element called a property, you need to know the name of that property (key) - a string value.\n\n\nWe need to write a function `objectToArray` that takes one parameter - object `obj`.\n\nThe object has 4 properties.\n\nThe names of the properties are: `property1`, `property2`, `property3`, `property4`.\n\nAll properties are present in the object and can take mixed values of primitive types: `number`, `string`, `boolean` or `undefined`.\n\nThe function must create an array `arr` and write into it the `values` of all the properties of the `obj` object.\n\nKnowing the names of the properties, you can get their values using the syntax `.`\n\n <object_variable>. <property_name> `\n\nUse the `push` method to fill the array\n\nThe return value is the `arr` array.\n\nExample:\n\n```javascript\nconst obj = {\nproperty1: 111,\nproperty2: 'job description',\n};\nconst arr = [];\narr.push(obj.property1);\narr.push(obj.property2);\nconsole.log(arr); // [111, \"job description\"]\n```\n\nExamples of running a function:\n\n```javascript\nobjectToArray({property1: 1, property2: 2, property3: 3, property4: 4}); // [1, 2, 3, 4]\nobjectToArray({property1: false, property2: true, property3: true, property4: false}); // [false, true, true, false]\nobjectToArray({property1: 'name', property2: 'description', property3: 'location', property4: 'salary'}); // ['name', 'description', 'location', 'salary']\nobjectToArray({property1: 111, property2: 'job description', property3: true, property4: undefined}); // [111, 'job description', true, undefined]\n```",
    "ru": "Не задумывались ли вы, что у массивов и объектов есть некоторые общие черты?\n\nИ массивы, и объекты - это сложные (ссылочные) типы, предназначенные для упорядоченного хранения наборов данных.\n\nКаждый из них представляет собой коллекцию элементов и обеспечивает способ получения значений этих элементов.\n\nДля получения значения элемента массива нужно знать его индекс - целочисленное значение.\n\nДля получения значения элемента объекта, называемого свойством, нужно знать название этого свойства (ключ) - строковое значение.\n\n\nНужно написать функцию `objectToArray`, которая принимает один параметр - объект `obj`.\n\nУ объекта есть 4 свойства.\n\nНазвания свойств: `property1`, `property2`, `property3`, `property4`.\n\nВсе свойства присутствуют в объекте и могут принимать смешанные значения примитивных типов: `number`, `string`, `boolean`или `undefined`.\n\nФункция должна создать массив `arr` и записать в него `значения` всех свойств объекта `obj`.\n\nЗная названия свойств, можно получить их значения, используя синтаксис `.`\n\n`<object_variable>.<property_name>`\n\nДля заполнения массива используйте метод `push`\n\nВозвращаемое значение - массив `arr`.\n\nПример:\n\n```javascript\nconst obj = {\n  property1: 111,\n  property2: 'job description',\n};\nconst arr = [];\narr.push(obj.property1);\narr.push(obj.property2);\nconsole.log(arr);  // [111, \"job description\"]\n```\n\nПримеры запуска функции:\n\n```javascript\nobjectToArray({property1: 1, property2: 2, property3: 3, property4: 4});                                  // [1, 2, 3, 4]\nobjectToArray({property1: false, property2: true, property3: true, property4: false});                    // [false, true, true, false]\nobjectToArray({property1: 'name', property2: 'description', property3: 'location', property4: 'salary'}); // ['name', 'description', 'location', 'salary']\nobjectToArray({property1: 111, property2: 'job description', property3: true, property4: undefined});     // [111, 'job description', true, undefined]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function objectToArray(obj) {\n  const arr = [];\n  arr.push(obj.property1);\n  arr.push(obj.property2);\n  arr.push(obj.property3);\n  arr.push(obj.property4);\n  return arr;\n}",
  "openTest": "it('Created function objectToArray', () => {\n  expect(objectToArray).to.be.a('function');\n});\n\nit(`objectToArray({property1: -342, property2: 'description', property3: 20, property4: true }) should return [-342, 'description', 20, true]`, () => {\n  expect(objectToArray({property1: -342, property2: 'description', property3: 20, property4: true })).to.eql([-342, 'description', 20, true]);\n});\nit(`objectToArray({property1: -1, property2: 0, property3: 30, property4: -14}) should return [-1, 0, 30, -14]`, () => {\n  expect(objectToArray({property1: -1, property2: 0, property3: 30, property4: -14})).to.eql([-1, 0, 30, -14]);\n});\n\nit(`objectToArray({property1: 'name', property2: 'occupation', property3: 'location', property4: 'salary'}) should return ['name', 'occupation', 'location', 'salary']`, () => {\n  expect(objectToArray({property1: 'name', property2: 'occupation', property3: 'location', property4: 'salary'})).to.eql(['name', 'occupation', 'location', 'salary']);\n});\n\nit(`objectToArray({property1: true, property2: 'false', property3: undefined, property4: false}) should return [true, 'false', undefined, false]`, () => {\n  expect(objectToArray({property1: true, property2: 'false', property3: undefined, property4: false})).to.eql([true, 'false', undefined, false]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}