{
  "_id": "6696c2ca763f0712c198e7ec",
  "name": {
    "en": "Adding an array as a new element in another array",
    "ru": "Добавление массива в качестве нового элемента в другой массив"
  },
  "instruction": {
    "en": "Create the function `addArray` that should accept two arrays `arr1` and `arr2` containing mixed types of values.\n\nAdd the array `arr2` as the last element in the array `arr1`.\n\nThe function should return the modified array `arr1`.\n\nExample of adding one array as an element to another array:\n\n```javascript\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\n\n// add array2 as a new element at the end of array1\narray1.push(array2);\n\nconsole.log(array1);    // [1, 2, 3, [4, 5, 6]]\nconsole.log(array1[3]); // [4, 5, 6]\n```\n\nExamples of function execution:\n\n```javascript\naddArray([1, 2, 3], [4, 5, 6]);         // [1, 2, 3, [4, 5, 6]]\naddArray([10], [false, true, 0, 'ed']); // [10, [false, true, 0, 'ed']]\naddArray([], [false, 5, -6, 'd']);      // [[false, 5, -6, 'd']]\naddArray([1, 2, 3], []);                // [1, 2, 3, []]\naddArray([], []);                       // [[]]\n```",
    "ru": "Создайте функцию `addArray`, которая должна принимать два массива `arr1` и `arr2`, содержащие значения смешанных типов.\n\nДобавьте массив `arr2` как последний элемент в массив `arr1`.\n\nФункция должна вернуть измененный массив `arr1`.\n\nПример добавления одного массива, как элемента, в другой массив:\n\n```javascript\nconst array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\n\n//добавим массив array2 как новый элемент в конец массива array1\narray1.push(array2);\n\nconsole.log(array1);    // [1, 2, 3, [4, 5, 6]]\nconsole.log(array1[3]); // [4, 5, 6]\n```\n\nПримеры запуска функции:\n\n```javascript\naddArray([1, 2, 3], [4, 5, 6]);         // [1, 2, 3, [4, 5, 6]]\naddArray([10], [false, true, 0, 'ed']); // [10, [false, true, 0, 'ed']]\naddArray([], [false, 5, -6, 'd']);      // [[false, 5, -6, 'd']]\naddArray([1, 2, 3], []);                // [1, 2, 3, []]\naddArray([], []);                       // [[]]\n```"
  },
  "initialSolution": "func",
  "completedSolution": "function addArray(arr1, arr2) {\n  arr1.push(arr2);\n  return arr1;\n}",
  "openTest": "it('Created function addArray', () => {\n  expect(addArray).to.be.a('function');\n});\n\nit('addArray([1, 2, 3, 4, 5], [6, 7]) should return [1, 2, 3, 4, 5, [6, 7]]', () => {\n  expect(addArray([1, 2, 3, 4, 5], [6, 7])).to.deep.equal([1, 2, 3, 4, 5, [6, 7]]);\n});\n\nit(`addArray([11, -2, \"rust\", false, 5.45], [\"e\", -33, true, 0]) should return [11, -2, \"rust\", false, 5.45, [\"e\", -33, true, 0]]`, () => {\n  expect(addArray([11, -2, 'rust', false, 5.45], ['e', -33, true, 0])).to.deep.equal([11, -2, 'rust', false, 5.45, ['e', -33, true, 0]]);\n});\n\nit('addArray([false, 0.25], []) should return [false, 0.25, []]', () => {\n  expect(addArray([false, 0.25], [])).to.deep.equal([false, 0.25, []]);\n});\n\nit('addArray([], []) should return [[]]', () => {\n  expect(addArray([], [])).to.deep.equal([[]]);\n});\n\nit(`addArray([], [\"good\", \"time\"]) should return [[\"good\", \"time\"]]`, () => {\n  expect(addArray([], ['good', 'time'])).to.deep.equal([['good', 'time']]);\n});\n\nit(`addArray([-21, \"test\"], [true]) should return [-21, \"test\", [true]]`, () => {\n  expect(addArray([-21, 'test'], [true])).to.deep.equal([-21, 'test', [true]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}