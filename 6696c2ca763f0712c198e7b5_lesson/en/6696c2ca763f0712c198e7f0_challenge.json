{
  "name": "Write values from the object to an array.",
  "instruction": "Have you ever thought that arrays and objects have some things in common?\n\nBoth arrays and objects are complex (referential) types, designed to store sets of data in an orderly fashion.\n\nEach is a collection of elements and provides a way to retrieve the values of those elements.\n\nTo get the value of an array element, you need to know its index, an integer value.\n\nTo get the value of an object element called a property, you need to know the name of that property (key) - a string value.\n\n\nWe need to write a function `objectToArray` that takes one parameter - object `obj`.\n\nThe object has 4 properties.\n\nThe names of the properties are: `property1`, `property2`, `property3`, `property4`.\n\nAll properties are present in the object and can take mixed values of primitive types: `number`, `string`, `boolean` or `undefined`.\n\nThe function must create an array `arr` and write into it the `values` of all the properties of the `obj` object.\n\nKnowing the names of the properties, you can get their values using the syntax `.`\n\n <object_variable>. <property_name> `\n\nUse the `push` method to fill the array\n\nThe return value is the `arr` array.\n\nExample:\n\n```javascript\nconst obj = {\nproperty1: 111,\nproperty2: 'job description',\n};\nconst arr = [];\narr.push(obj.property1);\narr.push(obj.property2);\nconsole.log(arr); // [111, \"job description\"]\n```\n\nExamples of running a function:\n\n```javascript\nobjectToArray({property1: 1, property2: 2, property3: 3, property4: 4}); // [1, 2, 3, 4]\nobjectToArray({property1: false, property2: true, property3: true, property4: false}); // [false, true, true, false]\nobjectToArray({property1: 'name', property2: 'description', property3: 'location', property4: 'salary'}); // ['name', 'description', 'location', 'salary']\nobjectToArray({property1: 111, property2: 'job description', property3: true, property4: undefined}); // [111, 'job description', true, undefined]\n```"
}