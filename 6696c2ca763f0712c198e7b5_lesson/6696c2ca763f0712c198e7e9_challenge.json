{
  "_id": "6696c2ca763f0712c198e7e9",
  "name": {
    "en": "Adding an element with a zero value to the beginning of the array.",
    "ru": "Добавление элемента с нулевым значением в начало массива."
  },
  "instruction": {
    "en": "Create a function `addFirstZero`.\n\nFunction parameter:\n* `array` - array of numbers\n\nThe function takes an array of positive integers. The numbers in the array are ordered in ascending order. The passed array cannot be empty.\nWe must check if the first element of the array is zero. If it is not, you must add a value of zero to the beginning of the array.\n\nThe function must return the array obtained by adding a new zero value.\n\nIf the element with value zero already exists in the array, then the function should return the message `\"Zero value already exists\"`.\n\nUse the `unshift` method to solve the problem.\n\nThe index of the first element in the array is always zero.\n\nExamples of running a function:\n\n```javascript\naddFirstZero([1, 2, 3 ,4, 5]); // [0, 1, 2, 3, 4, 5]\naddFirstZero([0, 2, 55, 103, 234]); // \"Zero value already exists\"\naddFirstZero([5]); // [0, 5]\naddFirstZero([0]); // \"Zero value already exists\"\n```",
    "ru": "Создайте функцию `addFirstZero`.\n\nПараметр функции:\n* `array` – массив чисел\n\nФункция принимает массив целых положительных чисел. Числа в массиве упорядочены по возрастанию. Переданный массив не может быть пустым.\nНужно проверить, является ли первый элемент массива нулем. Если нет, то нужно добавить значение нуль в начало массива.\n\nФункция должна вернуть массив, полученный в результате добавления нового нулевого значения.\n\nЕсли элемент со значением нуль уже есть в массиве, тогда функция должна вернуть сообщение `\"Zero value already exists\"`.\n\nДля решения задачи используйте метод `unshift`.\n\nИндекс первого элемента в массиве всегда равен нулю.\n\nПримеры запуска функции:\n\n```javascript\naddFirstZero([1, 2, 3 ,4, 5]);      // [0, 1, 2, 3, 4, 5]\naddFirstZero([0, 2, 55, 103, 234]); // \"Zero value already exists\"\naddFirstZero([5]);                  // [0, 5]\naddFirstZero([0]);                  // \"Zero value already exists\"\n```"
  },
  "initialSolution": "func",
  "completedSolution": "function addFirstZero(arr) {\n  if ( arr[0] === 0 ) {\n    return \"Zero value already exists\";\n  }\n  arr.unshift(0);\n  return arr;\n}",
  "openTest": "it('Created function addFirstZero', () => {\n  expect(addFirstZero).to.be.a('function');\n});\n\nit('addFirstZero([11, 22, 33 ,44]) should return [0, 11, 22, 33 ,44]', () => {\n  expect(addFirstZero([11, 22, 33 ,44])).eql([0, 11, 22, 33 ,44]);\n});\n\nit('addFirstZero([1, 4, 6 ,10, 12, 25, 26]) should return [0, 1, 4, 6 ,10, 12, 25, 26]', () => {\n  expect(addFirstZero([1, 4, 6 ,10, 12, 25, 26])).eql([0, 1, 4, 6 ,10, 12, 25, 26]);\n});\n\nit('addFirstZero([0, 1, 2, 3, 4]) should return \"Zero value already exists\"', () => {\n  expect(addFirstZero([0, 1, 2, 3, 4])).eql(\"Zero value already exists\");\n});\n\nit('addFirstZero([400) should return [0, 400]', () => {\n  expect(addFirstZero([400])).eql([0, 400]);\n});\n\nit('addFirstZero([0]) should return \"Zero value already exists\"', () => {\n  expect(addFirstZero([0])).eql(\"Zero value already exists\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}