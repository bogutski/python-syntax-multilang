{
  "_id": "6696c2ca763f0712c198e7eb",
  "name": {
    "en": "Adding elements to the beginning and the end of the array.",
    "ru": "Добавление элементов в начало и в конец массива."
  },
  "instruction": {
    "en": "Create a function `addLengthAndProduct` that takes a single parameter - an array of numbers `numbers`.\n\nThe function must add 2 new elements to the resulting array:\n\n* to the beginning of the array a new element equal to the length of the array `numbers`;\n\n* to the end of the array a new element equal to the product of the first and the last elements of the `numbers` array;\n\nThe function should return the modified array.\n\nIf the `numbers` array is empty or contains less than two elements, the function should return an error message `Invalid input`.\n\nSolution algorithm:\n\nCheck what the length of the `numbers` array is. If the length of the array is less than 2, return the message `Invalid input`.\n\nBefore adding new elements to the array, create variables `length` and `product`.\n\nIn the variable `length` write the value of the length of the array.\n\nIn the variable `product` write the product of the first and last elements of the array.\n\nAdd the created variables to the array using the methods `unshift` and `push`.\n\nIf you first add a new element to the array and then calculate its length or the product of the first and last elements, the result of the function will be incorrect.\n\nExamples of running the function:\n\n```javascript\nAddLengthAndProduct([2, 3, 4, 5]); // [4, 2, 3, 4, 5, 10]\nAddLengthAndProduct([3.79, -21.73, -10.91]); // [3, 3.79, -21.73, -10.91, -41.3489]\nAddLengthAndProduct([]); // `Invalid input`\nAddLengthAndProduct([1.45]); // `Invalid input`\n```",
    "ru": "Создайте функцию `addLengthAndProduct`, которая принимает один параметр – массив чисел `numbers`.\n\nФункция должна добавлять в полученный массив 2 новых элемента:\n\n* в начало массива новый элемент, равный длине массива `numbers`;\n\n* в конец массива новый элемент, равный произведению первого и последнего элементов массива `numbers`;\n\nФункция должна возвращать измененный массив.\n\nЕсли массив `numbers` пустой или содержит меньше двух элементов, то функция должна возвращать сообщение об ошибке `Invalid input`.\n\nАлгоритм решения:\n\nПроверьте чему равна длина массива `numbers`. Если длина массива меньше 2, верните сообщение `Invalid input`.\n\nПрежде, чем добавлять новые элементы в массив, создайте переменные `length` и `product`.\n\nВ переменную `length` запишите значение длины массива.\n\nВ переменную `product` - произведения первого и последнего элементов массива.\n\nДобавьте созданные переменные в массив с помощью методов `unshift` и `push`.\n\nЕсли сначала добавить в массив новый элемент, а потом вычислить его длину или произведение первого и последнего элементов, то результат работы функции будет неверным.\n\nПримеры запуска функции:\n\n```javascript\nAddLengthAndProduct([2, 3, 4, 5]);           // [4, 2, 3, 4, 5, 10]\nAddLengthAndProduct([3.79, -21.73, -10.91]); // [3, 3.79, -21.73, -10.91, -41.3489]\nAddLengthAndProduct([]);                     // `Invalid input`\nAddLengthAndProduct([1.45]);                 // `Invalid input`\n```"
  },
  "initialSolution": "function addLengthAndProduct",
  "completedSolution": "function addLengthAndProduct(numbers) {\n  if (numbers.length < 2) {\n    return 'Invalid input';\n  }\n  const length = numbers.length;\n  numbers.push(numbers[0] * numbers[numbers.length - 1]);\n  numbers.unshift(length);\n  return numbers;\n}",
  "openTest": "it('Created function addLengthAndProduct', () => {\n  expect(addLengthAndProduct).to.be.a('function');\n});\n\nit(`addLengthAndProduct([21.27,-1.56,10.81,27.06,-6.56]) should return [5, 21.27, -1.56, 10.81, 27.06, -6.56, -139.53119999999998]`, () => {\n  expect(addLengthAndProduct([21.27,-1.56,10.81,27.06,-6.56])).eql([5, 21.27, -1.56, 10.81, 27.06, -6.56, -139.53119999999998]);\n});\n\nit(`addLengthAndProduct([1.45]) should return 'Invalid input'`, () => {\n  expect(addLengthAndProduct([1.45])).to.be.equal('Invalid input');\n});\n\nit(`addLengthAndProduct([]) should return 'Invalid input'`, () => {\n  expect(addLengthAndProduct([])).to.be.equal('Invalid input');\n});\n\nit(`addLengthAndProduct([2, 3, 4, 5]) should return [4, 2, 3, 4, 5, 10]`, () => {\n  expect(addLengthAndProduct([2, 3, 4, 5])).eql([4, 2, 3, 4, 5, 10]);\n});\n\nit(`addLengthAndProduct([3.79, -21.73, -10.91]) should return [3, 3.79, -21.73, -10.91, -41.3489]`, () => {\n  expect(addLengthAndProduct([3.79, -21.73, -10.91])).eql([3, 3.79, -21.73, -10.91, -41.3489]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}