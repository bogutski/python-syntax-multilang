{
  "_id": "6696c2ca763f0712c198e7ef",
  "name": {
    "en": "Creating and adding a new object to an object array",
    "ru": "Создание и добавление нового объекта в массив объектов"
  },
  "instruction": {
    "en": "Fix the errors in the code of the `addObjectCombined` function, which takes an array of three objects `arr`.\n\n* Each element of the `arr` array has two properties: `subjectName` and `averageScore`.\n* The value of the `subjectName` property is a string, and the value of the `averageScore` property is a number.\n* Both properties are mandatory in each element of the `arr` array and have non-empty values.\n\nExample array:\n```javascript\nconst arr = [\n  { subjectName: 'physics', averageScore: 55 },\n  { subjectName: 'algebra', averageScore: 71 },\n  { subjectName: 'geometry', averageScore: 88 }\n];\n```\n\nThe function creates a new object `newObj`, adds it to the beginning of the `arr` array, and returns the modified `arr` array.\n\nThe new object `newObj` contains three properties - one property for each element of the array.\nThe name of each property in `newObj` is the value of the `subjectName` property of the corresponding element in the array, and the value is the value of the `averageScore` property of the same element.\n\nExample of creating a new object `newObj` based on the information contained in the `arr` array:\n\n```javascript\nconst newObj = {\n  physics: 55,\n  algebra: 71,\n  geometry: 88\n};\n\nExample of a new array with the added `newObj` object:\n\n```javascript\nconst arr = [\n  { physics: 55, algebra: 71, geometry: 88 },\n  { subjectName: 'physics', averageScore: 55 },\n  { subjectName: 'algebra', averageScore: 71 },\n  { subjectName: 'geometry', averageScore: 88 }\n];\n```\nExample of adding a new property to the `newObj` object based on the information contained in the first element of the `arr1` array:\n\n```javascript\nconst array = [ { subjectName: 'physics', averageScore: 90 },\n               { subjectName: 'algebra', averageScore: 85 },\n               { subjectName: 'geometry', averageScore: 100 } ];\nconst newObj = {};\nnewObj[array[0].subjectName] = array[0].averageScore;\nconsole.log(newObj); // newObj = { physics: 90 }\n```\n\n1) A new key property is created in the `newObj` object with a name that is the value of the `subjectName` key of the first object in the `array` array.\n\n2) The value of this property is equal to the value of the `averageScore` property of the first element of the `array` array.\n\n3) The `[]` syntax allows using a variable as an object key.\n\nExample of running the function:\n\n```javascript\nconst array = [\n  { subjectName: 'history', averageScore: 75 },\n  { subjectName: 'geography', averageScore: 82 },\n  { subjectName: 'economics', averageScore: 56 }\n];\n\naddObjectCombined(array); // [\n  { history: 75, geography: 82, economics: 56 },\n  { subjectName: 'history', averageScore: 75 },\n  { subjectName: 'geography', averageScore: 82 },\n  { subjectName: 'economics', averageScore: 56 }\n];\n```\nIn the `addObjectCombined` function code, there are 4 errors. Find and fix them.\n\nCarefully study how the function works, run it in the sandbox with the example array of objects provided, and compare the results.",
    "ru": "Исправьте ошибки в коде функции `addObjectCombined`, которая принимает массив из трех объектов `arr`.\n\n* Каждый элемент массива `arr` имеет два свойства: `subjectName` и `averageScore`.\n* Значение свойства `subjectName` - это строка, а значение свойства `averageScore` - число.\n* Оба свойства обязательно присутствуют в каждом элементе массива `arr` и имеют непустые значения.\n\nПример массива:\n```javascript\nconst arr = [\n  { subjectName: 'physics', averageScore: 55 },\n  { subjectName: 'algebra', averageScore: 71 },\n  { subjectName: 'geometry', averageScore: 88 }\n];\n```\n\nФункция создает новый объект `newObj`, добавляет его в начало массива `arr` и возвращает модифицированный массив `arr`.\n\nНовый объект `newObj`, содержит три свойства - по одному свойству на каждый элемент массива.\nИменем каждого свойства `newObj` является значение свойства `subjectName` соответствующего элемента массива, а значением - значения свойства `averageScore` этого же элемента.\n\nПример создания нового объекта `newObj` на основе информации, содержащейся в массиве `arr`:\n\n```javascript\nconst newObj = {\n  physics: 55,\n  algebra: 71,\n  geometry: 88\n};\n\nПример нового массива с добавленным объектом `newObj`:\n\n```javascript\nconst arr = [\n  { physics: 55, algebra: 71, geometry: 88 },\n  { subjectName: 'physics', averageScore: 55 },\n  { subjectName: 'algebra', averageScore: 71 },\n  { subjectName: 'geometry', averageScore: 88 }\n];\n```\nПример добавления нового свойства в объект `newObj` на основе информации, содержащейся в первом элементе массива `arr1`:\n\n```javascript\nconst array = [ { subjectName: 'physics', averageScore: 90 },\n               { subjectName: 'algebra', averageScore: 85 },\n               { subjectName: 'geometry', averageScore: 100 } ];\nconst newObj = {};\nnewObj[array[0].subjectName] = array[0].averageScore;\nconsole.log(newObj); // newObj = { physics: 90 }\n```\n\n1) Создается новое свойство-ключ в объекте `newObj` с именем, которое является значением ключа `subjectName` первого объекта массива `array`.\n\n2) Значение этого свойства равно значению свойства `averageScore` первого элемента массива `array`.\n\n3) Синтаксис `[]` позволяет использовать переменную в качестве ключа объекта.\n\nПример запуска функции:\n\n```javascript\nconst array = [\n  { subjectName: 'history', averageScore: 75 },\n  { subjectName: 'geography', averageScore: 82 },\n  { subjectName: 'economics', averageScore: 56 }\n];\n\naddObjectCombined(array); // [\n  { history: 75, geography: 82, economics: 56 },\n  { subjectName: 'history', averageScore: 75 },\n  { subjectName: 'geography', averageScore: 82 },\n  { subjectName: 'economics', averageScore: 56 }\n];\n```\nВ коде функции `addObjectCombined` есть 4 ошибки. Найдите и исправьте их.\n\nВнимательно изучите, как работает функция, запустите ее в песочнице с приведенным в примере массивом объектов и сравните результаты."
  },
  "initialSolution": "functon addObjectCombined(arr1) {\n  const newObj = {};\n  newObj[arr[0].subjectName] = arr[0].averageScore;\n  newObj[arr[1].subjectName] = arr[1].averageScore;\n  newObj[arr[2].subjectName] = arr[2].averageScore;\n  arr.shift(newObj);\n  return arr1;\n}",
  "completedSolution": "function addObjectCombined(arr) {\n  const newObj = {};\n  newObj[arr[0].subjectName] = arr[0].averageScore;\n  newObj[arr[1].subjectName] = arr[1].averageScore;\n  newObj[arr[2].subjectName] = arr[2].averageScore;\n  arr.unshift(newObj);\n  return arr;\n}",
  "openTest": "it('Created function addObjectCombined', () => {\n  expect(addObjectCombined).to.be.a('function');\n});\n\nit('addObjectCombined([ { subjectName: \"physics\", averageScore: 67}, { subjectName: \"algebra\", averageScore: 81 }, { subjectName: \"geometry\", averageScore: 98 } ]) should return ' +\n  '[ { physics: 67, algebra: 81, geometry: 98 }, { subjectName: \"physics\", averageScore: 67}, { subjectName: \"algebra\", averageScore: 81 }, { subjectName: \"geometry\", averageScore: 98 } ]', () => {\n  expect(addObjectCombined([ { subjectName: \"physics\", averageScore: 67},\n                                 { subjectName: \"algebra\", averageScore: 81 },\n                                 { subjectName: \"geometry\", averageScore: 98 } ])).to.deep.equal(\n                                   [ { physics: 67, algebra: 81, geometry: 98 },\n                                     { subjectName: \"physics\", averageScore: 67},\n                                     { subjectName: \"algebra\", averageScore: 81 },\n                                     { subjectName: \"geometry\", averageScore: 98 } ]);\n});\n\nit('addObjectCombined([ { subjectName: \"history\", averageScore: 55}, { subjectName: \"geography\", averageScore: 71 }, { subjectName: \"geometry\", averageScore: 88 } ]) should return ' +\n  '[ { history: 55, geography: 71, geometry: 88 }, { subjectName: \"history\", averageScore: 55}, { subjectName: \"geography\", averageScore: 71 }, { subjectName: \"geometry\", averageScore: 88 } ]', () => {\n  expect(addObjectCombined([ { subjectName: \"history\", averageScore: 55},\n                                  { subjectName: \"geography\", averageScore: 71 },\n                                  { subjectName: \"geometry\", averageScore: 88 } ])).to.deep.equal(\n                                    [ { history: 55, geography: 71, geometry: 88 },\n                                      { subjectName: \"history\", averageScore: 55},\n                                      { subjectName: \"geography\", averageScore: 71 },\n                                      { subjectName: \"geometry\", averageScore: 88 } ]);\n});\n\n\nit('addObjectCombined([ { subjectName: \"physics\", averageScore: 92}, { subjectName: \"algebra\", averageScore: 86 }, { subjectName: \"geometry\", averageScore: 60 } ]) should return ' +\n  '[ { physics: 92, algebra: 86, geometry: 60 }, { subjectName: \"physics\", averageScore: 92}, { subjectName: \"algebra\", averageScore: 86 }, { subjectName: \"geometry\", averageScore: 60 } ]', () => {\n  expect(addObjectCombined([ { subjectName: \"physics\", averageScore: 92},\n                                  { subjectName: \"algebra\", averageScore: 86 },\n                                  { subjectName: \"geometry\", averageScore: 60 } ])).to.deep.equal(\n                                    [ { physics: 92, algebra: 86, geometry: 60 },\n                                      { subjectName: \"physics\", averageScore: 92},\n                                      { subjectName: \"algebra\", averageScore: 86 },\n                                      { subjectName: \"geometry\", averageScore: 60 } ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}