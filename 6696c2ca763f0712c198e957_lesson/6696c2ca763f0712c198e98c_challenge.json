{
  "_id": "6696c2ca763f0712c198e98c",
  "name": {
    "en": "Correct the errors in the code",
    "ru": "Исправьте ошибки в коде"
  },
  "instruction": {
    "en": "The function `stopAt10Element` takes 3 parameters:\n\n* An empty array `arr`\n\n* Initial value `num1` - this is the number from which the array filling starts.\n\n* Final value `num2` - this is the number with which the array filling ends.\n\nThe initial value will always be less than the final value.\n\nThe array is filled with numbers from the initial value to the final value inclusive.\n\nArray filling is interrupted at the 10th element.\n\nThe function returns the filled array.\n\nFix the errors in the code to make it comply with the task conditions.",
    "ru": "Функция `stopAt10Element`, принимает 3 параметра:\n\n* Пустой массив `arr`\n\n* Начальное значение `num1` - это число, с которого начинается заполнение массива.\n\n* Конечное значение `num2` - это число, которым заканчивается заполнение массива.\n\nНачальное значение всегда будет меньше конечного значения.\n\nМассив заполняется числами от начального значения до конечного значения включительно.\n\nЗаполнение массива прерывается на 10 элементе.\n\nФункция возвращает заполненный массив.\n\nИсправьте ошибки в коде, чтобы он соответствовал условиям задачи."
  },
  "initialSolution": "function StopAt10element(arr, num1, num2) {\n  for (let i = num2; i <= num1; i++) {\n    arr.push(i)\n    if (i = arr[10]) break[9];\n  }\n  return arr[i]\n}",
  "completedSolution": "function stopAt10Element(arr, num1, num2) {\n  for (let i = num1; i <= num2; i++) {\n    arr.push(i)\n    if (i === arr[9]) break;\n  }\n  return arr\n}",
  "openTest": "it('Created function stopAt10Element', () => {\n  expect(stopAt10Element).to.be.a('function');\n});\n\nit('stopAt10Element([], 1, 10) should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', () => {\n  expect(stopAt10Element([], 1, 10)).to.eql([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n});\n\nit('stopAt10Element([], -5, 20) should return [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]', () => {\n  expect(stopAt10Element([], -5, 20)).to.eql([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]);\n});\n\nit('stopAt10Element([], 10, 20) should return [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]', () => {\n  expect(stopAt10Element([], 10, 20)).to.eql([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\n});\n\nit('stopAt10Element([], -10, 10) should return [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]', () => {\n  expect(stopAt10Element([], -10, 10)).to.eql([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]);\n});\n\nit('stopAt10Element([], -10, -5) should return [-10, -9, -8, -7, -6, -5]', () => {\n  expect(stopAt10Element([], -10, -5)).to.eql([-10, -9, -8, -7, -6, -5]);\n});\n\nit('stopAt10Element([], 0, 7) should return [0, 1, 2, 3, 4, 5, 6, 7]', () => {\n  expect(stopAt10Element([], 0, 7)).to.eql([0, 1, 2, 3, 4, 5, 6, 7]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}