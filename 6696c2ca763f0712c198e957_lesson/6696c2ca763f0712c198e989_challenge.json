{
  "_id": "6696c2ca763f0712c198e989",
  "name": {
    "en": "Interrupt filling of the array at number 20",
    "ru": "Прервать заполненеие массива на цифре 20"
  },
  "instruction": {
    "en": "Write a function `stopAtTwenty` that takes 3 parameters: an empty array, a start value and an end value.\n\nThe array will be filled with numbers from the initial value to the final value inclusive.\n\nThe start value is the number from which the array will start to be filled.\n\nThe final value is the number that ends the array.\n\nThe starting value will always be smaller than the ending value.\n\nIf number 20 appears in the array, the array should stop filling.\n\nThe function should return the filled array.\n\nAn example of running the function:\n```javascript\nstopAtTwenty([], 1, 30); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nstopAtTwenty([], -3, 25); // [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nstopAtTwenty([], 5, 19); // [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nstopAtTwenty([], 20, 30); // [20]\n```",
    "ru": "Напишите функцию `stopAtTwenty`, которая принимает 3 параметра: пустой массив, начальное значение и конечное значение.\n\nМассив будет заполняться числами от начального значения до конечного значения включительно.\n\nНачальное значение - это число, с которого начинается заполнение массива.\n\nКонечное значение - это число, которым заканчивается заполнение массива.\n\nНачальное значение всегда будет меньше конечного значения.\n\nЕсли в массиве появляется число 20, то заполнение массива должно прекратиться.\n\nФункция должна вернуть заполненный массив.\n\nПример запуска функции:\n```javascript\nstopAtTwenty([], 1, 30); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nstopAtTwenty([], -3, 25); // [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nstopAtTwenty([], 5, 19); // [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nstopAtTwenty([], 20, 30); // [20]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function stopAtTwenty(arr, n, n1) {\n  for (let i = n; i <= n1; i++) {\n    arr.push(i);\n    if (i === 20) break;\n  }\n  return arr\n}",
  "openTest": "it('Created function stopAtTwenty', () => {\n  expect(stopAtTwenty).to.be.a('function');\n});\n\nit('stopAtTwenty([], 1, 30) should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]', () => {\n  expect(stopAtTwenty([], 1, 30)).to.eql([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n});\n\nit('stopAtTwenty([], -3, 25) should return [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]', () => {\n  expect(stopAtTwenty([], -3, 25)).to.eql([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n});\n\nit('stopAtTwenty([], 5, 19) should return [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]', () => {\n  expect(stopAtTwenty([], 5, 19)).to.eql([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\n});\n\nit('stopAtTwenty([], 20, 30) should return [20]', () => {\n  expect(stopAtTwenty([], 20, 30)).to.eql([20]);\n});\n\nit('stopAtTwenty([], -10, 13) should return [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]', () => {\n  expect(stopAtTwenty([], -10, 13)).to.eql([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\n});\n\nit('stopAtTwenty([], 0, 21) should return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]', () => {\n  expect(stopAtTwenty([], 0, 21)).to.eql([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}