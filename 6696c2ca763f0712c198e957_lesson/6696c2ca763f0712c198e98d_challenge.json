{
  "_id": "6696c2ca763f0712c198e98d",
  "name": {
    "en": "Counting strings with length equal to 3 is interrupted when encountering a given string",
    "ru": "Подсчёт строк, с длиной равной 3-м, прерывается при встрече с заданной строкой"
  },
  "instruction": {
    "en": "Write a function `noMoreThan3Char` that takes two parameters, an array of strings and a string.\n\nThe function should return the number of strings in the array whose length is 3.\n\nIf a given string is found in the array, the string counting should stop.\n\nHint: To count strings, you need to create a counter, in which the number of strings found will be written.\n\nAn example of function start:\n```javascript\nnoMoreThan3Char(['dog', 'map', 'CAP', '-12'], 'CAP') // 2\nnoMoreThan3Char(['tag', 'CAT', 'pet', 'clouds', '-12', '120', 'go', 'K'], 'go') // 5\nnoMoreThan3Char(['12', '12345', 'umbrella', '12', '123888', '-123'], 'umbrella') // 0\nnoMoreThan3Char(['VAN', 'map', '1234', '19', 'true', 'ZIP', 'web'], 'one') // 4\n```",
    "ru": "Напишите функцию `noMoreThan3Char`, которая принимает два параметра - массив строк и строку.\n\nФункция должна вернуть количество строк в массиве, длина которых равна 3-м.\n\nЕсли в массиве встречается заданная строка, то подсчёт строк должен прерваться.\n\nПодсказка: для подсчёта строк необходимо создать счётчик, в который будет записываться количество найденых строк.\n\nПример запуска функции:\n```javascript\nnoMoreThan3Char(['dog', 'map', 'CAP', '-12'], 'CAP') // 2\nnoMoreThan3Char(['tag', 'CAT', 'pet', 'clouds', '-12', '120', 'go', 'K'], 'go') // 5\nnoMoreThan3Char(['12', '12345', 'umbrella', '12', '123888', '-123'], 'umbrella') // 0\nnoMoreThan3Char(['VAN', 'map', '1234', '19', 'true', 'ZIP', 'web'], 'one') // 4\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function noMoreThan3Char(arr, str) {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === str) break\n    if (arr[i].length === 3) {\n      count++\n    }\n  }\n  return count\n}",
  "openTest": "it('Created function noMoreThan3Char', () => {\n  expect(noMoreThan3Char).to.be.a('function');\n});\n\nit(\"noMoreThan3Char(['dog', 'map', 'CAP', '-12'], 'CAP') should return 2\", () => {\n  expect(noMoreThan3Char(['dog', 'map', 'CAP', '-12'], 'CAP')).to.be.equal(2);\n});\n\nit(\"noMoreThan3Char(['tag', 'CAT', 'pet', 'clouds', '-12', '120', 'go', 'K'], 'go') should return 5\", () => {\n  expect(noMoreThan3Char(['tag', 'CAT', 'pet', 'clouds', '-12', '120', 'go', 'K'], 'go')).to.be.equal(5);\n});\n\nit(\"noMoreThan3Char(['12', '12345', 'umbrella', '12', '123888', '-123'], 'umbrella') should return 0\", () => {\n  expect(noMoreThan3Char(['12', '12345', 'umbrella', '12', '123888', '-123'], 'umbrella')).to.be.equal(0);\n});\n\nit(\"noMoreThan3Char(['VAN', 'map', 'CAT', '1234', '19', 'true', 'ZIP', 'football', '123', 'web'], 'football') should return 4\", () => {\n  expect(noMoreThan3Char(['VAN', 'map', 'CAT', '1234', '19', 'true', 'ZIP', 'football', '123', 'web'], 'football')).to.be.equal(4);\n});\n\nit(\"noMoreThan3Char(['dog', 'cat', 'map', 'cap', '-12', '120', 'up', 'usb', '123'], 'usb') should return 6\", () => {\n  expect(noMoreThan3Char(['dog', 'cat', 'map', 'cap', '-12', '120', 'up', 'usb', '123'], 'usb')).to.be.equal(6);\n});\n\nit(\"noMoreThan3Char(['dog', 'cat', 'map', 'cap', '-12', '120', 'up', 'usb', '123'], '1234') should return 8\", () => {\n  expect(noMoreThan3Char(['dog', 'cat', 'map', 'cap', '-12', '120', 'up', 'usb', '123'], '1234')).to.be.equal(8);\n});\n\nit(\"noMoreThan3Char(['dog', 'map', '12', 'up', '123'], 'up') should return 2\", () => {\n  expect(noMoreThan3Char(['dog', 'map', '12', 'up', '123'], 'up')).to.be.equal(2);\n});\n\nit(\"noMoreThan3Char([], '123') should return 0\", () => {\n  expect(noMoreThan3Char([], '123')).to.be.equal(0);\n});\n\nit(\"noMoreThan3Char([], '') should return 0\", () => {\n  expect(noMoreThan3Char([], '')).to.be.equal(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}