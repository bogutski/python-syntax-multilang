{
  "_id": "6696c2ca763f0712c198e957",
  "content": {
    "ru": "Давайте разберемся, как работает оператор `break`.\n\nОператор `break` позволяет выйти из цикла, даже если условие продолжения цикла выполнено.\n\nРассмотрим на примере следующей задачи: вывести все символы строки до первого пробела.\n\n```javascript\nconst  str = 'Hello World';\n\nfor (let i = 0; i < str.length; i++) {    // проходимся по всем символам строки\n  if (str[i] === ' ') {                   // если текущий символ - `пробел`\n    break;                                // то прерываем цикл\n  }\n  console.log(str[i]);                    // 'H'\n                                          // 'e'\n                                          // 'l'\n                                          // 'l'\n                                          // 'o'\n}\n```\n\nКак мы видим, условие продолжения цикла выполняется, но оператор `break` прерывает его выполнение и в консоль выводится только первое слово.\n\n\nВ следующем задании нам нужно будет посчитать все элементы строки до первой запятой.\n\n```javascript\nconst str = 'Hello JS, you are awesome!';\nlet count = 0;                            // создаем переменную для подсчета\n\nfor (let i = 0; i < str.length; i++) {    // проходимся по всем символам строки\n  if (str[i] === ',') break;              // если текущий символ - `запятая`, то прерываем цикл\n  count++;                                // увеличиваем счетчик на 1\n}\n\nconsole.log(count);                       // 8\n```\n\nДавайте попробуем найти элемент, начиная с конца строки.\n\nНапример, присвоить элементы строки в другую переменную, пока не встретится знак восклицания.\n\n```javascript\nconst str = 'Hi there! How are you?';\nlet newStr = '';                              // создаем переменную для новой строки\n\nfor (let i = str.length - 1; i >= 0; i--) {   // проходимся по всем символам с конца строки\n  if (str[i] === '!') break;                  // если текущий символ - `знак восклицания`, то прерываем цикл\n  newStr += str[i];                           // добавляем текущий символ в новую строку\n}\n\nconsole.log(newStr);                          // '?uoy era woH'\n```\n\nВ данной задаче мы прошли от конца строки до знака восклицания и добавили все символы в новую строку. Таким образом, мы получили перевернутую строку.\n\n\nТеперь попрактикуемся с массивом.\n\nДавайте найдем, на каком индексе находится первая цифра.\n\n```javascript\nconst numbers = '1234567890';\nconst array = ['a', 'b', 'c', '1', 'e', '2', 'g', 'h', '4', 'j'];\n\nfor (let i = 0; i < array.length; i++) {    // проходимся по всем элементам массива\n  if (numbers.includes(array[i])) {         // если текущий элемент есть в строке `numbers`\n    console.log(i);                         // то выводим его индекс\n    break;                                  // и прерываем цикл\n  }\n}\n\n// 3\n```\n\nВ данном примере цикл выполнил 3-и итерации и на 4-ой нашел первую цифру. Индекс первой цифры вывелся в консоль, и цикл прервался.",
    "en": "Let's understand how the `break` operator works.\n\nThe `break` operator lets you exit the loop even if the loop continuation condition is met.\n\nConsider the following example: output all characters of a string before the first space.\n\n```javascript\nconst str = 'Hello World';\n\nfor (let i = 0; i < str.length; i++) { // go through all characters of the string\n  if (str[i] === ' ') { // if the current character is `space`.\n    break; // then break the loop\n  }\n  console.log(str[i]); // 'H'\n                                          // 'e'\n                                          // 'l'\n                                          // 'l'\n                                          // 'o'\n}\n```\n\nAs we can see, the loop continuation condition is satisfied, but the `break` operator interrupts it and only the first word is printed to the console.\n\n\nIn the next task we will need to count all elements of the string up to the first comma.\n\n```javascript\nconst str = 'Hello JS, you are awesome!'\nlet count = 0; // create a variable for counting\n\nfor (let i = 0; i < str.length; i++) { // go through all characters of the string\n  if (str[i] === ',') break; // if the current character is a `comma`, break the loop\n  count++; // increment counter by 1\n}\n\nconsole.log(count); // 8\n```\n\nLet's try to find the element starting from the end of the line.\n\nFor example, assign elements of a string to another variable until an exclamation point is encountered.\n\n```javascript\nconst str =  'Hi there! How are you?';\nlet newStr = ''; // create a variable for the new string\n\nfor (let i = str.length - 1; i >= 0; i--) { // go through all characters from the end of the string\n  if (str[i] === '!') break; // if the current character is an `exclamation mark`, break the loop\n  newStr += str[i]; // add the current symbol to the new line\n}\n\nconsole.log(newStr); // '?uoy era woH'\n```\n\nIn this problem we went from the end of the line to the exclamation point and added all the characters to the new line. Thus, we got an inverted string.\n\n\nNow let's practice with an array.\n\nLet's find which index has the first digit.\n\n```javascript\nconst numbers = '1234567890';\nconst array = ['a', 'b', 'c', '1', 'e', '2', 'g', 'h', '4', 'j'];\n\nfor (let i = 0; i < array.length; i++) { // go through all elements of the array\n  if (numbers.includes(array[i])) { // if the current element is in the `numbers` string\n    console.log(i); // print its index\n    break; // and break the loop\n  }\n}\n\n// 3\n```\n\nIn this example, the loop performed 3 iterations and found the first digit on the 4th iteration. The index of the first digit was printed to the console, and the loop was terminated.",
    "es": "# Прерывание цикла. break language: es"
  },
  "video": {
    "ru": "https://youtu.be/2n0MkQOLIZg",
    "en": "",
    "es": ""
  }
}