{
  "_id": "6696c2ca763f0712c198e992",
  "name": {
    "en": "The summing of numbers stops when a string or boolean is encountered",
    "ru": "Суммирование чисел прекращается при встрече со string или boolean"
  },
  "instruction": {
    "en": "Write a function `stopAtStringOrBoolean` that takes one parameter, an array of arbitrary length.\n\nThe array can contain the following data types: `string`, `boolean`, `number`.\n\nThe function must return the product of all the numbers in the array.\n\nIf `string` or `boolean` occurs in the array, the function must return the product of all numbers up to that point.\n\nAn example of running the function:\n```javascript\nstopAtStringOrBoolean([1, 3, 'one', 5, 17]) // 1 * 3 = 3\nstopAtStringOrBoolean([15, 7, -2]) // 15 * 7 * -2 = -210\nstopAtStringOrBoolean([-9, 3, false, 7, 3]) // -9 * 3 = -27\n```",
    "ru": "Напишите функцию `stopAtStringOrBoolean`, которая принимает один параметр - массив произвольной длины.\n\nМассив может содержать в себе следующие типы данных: `string`, `boolean`, `number`.\n\nФункция должна вернуть произведение всех чисел в массиве.\n\nЕсли в массиве встречается `string` или `boolean`, то функция должна вернуть произведение всех чисел до этого момента.\n\nПример запуска функции:\n```javascript\nstopAtStringOrBoolean([1, 3, 'one', 5, 17]) // 1 * 3 = 3\nstopAtStringOrBoolean([15, 7, -2]) // 15 * 7 * -2 = -210\nstopAtStringOrBoolean([-9, 3, false, 7, 3]) // -9 * 3 = -27\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function stopAtStringOrBoolean(arr) {\n  let mult = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (typeof arr[i] === 'string' || typeof arr[i] === 'boolean') break;\n    mult *= arr[i]\n  }\n  return mult\n}",
  "openTest": "it('Created function stopAtStringOrBoolean', () => {\n  expect(stopAtStringOrBoolean).to.be.a('function');\n});\n\nit(\"stopAtStringOrBoolean([1, 3, 'one', 5, 17]) should return 3\", () => {\n  expect(stopAtStringOrBoolean([1, 3, 'one', 5, 17])).to.be.equal(3);\n});\n\nit('stopAtStringOrBoolean([15, 7, -2]) should return -210', () => {\n  expect(stopAtStringOrBoolean([15, 7, -2])).to.be.equal(-210);\n});\n\nit('stopAtStringOrBoolean([-9, 3, false, 7, 3]) should return -27', () => {\n  expect(stopAtStringOrBoolean([-9, 3, false, 7, 3])).to.be.equal(-27);\n});\n\nit(\"stopAtStringOrBoolean(['two', '4', '-11']) should return 1\", () => {\n  expect(stopAtStringOrBoolean(['two', '4', '-11'])).to.be.equal(1);\n});\n\nit(\"stopAtStringOrBoolean([true, false, '5', '7']) should return 1\", () => {\n  expect(stopAtStringOrBoolean([true, false, '5', '7'])).to.be.equal(1);\n});\n\nit(\"stopAtStringOrBoolean([]) should return 1\", () => {\n  expect(stopAtStringOrBoolean([])).to.be.equal(1);\n});\n\nit(\"stopAtStringOrBoolean([-2, -4, '-5', 99]) should return 8\", () => {\n  expect(stopAtStringOrBoolean([-2, -4, '-5', 99])).to.be.equal(8);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}