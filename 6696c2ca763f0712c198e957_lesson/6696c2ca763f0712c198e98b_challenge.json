{
  "_id": "6696c2ca763f0712c198e98b",
  "name": {
    "en": "Stop filling the array at the 8th element",
    "ru": "Остановить заполнение массива на 8-м элементе"
  },
  "instruction": {
    "en": "Write a function `stopAt8Element` that takes 3 parameters - an empty array, a start number and an end number.\n\nThe array will be filled with numbers from the initial value to the final value inclusive.\n\nThe start value is the number at which the array will start to be filled.\n\nThe final value is the number that ends the array.\n\nThe starting value will always be smaller than the ending value.\n\nFilling of the array is interrupted at the 8th element.\n\nThe function must return the filled array.\n\nAn example of running the function:\n```javascript\nstopAt8Element([], 1, 30); // [1, 2, 3, 4, 5, 6, 7, 8]\nstopAt8Element([], -3, 25); // [-3, -2, -1, 0, 1, 2, 3, 4]\nstopAt8Element([], 5, 9); // [5, 6, 7, 8, 9]\n```",
    "ru": "Напишите функцию `stopAt8Element`, которая принимает 3 параметра - пустой массив, начальное число и конечное число.\n\nМассив будет заполняться числами от начального значения до конечного значения включительно.\n\nНачальное значение - это число, с которого начинается заполнение массива.\n\nКонечное значение - это число, которым заканчивается заполнение массива.\n\nНачальное значение всегда будет меньше конечного значения.\n\nЗаполнение массива прерывается на 8-м элементе.\n\nФункция должна вернуть заполненный массив.\n\nПример запуска функции:\n```javascript\nstopAt8Element([], 1, 30); // [1, 2, 3, 4, 5, 6, 7, 8]\nstopAt8Element([], -3, 25); // [-3, -2, -1, 0, 1, 2, 3, 4]\nstopAt8Element([], 5, 9); // [5, 6, 7, 8, 9]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function stopAt8Element(arr, n, n1) {\n  for (let i = n; i <= n1; i++) {\n    arr.push(i)\n    if (i === arr[7]) break;\n  }\n  return arr\n}",
  "openTest": "it('Created function stopAt8Element', () => {\n  expect(stopAt8Element).to.be.a('function');\n});\n\nit('stopAt8Element([], 1, 30) should return [1, 2, 3, 4, 5, 6, 7, 8]', () => {\n  expect(stopAt8Element([], 1, 30)).to.eql([1, 2, 3, 4, 5, 6, 7, 8]);\n} );\n\nit('stopAt8Element([], -3, 25) should return [-3, -2, -1, 0, 1, 2, 3, 4]', () => {\n  expect(stopAt8Element([], -3, 25)).to.eql([-3, -2, -1, 0, 1, 2, 3, 4]);\n} );\n\nit('stopAt8Element([], 5, 19) should return [5, 6, 7, 8, 9, 10, 11, 12]', () => {\n  expect(stopAt8Element([], 5, 19)).to.eql([5, 6, 7, 8, 9, 10, 11, 12]);\n} );\n\nit('stopAt8Element([], 1, 8) should return [1, 2, 3, 4, 5, 6, 7, 8]', () => {\n  expect(stopAt8Element([], 1, 8)).to.eql([1, 2, 3, 4, 5, 6, 7, 8]);\n} );\n\nit('stopAt8Element([], 1, 7) should return [1, 2, 3, 4, 5, 6, 7]', () => {\n  expect(stopAt8Element([], 1, 7)).to.eql([1, 2, 3, 4, 5, 6, 7]);\n} );\n\nit('stopAt8Element([], 1, 5) should return [1, 2, 3, 4, 5]', () => {\n  expect(stopAt8Element([], 1, 5)).to.eql([1, 2, 3, 4, 5]);\n} );",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}