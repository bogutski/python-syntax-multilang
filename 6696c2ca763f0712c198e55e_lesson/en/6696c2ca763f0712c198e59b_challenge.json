{
  "name": "Stone, scissors, paper, lizard, Spock",
  "instruction": "The object is given:\n```javascript\nconst winner = {\nrock: {scissors: \"\", lizard: \"\"},\npaper: {rock: \"\", spock: \"\"},\nscissors: {paper: \"\", lizard: \"\"},\nlizard: {spock: \"\", paper: \"\"},\nspock: {scissors: \"\", rock: \"\"},\n};\n```\n\nThe object contains the algorithm for the game ``rock, scissors, paper, lizard, Spock'':\n* `rock` defeats `scissors` and `lizard`;\n* `scissors` defeats `paper` and `lizard`;\n* `paper` beats `rock` and `spock`;\n* lizard beats `spock` and `paper`;\n* `spock` defeats `scissors` and `rock`.\n\nComplete the function `getWinner`, which takes two arguments:\n* `player1` - choice of the first player, can take the values `rock`, `paper`, `scissors`, `lizard` or `spock`, string;\n* `player2` - the choice of the second player, can take the values `rock`, `paper`, `scissors`, `lizard` or `spock`, string.\n\nThe function must return a string with the result of the game:\n* `Player 1 won` - if the first player won;\n* `Player 2 won` - if the second player won;\n* `Draw` - if there is a draw.\n\nConditions:\n* Must be solved without using the operators `&&` and `||`.\n\nSolution algorithm:\n* Refer to a property of the `winner` object with a name equal to the value of the argument `player1` or `player2`;\n* Check if this nested object has a property with a name equal to the argument value of `player2` or `player1`;\n* Return the result if there is a property.\n\nExample of running a function:\n```javascript\ngetWinner(\"rock\", \"lizard\"); // \"Player 1 won\"\ngetWinner(\"spock\", \"paper\"); // \"Player 2 won\"\ngetWinner(\"scissors\", \"scissors\"); // \"Draw\"\n```"
}