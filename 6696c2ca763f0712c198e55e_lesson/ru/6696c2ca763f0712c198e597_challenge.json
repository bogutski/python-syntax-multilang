{
  "name": "Проверка свойств объекта с двойной вложенностью",
  "instruction": "Насколько мы знаем, объекты могут содержать в себе другие объекты. Такие объекты называются вложенными.\n\nПример:\n```javascript\nownerInfo = {\n  address: {\n    city: 'San Francisco',\n    state: 'CA',\n  },\n   car: {\n    make: 'Toyota',\n    model: 'Corolla',\n  },\n}\n```\nХотя здесь и присутствуют в общей сложности три объекта, уровней вложенности в примере всего два.\nЭто потому, что объекты под свойствами `address` и `car` являются объектами одного уровня и находятся внутри объекта `ownerInfo`.\n\nК объектам, вложенным в другие объекты, можно применять те же методы, что и к обычным объектам.\nНужно лишь обратиться к тому свойству, в котором находится интересующий нас объект.\n\nНапример, чтобы узнать, содержится ли свойство `make` в объекте `car`, можно ввести любой из этих вариантов:\n```javascript\nownerInfo.car.hasOwnProperty(\"make\");\nownerInfo[\"car\"].hasOwnProperty(\"make\");\n\"make\" in ownerInfo.car;\n\"make\" in ownerInfo[\"car\"];\n```\nПри увеличении уровней вложенности лишь удлиняется путь к нужному свойству:\n```javascript\nownerInfo.address.state\nownerInfo[\"car\"][\"color\"][\"shade\"]\nownerInfo[\"car\"].color[\"shade\"].type\n```\nНе важно, сколько уровней вложенности, главное прописать правильный путь к нужному свойству.\n\nНапишите функцию `hasDoubleProperty`, которая принимает параметры:\n* `doubleObject` - объект с двойной вложенностью;\n* `propCheck1` - наименование свойства 1-го уровня вложенности, строка;\n* `propCheck2` - наименование свойства 2-го уровня вложенности, строка.\n\nФункция должна возвращать значение свойства `propCheck2`, если выполняются оба условия:\n* на уровне объекта `doubleObject` есть свойство `propCheck1`;\n* на уровне свойства `propCheck1` есть свойство `propCheck2`.\nВ противном случае функция должна возвращать строку `No such property: propCheck`, где `propCheck` - наименование свойства, которое не было найдено.\n\nУсловия:\n* Проверка должна выполняться в следующем порядке: `propCheck1` -> `propCheck2`;\n* Если первое свойство не найдено, то дальнейшая проверка прекращается.\n\nПримеры запуска функции:\n```javascript\nhasDoubleProperty({ first: { second: \"mushroom\" } }, \"first\", \"second\");  // \"mushroom\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"make\", \"generation\");  // \"E170\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"generation\", \"make\");  // \"No such property: generation\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"year\", \"model\");  // \"No such property: model\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"color\", \"model\");  // \"No such property: color\"\n```",
  "instructions": {}
}