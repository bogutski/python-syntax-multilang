{
  "_id": "6696c2ca763f0712c198e597",
  "name": {
    "en": "Checking the properties of an object with double nesting",
    "ru": "Проверка свойств объекта с двойной вложенностью"
  },
  "instruction": {
    "en": "As far as we know, objects can contain other objects. Such objects are called nested.\n\nExample:\n```javascript\nownerInfo = {\n  address: {\n    city: 'San Francisco',\n    state: 'CA',\n  },\n   car: {\n    make: 'Toyota',\n    model: 'Corolla',\n  },\n}\n```\nAlthough there are a total of three objects here, there are only two levels of nesting in the example.\nThis is because the objects under the properties `address` and `car` are objects of the same level and are inside the `ownerInfo` object.\n\nThe same methods can be applied to objects nested inside other objects as to regular objects.\nYou just need to access the property that contains the object of interest.\n\nFor example, to find out if the property `make` is present in the `car` object, you can enter any of these options:\n```javascript\nownerInfo.car.hasOwnProperty(\"make\");\nownerInfo[\"car\"].hasOwnProperty(\"make\");\n\"make\" in ownerInfo.car;\n\"make\" in ownerInfo[\"car\"];\n```\nAs the levels of nesting increase, the path to the desired property only gets longer:\n```javascript\nownerInfo.address.state\nownerInfo[\"car\"][\"color\"][\"shade\"]\nownerInfo[\"car\"].color[\"shade\"].type\n```\nNo matter how many levels of nesting there are, the important thing is to specify the correct path to the desired property.\n\nWrite a function `hasDoubleProperty` that takes the parameters:\n* `doubleObject` - an object with double nesting;\n* `propCheck1` - the name of the property at the 1st level of nesting, a string;\n* `propCheck2` - the name of the property at the 2nd level of nesting, a string.\n\nThe function should return the value of the `propCheck2` property if both conditions are met:\n* there is a `propCheck1` property at the `doubleObject` level;\n* there is a `propCheck2` property at the `propCheck1` property level.\nOtherwise, the function should return the string `No such property: propCheck`, where `propCheck` is the name of the property that was not found.\n\nConditions:\n* The check should be performed in the following order: `propCheck1` -> `propCheck2`;\n* If the first property is not found, further checking should be stopped.\n\nFunction call examples:\n```javascript\nhasDoubleProperty({ first: { second: \"mushroom\" } }, \"first\", \"second\");  // \"mushroom\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"make\", \"generation\");  // \"E170\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"generation\", \"make\");  // \"No such property: generation\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"year\", \"model\");  // \"No such property: model\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"color\", \"model\");  // \"No such property: color\"\n```",
    "ru": "Насколько мы знаем, объекты могут содержать в себе другие объекты. Такие объекты называются вложенными.\n\nПример:\n```javascript\nownerInfo = {\n  address: {\n    city: 'San Francisco',\n    state: 'CA',\n  },\n   car: {\n    make: 'Toyota',\n    model: 'Corolla',\n  },\n}\n```\nХотя здесь и присутствуют в общей сложности три объекта, уровней вложенности в примере всего два.\nЭто потому, что объекты под свойствами `address` и `car` являются объектами одного уровня и находятся внутри объекта `ownerInfo`.\n\nК объектам, вложенным в другие объекты, можно применять те же методы, что и к обычным объектам.\nНужно лишь обратиться к тому свойству, в котором находится интересующий нас объект.\n\nНапример, чтобы узнать, содержится ли свойство `make` в объекте `car`, можно ввести любой из этих вариантов:\n```javascript\nownerInfo.car.hasOwnProperty(\"make\");\nownerInfo[\"car\"].hasOwnProperty(\"make\");\n\"make\" in ownerInfo.car;\n\"make\" in ownerInfo[\"car\"];\n```\nПри увеличении уровней вложенности лишь удлиняется путь к нужному свойству:\n```javascript\nownerInfo.address.state\nownerInfo[\"car\"][\"color\"][\"shade\"]\nownerInfo[\"car\"].color[\"shade\"].type\n```\nНе важно, сколько уровней вложенности, главное прописать правильный путь к нужному свойству.\n\nНапишите функцию `hasDoubleProperty`, которая принимает параметры:\n* `doubleObject` - объект с двойной вложенностью;\n* `propCheck1` - наименование свойства 1-го уровня вложенности, строка;\n* `propCheck2` - наименование свойства 2-го уровня вложенности, строка.\n\nФункция должна возвращать значение свойства `propCheck2`, если выполняются оба условия:\n* на уровне объекта `doubleObject` есть свойство `propCheck1`;\n* на уровне свойства `propCheck1` есть свойство `propCheck2`.\nВ противном случае функция должна возвращать строку `No such property: propCheck`, где `propCheck` - наименование свойства, которое не было найдено.\n\nУсловия:\n* Проверка должна выполняться в следующем порядке: `propCheck1` -> `propCheck2`;\n* Если первое свойство не найдено, то дальнейшая проверка прекращается.\n\nПримеры запуска функции:\n```javascript\nhasDoubleProperty({ first: { second: \"mushroom\" } }, \"first\", \"second\");  // \"mushroom\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"make\", \"generation\");  // \"E170\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"generation\", \"make\");  // \"No such property: generation\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"year\", \"model\");  // \"No such property: model\"\nhasDoubleProperty({ make: { model: \"Corolla\", generation: \"E170\" }, year: 2010 }, \"color\", \"model\");  // \"No such property: color\"\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function hasDoubleProperty(doubleObject, propCheck1, propCheck2) {\n  let propName = '';\n  if (propCheck1 in doubleObject) {\n    if (doubleObject[propCheck1].hasOwnProperty(propCheck2)) {\n      return doubleObject[propCheck1][propCheck2];\n    } else {\n      propName = propCheck2;\n    }\n  } else {\n    propName = propCheck1;\n  }\n  return `No such property: ${propName}`;\n}",
  "openTest": "it('Created function `hasDoubleProperty`', () => {\n  expect(hasDoubleProperty).to.be.a('function');\n});\n\nit('hasDoubleProperty({ sun: { moon: \"satellite\" } }, \"sun\", \"moon\")  // \"satellite\"', () => {\n  expect(hasDoubleProperty({ sun: { moon: 'satellite' } }, 'sun', 'moon')).eq(\n    'satellite',\n  );\n});\n\nit('hasDoubleProperty({ black: { white: \"color\", white2: \"color2\" }, red: { blue: \"color\" } }, \"black\", \"white\")  // \"color\"', () => {\n  expect(\n    hasDoubleProperty(\n      { black: { white: 'color', white2: 'color2' }, red: { blue: 'color' } },\n      'black',\n      'white',\n    ),\n  ).eq('color');\n});\n\nit('hasDoubleProperty({ one: { eleven: 11, twelve: 12 }, two: { twenty: 20, twentyOne: 21 } }, \"two\", \"twenty\")  // 20', () => {\n  expect(\n    hasDoubleProperty(\n      { one: { eleven: 11, twelve: 12 }, two: { twenty: 20, twentyOne: 21 } },\n      'two',\n      'twenty',\n    ),\n  ).eq(20);\n});\n\nit('hasDoubleProperty({ Anaconda: { ___: null } }, \"Anaconda\", \"___\")  // null', () => {\n  expect(hasDoubleProperty({ Anaconda: { ___: null } }, 'Anaconda', '___')).eq(null);\n});\n\nit('hasDoubleProperty({ _123: { \"!\": \"   \" } }, \"_123\", \"!\")  // \"   \"', () => {\n  expect(hasDoubleProperty({ _123: { '!': '   ' } }, '_123', '!')).eq('   ');\n});\n\nit('hasDoubleProperty({ rose: { lily: \"flower\" } }, \"rose\", \"\")  // \"No such property: \"', () => {\n  expect(hasDoubleProperty({ rose: { lily: 'flower' } }, 'rose', '')).eq(\n    'No such property: ',\n  );\n});\n\nit('hasDoubleProperty({ cake: { chocolate: \"sweet\" } }, \"   \", \"\")  // \"No such property:    \"', () => {\n  expect(hasDoubleProperty({ cake: { chocolate: 'sweet' } }, '   ', '')).eq(\n    'No such property:    ',\n  );\n});\n\nit('hasDoubleProperty({ \"%\": { \" \" : \"!\" } }, \"%\", \" \")  // \"!\"', () => {\n  expect(hasDoubleProperty({ '%': { ' ': '!' } }, '%', ' ')).eq('!');\n});\n\nit('hasDoubleProperty({ a: {}, b: {}, c: {} }, \"a\", \"prop\")  // \"No such property: prop\"', () => {\n  expect(hasDoubleProperty({ a: {}, b: {}, c: {} }, 'a', 'prop')).eq(\n    'No such property: prop',\n  );\n});\n\nit('hasDoubleProperty({}, \"one\", \"two\")  // \"No such property: one\"', () => {\n  expect(hasDoubleProperty({}, 'one', 'two')).eq('No such property: one');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}