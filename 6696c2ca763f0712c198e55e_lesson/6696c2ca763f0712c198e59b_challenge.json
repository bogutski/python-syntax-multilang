{
  "_id": "6696c2ca763f0712c198e59b",
  "name": {
    "en": "Stone, scissors, paper, lizard, Spock",
    "ru": "Камень, ножницы, бумага, ящерица, Спок\n"
  },
  "instruction": {
    "en": "The object is given:\n```javascript\nconst winner = {\nrock: {scissors: \"\", lizard: \"\"},\npaper: {rock: \"\", spock: \"\"},\nscissors: {paper: \"\", lizard: \"\"},\nlizard: {spock: \"\", paper: \"\"},\nspock: {scissors: \"\", rock: \"\"},\n};\n```\n\nThe object contains the algorithm for the game ``rock, scissors, paper, lizard, Spock'':\n* `rock` defeats `scissors` and `lizard`;\n* `scissors` defeats `paper` and `lizard`;\n* `paper` beats `rock` and `spock`;\n* lizard beats `spock` and `paper`;\n* `spock` defeats `scissors` and `rock`.\n\nComplete the function `getWinner`, which takes two arguments:\n* `player1` - choice of the first player, can take the values `rock`, `paper`, `scissors`, `lizard` or `spock`, string;\n* `player2` - the choice of the second player, can take the values `rock`, `paper`, `scissors`, `lizard` or `spock`, string.\n\nThe function must return a string with the result of the game:\n* `Player 1 won` - if the first player won;\n* `Player 2 won` - if the second player won;\n* `Draw` - if there is a draw.\n\nConditions:\n* Must be solved without using the operators `&&` and `||`.\n\nSolution algorithm:\n* Refer to a property of the `winner` object with a name equal to the value of the argument `player1` or `player2`;\n* Check if this nested object has a property with a name equal to the argument value of `player2` or `player1`;\n* Return the result if there is a property.\n\nExample of running a function:\n```javascript\ngetWinner(\"rock\", \"lizard\"); // \"Player 1 won\"\ngetWinner(\"spock\", \"paper\"); // \"Player 2 won\"\ngetWinner(\"scissors\", \"scissors\"); // \"Draw\"\n```",
    "ru": "Дан объект:\n```javascript\nconst winner = {\n  rock: {scissors: \"\", lizard: \"\"},\n  paper: {rock: \"\", spock: \"\"},\n  scissors: {paper: \"\", lizard: \"\"},\n  lizard: {spock: \"\", paper: \"\"},\n  spock: {scissors: \"\", rock: \"\"},\n};\n```\n\nОбъект содержит в себе алгоритм игры \"Камень, ножницы, бумага, ящерица, Спок\":\n* `rock` побеждает `scissors` и `lizard`;\n* `scissors` побеждает `paper` и `lizard`;\n* `paper` побеждает `rock` и `spock`;\n* `lizard` побеждает `spock` и `paper`;\n* `spock` побеждает `scissors` и `rock`.\n\nДопишите функцию `getWinner`, которая принимает два аргумента:\n* `player1` - выбор первого игрока, может принимать значения `rock`, `paper`, `scissors`, `lizard` или `spock`, строка;\n* `player2` - выбор второго игрока, может принимать значения `rock`, `paper`, `scissors`, `lizard` или `spock`, строка.\n\nФункция должна возвращать строку с результатом игры:\n* `Player 1 won` - если первый игрок победил;\n* `Player 2 won` - если второй игрок победил;\n* `Draw` - если ничья.\n\nУсловия:\n* Необходимо решить без использования операторов `&&` и `||`.\n\nАлгоритм решения:\n* Обратитесь к свойству объекта `winner` с именем, равным значению аргумента `player1` или `player2`;\n* Проверьте, есть ли в этом вложенном объекте свойство с именем, равным значению аргумента `player2` или `player1`;\n* Верните результат, если свойство есть.\n\nПример запуска функции:\n```javascript\ngetWinner(\"rock\", \"lizard\"); // \"Player 1 won\"\ngetWinner(\"spock\", \"paper\"); // \"Player 2 won\"\ngetWinner(\"scissors\", \"scissors\"); // \"Draw\"\n```"
  },
  "initialSolution": "const winner = {\n  rock: {scissors: \"\", lizard: \"\"},\n  paper: {rock: \"\", spock: \"\"},\n  scissors: {paper: \"\", lizard: \"\"},\n  lizard: {spock: \"\", paper: \"\"},\n  spock: {scissors: \"\", rock: \"\"},\n};\n\nfun",
  "completedSolution": "const winner = {\n  rock: {scissors: \"\", lizard: \"\"},\n  paper: {rock: \"\", spock: \"\"},\n  scissors: {paper: \"\", lizard: \"\"},\n  lizard: {spock: \"\", paper: \"\"},\n  spock: {scissors: \"\", rock: \"\"},\n};\n\nfunction getWinner(player1, player2) {\n  if (winner[player1].hasOwnProperty(player2)) {\n    return \"Player 1 won\";\n  } else if (winner[player2].hasOwnProperty(player1)) {\n    return \"Player 2 won\";\n  } else {\n    return \"Draw\";\n  }\n}",
  "openTest": "it(\"Created function `getWinner`\", () => {\n  expect(getWinner).to.be.a(\"function\");\n});\n\nit('getWinner(\"rock\", \"paper\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"rock\", \"paper\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"rock\", \"scissors\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"rock\", \"scissors\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"rock\", \"lizard\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"rock\", \"lizard\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"rock\", \"spock\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"rock\", \"spock\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"paper\", \"rock\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"paper\", \"rock\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"paper\", \"scissors\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"paper\", \"scissors\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"paper\", \"lizard\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"paper\", \"lizard\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"paper\", \"spock\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"paper\", \"spock\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"scissors\", \"rock\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"scissors\", \"rock\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"scissors\", \"paper\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"scissors\", \"paper\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"scissors\", \"lizard\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"scissors\", \"lizard\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"scissors\", \"spock\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"scissors\", \"spock\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"lizard\", \"rock\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"lizard\", \"rock\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"lizard\", \"paper\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"lizard\", \"paper\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"lizard\", \"scissors\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"lizard\", \"scissors\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"lizard\", \"spock\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"lizard\", \"spock\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"spock\", \"rock\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"spock\", \"rock\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"spock\", \"paper\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"spock\", \"paper\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"spock\", \"scissors\")  // \"Player 1 won\"', () => {\n  expect(getWinner(\"spock\", \"scissors\")).to.be.equal(\"Player 1 won\");\n});\n\nit('getWinner(\"spock\", \"lizard\")  // \"Player 2 won\"', () => {\n  expect(getWinner(\"spock\", \"lizard\")).to.be.equal(\"Player 2 won\");\n});\n\nit('getWinner(\"rock\", \"rock\")  // \"Draw\"', () => {\n  expect(getWinner(\"rock\", \"rock\")).to.be.equal(\"Draw\");\n});\n\nit('getWinner(\"paper\", \"paper\")  // \"Draw\"', () => {\n  expect(getWinner(\"paper\", \"paper\")).to.be.equal(\"Draw\");\n});\n\nit('getWinner(\"scissors\", \"scissors\")  // \"Draw\"', () => {\n  expect(getWinner(\"scissors\", \"scissors\")).to.be.equal(\"Draw\");\n});\n\nit('getWinner(\"lizard\", \"lizard\")  // \"Draw\"', () => {\n  expect(getWinner(\"lizard\", \"lizard\")).to.be.equal(\"Draw\");\n});\n\nit('getWinner(\"spock\", \"spock\")  // \"Draw\"', () => {\n  expect(getWinner(\"spock\", \"spock\")).to.be.equal(\"Draw\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}