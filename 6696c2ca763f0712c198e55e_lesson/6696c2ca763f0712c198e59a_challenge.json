{
  "_id": "6696c2ca763f0712c198e59a",
  "name": {
    "en": "Create a secret algorithm for encrypting numbers",
    "ru": "Создаем секретный алгоритм шифрования чисел"
  },
  "instruction": {
    "en": "The `numberToSecret` function takes a string of 4 characters.\n\nEach character is a number from 0 to 9.\n\nThe substitution table for the encryption:\n```\n0 -> t\n1 -> &\n2 -> :\n3 -> B\n4 -> @\n5 -> Q\n6 -> 8\n7 -> W\n8 -> x\n9 -> #\n```\n\nWe need to encrypt the string, replacing each digit with the corresponding character from the table.\n\nFor example, if the string `1234` is passed to the function, the string `&:B@` must be returned.\n\nTo solve the problem, use the object as a correspondence table.\n\nIn this object, the keys are numbers and the values are symbols.\n\nExamples of running a function:\n```javascript\nnumberToSecret('1234'); // '&:B@'\nnumberToSecret('0000'); // 'tttt'\nnumberToSecret('9900'); // '##tt'\nnumberToSecret('5792'); // 'QW#:'\n```",
    "ru": "В функцию `numberToSecret` передается строка длиной 4 символа.\n\nКаждый символ - это число от 0 до 9.\n\nТаблица замены для шифрования:\n```\n0 -> t\n1 -> &\n2 -> :\n3 -> B\n4 -> @\n5 -> Q\n6 -> 8\n7 -> W\n8 -> x\n9 -> #\n```\n\nНужно зашифровать строку, заменив каждую цифру на соответствующий символ из таблицы.\n\nНапример, если в функцию передана строка `1234`, то нужно вернуть строку `&:B@`.\n\nДля решения задачи используйте объект в качестве таблицы соответствий.\n\nВ этом объекте ключами будут цифры, а значениями – символы.\n\nПримеры запуска функции:\n```javascript\nnumberToSecret('1234'); // '&:B@'\nnumberToSecret('0000'); // 'tttt'\nnumberToSecret('9900'); // '##tt'\nnumberToSecret('5792'); // 'QW#:'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function numberToSecret(number) {\n  const table = {\n    0: 't',\n    1: '&',\n    2: ':',\n    3: 'B',\n    4: '@',\n    5: 'Q',\n    6: '8',\n    7: 'W',\n    8: 'x',\n    9: '#',\n  };\n\n  let result = '';\n  for (let i = 0; i < number.length; i += 1) {\n    result += table[number[i]];\n  }\n\n  return result;\n}",
  "openTest": "it('Created function numberToSecret', () => {\n  expect(numberToSecret).to.be.a('function');\n});\n\nit('numberToSecret(\"1234\") return \"&:B@\"', () => {\n  expect(numberToSecret('1234')).eql('&:B@');\n});\n\n// numberToSecret('0000'); // 'tttt'\nit('numberToSecret(\"0000\") return \"tttt\"', () => {\n  expect(numberToSecret('0000')).eql('tttt');\n});\n\n// numberToSecret('9900'); // '##tt'\nit('numberToSecret(\"9900\") return \"##tt\"', () => {\n  expect(numberToSecret('9900')).eql('##tt');\n});\n\nit('numberToSecret(\"5792\") return \"QW#:\"', () => {\n  expect(numberToSecret('5792')).eql('QW#:');\n});\n\nit('numberToSecret(\"1221\") return \"&::&\"', () => {\n  expect(numberToSecret('1221')).eql('&::&');\n});\n\nit('numberToSecret(\"9999\") return \"####\"', () => {\n  expect(numberToSecret('9999')).eql('####');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}