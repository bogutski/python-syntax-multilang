{
  "_id": "6696c2ca763f0712c198e598",
  "name": {
    "en": "Replace numbers with words. Object as a correspondence table",
    "ru": "Замените цифры на слова. Объект как таблица соответствий"
  },
  "instruction": {
    "en": "In this example, you will learn how to use objects as correspondence tables.\n\nThis will come in handy when you need to replace one value with another. For example, if you need to replace numbers with words.\n\nAn example of using an object as a correspondence table:\n```javascript\nconst numbers = {\n  1: 'one',\n  2: 'two',\n  3: 'three',\n}\n\nconst n = 1;\nconsole.log(numbers[n]); // 'one'\n\nconst m = 3;\nconsole.log(numbers[m]); // 'three'\n```\n\nThus, if you need to replace a number with a word, all you need to do is take the `numbers` object and refer to it by a key that is equal to the number.\n\nYou need to write a function `getNumberName` that takes one parameter - a number from zero to ten.\n\nThe function should return a string that matches that number.\n\nExamples of running the function:\n```javascript.\ngetNumberName(0); // 'zero'\ngetNumberName(1); // 'one'.\ngetNumberName(2); // 'two'\ngetNumberName(3); // 'three'.\ngetNumberName(4); // 'four'.\ngetNumberName(5); // 'five'.\ngetNumberName(6); // 'six'.\ngetNumberName(7); // 'seven'.\ngetNumberName(8); // 'eight'.\ngetNumberName(9); // 'nine'.\ngetNumberName(10); // 'ten'.\ngetNumberName(11); // 'unknown number'.\n```\n\nIf a number is passed to the function that is not in the matching table, the function should return the string `'unknown number'`.\n\nThis problem can be solved with `switch` or `if`, but we suggest you solve it with an object.",
    "ru": "На примере этой задачи вы научитесь использовать объекты в качестве таблиц соответствий.\n\nЭто пригодится в тех случаях, когда нужно заменить одно значение на другое. Например, если вам нужно заменить цифры на слова.\n\nПример использования объекта как таблицы соответствий:\n```javascript\nconst numbers = {\n  1: 'one',\n  2: 'two',\n  3: 'three',\n}\n\nconst n = 1;\nconsole.log(numbers[n]); // 'one'\n\nconst m = 3;\nconsole.log(numbers[m]); // 'three'\n```\n\nТаким образом, если вам нужно заменить цифру на слово, то достаточно взять объект `numbers` и обратиться к нему по ключу, который равен цифре.\n\nНужно написать функцию `getNumberName`, которая принимает один параметр – число от нуля до десяти.\n\nФункция должна возвращать строку, которая будет соответствовать этому числу.\n\nПримеры запуска функции:\n```javascript\ngetNumberName(0); // 'zero'\ngetNumberName(1); // 'one'\ngetNumberName(2); // 'two'\ngetNumberName(3); // 'three'\ngetNumberName(4); // 'four'\ngetNumberName(5); // 'five'\ngetNumberName(6); // 'six'\ngetNumberName(7); // 'seven'\ngetNumberName(8); // 'eight'\ngetNumberName(9); // 'nine'\ngetNumberName(10); // 'ten'\ngetNumberName(11); // 'unknown number'\n```\n\nЕсли в функцию передано число, которого нет в таблице соответствий, то функция должна возвращать строку `'unknown number'`.\n\nЭту задачу можно решить с помощью `switch` или `if`, но мы предлагаем вам решить ее с помощью объекта."
  },
  "initialSolution": "fun",
  "completedSolution": "function getNumberName(number) {\n  const numbers = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n  };\n\n  return numbers[number] || 'unknown number';\n}",
  "openTest": "it('Created function `getNumberName`', () => {\n  expect(getNumberName).to.be.a('function');\n});\n\nit('getNumberName(0) return `zero`', () => {\n  expect(getNumberName(0)).to.be.equal('zero');\n});\n\nit('getNumberName(1) return `one`', () => {\n  expect(getNumberName(1)).to.be.equal('one');\n});\n\nit('getNumberName(2) return `two`', () => {\n  expect(getNumberName(2)).to.be.equal('two');\n});\n\nit('getNumberName(3) return `three`', () => {\n  expect(getNumberName(3)).to.be.equal('three');\n});\n\nit('getNumberName(4) return `four`', () => {\n  expect(getNumberName(4)).to.be.equal('four');\n});\n\nit('getNumberName(5) return `five`', () => {\n  expect(getNumberName(5)).to.be.equal('five');\n});\n\nit('getNumberName(6) return `six`', () => {\n  expect(getNumberName(6)).to.be.equal('six');\n});\n\nit('getNumberName(7) return `seven`', () => {\n  expect(getNumberName(7)).to.be.equal('seven');\n});\n\nit('getNumberName(8) return `eight`', () => {\n  expect(getNumberName(8)).to.be.equal('eight');\n});\n\nit('getNumberName(9) return `nine`', () => {\n  expect(getNumberName(9)).to.be.equal('nine');\n});\n\nit('getNumberName(10) return `ten`', () => {\n  expect(getNumberName(10)).to.be.equal('ten');\n});\n\nit('getNumberName(11) return `unknown number`', () => {\n  expect(getNumberName(11)).to.be.equal('unknown number');\n});\n\nit('getNumberName(12) return `unknown number`', () => {\n  expect(getNumberName(12)).to.be.equal('unknown number');\n});\n\nit('getNumberName(130) return `unknown number`', () => {\n  expect(getNumberName(130)).to.be.equal('unknown number');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}