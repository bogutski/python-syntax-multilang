{
  "_id": "6696c2ca763f0712c198ec26",
  "name": {
    "en": "The number of occurrences of digits in the string output as an object",
    "ru": "Количество вхождений цифр в строку вывести в виде объекта"
  },
  "instruction": {
    "en": "Write a function `occurrencesInObject` that takes a string.\n\nThe function must count how many times the digits `'1'`, `'2'`, `'3'` occur in the string and return an object of the form:\n\n * `{ one:  <number> , two:  <number> , three: <number> }` where ` <number> ` is the number of occurrences of the digit in the string.\n\nIf some digit does not occur in the string, the corresponding property of the object must be equal to zero.\n\n\nExamples of function execution:\n```javascript\noccurrencesInObject('123123123'); // { one: 3, two: 3, three: 3 }\noccurrencesInObject('11112222'); // { one: 4, two: 4, three: 0 }\noccurrencesInObject('3333322222'); // { one: 0, two: 5, three: 5 }\noccurrencesInObject(''); // { one: 0, two: 0, three: 0 }\n```",
    "ru": "Напишите функцию `occurrencesInObject`, которая принимает строку.\n\nФункция должна посчитать сколько раз встречаются цифры `'1'`, `'2`', `'3'` в строке и вернуть объект вида:\n\n * `{ one: <number>, two: <number>, three: <number> }`, где `<number>` - количество вхождений цифры в строку.\n\nЕсли какая-то цифра не встречается в строке, то соответствующее свойство объекта должно быть равно нулю.\n\n\nПримеры запуска функции:\n```javascript\noccurrencesInObject('123123123'); // { one: 3, two: 3, three: 3 }\noccurrencesInObject('11112222'); // { one: 4, two: 4, three: 0 }\noccurrencesInObject('3333322222'); // { one: 0, two: 5, three: 5 }\noccurrencesInObject(''); // { one: 0, two: 0, three: 0 }\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function occurrencesInObject(string) {\n  let obj = { one: 0, two: 0, three: 0 };\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '1') obj.one++;\n    if (string[i] === '2') obj.two++;\n    if (string[i] === '3') obj.three++;\n  }\n  return obj;\n}",
  "openTest": "it('Created function occurrencesInObject', () => {\n  expect(occurrencesInObject).to.be.a('function');\n});\n\nit(\"occurrencesInObject('123123123') should return { one: 3, two: 3, three: 3 }\", () => {\n  expect(occurrencesInObject('123123123')).to.deep.equal({ one: 3, two: 3, three: 3 });\n});\n\nit(\"occurrencesInObject('11112222') should return { one: 4, two: 4, three: 0 }\", () => {\n  expect(occurrencesInObject('11112222')).to.deep.equal({ one: 4, two: 4, three: 0 });\n});\n\nit(\"occurrencesInObject('3333322222') should return { one: 0, two: 5, three: 5 }\", () => {\n  expect(occurrencesInObject('3333322222')).to.deep.equal({ one: 0, two: 5, three: 5 });\n});\n\nit(\"occurrencesInObject('13') should return { one: 1, two: 0, three: 1 }\", () => {\n  expect(occurrencesInObject('13')).to.deep.equal({ one: 1, two: 0, three: 1 });\n});\n\nit(\"occurrencesInObject('asd4569870eqefadf') should return { one: 0, two: 0, three: 0 }\", () => {\n  expect(occurrencesInObject('asd4569870eqefadf')).to.deep.equal({ one: 0, two: 0, three: 0 });\n});\n\nit(\"occurrencesInObject('') should return { one: 0, two: 0, three: 0 }\", () => {\n  expect(occurrencesInObject('')).to.deep.equal({ one: 0, two: 0, three: 0 });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}