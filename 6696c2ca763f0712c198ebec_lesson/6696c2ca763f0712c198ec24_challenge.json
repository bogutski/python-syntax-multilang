{
  "_id": "6696c2ca763f0712c198ec24",
  "name": {
    "en": "Indexes of element occurrences in a string",
    "ru": "Индексы вхождений элемента в строку"
  },
  "instruction": {
    "en": "Write a function `indexOfOccurrences` that takes a string and a character.\n\nThe function should return a string that lists indexes of occurrences of the character in the string, separated by a space. There should be no space at the end.\n\nFor example, `indexOfOccurrences('abc abc', 'a')` should return `'0 4'` because the character `a` occurs in the string at indices `0` and `4`\n\nIn case the string or character is empty, the function should return an empty string.\n\nExamples of running the function:\n```javascript\nindexOfOccurrences('hello', 'l'); // '2 3'\nindexOfOccurrences('abcaacba', 'a'); // '0 3 4 7'\nindexOfOccurrences('', 'a'); // ''\nindexOfOccurrences('abc', ''); // ''\n```",
    "ru": "Напишите функцию `indexOfOccurrences`, которая принимает строку и символ.\n\nФункция должна вернуть строку, в которой через пробел перечислены индексы вхождений символа в строку. В конце пробела быть не должно.\n\nНапример, `indexOfOccurrences('abc abc', 'a')` должна вернуть `'0 4'`, потому что символ `a` встречается в строке на индексах `0` и `4`.\n\nВ случае, если строка или символ пустые, функция должна вернуть пустую строку.\n\nПримеры запуска функции:\n```javascript\nindexOfOccurrences('hello', 'l'); // '2 3'\nindexOfOccurrences('abcaacba', 'a'); // '0 3 4 7'\nindexOfOccurrences('', 'a'); // ''\nindexOfOccurrences('abc', ''); // ''\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function indexOfOccurrences(str, el) {\n  let result = '';\n  for(let i = 0; i < str.length; i++) {\n    if(str[i] === el) {\n      result += i + ' ';\n    }\n  }\n  return result.trim();\n}",
  "openTest": "it('Created function indexOfOccurrences', () => {\n  expect(indexOfOccurrences).to.be.a('function');\n});\n\nit(\"indexOfOccurrences('hello world', 'l') should return '2 3 9'\", () => {\n  expect(indexOfOccurrences('hello world', 'l')).to.be.equal('2 3 9');\n});\n\nit(\"indexOfOccurrences('abalabahaha', 'a') should return '0 2 4 6 8 10'\", () => {\n  expect(indexOfOccurrences('abalabahaha', 'a')).to.be.equal('0 2 4 6 8 10');\n});\n\nit(\"indexOfOccurrences('aaaaa', 'a') should return '0 1 2 3 4'\", () => {\n  expect(indexOfOccurrences('aaaaa', 'a')).to.be.equal('0 1 2 3 4');\n});\n\nit(\"indexOfOccurrences('abc', '') should return ''\", () => {\n  expect(indexOfOccurrences('abc', '')).to.be.equal('');\n});\n\nit(\"indexOfOccurrences('', 'a') should return ''\", () => {\n  expect(indexOfOccurrences('', 'a')).to.be.equal('');\n});\n\nit(\"indexOfOccurrences('', '') should return ''\", () => {\n  expect(indexOfOccurrences('', '')).to.be.equal('');\n});\n\nit(\"indexOfOccurrences('123123', '1') should return '0 3'\", () => {\n  expect(indexOfOccurrences('123123', '1')).to.be.equal('0 3');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}