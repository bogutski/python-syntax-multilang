{
  "_id": "6696c2ca763f0712c198ec23",
  "name": {
    "en": "Number of occurrences of two elements in a string",
    "ru": "Количество вхождений двух элементов в строку"
  },
  "instruction": {
    "en": "Write a function `numberOfOccurrencesBothEl` that takes a string and two elements: `el1`, `el2`.\n\nThe function should return a string with the number of occurrences of each element in the string.\n\nFor example, if you pass the string `Hello` and the elements `l` and `o` into the function, the function should return the string `First element: 2, second element: 1`.\n\nIf there are no elements in the string, the function should return the string `First element: 0, second element: 0`.\n\nThe string and elements can be in any case. Before the loop bring the string and elements to the same case.\n\n\nExamples of running a function:\n```javascript\nnumberOfOccurrencesBothEl('Hello World', 'l', 'o'); // 'First element: 3, second element: 2'\nnumberOfOccurrencesBothEl('AbC', 't', 'y'); // 'First element: 0, second element: 0'\nnumberOfOccurrencesBothEl('LOCAL coding', 'l', 'c'); // 'First element: 2, second element: 2'\nnumberOfOccurrencesBothEl('blue red', 'R', 'G'); // 'First element: 1, second element: 0'\n```",
    "ru": "Напишите функцию `numberOfOccurrencesBothEl`, которая принимает строку и два элемента: `el1`, `el2`.\n\nФункция должна вернуть строку, в которой будет указано количество вхождений каждого элемента в строку.\n\nНапример, если передать в функцию строку `Hello` и элементы `l` и `o`, то функция должна вернуть строку `First element: 2, second element: 1`.\n\nЕсли элементов нет в строке, то функция должна вернуть строку `First element: 0, second element: 0`.\n\nСтрока и элементы могут быть в любом регистре. Перед циклом приведите строку и элементы к одному регистру.\n\n\nПримеры запуска функции:\n```javascript\nnumberOfOccurrencesBothEl('Hello World', 'l', 'o'); // 'First element: 3, second element: 2'\nnumberOfOccurrencesBothEl('AbC', 't', 'y'); // 'First element: 0, second element: 0'\nnumberOfOccurrencesBothEl('LOCAL coding', 'l', 'c'); // 'First element: 2, second element: 2'\nnumberOfOccurrencesBothEl('blue red', 'R', 'G'); // 'First element: 1, second element: 0'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function numberOfOccurrencesBothEl(str, el1, el2) {\n  let countEl1 = 0;\n  let countEl2 = 0;\n  str = str.toLowerCase();\n  el1 = el1.toLowerCase();\n  el2 = el2.toLowerCase();\n  for (let i = 0; i < str.length; i += 1) {\n    if (str[i] === el1) countEl1++;\n    if (str[i] === el2) countEl2++;\n  }\n  return `First element: ${countEl1}, second element: ${countEl2}`;\n}",
  "openTest": "it('Created function numberOfOccurrencesBothEl', () => {\n  expect(numberOfOccurrencesBothEl).to.be.a('function');\n});\n\nit(\"numberOfOccurrencesBothEl('Hello World', 'l', 'o') should return 'First element: 3, second element: 2'\", () => {\n  expect(numberOfOccurrencesBothEl('Hello World', 'l', 'o')).to.equal('First element: 3, second element: 2');\n});\n\nit(\"numberOfOccurrencesBothEl('AbC ABC abc aBc', 'a', 'b') should return 'First element: 4, second element: 4'\", () => {\n  expect(numberOfOccurrencesBothEl('AbC ABC abc aBc', 'a', 'b')).to.equal('First element: 4, second element: 4');\n});\n\nit(\"numberOfOccurrencesBothEl('LOCAL coding', 'l', 'c') should return 'First element: 2, second element: 2'\", () => {\n  expect(numberOfOccurrencesBothEl('LOCAL coding', 'l', 'c')).to.equal('First element: 2, second element: 2');\n});\n\nit(\"numberOfOccurrencesBothEl('blue red green', 'R', 'G') should return 'First element: 2, second element: 1'\", () => {\n  expect(numberOfOccurrencesBothEl('blue red green', 'R', 'G')).to.equal('First element: 2, second element: 1');\n});\n\nit(\"numberOfOccurrencesBothEl('PASV', 'a', 'a') should return 'First element: 1, second element: 1'\", () => {\n  expect(numberOfOccurrencesBothEl('PASV', 'a', 'a')).to.equal('First element: 1, second element: 1');\n});\n\nit(\"numberOfOccurrencesBothEl('PASV', 'b', 'c') should return 'First element: 0, second element: 0'\", () => {\n  expect(numberOfOccurrencesBothEl('PASV', 'b', 'c')).to.equal('First element: 0, second element: 0');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}