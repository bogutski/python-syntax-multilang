{
  "_id": "6696c2ca763f0712c198ec28",
  "name": {
    "en": "Split string by element",
    "ru": "Разделить строку по элементу"
  },
  "instruction": {
    "en": "Fix the function `divideByEl` that takes two arguments: a string and an element.\n\nThe function should split a string every time it encounters an element. The division occurs after the element.\n\nFor example:\n* `1w2w3w` split by `w` should return `['1w', '2w', '3w']`\n* `abcabcabc` split by `a` should return `['a', 'bca', 'bca', 'bc']`\n\nAfter splitting, each individual part of the string should be added to the array.\n\nThere are only 3 errors in the function. The `for' loop and the code below are correct.\n\nTry to parse each line of code and understand what it does.\n\n\nExamples of running a function:\n```javascript\ndivideByEl('w12w34w56', 'w'); // ['w', '12w', '34w', '56']\ndivideByEl('abcabcabc', 'b'); // ['ab', 'cab', 'cab', 'c']\ndivideByEl('abc', ''); // ['abc']\n```",
    "ru": "Исправьте функцию `divideByEl`, которая принимает два аргумента: строку и элемент.\n\nФункция должна разделять строку каждый раз, когда встречает элемент. Разделение происходит после элемента.\n\nНапример:\n* `1w2w3w` разделить по `w` должно вернуть `['1w', '2w', '3w']`\n* `abcabcabc` разделить по `a` должно вернуть `['a', 'bca', 'bca', 'bc']`\n\nПосле разделения, каждая отдельная часть строки должна быть добавлена в массив.\n\nВ функции только 3 ошибки. Цикл `for` и код ниже - правильные.\n\nПостарайтесь разобрать каждую строчку кода и понять, что она делает.\n\n\nПримеры запуска функции:\n```javascript\ndivideByEl('w12w34w56', 'w'); // ['w', '12w', '34w', '56']\ndivideByEl('abcabcabc', 'b'); // ['ab', 'cab', 'cab', 'c']\ndivideByEl('abc', ''); // ['abc']\n```"
  },
  "initialSolution": "divideByEl(string, el){\n  cons arr = {};\n  let chunk = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === el){\n      chunk += el;\n      arr.push(chunk);\n      chunk = '';\n    } else {\n      chunk += string[i];\n    }\n  }\n  if(chunk.length !== 0) {\n    arr.push(chunk);\n  }\n  return arr;\n}",
  "completedSolution": "function divideByEl(string, el){\n  const arr = [];\n  let chunk = '';\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === el){\n      chunk += el;\n      arr.push(chunk);\n      chunk = '';\n    } else {\n      chunk += string[i];\n    }\n  }\n  if(chunk.length !== 0) {\n    arr.push(chunk);\n  }\n  return arr;\n}",
  "openTest": "it('Created function divideByEl', () => {\n  expect(divideByEl).to.be.a('function');\n});\n\nit(\"divideByEl('w12w34w56', 'w') should return ['w', '12w', '34w', '56']\", () => {\n  expect(divideByEl('w12w34w56', 'w')).to.eql(['w', '12w', '34w', '56']);\n});\n\nit(\"divideByEl('abcabcabc', 'b') should return ['ab', 'cab', 'cab', 'c']\", () => {\n  expect(divideByEl('abcabcabc', 'b')).to.eql(['ab', 'cab', 'cab', 'c']);\n});\n\nit(\"divideByEl('abc', '') should return ['abc']\", () => {\n  expect(divideByEl('abc', '')).to.eql(['abc']);\n});\n\nit(\"divideByEl('abc', 'a') should return ['a', 'bc']\", () => {\n  expect(divideByEl('abc', 'a')).to.eql(['a', 'bc']);\n});\n\nit(\"divideByEl('1w2w3w4w5', 'w') should return ['1w', '2w', '3w', '4w', '5']\", () => {\n  expect(divideByEl('1w2w3w4w5', 'w')).to.eql(['1w', '2w', '3w', '4w', '5']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}