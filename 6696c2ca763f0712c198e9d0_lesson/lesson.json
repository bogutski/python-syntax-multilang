{
  "_id": "6696c2ca763f0712c198e9d0",
  "content": {
    "ru": "\nЦикл генерирует некую последовательность чисел. \n\nМы можем использовать эти числа, чтобы обращаться к индексам элементов массива или к символам строк.\n\nРассмотрим циклы, в которых значения итератора изменяются от меньшего к большему.\n\nЗададим две переменные: `min` и `max`. Переменная `min` будет хранить минимальное значение, а переменная `max` будет хранить максимальное значение. \nИтератор цикла, переменная `i`, будет последовательно изменятся от минимального до максимального значения с шагом один.\n\n```javascript\nconst min = 12;\nconst max = 52;\n\nfor (let i = min; i <= max; i++){\n    console.log(i);\n}\n\n//12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ... , 52\n```\nВ результате в консоль будут выведена последовательность чисел от `12` до `52` включительно.\n\nМожно изменить шаг итерации, например, увеличивая `i` каждый раз на `3`\n\n```javascript\nconst min = 12;\nconst max = 52;\n\nfor (let i = min; i <= max; i += 3){\n    console.log(i);\n}\n\n//12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51\n```\nВ консоль выведутся числа от `12` до `51` с шагом `3`. \nЧисло `52` выведено не будет, так как `51 + 3 = 54`, а `54 > 52`.\n\nШаг необязательно должен быть целым числом. Можно увеличивать `i` на дробное число, например, на `1.5`\n\n```javascript\nconst min = 12;\nconst max = 52;\n\nfor (let i = min; i <= max; i += 1.5){\n    console.log(i);\n}\n\n//12, 13.5, 15, 16.5, 18, 19.5, 21, 22.5, 24, 25.5, 27, 28.5, 30, 31.5, 33, 34.5, 36, 37.5, 39, 40.5, 42, 43.5, 45, 46.5, 48, 49.5, 51\n```\nВ консоль выведутся числа от `12` до `51` с шагом `1.5`.\n\nМожно задать шаг `0.9`, `0.1` и т.д.\n\n#### Шаг итерации может быть любым числом: целым или дробным, отрицательным или положительным.\n\n### Заполнение массива в цикле\nЕсли мы создадим пустой массив перед запуском цикла, то мы сможем заполнить его значениями, которые генерирует цикл.\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2){\n    arr.push(i);\n}\n\nconsole.log(arr);\n\n//[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]\n```\nВ результате в массив `arr` будут добавлены числа от `12` до `52` с шагом `2` - всего 21 число. \n\nМожно изменять значения перед добавлением их в массив. \n\nНапример, `умножать на 3`:\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2){\n    arr.push(i * 3);\n}\n\nconsole.log(arr);\n\n//[36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156]\n```\n\nИли `возводить в квадрат` или `в куб`:\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2){\n    arr.push(i ** 3);\n}\n\nconsole.log(arr);\n\n//[1728, 2744, 4096, 5832, 8000, 10648, 13824, 17576, 21952, 27000, 32768, 39304, 46656, 54872, 64000, 74088, 85184, 97336, 110592, 125000, 140608]\n```\n### Заполнение строки в цикле\n\nТеперь рассмотрим циклы со строками. \n\nСоздадим пустую строку с помощью ключевого слова `let`, потому что нам нужно будет изменять ее значение в цикле.\nЗапишем в нее числа от `12` до `52` с шагом `2`.\n\n```javascript\nconst min = 12;\nconst max = 52;\nlet str = '';\n\nfor (let i = min; i <= max; i += 2){\n    str += i;\n}\n\nconsole.log(str);\n\n//\"121416182022242628303234363840424446485052\"\n```\nЧисла записались в строку подряд, без пробелов. Такая запись трудно читается.\nМодифицируем цикл, чтобы добавить пробелы `' '`между числами:\n\n```javascript\nconst min = 12;\nconst max = 52;\nlet str = '';\n\nfor (let i = min; i <= max; i += 2){\n    str += i + ' ';\n}\n\nconsole.log(str);\n\n//\"12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 \"\n```\nЗаменим пробелы на минусы `-`:\n```javascript\nconst min = 12;\nconst max = 52;\nlet str = '';\n\nfor (let i = min; i <= max; i += 2){\n    str += i + '-';\n}\n\nconsole.log(str);\n\n//\"12-14-16-18-20-22-24-26-28-30-32-34-36-38-40-42-44-46-48-50-52-\"\n``` \n### Пропуск чисел в цикле\nС помощью операторы `if` можно пропускать некоторые числа в цикле.\n\nНапример, давайте разберемся, как можно пропустить все числа из интервала от `22` до `32`:\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2){\n  if (i >= 22 && i <= 32) arr.push(i);\n}\n\nconsole.log(arr);\n\n//[22, 24, 26, 28, 30, 32]\n```\nЛогический оператор И `&&` означает, что значение `i` должно быть одновременно `больше или равно 22` и `меньше или равно 32`, чтобы выполнилось действие `arr.push(i)`.\nВ результате вместо того, чтобы пропустить числа из заданного интервала, мы пропустили все числа, кроме них.\nТакое решение не соответствует условию задачи, но мы можем пропустить числа из интервала от `22` до `32` с помощью оператора `continue`, если вынесем `arr.push(i)` за пределы оператора `if` на следующую строку:\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2) {\n  if (i >= 22 && i <= 32) continue;\n  arr.push(i);\n}\n\nconsole.log(arr);\n\n//[12, 14, 16, 18, 20, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]\n```\nПереписав условие с использованием логического ИЛИ `||`, можно обойтись без оператора `continue`:\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n    \nfor (let i = min; i <= max; i += 2){\n  if (i < 22 || i > 32) arr.push(i);\n}\n\nconsole.log(arr);\n//[12, 14, 16, 18, 20, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]\n```\n",
    "en": "\nThe cycle generates a sequence of numbers. \n\nWe can use these numbers to refer to array element indices or string characters.\n\nConsider cycles in which iterator values change from less to more.\n\nSet two variables: `min` and `max`. The variable `min` will store the minimum value and the variable `max` will store the maximum value. \nThe iterator of the loop, the variable `i`, will change sequentially from the minimum to the maximum value in steps of one.\n\n```javascript\nconst min = 12;\nconst max = 52;\n\nfor (let i = min; i <= max; i++){\n    console.log(i);\n}\n\n//12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ... , 52\n```\nAs a result, the console will display a sequence of numbers from `12` to `52` inclusive.\n\nYou can change the iteration step, for example, by increasing `i` each time by `3`\n\n```javascript\nconst min = 12;\nconst max = 52;\n\nfor (let i = min; i <= max; i += 3){\n    console.log(i);\n}\n\n//12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51\n```\nThe console will print numbers from `12` to `51` in increments of `3`. \nThe number `52` will not be output because `51 + 3 = 54`, and `54 > 52`.\n\nThe step does not have to be an integer. You can increase `i` by a fractional number, for example, by `1.5`.\n\n```javascript\nconst min = 12;\nconst max = 52;\n\nfor (let i = min; i <= max; i += 1.5){\n    console.log(i);\n}\n\n//12, 13.5, 15, 16.5, 18, 19.5, 21, 22.5, 24, 25.5, 27, 28.5, 30, 31.5, 33, 34.5, 36, 37.5, 39, 40.5, 42, 43.5, 45, 46.5, 48, 49.5, 51\n```\nThe console will display numbers from `12` to `51` in increments of `1.5`.\n\nYou can set the step `0.9`, `0.1`, etc.\n\n#### The iteration step can be any number: integer or fractional, negative or positive.\n\n### Filling an array in a loop\nIf we create an empty array before we run the loop, we can fill it with the values the loop generates.\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2){\n    arr.push(i);\n}\n\nconsole.log(arr);\n\n//[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]\n```\nAs a result, numbers from `12` to `52` will be added to the `arr` array in increments of `2` - a total of 21 numbers. \n\nYou can change values before adding them to an array. \n\nFor example, `multiply by 3`:\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2){\n    arr.push(i * 3);\n}\n\nconsole.log(arr);\n\n//[36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156]\n```\n\nOr `squared` or `cube`:\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2){\n    arr.push(i ** 3);\n}\n\nconsole.log(arr);\n\n//[1728, 2744, 4096, 5832, 8000, 10648, 13824, 17576, 21952, 27000, 32768, 39304, 46656, 54872, 64000, 74088, 85184, 97336, 110592, 125000, 140608]\n```\n### Filling a string in the loop\n\nNow consider loops with strings. \n\nCreate an empty string with the keyword `let`, because we will need to change its value in the loop.\nWrite numbers from `12` to `52` in increments of `2`.\n\n```javascript\nconst min = 12;\nconst max = 52;\nlet str = '';\n\nfor (let i = min; i <= max; i += 2){\n    str += i;\n}\n\nconsole.log(str);\n\n//\"121416182022242628303234363840424446485052\"\n```\nThe numbers are written in a row, without spaces. Such an entry is hard to read.\nWe modify the loop to add spaces `' '` between the numbers:\n\n```javascript\nconst min = 12;\nconst max = 52;\nlet str = '';\n\nfor (let i = min; i <= max; i += 2){\n    str += i + ' ';\n}\n\nconsole.log(str);\n\n//\"12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 \"\n```\nReplace the spaces with the minuses `-`:\n```javascript\nconst min = 12;\nconst max = 52;\nlet str = '';\n\nfor (let i = min; i <= max; i += 2){\n    str += i + '-';\n}\n\nconsole.log(str);\n\n//\"12-14-16-18-20-22-24-26-28-30-32-34-36-38-40-42-44-46-48-50-52-\"\n``` \n### Skipping numbers in a loop\nYou can use the `if` operators to skip some numbers in the loop.\n\nFor example, let's figure out how we can skip all the numbers in the interval from `22` to `32`:\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2){\n  if (i >= 22 && i <= 32) arr.push(i);\n}\n\nconsole.log(arr);\n\n//[22, 24, 26, 28, 30, 32]\n```\nThe logical operator AND `&&` means that the value of `i` must be both `exceed or equal to 22` and `less than or equal to 32` in order for the action `arr.push(i)` to be executed.\nAs a result, instead of skipping numbers from the given interval, we skipped all numbers except them.\nThis solution does not satisfy the problem, but we can skip the numbers from `22` to `32` with the `continue` operator if we put `arr.push(i)` outside the `if` operator on the next line:\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2) {\n  if (i >= 22 && i <= 32) continue;\n  arr.push(i);\n}\n\nconsole.log(arr);\n\n//[12, 14, 16, 18, 20, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]\n```\nBy rewriting the condition using the logical OR `||` you can do without the `continue` operator:\n\n```javascript\nconst min = 12;\nconst max = 52;\nconst arr = [];\n\nfor (let i = min; i <= max; i += 2){\n  if (i < 22 || i > 32) arr.push(i);\n}\n\nconsole.log(arr);\n//[12, 14, 16, 18, 20, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]\n```\n",
    "es": "# Цикл от меньшего к большему language: es"
  },
  "video": {
    "ru": "https://youtu.be/nSUgkd9vDGM",
    "en": "",
    "es": ""
  }
}