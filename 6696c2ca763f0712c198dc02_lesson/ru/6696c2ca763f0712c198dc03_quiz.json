{
  "name": "JS Syntax. Динамически типизированные переменные",
  "questions": {
    "0": {
      "name": "JavaScript – это",
      "variants": {
        "0": {
          "name": "строго типизированный язык"
        },
        "1": {
          "name": "динамично типизированный язык"
        },
        "2": {
          "name": "нетипизированный язык"
        }
      }
    },
    "1": {
      "name": "Какие типы данных в JavaScript вы знаете?",
      "variants": {
        "0": {
          "name": "text"
        },
        "1": {
          "name": "string"
        },
        "2": {
          "name": "integer"
        },
        "3": {
          "name": "number"
        }
      }
    },
    "2": {
      "description": "```\nconst x = 'string';\n```",
      "name": "Для получения типа данных, присвоенных в переменную x, можно использовать",
      "variants": {
        "0": {
          "name": "typeof x"
        },
        "1": {
          "name": "typeOf x"
        },
        "2": {
          "name": "typeof(x)"
        },
        "3": {
          "name": "x.type()"
        }
      }
    },
    "3": {
      "name": "Выберите верные утверждения об операторе typeof.",
      "variants": {
        "0": {
          "name": "typeof возвращает строку, в которую записано, какой тип данных содержится в операнде."
        },
        "1": {
          "name": "typeof может быть использован как оператор \"typeof x\" и как функция \"typeof(x)\"."
        },
        "2": {
          "name": "typeof может использоваться для определения типов переменных, простых значений и выражений."
        },
        "3": {
          "name": "После использования typeof тип переменной нельзя изменять."
        }
      }
    },
    "4": {
      "name": "В JavaScript при создании переменной не нужно указывать ее тип. В ходе выполнения программы тип переменной может меняться.",
      "variants": {
        "0": {
          "name": "Это утверждение верно"
        },
        "1": {
          "name": "Это утверждение неверно"
        }
      }
    }
  }
}