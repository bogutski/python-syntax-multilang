{
  "_id": "6696c2ca763f0712c198dc1b",
  "name": {
    "en": "What type does the string have?",
    "ru": "Какой тип имеет строка?"
  },
  "instruction": {
    "en": "Create a variable named `message` and assign it the value 'hello world'.\nCreate a variable `typeOfMessage` and assign it the value of the `message` variable type.\n\nHere is an example that is fundamentally similar to what you need to do,\nbut adapt it to the requirements of the task:\n```javascript\nconst hi = 'good morning';\nconst typeOfHi = typeof(hi);\n```",
    "ru": "Создайте переменную с именем `message` и присвойте ей значение `'hello world'`.\nСоздайте переменную `typeOfMessage` и присвойте ей значение типа переменной `message`.\n\nПриведем пример, который принципиально похож на то, что нужно сделать,\nно адаптируйте его к требованиям задачи:\n```javascript\nconst hi = 'good morning';\nconst typeOfHi = typeof(hi);\n```"
  },
  "initialSolution": "",
  "completedSolution": "const message = 'hello world';\nconst typeOfMessage = typeof (message);",
  "openTest": "it('the `message` variable exists and has a value', () => {\n  expect(message).not.undefined;\n});\n\nit('the variable `message` is of type string', () => {\n  expect(message).a('string');\n});\n\nit('the variable `message` is `hello world`', () => {\n  expect(message).eq('hello world');\n});\n\nit('the variable `typeOfMessage` exists and has a value', () => {\n  expect(typeOfMessage).not.undefined;\n});\n\nit('the variable `typeOfMessage` has type string', () => {\n  expect(typeOfMessage).a('string');\n});\n\nit('the variable `typeOfMessage` is `string`', () => {\n  expect(typeOfMessage).equal('string');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "```javascript\nconst message = 'hello world';\nconst typeOfMessage = typeof (message);\n```",
    "ru": "```javascript\nconst message = 'hello world';\nconst typeOfMessage = typeof (message);\n```"
  }
}