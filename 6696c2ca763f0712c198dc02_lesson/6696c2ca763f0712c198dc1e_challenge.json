{
  "_id": "6696c2ca763f0712c198dc1e",
  "name": {
    "en": "Changing the variable type",
    "ru": "Изменение типа переменной"
  },
  "instruction": {
    "en": "Create a `chameleon` variable using the `let` keyword and assign it the numeric value `123`.\n\nCreate a variable named `chameleonCopy` and assign it the value of the `chameleon` variable.\n\nCreate a variable named `typeOfChameleon` and assign it the value of the `chameleon` variable type.\n\nWrite the new value of the string `\"i am chameleon\"` to the variable `chameleon`.\n\nCreate a `typeOfChameleonAfterChange` variable and assign it the value of the `chameleon` variable type.\n\nHere is an example that is fundamentally similar to what you need to do,\nbut adapt it to the requirements of the task:\n```javascript\nlet zero = 0;\nconst typeOfZero = typeof(zero); // \"number\"\nzero = \"zero\";\nconst typeOfZeroAfterChange = typeof(zero); // \"string\".\n```",
    "ru": "Создайте переменную `chameleon` с использованием ключевого слова `let` и присвойте ей числовое значение `123`.\n\nСоздайте переменную с именем `chameleonCopy` и присвойте ей значение переменной `chameleon`.\n\nСоздайте переменную с именем `typeOfChameleon` и присвойте ей значение типа переменной `chameleon`.\n\nЗапишите в переменную `chameleon` новое значение строку `\"i am chameleon\"`.\n\nСоздайте переменную `typeOfChameleonAfterChange` и присвойте ей значение типа переменной `chameleon`.\n\nПриведем пример, который принципиально похож на то, что нужно сделать,\nно адаптируйте его к требованиям задачи:\n```javascript\nlet zero = 0;\nconst typeOfZero = typeof(zero);                      // \"number\"\nzero = \"zero\";\nconst typeOfZeroAfterChange = typeof(zero);           // \"string\"\n```"
  },
  "initialSolution": "",
  "completedSolution": "let chameleon = 123;\nconst chameleonCopy = chameleon;\nconst typeOfChameleon = typeof (chameleon);\nchameleon = \"i am chameleon\";\nconst typeOfChameleonAfterChange = typeof (chameleon);",
  "openTest": "it('the `chameleonCopy` variable exists and has a value', () => {\n  expect(chameleonCopy).not.undefined;\n});\n\nit('the variable `chameleonCopy` is of type number', () => {\n  expect(chameleonCopy).a('number');\n});\n\nit('the variable `chameleonCopy` is equal to 123', () => {\n  expect(chameleonCopy).equal(123);\n});\n\nit('the variable `typeOfChameleon` exists and has a value', () => {\n  expect(typeOfChameleon).not.undefined;\n});\n\nit('the variable `typeOfChameleon` is of type string', () => {\n  expect(typeOfChameleon).a('string');\n});\n\nit('the `typeOfChameleon` variable is equal to \"number\"', () => {\n  expect(typeOfChameleon).equal('number');\n});\n\nit('the `chameleon` variable exists and has a value', () => {\n  expect(chameleon).not.undefined;\n});\n\nit('the variable `chameleon` is of type string', () => {\n  expect(chameleon).a('string');\n});\n\nit('the variable `chameleon` is equal to \"i am chameleon\"', () => {\n  expect(chameleon).equal(\"i am chameleon\");\n});\n\nit('the variable `typeOfChameleonAfterChange` exists and has a value', () => {\n  expect(typeOfChameleonAfterChange).not.undefined;\n});\n\nit('the variable `typeOfChameleonAfterChange` is of type string', () => {\n  expect(typeOfChameleonAfterChange).a('string');\n});\n\nit('the `typeOfChameleonAfterChange` variable is equal to \"string\"', () => {\n  expect(typeOfChameleonAfterChange).equal('string');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "```javascript\nlet chameleon = 123;\nconst chameleonCopy = chameleon;\nconst typeOfChameleon = typeof (chameleon);\nchameleon = \"i am chameleon\";\nconst typeOfChameleonAfterChange = typeof (chameleon);\n```",
    "ru": "```javascript\nlet chameleon = 123;\nconst chameleonCopy = chameleon;\nconst typeOfChameleon = typeof (chameleon);\nchameleon = \"i am chameleon\";\nconst typeOfChameleonAfterChange = typeof (chameleon);\n```"
  }
}