{
  "_id": "6696c2cb763f0712c198f5f1",
  "name": {
    "en": "/*",
    "ru": "Сортировка строк по длине"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortStringsByLength`, которая принимает массив строк и возвращает новый массив, содержащий те же строки, отсортированные по возрастанию длины.\n\n\nПримеры запуска функции:\n```javascript\nsortStringsByLength([\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]);\n// [ 'kiwi', 'apple', 'grape', 'banana', 'orange' ]\n\nsortStringsByLength([\"table\", \"office chair\", \"knife\", \"plates\", \"cup\"]);\n// [ 'cup', 'table', 'knife', 'plates', 'office chair' ]\n```"
  },
  "initialSolution": "function sortStringsByLength(){\n\n}",
  "completedSolution": "function sortStringsByLength(arr) {\n  return arr.slice().sort((a, b) => a.length - b.length);\n}",
  "openTest": "it('Created function sortStringsByLength', () => {\n  expect(sortStringsByLength).to.be.a('function');\n});\n\nit('Function sortStringsByLength should include method sort()', () => {\n  const res = sortStringsByLength.toString()\n  expect(res).to.include('.sort(')\n});\n\nit('sortStringsByLength([\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"]) should return [\"kiwi\", \"apple\", \"grape\", \"banana\", \"orange\"]', () => {\n  expect(sortStringsByLength([\"apple\", \"banana\", \"grape\", \"kiwi\", \"orange\"])).to.deep.equal([\"kiwi\", \"apple\", \"grape\", \"banana\", \"orange\"]);\n});\n\nit('sortStringsByLength([\"table\", \"office chair\", \"knife\", \"plates\", \"cup\"]) should return [\"cup\", \"table\", \"knife\", \"plates\", \"office chair\"]', () => {\n  expect(sortStringsByLength([\"table\", \"office chair\", \"knife\", \"plates\", \"cup\"])).to.deep.equal([\"cup\", \"table\", \"knife\", \"plates\", \"office chair\"]);\n});\n\nit('sortStringsByLength([]) should return []', () => {\n  expect(sortStringsByLength([])).to.deep.equal([]);\n});\n\nit('sortStringsByLength([\"word\"]) should return [\"word\"]', () => {\n  expect(sortStringsByLength([\"word\"])).to.deep.equal([\"word\"]);\n});\n\nit('sortStringsByLength([\"it\", \"words\", \"to\", \"short\"]) should return [\"it\", \"to\", \"words\", \"short\"]', () => {\n  expect(sortStringsByLength([\"it\", \"words\", \"to\", \"short\"])).to.deep.equal([\"it\", \"to\", \"words\", \"short\"]);\n});\n\nit('sortStringsByLength([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) should return [\"one\", \"two\", \"six\", \"four\", \"five\", \"three\"]', () => {\n  expect(sortStringsByLength([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"])).to.deep.equal([\"one\", \"two\", \"six\", \"four\", \"five\", \"three\"]);\n});\n\nit('sortStringsByLength([\"b\", \"a\", \"c\"]) should return [\"b\", \"a\", \"c\"] based on length', () => {\n  expect(sortStringsByLength([\"b\", \"a\", \"c\"])).to.deep.equal([\"b\", \"a\", \"c\"]);\n});\n\nit('sortStringsByLength([\"hello\", \"world!\", \"this\", \"is\", \"great\"]) should sort by length to [\"is\", \"this\", \"hello\", \"great\", \"world!\"]', () => {\n  expect(sortStringsByLength([\"hello\", \"world!\", \"this\", \"is\", \"great\"])).to.deep.equal([\"is\", \"this\", \"hello\", \"great\", \"world!\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}