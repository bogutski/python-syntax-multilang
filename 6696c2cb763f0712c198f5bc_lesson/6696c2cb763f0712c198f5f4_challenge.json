{
  "_id": "6696c2cb763f0712c198f5f4",
  "name": {
    "en": "/*",
    "ru": "Сортировка массива объектов по дате в указанном направлении"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortObjectsByDate`, которая принимает:\n\n * массив объектов, каждый из которых содержит свойства `info` и `date`.\n * второй параметр `direction`, который может быть \"Ascending\" или \"Descending\", указывающий направление сортировки.\n\nФункция должна возвращать новый массив, содержащий объекты, отсортированные по дате в указанном направлении.\n\n\nПримеры запуска функции:\n```javascript\nconst events = [\n  { info: \"Event 1\", date: new Date(2021, 6, 10) },\n  { info: \"Event 2\", date: new Date(2020, 5, 20) },\n  { info: \"Event 3\", date: new Date(2021, 6, 15) }\n];\n\nconsole.log(sortObjectsByDate(events, \"Ascending\"));\n// Вывод: [\n// { info: \"Event 2\", date: Date(\"2020-06-20\") },\n// { info: \"Event 1\", date: Date(\"2021-07-10\") },\n// { info: \"Event 3\", date: Date(\"2021-07-15\") }]\n\nconsole.log(sortObjectsByDate(events, \"Descending\"));\n// Вывод: [\n// { info: \"Event 3\", date: Date(\"2021-07-15\") },\n// { info: \"Event 1\", date: Date(\"2021-07-10\") },\n// { info: \"Event 2\", date: Date(\"2020-06-20\") }]\n```"
  },
  "initialSolution": "function sortObjectsByDate(){\n\n}",
  "completedSolution": "function sortObjectsByDate(arr, sort) {\n  return arr.slice().sort((a, b) => {\n    return sort === 'Ascending' ? a.date - b.date : b.date - a.date\n  });\n}",
  "openTest": "it('Created function sortObjectsByDate', () => {\n  expect(sortObjectsByDate).to.be.a('function');\n});\n\nit('Function sortObjectsByDate should include method sort()', () => {\n  const res = sortObjectsByDate.toString()\n  expect(res).to.include('.sort(')\n});\n\nit('sortObjectsByDate(events, \"Ascending\") should sort dates from earliest to latest', () => {\n  const events = [\n    { info: \"Event 1\", date: new Date(2021, 6, 10) },\n    { info: \"Event 2\", date: new Date(2020, 5, 20) },\n    { info: \"Event 3\", date: new Date(2021, 6, 15) }\n  ];\n  const sorted = sortObjectsByDate(events, \"Ascending\");\n  expect(sorted[0].info).to.equal(\"Event 2\");\n  expect(sorted[1].info).to.equal(\"Event 1\");\n  expect(sorted[2].info).to.equal(\"Event 3\");\n});\n\nit('sortObjectsByDate(events, \"Descending\") should sort dates from latest to earliest', () => {\n  const events = [\n    { info: \"Event 1\", date: new Date(2021, 6, 10) },\n    { info: \"Event 2\", date: new Date(2020, 5, 20) },\n    { info: \"Event 3\", date: new Date(2021, 6, 15) }\n  ];\n  const sorted = sortObjectsByDate(events, \"Descending\");\n  expect(sorted[0].info).to.equal(\"Event 3\");\n  expect(sorted[1].info).to.equal(\"Event 1\");\n  expect(sorted[2].info).to.equal(\"Event 2\");\n});\n\nit('sortObjectsByDate([], \"Ascending\") should return an empty array', () => {\n  expect(sortObjectsByDate([], \"Ascending\")).to.deep.equal([]);\n});\n\nit('sortObjectsByDate([], \"Descending\") should return an empty array', () => {\n  expect(sortObjectsByDate([], \"Descending\")).to.deep.equal([]);\n});\n\nit('sortObjectsByDate(events, \"Ascending\") handles dates with same day but different times', () => {\n  const events = [\n    { info: \"Morning Event\", date: new Date(2021, 6, 10, 9, 0) },\n    { info: \"Evening Event\", date: new Date(2021, 6, 10, 18, 0) }\n  ];\n  const sorted = sortObjectsByDate(events, \"Ascending\");\n  expect(sorted[0].info).to.equal(\"Morning Event\");\n  expect(sorted[1].info).to.equal(\"Evening Event\");\n});\n\nit('sortObjectsByDate(events, \"Descending\") handles dates with same day but different times', () => {\n  const events = [\n    { info: \"Morning Event\", date: new Date(2021, 6, 10, 9, 0) },\n    { info: \"Evening Event\", date: new Date(2021, 6, 10, 18, 0) }\n  ];\n  const sorted = sortObjectsByDate(events, \"Descending\");\n  expect(sorted[0].info).to.equal(\"Evening Event\");\n  expect(sorted[1].info).to.equal(\"Morning Event\");\n});\n\nit('sortObjectsByDate(events, \"Ascending\") handles different years correctly', () => {\n  const events = [\n    { info: \"Old Event\", date: new Date(2019, 0, 1) },\n    { info: \"New Event\", date: new Date(2021, 0, 1) }\n  ];\n  const sorted = sortObjectsByDate(events, \"Ascending\");\n  expect(sorted[0].info).to.equal(\"Old Event\");\n  expect(sorted[1].info).to.equal(\"New Event\");\n});\n\nit('sortObjectsByDate(events, \"Descending\") handles different years correctly', () => {\n  const events = [\n    { info: \"Old Event\", date: new Date(2019, 0, 1) },\n    { info: \"New Event\", date: new Date(2021, 0, 1) }\n  ];\n  const sorted = sortObjectsByDate(events, \"Descending\");\n  expect(sorted[0].info).to.equal(\"New Event\");\n  expect(sorted[1].info).to.equal(\"Old Event\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}