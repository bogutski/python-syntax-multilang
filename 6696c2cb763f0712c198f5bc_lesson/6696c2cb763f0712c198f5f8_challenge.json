{
  "_id": "6696c2cb763f0712c198f5f8",
  "name": {
    "en": "/*",
    "ru": "Универсальная сортировка массива объектов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortObjectsByKey`, которая принимает:\n\n * массив объектов,\n * ключ, по которому необходимо сортировать,\n * направление сортировки (\"Ascending\" или \"Descending\").\n\n Функция должна возвращать новый массив, содержащий объекты, отсортированные по указанному ключу в указанном направлении.\n\n\nПримеры запуска функции:\n```javascript\nconst items = [\n  { name: \"Table\", price: 720 },\n  { name: \"Chair\", price: 85 },\n  { name: \"Lamp\", price: 35 }\n];\n\nconsole.log(sortObjectsByKey(items, 'price', 'Ascending'));\n// Вывод: [{ name: \"Lamp\", price: 35 }, { name: \"Chair\", price: 85 }, { name: \"Table\", price: 720 }]\n\nconsole.log(sortObjectsByKey(items, 'name', 'Descending'));\n// Вывод: [{ name: \"Table\", price: 720 }, { name: \"Chair\", price: 85 }, { name: \"Lamp\", price: 35 }]\n```"
  },
  "initialSolution": "function sortObjectsByKey(){\n\n}",
  "completedSolution": "function sortObjectsByKey(arr, key, typeOfSort) {\n  return arr.slice().sort((a, b) => {\n    return typeOfSort === 'Ascending' ? a[key] - b[key] : b[key] - a[key]\n  });\n}",
  "openTest": "it('Created function sortObjectsByKey', () => {\n  expect(sortObjectsByKey).to.be.a('function');\n});\n\nit('Function sortObjectsByKey should include method sort()', () => {\n  const res = sortObjectsByKey.toString()\n  expect(res).to.include('.sort(')\n});\n\nit('sortObjectsByKey should sort by price in ascending order', () => {\n  const items = [\n    { name: \"Table\", price: 720 },\n    { name: \"Chair\", price: 85 },\n    { name: \"Lamp\", price: 35 }\n  ];\n  expect(sortObjectsByKey(items, 'price', 'Ascending')).to.deep.equal([\n    { name: \"Lamp\", price: 35 },\n    { name: \"Chair\", price: 85 },\n    { name: \"Table\", price: 720 }\n  ]);\n});\n\nit('sortObjectsByKey should sort by name in descending order', () => {\n  const items = [\n    { name: \"Table\", price: 720 },\n    { name: \"Chair\", price: 85 },\n    { name: \"Lamp\", price: 35 }\n  ];\n  expect(sortObjectsByKey(items, 'name', 'Descending')).to.deep.equal([\n    { name: \"Table\", price: 720 },\n    { name: \"Chair\", price: 85 },\n    { name: \"Lamp\", price: 35 }\n  ]);\n});\n\nit('sortObjectsByKey with an empty array should return an empty array', () => {\n  expect(sortObjectsByKey([], 'price', 'Ascending')).to.deep.equal([]);\n});\n\nit('sortObjectsByKey should handle non-existent keys gracefully', () => {\n  const items = [\n    { name: \"Table\", price: 720 },\n    { name: \"Chair\", price: 85 },\n    { name: \"Lamp\", price: 35 }\n  ];\n  expect(sortObjectsByKey(items, 'color', 'Ascending')).to.deep.equal(items);\n});\n\nit('sortObjectsByKey should not alter the original array', () => {\n  const items = [\n    { name: \"Chair\", price: 85 },\n    { name: \"Table\", price: 720 },\n    { name: \"Lamp\", price: 35 }\n  ];\n  sortObjectsByKey(items, 'price', 'Ascending');\n  expect(items).to.deep.equal([\n    { name: \"Chair\", price: 85 },\n    { name: \"Table\", price: 720 },\n    { name: \"Lamp\", price: 35 }\n  ]);\n});\n\nit('sortObjectsByKey should correctly sort arrays with mixed data types for keys', () => {\n  const items = [\n    { name: \"Book\", price: \"100\" },\n    { name: \"Pen\", price: 50 }\n  ];\n  expect(sortObjectsByKey(items, 'price', 'Ascending')[0].name).to.equal(\"Pen\");\n});\n\nit('sortObjectsByKey should sort based on numeric values when key values are numbers', () => {\n  const items = [\n    { name: \"Desk\", height: 120 },\n    { name: \"Stool\", height: 45 }\n  ];\n  expect(sortObjectsByKey(items, 'height', 'Descending')[0].name).to.equal(\"Desk\");\n});\n\nit('sortObjectsByKey should treat numeric strings properly when direction is specified', () => {\n  const items = [\n    { name: \"Laptop\", weight: \"2\" },\n    { name: \"Monitor\", weight: \"10\" }\n  ];\n  expect(sortObjectsByKey(items, 'weight', 'Descending')[0].name).to.equal(\"Monitor\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}