{
  "_id": "6696c2cb763f0712c198f5f9",
  "name": {
    "en": "/*",
    "ru": "Множественная условная сортировка с динамическими параметрами"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `multiSort`, которая принимает массив объектов для сортировки и массив параметров сортировки.\n\nКаждый элемент параметров сортировки представляет собой массив с тремя значениями:\n\n * Булево значение, указывающее, должен ли данный критерий использоваться для сортировки.\n * Строка, указывающая направление сортировки ('Ascending' или 'Descending').\n * Ключ объекта, по которому следует проводить сортировку.\n\nФункция возвращает новый массив, содержащий объекты, отсортированные согласно указанным параметрам.\n\nЕсли массив параметров сортировки пуст, функция возвращает строку: `Sorting parameters are empty`.\n\n\nПримеры запуска функции:\n```javascript\nconst items = [\n  { name: \"Table\", weight: 34, price: 50 },\n  { name: \"Chair\", weight: 10, price: 20 },\n  { name: \"Lamp\", weight: 5, price: 50 }\n];\n\nconst sortParams1 = [\n  [true, 'Ascending', 'weight'],\n  [true, 'Descending', 'price']\n];\n\nconsole.log(multiSort(items, sortParams1));\n// Вывод: [\n//   { name: 'Lamp', weight: 5, price: 50 },\n//   { name: 'Table', weight: 34, price: 50 },\n//   { name: 'Chair', weight: 10, price: 20 }\n// ]\n\n\nconst sortParams2 = [];\n\nconsole.log(multiSort(items, sortParams2));\n// Вывод: \"Sorting parameters are empty\"\n```"
  },
  "initialSolution": "function multiSort(){\n\n}",
  "completedSolution": "function multiSort(arr, sortParam) {\n  if(!sortParam.length) return 'Sorting parameters are empty'\n\n  let res = [...arr]\n\n  sortParam.forEach(el => {\n    const [isTrue, type, key] = el\n\n    if(isTrue) res.sort((a, b) => type === 'Ascending' ? a[key] - b[key] : b[key] - a[key])\n  })\n\n  return res;\n}",
  "openTest": "it('Created function multiSort', () => {\n  expect(multiSort).to.be.a('function');\n});\n\nit('Function multiSort should include method sort()', () => {\n  const res = multiSort.toString()\n  expect(res).to.include('.sort(')\n});\n\nit('multiSort should correctly apply multiple sorting parameters on numeric values', () => {\n  const items = [\n    { name: \"Table\", weight: 34, price: 50 },\n    { name: \"Chair\", weight: 10, price: 20 },\n    { name: \"Lamp\", weight: 5, price: 50 }\n  ];\n  const sortParams = [\n    [true, 'Ascending', 'weight'],\n    [true, 'Descending', 'price']\n  ];\n  expect(multiSort(items, sortParams)).to.deep.equal([\n    { name: \"Lamp\", weight: 5, price: 50 },\n    { name: \"Table\", weight: 34, price: 50 },\n    { name: \"Chair\", weight: 10, price: 20 }\n  ]);\n});\n\nit('multiSort should return an error message if the sorting parameters array is empty', () => {\n  expect(multiSort([], [])).to.equal('Sorting parameters are empty');\n});\n\nit('multiSort should handle a single sorting criterion based on numeric values', () => {\n  const items = [\n    { name: \"Lamp\", weight: 5, price: 50 },\n    { name: \"Chair\", weight: 10, price: 20 }\n  ];\n  const sortParams = [\n    [true, 'Ascending', 'price']\n  ];\n  expect(multiSort(items, sortParams)[0].name).to.equal(\"Chair\");\n});\n\nit('multiSort should handle sorting parameters that do not affect the order when false', () => {\n  const items = [\n    { name: \"Lamp\", weight: 5, price: 50 },\n    { name: \"Chair\", weight: 10, price: 20 }\n  ];\n  const sortParams = [\n    [false, 'Descending', 'price']\n  ];\n  expect(multiSort(items, sortParams)).to.deep.equal(items);\n});\n\nit('multiSort should preserve the original array', () => {\n  const items = [\n    { name: \"Lamp\", weight: 5, price: 50 },\n    { name: \"Chair\", weight: 10, price: 20 }\n  ];\n  const originalItems = [...items];\n  const sortParams = [\n    [true, 'Ascending', 'price']\n  ];\n  multiSort(items, sortParams);\n  expect(items).to.deep.equal(originalItems);\n});\n\nit('multiSort should correctly sort items when all elements are set to sort by the same criterion in descending order', () => {\n  const items = [\n    { name: \"Monitor\", weight: 27, price: 150 },\n    { name: \"Laptop\", weight: 15, price: 120 }\n  ];\n  const sortParams = [\n    [true, 'Descending', 'price']\n  ];\n  expect(multiSort(items, sortParams)[0].name).to.equal(\"Monitor\");\n});\n\nit('multiSort should not change the array order when sorting by non-existent keys', () => {\n  const items = [\n    { name: \"Desk\", weight: 15 },\n    { name: \"Chair\", weight: 10 }\n  ];\n  const sortParams = [\n    [true, 'Ascending', 'height']  // 'height' does not exist in items\n  ];\n  expect(multiSort(items, sortParams)).to.deep.equal(items);\n});\n\nit('multiSort should sort based on a single numeric key when multiple criteria are provided but only one is active', () => {\n  const items = [\n    { name: \"Desk\", weight: 20 },\n    { name: \"Chair\", weight: 10 }\n  ];\n  const sortParams = [\n    [false, 'Ascending', 'price'],  // Inactive sorting by 'price'\n    [true, 'Ascending', 'weight']   // Active sorting by 'weight'\n  ];\n  expect(multiSort(items, sortParams)[0].name).to.equal(\"Chair\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}