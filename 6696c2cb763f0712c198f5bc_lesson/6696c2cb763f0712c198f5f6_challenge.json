{
  "_id": "6696c2cb763f0712c198f5f6",
  "name": {
    "en": "/*",
    "ru": "Сортировка сотрудников по отделам и стажу работы"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortEmployeesByDepartmentAndExperience`, которая принимает массив объектов сотрудников.\n\nКаждый объект содержит свойства `name`, `department` и `yearsOfExperience`.\n\nФункция должна возвращать новый массив, содержащий сотрудников, отсортированных сначала по отделу в алфавитном порядке, а затем по стажу работы в порядке убывания.\n\n\nПримеры запуска функции:\n```javascript\nconst employees = [\n  { name: \"John Smith\", department: \"Finance\", yearsOfExperience: 2 },\n  { name: \"Jane Doe\", department: \"IT\", yearsOfExperience: 5 },\n  { name: \"Mary Johnson\", department: \"Finance\", yearsOfExperience: 8 },\n  { name: \"James Brown\", department: \"IT\", yearsOfExperience: 3 }\n];\n\nconsole.log(sortEmployeesByDepartmentAndExperience(employees));\n// Вывод: [\n//   { name: \"Mary Johnson\", department: \"Finance\", yearsOfExperience: 8 },\n//   { name: \"John Smith\", department: \"Finance\", yearsOfExperience: 2 },\n//   { name: \"Jane Doe\", department: \"IT\", yearsOfExperience: 5 },\n//   { name: \"James Brown\", department: \"IT\", yearsOfExperience: 3 }\n// ]\n```"
  },
  "initialSolution": "function sortEmployeesByDepartmentAndExperience(){\n\n}",
  "completedSolution": "function sortEmployeesByDepartmentAndExperience(arr) {\n  let res = arr.slice().sort((a, b) => a.department.localeCompare(b.department))\n\n  res.sort((a, b) => {\n    if(b.department === a.department) return b.yearsOfExperience - a.yearsOfExperience\n  })\n\n  return res;\n}",
  "openTest": "it('Created function sortEmployeesByDepartmentAndExperience', () => {\n  expect(sortEmployeesByDepartmentAndExperience).to.be.a('function');\n});\n\nit('Function sortEmployeesByDepartmentAndExperience should include method sort()', () => {\n  const res = sortEmployeesByDepartmentAndExperience.toString()\n  expect(res).to.include('.sort(')\n});\n\nit('sortEmployeesByDepartmentAndExperience should sort by department alphabetically and by experience descending within the same department', () => {\n  const employees = [\n    { name: \"John Smith\", department: \"Finance\", yearsOfExperience: 2 },\n    { name: \"Jane Doe\", department: \"IT\", yearsOfExperience: 5 },\n    { name: \"Mary Johnson\", department: \"Finance\", yearsOfExperience: 8 },\n    { name: \"James Brown\", department: \"IT\", yearsOfExperience: 3 }\n  ];\n  expect(sortEmployeesByDepartmentAndExperience(employees)).to.deep.equal([\n    { name: \"Mary Johnson\", department: \"Finance\", yearsOfExperience: 8 },\n    { name: \"John Smith\", department: \"Finance\", yearsOfExperience: 2 },\n    { name: \"Jane Doe\", department: \"IT\", yearsOfExperience: 5 },\n    { name: \"James Brown\", department: \"IT\", yearsOfExperience: 3 }\n  ]);\n});\n\nit('sortEmployeesByDepartmentAndExperience with an empty array should return an empty array', () => {\n  expect(sortEmployeesByDepartmentAndExperience([])).to.deep.equal([]);\n});\n\nit('sortEmployeesByDepartmentAndExperience with employees from the same department should sort only by experience', () => {\n  const employees = [\n    { name: \"Alice Green\", department: \"Marketing\", yearsOfExperience: 10 },\n    { name: \"Bob Grey\", department: \"Marketing\", yearsOfExperience: 3 }\n  ];\n  expect(sortEmployeesByDepartmentAndExperience(employees)).to.deep.equal([\n    { name: \"Alice Green\", department: \"Marketing\", yearsOfExperience: 10 },\n    { name: \"Bob Grey\", department: \"Marketing\", yearsOfExperience: 3 }\n  ]);\n});\n\nit('sortEmployeesByDepartmentAndExperience should handle multiple departments and different levels of experience', () => {\n  const employees = [\n    { name: \"Carl Blue\", department: \"HR\", yearsOfExperience: 4 },\n    { name: \"Diane Yellow\", department: \"HR\", yearsOfExperience: 12 },\n    { name: \"Eve White\", department: \"Operations\", yearsOfExperience: 7 }\n  ];\n  expect(sortEmployeesByDepartmentAndExperience(employees)).to.deep.equal([\n    { name: \"Diane Yellow\", department: \"HR\", yearsOfExperience: 12 },\n    { name: \"Carl Blue\", department: \"HR\", yearsOfExperience: 4 },\n    { name: \"Eve White\", department: \"Operations\", yearsOfExperience: 7 }\n  ]);\n});\n\nit('sortEmployeesByDepartmentAndExperience should correctly sort a list where all employees have the same years of experience but different departments', () => {\n  const employees = [\n    { name: \"Fred Black\", department: \"Sales\", yearsOfExperience: 5 },\n    { name: \"Gina Pink\", department: \"Legal\", yearsOfExperience: 5 }\n  ];\n  expect(sortEmployeesByDepartmentAndExperience(employees)).to.deep.equal([\n    { name: \"Gina Pink\", department: \"Legal\", yearsOfExperience: 5 },\n    { name: \"Fred Black\", department: \"Sales\", yearsOfExperience: 5 }\n  ]);\n});\n\nit('sortEmployeesByDepartmentAndExperience should preserve the order of names within the same department and experience level', () => {\n  const employees = [\n    { name: \"Hank Red\", department: \"Development\", yearsOfExperience: 9 },\n    { name: \"Ivy Orange\", department: \"Development\", yearsOfExperience: 9 }\n  ];\n  expect(sortEmployeesByDepartmentAndExperience(employees)).to.deep.equal([\n    { name: \"Hank Red\", department: \"Development\", yearsOfExperience: 9 },\n    { name: \"Ivy Orange\", department: \"Development\", yearsOfExperience: 9 }\n  ]);\n});\n\nit('sortEmployeesByDepartmentAndExperience should sort correctly with mixed case department names', () => {\n  const employees = [\n    { name: \"Julie Teal\", department: \"development\", yearsOfExperience: 2 },\n    { name: \"Kyle Maroon\", department: \"Development\", yearsOfExperience: 5 }\n  ];\n  expect(sortEmployeesByDepartmentAndExperience(employees)).to.deep.equal([\n      { name: \"Julie Teal\", department: \"development\", yearsOfExperience: 2 },\n      { name: \"Kyle Maroon\", department: \"Development\", yearsOfExperience: 5 }\n  ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}