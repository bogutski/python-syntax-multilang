{
  "_id": "6696c2cb763f0712c198f5bc",
  "content": {
    "ru": "Метод `Array.prototype.sort()` — это мощный инструмент JavaScript для сортировки массивов. \n\nОн изменяет порядок элементов в массиве на месте и возвращает отсортированный массив. \n\nЭтот метод особенно полезен, когда необходимо упорядочить данные по какому-либо критерию.\n\n\n### Основы метода `sort()`\n\nМетод `sort()` вызывается на массиве и по умолчанию сортирует его элементы как строки в лексикографическом порядке:\n\n```javascript\nconst fruits = ['banana', 'apple', 'pear'];\nfruits.sort();\nconsole.log(fruits); // Вывод: ['apple', 'banana', 'pear']\n```\n\n\nЭто поведение полезно, когда вы работаете со строками. Однако, когда дело доходит до чисел, стандартное поведение может привести к неожиданным результатам:\n\n```javascript\nconst numbers = [10, 5, 1, 44, 20];\nnumbers.sort();\nconsole.log(numbers); // Вывод: [1, 10, 20, 44, 5]\n```\n\nЧисла сортируются как строки, что может быть не тем, что вы ожидаете. Для корректной сортировки чисел необходимо предоставить `sort()` функцию сравнения.\n\n\n### Функция сравнения\n\nЧтобы управлять процессом сортировки, `sort()` может принимать функцию сравнения, которая определяет порядок элементов. \n\nФункция сравнения принимает два аргумента (обозначим их `a` и `b`), которые представляют собой сравниваемые элементы массива. Результатом `a - b` будет:\n\n* Отрицательное число, если `a` меньше `b` (что означает, что `a` должен идти перед `b`).\n* Положительное число, если `a` больше `b` (что означает, что `a` должен идти после `b`).\n* Ноль, если они равны (порядок можно не изменять).\n\n\nПример функции для чисел:\n\n```javascript\nconst numbers1 = [10, 5, 1, 44, 20];\nnumbers1.sort((a, b) => a - b);\nconsole.log(numbers1); // Вывод: [1, 5, 10, 20, 44]\n\n\nconst numbers2 = [10, 5, 1, 44, 20];\nnumbers2.sort((a, b) => b - a);\nconsole.log(numbers2); // Вывод: [44, 20, 10, 5, 1]\n```\n\n\n### Продвинутое использование\n\n`sort()` не ограничивается простыми типами данных. Вы можете сортировать объекты, используя критерии, основанные на значениях свойств объектов:\n\n```javascript\nconst items = [\n    { name: 'Apple', price: 50 },\n    { name: 'Banana', price: 10 },\n    { name: 'Pear', price: 20 }\n];\nitems.sort((a, b) => a.price - b.price);\n\nconsole.log(items); \n// Вывод: [{ name: 'Banana', price: 10 }, { name: 'Pear', price: 20 }, { name: 'Apple', price: 50 }]\n```\n\n\n### Использование дополнительного метода `localeCompare()`\n\nМетод `localeCompare()` позволяет сравнивать строки с учётом локальных особенностей языка. Это особенно важно для правильной сортировки строк, содержащих диакритические знаки, различные алфавиты и другие лингвистические особенности.\n\n\n#### Основное использование\n\n`localeCompare()` сравнивает вызывающую строку с переданной строкой и возвращает:\n\n* Отрицательное значение, если вызывающая строка должна идти первее.\n* Положительное значение, если вызывающая строка должна идти позже.\n* Ноль, если строки считаются равными.\n\n\nПример:\n\n```javascript\nconst words = ['resume', 'résumé', 'exposé', 'déjà vu'];\n\n// Сортировка без учета диакритических знаков\nwords.sort((a, b) => a.localeCompare(b, 'en', { sensitivity: 'base' }));\n\nconsole.log(words); // [ 'déjà vu', 'exposé', 'resume', 'résumé' ]\n```\n\n\n#### Параметры `localeCompare()`\n\n* **locales**: Аргумент для указания локали (например, 'en-US').\n* **options**: Объект для более детальной настройки сравнения, включая чувствительность к регистру, диакритическим знакам, и пр.\n\n\nРассмотрим еще один пример с применением методов: `sort()` и `localeCompare()`.\n\nОтсортируем массив строк по последнему символу каждой строки, учитывая локальные особенности.\n```javascript\nconst words = ['apple', 'banana', 'cherry', 'date'];\n\nwords.sort((a, b) => {\n    // Получаем последний символ каждой строки\n    const lastCharA = a[a.length - 1];\n    const lastCharB = b[b.length - 1];\n\n    // Сравниваем последние символы с учетом локальных особенностей\n    return lastCharA.localeCompare(lastCharB);\n});\n\nconsole.log(words);\n// Вывод может зависеть от локали и дополнительных настроек, например:\n// ['banana', 'apple', 'date', 'cherry'] - если сортировать по английской локали без дополнительных настроек\n```\n\n\n### Особенности и предостережения\n\n* **Сортировка на месте:** `sort()` изменяет исходный массив, что означает, что оригинальный массив будет отсортирован после вызова метода.\n* **Производительность:** Время выполнения `sort()` может быть значительным для больших массивов, так как его сложность зависит от реализации конкретного движка JavaScript.\n* **Устойчивость:** Сортировка не гарантированно устойчива во всех браузерах, хотя большинство современных реализаций обеспечивают устойчивую сортировку.\n",
    "en": "# Array.prototype.sort() – сортирует элементы массива на месте language: en",
    "es": "# Array.prototype.sort() – сортирует элементы массива на месте language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}