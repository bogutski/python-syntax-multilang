{
  "_id": "6696c2cb763f0712c198f5f5",
  "name": {
    "en": "/*",
    "ru": "Сортировка товаров по цене и алфавиту"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortProductsByPriceAndName`, которая принимает массив объектов продуктов.\n\nКаждый из объектов содержит свойства `name` и `price`.\n\nФункция должна возвращать новый массив, содержащий продукты, отсортированные сначала по возрастанию цены, а при равенстве цен — по алфавиту названия.\n\n\nПримеры запуска функции:\n```javascript\nconst products = [\n  { name: \"Apple\", price: 50 },\n  { name: \"Orange\", price: 30 },\n  { name: \"Banana\", price: 50 },\n  { name: \"Pear\", price: 30 }\n];\n\nconsole.log(sortProductsByPriceAndName(products));\n// Вывод: [\n// { name: \"Orange\", price: 30 },\n// { name: \"Pear\", price: 30 },\n// { name: \"Apple\", price: 50 },\n// { name: \"Banana\", price: 50 }]\n```"
  },
  "initialSolution": "function sortProductsByPriceAndName(){\n\n}",
  "completedSolution": "function sortProductsByPriceAndName(arr) {\n  return arr.slice().sort((a, b) => {\n    return a.price === b.price ? a.name.localeCompare(b.name) : a.price - b.price\n  });\n}",
  "openTest": "it('Created function sortProductsByPriceAndName', () => {\n  expect(sortProductsByPriceAndName).to.be.a('function');\n});\n\nit('Function sortProductsByPriceAndName should include method sort()', () => {\n  const res = sortProductsByPriceAndName.toString()\n  expect(res).to.include('.sort(')\n});\n\nit('sortProductsByPriceAndName([{ name: \"Apple\", price: 50 }, { name: \"Orange\", price: 30 }, { name: \"Banana\", price: 50 }, { name: \"Pear\", price: 30 }]) should sort by price then alphabetically by name', () => {\n  const products = [\n    { name: \"Apple\", price: 50 },\n    { name: \"Orange\", price: 30 },\n    { name: \"Banana\", price: 50 },\n    { name: \"Pear\", price: 30 }\n  ];\n  expect(sortProductsByPriceAndName(products)).to.deep.equal([\n    { name: \"Orange\", price: 30 },\n    { name: \"Pear\", price: 30 },\n    { name: \"Apple\", price: 50 },\n    { name: \"Banana\", price: 50 }\n  ]);\n});\n\nit('sortProductsByPriceAndName([]) should return an empty array', () => {\n  expect(sortProductsByPriceAndName([])).to.deep.equal([]);\n});\n\nit('sortProductsByPriceAndName([{ name: \"Grape\", price: 100 }]) should return the same single-product array', () => {\n  expect(sortProductsByPriceAndName([{ name: \"Grape\", price: 100 }])).to.deep.equal([{ name: \"Grape\", price: 100 }]);\n});\n\nit('sortProductsByPriceAndName([{ name: \"Mango\", price: 20 }, { name: \"Kiwi\", price: 20 }]) should sort alphabetically when prices are the same', () => {\n  expect(sortProductsByPriceAndName([{ name: \"Mango\", price: 20 }, { name: \"Kiwi\", price: 20 }])).to.deep.equal([{ name: \"Kiwi\", price: 20 }, { name: \"Mango\", price: 20 }]);\n});\n\nit('sortProductsByPriceAndName([{ name: \"Lemon\", price: 15 }, { name: \"Lime\", price: 15 }, { name: \"Watermelon\", price: 30 }]) should first sort by price and then alphabetically', () => {\n  expect(sortProductsByPriceAndName([{ name: \"Lemon\", price: 15 }, { name: \"Lime\", price: 15 }, { name: \"Watermelon\", price: 30 }])).to.deep.equal([{ name: \"Lemon\", price: 15 }, { name: \"Lime\", price: 15 }, { name: \"Watermelon\", price: 30 }]);\n});\n\nit('sortProductsByPriceAndName([{ name: \"Cherry\", price: 30 }, { name: \"Apple\", price: 30 }, { name: \"Banana\", price: 25 }]) should return correctly sorted array', () => {\n  const products = [\n    { name: \"Cherry\", price: 30 },\n    { name: \"Apple\", price: 30 },\n    { name: \"Banana\", price: 25 }\n  ];\n  expect(sortProductsByPriceAndName(products)).to.deep.equal([\n    { name: \"Banana\", price: 25 },\n    { name: \"Apple\", price: 30 },\n    { name: \"Cherry\", price: 30 }\n  ]);\n});\n\nit('sortProductsByPriceAndName([{ name: \"Fig\", price: 50 }, { name: \"Date\", price: 50 }]) should handle products with identical prices', () => {\n  const products = [{ name: \"Fig\", price: 50 }, { name: \"Date\", price: 50 }];\n  expect(sortProductsByPriceAndName(products)).to.deep.equal([{ name: \"Date\", price: 50 }, { name: \"Fig\", price: 50 }]);\n});\n\nit('sortProductsByPriceAndName([{ name: \"Eggplant\", price: 40 }, { name: \"Cucumber\", price: 40 }, { name: \"Carrot\", price: 20 }]) should sort products by price ascending and by name ascending within the same price', () => {\n  const products = [\n    { name: \"Eggplant\", price: 40 },\n    { name: \"Cucumber\", price: 40 },\n    { name: \"Carrot\", price: 20 }\n  ];\n  expect(sortProductsByPriceAndName(products)).to.deep.equal([\n    { name: \"Carrot\", price: 20 },\n    { name: \"Cucumber\", price: 40 },\n    { name: \"Eggplant\", price: 40 }\n  ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}