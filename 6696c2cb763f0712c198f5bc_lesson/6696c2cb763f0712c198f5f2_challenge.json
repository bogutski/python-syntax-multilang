{
  "_id": "6696c2cb763f0712c198f5f2",
  "name": {
    "en": "/*",
    "ru": "Сортировка имен по последней букве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sortNamesByLastLetter`, которая принимает массив строк и возвращает новый массив, содержащий те же строки, отсортированные по последней букве в алфавитном порядке.\n\nФункция возвращает новый массив.\n\n\nПримеры запуска функции:\n```javascript\nsortNamesByLastLetter([\"Alice\", \"Bob\", \"Clara\", \"Dave\"]); // ['Clara', 'Bob', 'Alice', 'Dave']\nsortNamesByLastLetter([\"Steve\", \"Jennifer\", \"Edgar\", \"Monica\"]); // ['Monica', 'Steve', 'Jennifer', 'Edgar']\n```"
  },
  "initialSolution": "function sortNamesByLastLetter(){\n\n}",
  "completedSolution": "function sortNamesByLastLetter(arr) {\n  return arr.slice().sort((a, b) => {\n    const lastA = a[a.length - 1]\n    const lastB = b[b.length - 1]\n\n    return lastA.localeCompare(lastB)\n  })\n}",
  "openTest": "it('Created function sortNamesByLastLetter', () => {\n  expect(sortNamesByLastLetter).to.be.a('function');\n});\n\nit('Function sortNamesByLastLetter should include method sort()', () => {\n  const res = sortNamesByLastLetter.toString()\n  expect(res).to.include('.sort(')\n});\n\nit('sortNamesByLastLetter([\"Alice\", \"Bob\", \"Clara\", \"Dave\"]) should return [\"Clara\", \"Bob\", \"Alice\", \"Dave\"]', () => {\n  expect(sortNamesByLastLetter([\"Alice\", \"Bob\", \"Clara\", \"Dave\"])).to.deep.equal([\"Clara\", \"Bob\", \"Alice\", \"Dave\"]);\n});\n\nit('sortNamesByLastLetter([\"Steve\", \"Jennifer\", \"Edgar\", \"Monica\"]) should return [\"Monica\", \"Steve\", \"Jennifer\", \"Edgar\"]', () => {\n  expect(sortNamesByLastLetter([\"Steve\", \"Jennifer\", \"Edgar\", \"Monica\"])).to.deep.equal([\"Monica\", \"Steve\", \"Jennifer\", \"Edgar\"]);\n});\n\nit('sortNamesByLastLetter([]) should return []', () => {\n  expect(sortNamesByLastLetter([])).to.deep.equal([]);\n});\n\nit('sortNamesByLastLetter([\"Paul\"]) should return [\"Paul\"]', () => {\n  expect(sortNamesByLastLetter([\"Paul\"])).to.deep.equal([\"Paul\"]);\n});\n\nit('sortNamesByLastLetter([\"John\", \"Paul\", \"George\", \"Ringo\"]) should return [\"George\", \"Paul\", \"John\", \"Ringo\"]', () => {\n  expect(sortNamesByLastLetter([\"John\", \"Paul\", \"George\", \"Ringo\"])).to.deep.equal([\"George\", \"Paul\", \"John\", \"Ringo\"]);\n});\n\nit('sortNamesByLastLetter([\"Sarah\", \"Andrew\", \"Diana\", \"Jim\", \"Oscar\"]) should return [\"Diana\", \"Sarah\", \"Jim\", \"Oscar\", \"Andrew\"]', () => {\n  expect(sortNamesByLastLetter([\"Sarah\", \"Andrew\", \"Diana\", \"Jim\", \"Oscar\"])).to.deep.equal([\"Diana\", \"Sarah\", \"Jim\", \"Oscar\", \"Andrew\"]);\n});\n\nit('sortNamesByLastLetter([\"beta\", \"alpha\", \"echo\", \"charlie\"]) should sort by last letter to [\"beta\", \"alpha\", \"charlie\", \"echo\"]', () => {\n  expect(sortNamesByLastLetter([\"beta\", \"alpha\", \"echo\", \"charlie\"])).to.deep.equal([\"beta\", \"alpha\", \"charlie\", \"echo\"]);\n});\n\nit('sortNamesByLastLetter([\"gamma\", \"beta\", \"alpha\"]) should return [\"gamma\", \"beta\", \"alpha\"] sorted by the last letter', () => {\n  expect(sortNamesByLastLetter([\"gamma\", \"beta\", \"alpha\"])).to.deep.equal([\"gamma\", \"beta\", \"alpha\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}