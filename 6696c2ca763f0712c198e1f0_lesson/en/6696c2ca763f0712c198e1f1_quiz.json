{
  "name": "Equality and inequality comparison. Operators ==, ===, !=, !==",
  "questions": {
    "0": {
      "name": "Choose the correct statements",
      "variants": {
        "0": {
          "name": "The `===` operator checks for equality without type conversion."
        },
        "1": {
          "name": "The strict equality operator looks like `==`."
        },
        "2": {
          "name": "The `!=` operator checks for equality without type conversion."
        },
        "3": {
          "name": "When comparing it is recommended to use the operator `===`."
        }
      }
    },
    "1": {
      "name": "Type coercion is",
      "variants": {
        "0": {
          "name": "representation of values as Boolean"
        },
        "1": {
          "name": "implicit conversion of values from one data type to another (e.g., string to number)"
        },
        "2": {
          "name": "value representation as Number"
        }
      }
    },
    "2": {
      "name": "In the example below, the console will output",
      "description": "```\nconsole.log('1' == 1);\n```",
      "variants": {
        "0": {
          "name": "true, the string '1' is cast to the number 1"
        },
        "1": {
          "name": "false, the string '1' is not reduced to number 1"
        }
      }
    },
    "3": {
      "name": "In the example below, the console will output",
      "description": "```javascript\nconsole.log(false === !!'');\n```",
      "variants": {
        "0": {
          "name": "false, different data types"
        },
        "1": {
          "name": "true, the string '' is cast to false"
        }
      }
    },
    "4": {
      "name": "Select the options that describe how the operator `!==` works.",
      "variants": {
        "0": {
          "name": "checks for inequalities without type conversion"
        },
        "1": {
          "name": "returns `false` - if the operands have different values"
        },
        "2": {
          "name": "returns `true` - if the operands have the same values and different types"
        },
        "3": {
          "name": "checks inequalities with type conversion"
        }
      }
    },
    "5": {
      "name": "In the example below, the console will output",
      "description": "```javascript\nfunction notEqual(a,b) {\nreturn a!==b;\n}\nconsole.log(notEqual(2,3));\nconsole.log(notEqual(1,1));\nconsole.log(notEqual(1,'1'));\n```",
      "variants": {
        "0": {
          "name": "true, false, true"
        },
        "1": {
          "name": "false, false, true"
        },
        "2": {
          "name": "true, true, true"
        },
        "3": {
          "name": "true, false, false"
        }
      }
    },
    "6": {
      "name": "In the example below, the console will output",
      "description": "```javascript\nconsole.log(!!'1' !== true)\n```",
      "variants": {
        "0": {
          "name": "true"
        },
        "1": {
          "name": "false"
        }
      }
    },
    "7": {
      "name": "To compare values for equality/inequality it is recommended to use `===`/`!==`.",
      "variants": {
        "0": {
          "name": "Yes"
        },
        "1": {
          "name": "No, it is recommended to use `==`/!=`"
        }
      }
    },
    "8": {
      "name": "The difference between the operator `==` and the operator `===` is that",
      "variants": {
        "0": {
          "name": "The `===` operator compares values after they have been cast to the same type, and the `==` operator compares values without such a cast."
        },
        "1": {
          "name": "there is no difference"
        },
        "2": {
          "name": "The `==` operator compares values after they have been cast to the same type, and the `===` operator compares values without such a cast."
        }
      }
    },
    "9": {
      "name": "All comparison operators return the data type",
      "variants": {
        "0": {
          "name": "Boolean"
        },
        "1": {
          "name": "Number"
        },
        "2": {
          "name": "String"
        }
      }
    }
  }
}