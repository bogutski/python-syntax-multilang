{
  "_id": "6696c2ca763f0712c198e21c",
  "name": {
    "en": "Function for determining an arithmetic operation",
    "ru": "Функция на определение арифметической операции"
  },
  "instruction": {
    "en": "Write a function `evalNumbers()` that takes three arguments: `num1, num2` (two numbers) and `operation` (arithmetic operation: \"add\" or \"subtract\" or \"multiply\" or \"divide\").\n\nIf `operation` is given, the function must return the result of an arithmetic operation between the two numbers `num1, num2`.\nIf `operation` is given but it is not an arithmetic operation, the function should return `Invalid operation`.\nIf `operation` is not given, the function should return `Please, pass the operation`.\n\nExamples:\n- The function `evalNumbers(1, 23, \"add\")` should return 24;\n- The function `evalNumbers(1, 3)` should return `Please, pass the operation`.\n- The function `evalNumbers(1, 2, 'hello')` should return `Invalid operation'.\n- The function `evalNumbers(22, 11, \"divide\")` must return 2.",
    "ru": "Напишите функцию `evalNumbers()` , которая принимает три аргумента: `num1, num2` (два числа) и `operation` (арифметическая операция : \"add\" или \"subtract\", или \"multiply\", или \"divide\").\n\nЕсли `operation` задан, функция должна вернуть результат арифметической операции между двумя числами `num1, num2`.\nЕсли `operation` задан, но это не арифметическая операция, функция должна вернуть `Invalid operation`.\nЕсли `operation` не задан, функция должна вернуть `Please, pass the operation`\n\nПримеры:\n- функция `evalNumbers(1, 23, \"add\")` должна возвратить 24;\n- функция `evalNumbers(1, 3)` должна возвратить `Please, pass the operation`.\n- функция `evalNumbers(1, 2, 'hello')` должна возвратить `Invalid operation`.\n- функция `evalNumbers(22, 11, \"divide\")` должна возвратить 2."
  },
  "initialSolution": "",
  "completedSolution": "function evalNumbers(num1, num2, operation) {\n  if (operation) {\n    if (operation === \"add\") {\n      return num1 + num2;\n    } else if (operation === \"subtract\") {\n      return num1 - num2;\n    } else if (operation === \"multiply\") {\n      return num1 * num2;\n    } else if (operation === \"divide\") {\n      return num1 / num2;\n    } else {\n      return \"Invalid operation\";\n    }\n  } else {\n    return \"Please, pass the operation\";\n  }\n}",
  "openTest": "it(\"Created function evalNumbers\", () => {\n  expect(evalNumbers).to.be.a(\"function\");\n});\n\nit(\"Function returns correct result for arguments `1, 23, 'add'\", () => {\n  expect(evalNumbers(1, 23, \"add\")).eq(24);\n});\n\nit(\"Function returns correct result for arguments `1, 3`\", () => {\n  expect(evalNumbers(1, 3)).eq(\"Please, pass the operation\");\n});\n\nit(\"Function returns correct result for arguments `1, 2, 'hello'`\", () => {\n  expect(evalNumbers(1, 2, \"hello\")).eq(\"Invalid operation\");\n});\n\nit(\"The function returns the correct result for arguments `22, 11, 'divide'`\", () => {\n  expect(evalNumbers(22, 11, \"divide\")).eq(2);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}