{
  "name": "Сравнение на равенство и неравенство. Операторы ==, ===, !=, !==",
  "questions": {
    "0": {
      "name": "Выберете правильные утверждения",
      "variants": {
        "0": {
          "name": "Оператор `===` проверяет на равенство без приведения типов."
        },
        "1": {
          "name": "Оператор строгого равенства выглядит как `==`"
        },
        "2": {
          "name": "Оператор `!=` проверяет на равенство без приведения типов."
        },
        "3": {
          "name": "При сравнении рекомендуется использовать оператор `===`"
        }
      }
    },
    "1": {
      "name": "Приведение типов — это",
      "variants": {
        "0": {
          "name": "представление значений в виде Boolean"
        },
        "1": {
          "name": "неявное преобразование значений из одного типа данных в другой (например, строки в число)"
        },
        "2": {
          "name": "представление значений в виде Number"
        }
      }
    },
    "2": {
      "name": "В приведенном ниже примере, в консоль выведется",
      "description": "```\nconsole.log('1' == 1);\n```",
      "variants": {
        "0": {
          "name": "true, строка '1' приводиться к числу 1"
        },
        "1": {
          "name": "false, строка '1' не приводится к числу 1"
        }
      }
    },
    "3": {
      "name": "В приведенном ниже примере, в консоль выведется",
      "description": "```javascript\nconsole.log(false === !!'');\n```",
      "variants": {
        "0": {
          "name": "false, разные типы данных"
        },
        "1": {
          "name": "true, строка '' приводится к false"
        }
      }
    },
    "4": {
      "name": "Выберите варианты, где описана работа оператора `!==`.",
      "variants": {
        "0": {
          "name": "проверяет неравенство без приведения типов"
        },
        "1": {
          "name": "возвращает `false` — если операнды имеют разные значения"
        },
        "2": {
          "name": "возвращает `true` — если операнды имеют одинаковые значения и разные типы"
        },
        "3": {
          "name": "проверяет неравенство с приведением типов"
        }
      }
    },
    "5": {
      "name": "В приведенном ниже примере, в консоль выведется",
      "description": "```javascript\nfunction notEqual(a,b) {\nreturn a!==b;\n}\nconsole.log(notEqual(2,3));\nconsole.log(notEqual(1,1));\nconsole.log(notEqual(1,'1'));\n```",
      "variants": {
        "0": {
          "name": "true, false, true"
        },
        "1": {
          "name": "false, false, true"
        },
        "2": {
          "name": "true, true, true"
        },
        "3": {
          "name": "true, false, false"
        }
      }
    },
    "6": {
      "name": "В приведенном ниже примере, в консоль выведется",
      "description": "```javascript\nconsole.log(!!'1' !== true)\n```",
      "variants": {
        "0": {
          "name": "true"
        },
        "1": {
          "name": "false"
        }
      }
    },
    "7": {
      "name": "Для сравнения значений на равенство/неравенство рекомендуется использовать `===`/`!==`",
      "variants": {
        "0": {
          "name": "Да"
        },
        "1": {
          "name": "Нет, рекомендуется использовать `==`/`!=`"
        }
      }
    },
    "8": {
      "name": "Разница между оператором `==` и оператором `===` состоит в том, что",
      "variants": {
        "0": {
          "name": "оператор `===` сравнивает значения после их приведения к одному типу, а оператор `==` — без такого приведения."
        },
        "1": {
          "name": "разницы нету"
        },
        "2": {
          "name": "оператор `==` сравнивает значения после их приведения к одному типу, а оператор `===` — без такого приведения."
        }
      }
    },
    "9": {
      "name": "Все операторы сравнения возвращают тип данных",
      "variants": {
        "0": {
          "name": "Boolean"
        },
        "1": {
          "name": "Number"
        },
        "2": {
          "name": "String"
        }
      }
    }
  }
}