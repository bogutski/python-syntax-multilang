{
  "_id": "6696c2ca763f0712c198e1f0",
  "content": {
    "ru": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/girl-operators.png)\n\nВспомним операторы сравнения чисел:\n\n`>`  — больше\n\n`<`  — меньше\n\n`>=` — больше или равно\n\n`<=` — меньше или равно\n\n\n```javascript\nconsole.log(3 > 2);  // true\nconsole.log(3 >= 3);  // true\nconsole.log(2 < 3);  // true\nconsole.log(2 <= 2);  // true\n```\n\nА теперь рассмотрим в чем разница между операторами `==`, `===` и `!=`, `!==`:\n\n* `==` — нестрогое равенство\n\n* `===` — строгое равенство\n\n* `!=` — нестрогое неравенство\n\n* `!==` — строгое неравенство\n\n\n### Строгое равенство `===` тройное равно\n\nКак вы уже знаете, оператор строгого равенства `===` проверяет равенство **без** приведения типов.\n\n```javascript\nconsole.log(5 === 5); // true\nconsole.log('5' === 5); // false\n```\n\nЭто работает и с переменными:\n\n```javascript\nconst a = 10;\nconst b = 10;\nconst c = '10';\n\nconsole.log(a === b); // true\nconsole.log(a === c); // false\n```\n\n\n### Оператор нестрогого равенства `==`\n\nТеперь рассмотрим оператор нестрогого равенства.\n\nПишется, как двойной символ знака равенства `==`, и также сравнивает два значения на равенство.\n\nПри сравнении значений разных типов **приводит** каждое из них к общему типу.\n\nЭтот оператор работает следующим образом:\n\n* `true` — если операнды имеют **одинаковые значения и одинаковый тип**.\n* `true` — если операнды имеют **одинаковые значения и разные типы**.\n* `false` — если операнды имеют **разные значения**.\n\n```javascript\nconst n1 = 2;\nconst n2 = '2';\n\nconsole.log(n1 == n2); // true, строка '2' приводится к числу\n```\n\nРассмотрим еще пару примеров:\n\n```javascript\nconsole.log(1 == true); // true\nconsole.log(0 == false); // true\nconsole.log('' == false); // true\n```\n\nПримечание. В JavaScript `===` и `==` — это операторы сравнения, тогда как `=` — это оператор присваивания, он не сравнивает значения, а присваивает левому операнду значение правого.\n\n\n\n### Оператор строгого неравенства `!==`\n\nТеперь вспомним как работает оператор строгого неравенства `!==`.\n\nОператор строгого неравенства `!==` проверяет неравенство **без** приведения типов.\n\nЭтот оператор работает следующим образом:\n\n* `false` — если операнды имеют **одинаковые значения и одинаковый тип**.\n* `true` — если операнды имеют **одинаковые значения и разные типы**.\n* `true` — если операнды имеют **разные значения**.\n\n```javascript\nconst n1 = 5;\nconst n2 = 10;\n\nconsole.log(n1 !== n2); // true, 5 не равно 10\n```\n\nРассмотрим еще пару примеров:\n\n```javascript\nconsole.log(10 !== 10); // false\nconsole.log(10 !== 20); // true\nconsole.log(10 !== '10'); // true\nconsole.log(10 !== '20'); // true\n```\n\n\n\n### Оператор нестрогого неравенства `!=`\n\nПишется как одинарный символ знака восклицания и одинарный символ знака равенства `!=`, сравнивает два значения на неравенство.\n\nПри сравнении значений разных типов **приводит** каждое из них к числу.\n\nЭтот оператор работает следующим образом:\n\n* `false` — если операнды имеют **одинаковые значения и одинаковый тип**.\n* `false` — если операнды имеют **одинаковые значения и разные типы**.\n* `true` — если операнды имеют **разные значения**.\n\n```javascript\nconst n1 = 2;\nconst n2 = 1;\n\nconsole.log(n1 != n2); // true, 2 не равно 1\n```\n\nРассмотрим еще пару примеров:\n\n```javascript\nconsole.log(1 != 1); // false\nconsole.log(1 != 2); // true\nconsole.log(1 != '1'); // false, '1' приводится к числу 1\nconsole.log(1 != '2'); // true\n```\n\nПопробуем использовать операторы сравнения в сочетании с `if`:\n\nДопустим, мы на остановке ждем автобус №1 или №10, а приезжает автобус №2\n\n```javascript\nconst bus = 2;\n\nif (bus === 1) {\n    console.log('Go!')\n} else if (bus === 10) {\n    console.log('Go!')\n} else {\n    console.log('Bus number is not 1 or 10') // в консоль выведет 'Bus number is not 1 or 10'\n}\n\nif (bus !== 1) {\n    console.log('Wait!') // в консоль выведет 'Wait!'\n}\n```\n\nПодведем итог:\n\n`===` — возвращает `true`, если операнды **равны и одного типа**.\n\n`==` — возвращает `true`, если операнды **равны**.\n\n`!=` — возвращает `true`, если операнды **не равны**.\n\n`!==` — возвращает `true`, если операнды равны, но **разного типа или вообще не равны**.\n\nДля сравнения значений на равенство/неравенство используйте `===`/`!==`, использовать `==`/`!=` **не рекомендуется** !\n",
    "en": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/girl-operators.png)\n\nRecall the number comparison operators:\n\n`>` - more.\n\n`<` - less.\n\n`>=` - greater than or equal to\n\n`<=` - less than or equal to\n\n\n```javascript\nconsole.log(3 > 2);  // true\nconsole.log(3 >= 3);  // true\nconsole.log(2 < 3);  // true\nconsole.log(2 <= 2);  // true\n```\n\nNow consider the difference between the operators `==`, `===` and `!=`, `!==`:\n\n* `==` — non-strict equality\n\n* `===` — strict equality\n\n* `!=` — non-strict inequality\n\n* `!==` — strict inequality\n\n\n### Strict equality `===` triple equality\n\nAs you already know, the strict equality operator `===` checks for equality **without** type conversion.\n\n```javascript\nconsole.log(5 === 5); // true\nconsole.log('5' === 5); // false\n```\n\nNow set the variable `n2` to a different type:\n\n```javascript\nconst a = 10;\nconst b = 10;\nconst c = '10';\n\nconsole.log(a === b); // true\nconsole.log(a === c); // false\n```\n\n\n### Non-strict equality operator `==`\n\nNow consider the non-strict equality operator.\n\nIt is written as a double equal sign symbol `==` and also compares two values for equality.\n\nWhen comparing values of different types, **references** each of them to a common type.\n\nNon-strict equality operator `==`\n\n* `true` — if the operands have **same values and the same type**.\n* `true` — if the operands have **same values and different types**.\n* `false` — if the operands have **different values**.\n\n```javascript\nconst n1 = 2;\nconst n2 = '2';\n\nconsole.log(n1 == n2); // true, the string '2' is converted to a number\n```\n\nLet's look at a couple more examples:\n\n```javascript\nconsole.log(1 == true); // true\nconsole.log(0 == false); // true\nconsole.log('' == false); // true\n```\n\nNote. In JavaScript `===` and `==` are comparison operators, while `=` is an assignment operator; it does not compare values, but assigns the left operand to the right one.\n\n\n\n### The strict inequality operator `!==`\n\nNow remember how the strict inequality operator `!==` works.\n\nThe strict inequality operator `!==` tests an inequality **without** type conversion.\n\nThis operator works as follows:\n\n* `false` — if the operands have **same values and the same type**.\n* `true` — if the operands have **same values and different types**.\n* `true` — if the operands have **different values**.\n\n```javascript\nconst n1 = 5;\nconst n2 = 10;\n\nconsole.log(n1 !== n2); // true, 5 is not 10\n```\n\nLet's look at a couple more examples:\n\n```javascript\nconsole.log(10 !== 10); // false\nconsole.log(10 !== 20); // true\nconsole.log(10 !== '10'); // true\nconsole.log(10 !== '20'); // true\n```\n\n\n\n### The non-strict inequality operator `!=`\n\nSpelled as a single exclamation point character and a single equal sign character `!=`, it compares two values by inequality.\n\nWhen comparing the values of different types, **references** each of them to a number.\n\nThis operator works as follows:\n\n* `false` — if the operands have **same values and the same type**.\n* `false` — if the operands have **same values and different types**.\n* `true` — if the operands have **different values**.\n\n```javascript\nconst n1 = 2;\nconst n2 = 1;\n\nconsole.log(n1 != n2); // true, 2 is not equal to 1\n```\n\nLet's look at a couple more examples:\n\n```javascript\nconsole.log(1 != 1); // false\nconsole.log(1 != 2); // true\nconsole.log(1 != '1'); // false, '1' is cast to number 1\nconsole.log(1 != '2'); // true\n```\n\nLet's try to use comparison operators in combination with `if`:\n\nLet's say we're at a bus stop waiting for the No1 or No10 bus, and the No2 bus comes\n\n```javascript\nconst bus = 2;\n\nif (bus === 1) {\n    console.log('Go!')\n} else if (bus === 10) {\n    console.log('Go!')\n} else {\n    console.log('Bus number is not 1 or 10') // the console will print 'Bus number is not 1 or 10'\n}\n\nif (bus !== 1) {\n    console.log('Wait!') // the console will print 'Wait!'\n}\n```\n\nTo summarize:\n\n`===` — returns `true` if the operands are **equal and of the same type**.\n\n`==` — returns `true` if the operands are **equal**.\n\n`!=` — returns `true` if the operands ** are not equal**.\n\n`!==` — returns `true` if the operands are equal, but of **different type or not equal at all**.\n\nTo compare values for equality/inequality use `===`/`!==`, using `==`/`!=` **is not recommended** !\n",
    "es": "# Сравнение на равенство и неравенство. Операторы ==, ===, !=, !== language: es"
  },
  "video": {
    "ru": "https://youtu.be/GF3gAOqtSlE",
    "en": "",
    "es": ""
  }
}