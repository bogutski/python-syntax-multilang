{
  "_id": "6696c2ca763f0712c198e315",
  "name": {
    "en": "Determine which floor the apartment is on. Consecutive numbering.",
    "ru": "Определите, на каком этаже квартира. Последовательная нумерация."
  },
  "instruction": {
    "en": "Apartments are numbered consecutively in ascending order from the first floor.\n\nEach floor has the same number of apartments.\n\nWrite a function `getFloor` that accepts two parameters: apartment number and number of apartments on the floor.\n\nName the parameters as you wish.\n\nThe function should return the number of the floor on which the apartment is located.\n\nThe building cannot be more than 50 floors.\n\nIf there is no apartment with such number, the function must return the string `There is no apartment with such number`.\n\nExamples of running the function:\n```javascript\ngetFloor(1, 3) // 1\ngetFloor(2, 3) // 1\ngetFloor(4, 3) // 2\n\ngetFloor(499, 10) // 50\ngetFloor(500, 10) // 50\ngetFloor(501, 10) // There is no apartment with such number\n\ngetFloor(-1, 5) // There is no apartment with such number\ngetFloor(0, 5) // There is no apartment with such number\n```",
    "ru": "Квартиры нумеруются последовательно по возрастанию с первого этажа.\n\nНа каждом этаже одинаковое количество квартир.\n\nНапишите функцию `getFloor`, которая принимает два параметра: номер квартиры и количество квартир на этаже.\n\nПараметры назовите по своему усмотрению.\n\nФункция должна возвращать номер этажа, на котором находится квартира.\n\nДом не может быть больше 50 этажей.\n\nЕсли квартиры с таким номером нет, функция должна возвращать строку `There is no apartment with such number`.\n\nПримеры запуска функции:\n```javascript\ngetFloor(1, 3) // 1\ngetFloor(2, 3) // 1\ngetFloor(4, 3) // 2\n\ngetFloor(499, 10) // 50\ngetFloor(500, 10) // 50\ngetFloor(501, 10) // There is no apartment with such number\n\ngetFloor(-1, 5) // There is no apartment with such number\ngetFloor(0, 5) // There is no apartment with such number\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function getFloor(apartmentNumber, apartmentsOnFloor) {\n  const maxFloor = 50;\n  const maxApartment = maxFloor * apartmentsOnFloor;\n  if (apartmentNumber > maxApartment || apartmentNumber < 1) {\n    return 'There is no apartment with such number';\n  }\n  return Math.ceil(apartmentNumber / apartmentsOnFloor);\n}",
  "openTest": "it('Created function getFloor', () => {\n  expect(getFloor).to.be.a('function');\n});\n\nit('getFloor(1, 3) should return 1', () => {\n  expect(getFloor(1, 3)).to.equal(1);\n});\n\nit('getFloor(2, 3) should return 1', () => {\n  expect(getFloor(2, 3)).to.equal(1);\n});\n\nit('getFloor(4, 3) should return 2', () => {\n  expect(getFloor(4, 3)).to.equal(2);\n});\n\nit('getFloor(40, 4) should return 10', () => {\n  expect(getFloor(40, 4)).to.equal(10);\n});\n\nit('getFloor(499, 10) should return 50', () => {\n  expect(getFloor(499, 10)).to.equal(50);\n});\n\nit('getFloor(500, 10) should return 50', () => {\n  expect(getFloor(500, 10)).to.equal(50);\n});\n\nit('getFloor(501, 10) should return \"There is no apartment with such number\"', () => {\n  expect(getFloor(501, 10)).to.equal('There is no apartment with such number');\n});\n\nit('getFloor(-15, 5) should return \"There is no apartment with such number\"', () => {\n  expect(getFloor(-15, 5)).to.equal('There is no apartment with such number');\n});\n\nit('getFloor(0, 5) should return \"There is no apartment with such number\"', () => {\n  expect(getFloor(0, 5)).to.equal('There is no apartment with such number');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}