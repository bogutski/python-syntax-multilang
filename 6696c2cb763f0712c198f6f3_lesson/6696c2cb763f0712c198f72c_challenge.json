{
  "_id": "6696c2cb763f0712c198f72c",
  "name": {
    "en": "/*",
    "ru": "Поиск студентов по именам"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findStudentsByName`, которая принимает:\n * массив объектов студентов: `[{ id: 1, name: \"Alice\", grade: 85 }, { id: 2, name: \"Bob\", grade: 70 }, ...]`;\n * массив имен: `['Jack', 'Mike'...]`.\n\nФункция должна найти студентов по именам из второго массива и вернуть новый массив, содержащий объекты найденных студентов.\nНовые объекты студентов должны содержать только: `id` и `grade` -> `[{ id: 1, grade: 85 }, { id: 2, grade: 70 }]`\n\n\nЕсли студенты с указанными именами не найдены или массив имен пустой, функция должна вернуть строку: `No students found`.\n\n\nПример запуска функции:\n```javascript\nconst students = [\n  { id: 1, name: \"Alice\", grade: 85 },\n  { id: 2, name: \"Bob\", grade: 70 },\n  { id: 3, name: \"Charlie\", grade: 90 }\n];\n\nconsole.log(findStudentsByName(students, ['Alice', 'Bob']));\n// Вывод: [{ id: 1, grade: 85 }, { id: 2, grade: 70 }]\n\nconsole.log(findStudentsByName(students, ['Jack', 'Angel']));\n// Вывод: 'No students found'\n\nconsole.log(findStudentsByName(students, []));\n// Вывод: 'No students found'\n```"
  },
  "initialSolution": "function findStudentsByName(num1, num2){\n\n}",
  "completedSolution": "function findStudentsByName(students, names) {\n  if(!names.length || !students.length) return 'No students found'\n  const result = []\n\n  names.forEach(el => {\n    const search = students.find(({name}) => name === el)\n    if(search !== undefined) result.push({id: search.id, grade: search.grade})\n  })\n\n  return result.length !== 0 ? result : 'No students found';\n}",
  "openTest": "it('Created function findStudentsByName', () => {\n  expect(findStudentsByName).to.be.a('function');\n});\n\nit(\"findStudentsByName([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }], ['Alice', 'Bob']) should return [{ id: 1, grade: 85 }, { id: 2, grade: 70 }]\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 }\n  ];\n\n  expect(findStudentsByName(students, ['Alice', 'Bob'])).to.deep.equal([\n    { id: 1, grade: 85 },\n    { id: 2, grade: 70 }\n  ]);\n});\n\nit(\"findStudentsByName([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }], []) should return 'No students found' if the names array is empty\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 }\n  ];\n\n  expect(findStudentsByName(students, [])).to.equal('No students found');\n});\n\nit(\"findStudentsByName([], ['Alice', 'Bob']) should return 'No students found' if the students array is empty\", () => {\n  const students = [];\n\n  expect(findStudentsByName(students, ['Alice', 'Bob'])).to.equal('No students found');\n});\n\nit(\"findStudentsByName([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }], ['Eve', 'David']) should return 'No students found' if no students with the specified names are found\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 }\n  ];\n\n  expect(findStudentsByName(students, ['Eve', 'David'])).to.equal('No students found');\n});\n\nit(\"findStudentsByName([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }], ['Charlie']) should return [{ id: 3, grade: 90 }]\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 }\n  ];\n\n  expect(findStudentsByName(students, ['Charlie'])).to.deep.equal([{ id: 3, grade: 90 }]);\n});\n\nit(\"findStudentsByName([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }], ['Eve']) should return 'No students found'\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 }\n  ];\n\n  expect(findStudentsByName(students, ['Eve'])).to.equal('No students found');\n});\n\nit(\"findStudentsByName([{ id: 1, name: 'Alice', grade: 80 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }], []) should return 'No students found' if the names array is empty\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 80 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 }\n  ];\n\n  expect(findStudentsByName(students, [])).to.equal('No students found');\n});\n\nit(\"findStudentsByName([], ['Alice', 'Bob']) should return 'No students found' if the students array is empty\", () => {\n  const students = [];\n\n  expect(findStudentsByName(students, ['Alice', 'Bob'])).to.equal('No students found');\n});\n\nit(\"findStudentsByName([], []) should return 'No students found' if both students and names arrays are empty\", () => {\n  const students = [];\n\n  expect(findStudentsByName(students, [])).to.equal('No students found');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}