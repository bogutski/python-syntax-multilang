{
  "_id": "6696c2cb763f0712c198f72f",
  "name": {
    "en": "/*",
    "ru": "Поиск первого дубликата в массиве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findFirstDuplicate`, которая принимает массив значений и возвращает первый элемент, который имеет дубликат в этом массиве.\n\nФункция должна учитывать как числовые, так и строковые значения, которые нужно привести к одному регистру перед проверкой.\n\nЕсли дубликатов нет, функция должна вернуть `null`.\n\n\nПример запуска функции:\n```javascript\nfindFirstDuplicate([1, 2, 3, 4, 5]); // null\nfindFirstDuplicate([1, 2, 3, 4, 2]); // 2\nfindFirstDuplicate(['3', 'a', 4, 'B', 'C', 'HeLLo', 'A']); // 'a'\n```"
  },
  "initialSolution": "function findFirstDuplicate(){\n\n}",
  "completedSolution": "function findFirstDuplicate(arr) {\n  const result = arr\n      .map(el => {\n        if(typeof el === 'string') return el.toLowerCase()\n        else return el\n      })\n      .find((el, index, array) => array.indexOf(el, index + 1) !== -1)\n\n  return result ? result : null;\n}",
  "openTest": "it('Created function findFirstDuplicate', () => {\n  expect(findFirstDuplicate).to.be.a('function');\n});\n\nit(\"findFirstDuplicate([1, 2, 3, 4, 5]) should return null\", () => {\n  expect(findFirstDuplicate([1, 2, 3, 4, 5])).to.be.null;\n});\n\nit(\"findFirstDuplicate([1, 2, 3, 4, 2]) should return 2\", () => {\n  expect(findFirstDuplicate([1, 2, 3, 4, 2])).to.equal(2);\n});\n\nit(\"findFirstDuplicate(['3', 'a', 4, 'B', 'C', 'HeLLo', 'A']) should return 'a'\", () => {\n  expect(findFirstDuplicate(['3', 'a', 4, 'B', 'C', 'HeLLo', 'A'])).to.equal('a');\n});\n\nit(\"findFirstDuplicate(['a', 'b', 'c', 'a', 'd', 'e', 'f']) should return 'a'\", () => {\n  expect(findFirstDuplicate(['a', 'b', 'c', 'a', 'd', 'e', 'f'])).to.equal('a');\n});\n\nit(\"findFirstDuplicate(['a', 'b', 'c', 'd', 'e', 'f', 'a']) should return 'a'\", () => {\n  expect(findFirstDuplicate(['a', 'b', 'c', 'd', 'e', 'f', 'a'])).to.equal('a');\n});\n\nit(\"findFirstDuplicate(['a', 'b', 'c', 'd', 'e', 'f']) should return null\", () => {\n  expect(findFirstDuplicate(['a', 'b', 'c', 'd', 'e', 'f'])).to.be.null;\n});\n\nit(\"findFirstDuplicate([1, '2', 3, '4', 5]) should return null\", () => {\n  expect(findFirstDuplicate([1, '2', 3, '4', 5])).to.be.null;\n});\n\nit(\"findFirstDuplicate(['a', 'B', 'c', 'd', 'e', 'f', 'a']) should return 'a'\", () => {\n  expect(findFirstDuplicate(['a', 'B', 'c', 'd', 'e', 'f', 'a'])).to.equal('a');\n});\n\nit(\"findFirstDuplicate(['a', 'b', 'c', 'd', 'e', 'a', 'f']) should return 'a'\", () => {\n  expect(findFirstDuplicate(['a', 'b', 'c', 'd', 'e', 'a', 'f'])).to.equal('a');\n});\n\nit(\"findFirstDuplicate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a']) should return 'a'\", () => {\n  expect(findFirstDuplicate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a'])).to.equal('a');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}