{
  "_id": "6696c2cb763f0712c198f727",
  "name": {
    "en": "/*",
    "ru": "Поиск студента по ID"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findStudentById`, которая принимает массив студентов и идентификатор студента в качестве аргументов и возвращает объект студента с указанным идентификатором.\n\nЕсли студент с указанным идентификатором не найден, функция должна возвращать `null`.\n\n\nПример запуска функции:\n```javascript\nconst students = [\n  { id: 1, name: \"Alice\" },\n  { id: 2, name: \"Bob\" },\n  { id: 3, name: \"Charlie\" }\n];\n\nconsole.log(findStudentById(students, 2));\n// Вывод: { id: 2, name: \"Bob\" }\n\nconsole.log(findStudentById(students, 4));\n// Вывод: null\n```"
  },
  "initialSolution": "function findStudentById(){\n\n}",
  "completedSolution": "function findStudentById(students, id) {\n  const result = students.find(obj => obj.id === id)\n  return result === undefined ? null : result;\n}",
  "openTest": "it('Created function findStudentById', () => {\n  expect(findStudentById).to.be.a('function');\n});\n\nit(\"Function findStudentById should include find method\", () => {\n  const result = findStudentById.toString();\n  expect(result).to.include('.find(');\n});\n\nit(\"findStudentById([{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }, { id: 3, name: 'Charlie' }]) should return { id: 2, name: 'Bob' }\", () => {\n  const students = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n    { id: 3, name: 'Charlie' }\n  ];\n\n  expect(findStudentById(students, 2)).to.deep.equal({ id: 2, name: 'Bob' });\n});\n\nit(\"findStudentById([{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }, { id: 3, name: 'Charlie' }]) should return null if student id not found\", () => {\n  const students = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n    { id: 3, name: 'Charlie' }\n  ];\n\n  expect(findStudentById(students, 4)).to.be.null;\n});\n\nit(\"findStudentById([{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }, { id: 3, name: 'Charlie' }]) should return { id: 1, name: 'Alice' } if id is 1\", () => {\n  const students = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n    { id: 3, name: 'Charlie' }\n  ];\n\n  expect(findStudentById(students, 1)).to.deep.equal({ id: 1, name: 'Alice' });\n});\n\nit(\"findStudentById([{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }, { id: 3, name: 'Charlie' }]) should return { id: 3, name: 'Charlie' } if id is 3\", () => {\n  const students = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n    { id: 3, name: 'Charlie' }\n  ];\n\n  expect(findStudentById(students, 3)).to.deep.equal({ id: 3, name: 'Charlie' });\n});\n\nit(\"findStudentById([]) should return null if array is empty\", () => {\n  const students = [];\n\n  expect(findStudentById(students, 1)).to.be.null;\n});\n\nit(\"findStudentById([{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }, { id: 3, name: 'Charlie' }]) should return null if id is negative\", () => {\n  const students = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n    { id: 3, name: 'Charlie' }\n  ];\n\n  expect(findStudentById(students, -1)).to.be.null;\n});\n\nit(\"findStudentById([{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }, { id: 3, name: 'Charlie' }]) should return null if id is not a number\", () => {\n  const students = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n    { id: 3, name: 'Charlie' }\n  ];\n\n  expect(findStudentById(students, \"id\")).to.be.null;\n});\n\nit(\"findStudentById([{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }, { id: 3, name: 'Charlie' }]) should return null if id is not found in a mixed array\", () => {\n  const students = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n    { id: 4, name: 'David' },\n    { id: 5, name: 'Eve' },\n    { id: 3, name: 'Charlie' }\n  ];\n\n  expect(findStudentById(students, 6)).to.be.null;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}