{
  "_id": "6696c2cb763f0712c198f72b",
  "name": {
    "en": "/*",
    "ru": "Поиск студента с максимальной оценкой"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findStudentWithMaxGrade`, которая принимает массив студентов в качестве аргумента и возвращает объект студента с максимальной оценкой.\n\nЕсли несколько студентов имеют одинаковую максимальную оценку, вернуть первого встретившегося из них.\n\nЕсли массив пустой, вернуть - `null`.\n\n\nПример запуска функции:\n```javascript\nconst students = [\n  { name: \"Alice\", grade: 85 },\n  { name: \"Bob\", grade: 70 },\n  { name: \"Charlie\", grade: 90 },\n  { name: \"David\", grade: 90 }\n];\n\nconsole.log(findStudentWithMaxGrade(students));\n// Вывод: { name: \"Charlie\", grade: 90 }\n```"
  },
  "initialSolution": "function findStudentWithMaxGrade(){\n\n}",
  "completedSolution": "function findStudentWithMaxGrade(students) {\n  if(!students.length) return null\n  const grades = students.map(({grade}) => grade)\n  const maxGrade = Math.max(...grades)\n\n  return students.find(({grade}) => grade === maxGrade);\n}",
  "openTest": "it('Created function findStudentWithMaxGrade', () => {\n  expect(findStudentWithMaxGrade).to.be.a('function');\n});\n\nit(\"findStudentWithMaxGrade([{ name: 'Alice', grade: 85 }, { name: 'Bob', grade: 70 }, { name: 'Charlie', grade: 90 }]) should return { name: 'Charlie', grade: 90 }\", () => {\n  const students = [\n    { name: \"Alice\", grade: 85 },\n    { name: \"Bob\", grade: 70 },\n    { name: \"Charlie\", grade: 90 }\n  ];\n\n  expect(findStudentWithMaxGrade(students)).to.deep.equal({ name: \"Charlie\", grade: 90 });\n});\n\nit(\"findStudentWithMaxGrade([{ name: 'Alice', grade: 85 }, { name: 'Bob', grade: 70 }, { name: 'Charlie', grade: 90 }, { name: 'David', grade: 90 }]) should return { name: 'Charlie', grade: 90 } if there are multiple students with the same maximum grade\", () => {\n  const students = [\n    { name: \"Alice\", grade: 85 },\n    { name: \"Bob\", grade: 70 },\n    { name: \"Charlie\", grade: 90 },\n    { name: \"David\", grade: 90 }\n  ];\n\n  expect(findStudentWithMaxGrade(students)).to.deep.equal({ name: \"Charlie\", grade: 90 });\n});\n\nit(\"findStudentWithMaxGrade([{ name: 'Alice', grade: 85 }, { name: 'Bob', grade: 70 }]) should return { name: 'Alice', grade: 85 }\", () => {\n  const students = [\n    { name: \"Alice\", grade: 85 },\n    { name: \"Bob\", grade: 70 }\n  ];\n\n  expect(findStudentWithMaxGrade(students)).to.deep.equal({ name: \"Alice\", grade: 85 });\n});\n\nit(\"findStudentWithMaxGrade([]) should return null if array is empty\", () => {\n  const students = [];\n\n  expect(findStudentWithMaxGrade(students)).to.be.null;\n});\n\nit(\"findStudentWithMaxGrade([{ name: 'Alice', grade: 85 }, { name: 'Bob', grade: 70 }, { name: 'Charlie', grade: 90 }, { name: 'David', grade: 90 }, { name: 'Eve', grade: 80 }]) should return { name: 'Charlie', grade: 90 }\", () => {\n  const students = [\n    { name: \"Alice\", grade: 85 },\n    { name: \"Bob\", grade: 70 },\n    { name: \"Charlie\", grade: 90 },\n    { name: \"David\", grade: 90 },\n    { name: \"Eve\", grade: 80 }\n  ];\n\n  expect(findStudentWithMaxGrade(students)).to.deep.equal({ name: \"Charlie\", grade: 90 });\n});\n\nit(\"findStudentWithMaxGrade([{ name: 'Alice', grade: 85 }, { name: 'Bob', grade: 85 }, { name: 'Charlie', grade: 85 }]) should return { name: 'Alice', grade: 85 } if there are multiple students with the same maximum grade\", () => {\n  const students = [\n    { name: \"Alice\", grade: 85 },\n    { name: \"Bob\", grade: 85 },\n    { name: \"Charlie\", grade: 85 }\n  ];\n\n  expect(findStudentWithMaxGrade(students)).to.deep.equal({ name: \"Alice\", grade: 85 });\n});\n\nit(\"findStudentWithMaxGrade([{ name: 'Alice', grade: 90 }]) should return { name: 'Alice', grade: 90 } if there is only one student\", () => {\n  const students = [\n    { name: \"Alice\", grade: 90 }\n  ];\n\n  expect(findStudentWithMaxGrade(students)).to.deep.equal({ name: \"Alice\", grade: 90 });\n});\n\nit(\"findStudentWithMaxGrade([{ name: 'Bob', grade: 70 }, { name: 'Charlie', grade: 90 }, { name: 'David', grade: 80 }]) should return { name: 'Charlie', grade: 90 } if there is a tie but Charlie appears first\", () => {\n  const students = [\n    { name: \"Bob\", grade: 70 },\n    { name: \"Charlie\", grade: 90 },\n    { name: \"David\", grade: 80 }\n  ];\n\n  expect(findStudentWithMaxGrade(students)).to.deep.equal({ name: \"Charlie\", grade: 90 });\n});\n\nit(\"findStudentWithMaxGrade([{ name: 'Alice', grade: 85 }, { name: 'Bob', grade: 70 }, { name: 'Charlie', grade: 90 }, { name: 'David', grade: 85 }, { name: 'Eve', grade: 80 }]) should return { name: 'Charlie', grade: 90 } if there is a tie and Charlie appears after David\", () => {\n  const students = [\n    { name: \"Alice\", grade: 85 },\n    { name: \"Bob\", grade: 70 },\n    { name: \"Charlie\", grade: 90 },\n    { name: \"David\", grade: 85 },\n    { name: \"Eve\", grade: 80 }\n  ];\n\n  expect(findStudentWithMaxGrade(students)).to.deep.equal({ name: \"Charlie\", grade: 90 });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}