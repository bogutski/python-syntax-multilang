{
  "_id": "6696c2cb763f0712c198f72d",
  "name": {
    "en": "/*",
    "ru": "Поиск и удаление студента"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterStudentsByGradeRange`, которая принимает:\n * массив объектов студентов: `[{ id: 1, name: \"Alice\", grade: 85 }, { id: 2, name: \"Bob\", grade: 70 } ...]`\n * диапазон оценок в виде объекта: `{ min: минимальная оценка, max: максимальная оценка }`.\n\nФункция должна удалить первого студента из массива, чья оценка попадает в указанный диапазон, и вернуть измененный массив.\n\n\nПример запуска функции:\n```javascript\nconst students = [\n  { id: 1, name: \"Alice\", grade: 85 },\n  { id: 2, name: \"Bob\", grade: 70 },\n  { id: 3, name: \"Charlie\", grade: 90 },\n  { id: 4, name: \"David\", grade: 95 }\n];\n\nconsole.log(filterStudentsByGradeRange(students, { min: 80, max: 90 }));\n// Вывод: [\n//   { id: 2, name: 'Bob', grade: 70 },\n//   { id: 3, name: 'Charlie', grade: 90 },\n//   { id: 4, name: 'David', grade: 95 }\n// ]\n```"
  },
  "initialSolution": "function filterStudentsByGradeRange(){\n\n}",
  "completedSolution": "function filterStudentsByGradeRange(students, minMax) {\n  const toDelete = students.find(({grade}) => grade >= minMax.min && grade <= minMax.max)\n  if(toDelete) students.splice(toDelete.id - 1, 1)\n  return students;\n}",
  "openTest": "it('Created function filterStudentsByGradeRange', () => {\n  expect(filterStudentsByGradeRange).to.be.a('function');\n});\n\nit(\"filterStudentsByGradeRange([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }, { id: 4, name: 'David', grade: 95 }], { min: 80, max: 90 }) should remove the first student with grade in the range and return the modified array\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 },\n    { id: 4, name: \"David\", grade: 95 }\n  ];\n\n  expect(filterStudentsByGradeRange(students, { min: 80, max: 90 })).to.deep.equal([\n    { id: 2, name: 'Bob', grade: 70 },\n    { id: 3, name: 'Charlie', grade: 90 },\n    { id: 4, name: 'David', grade: 95 }\n  ]);\n});\n\nit(\"filterStudentsByGradeRange([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }, { id: 4, name: 'David', grade: 95 }], { min: 70, max: 95 }) should return the original array if no students are within the grade range\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 },\n    { id: 4, name: \"David\", grade: 95 }\n  ];\n\n  expect(filterStudentsByGradeRange(students, { min: 70, max: 95 })).to.deep.equal(students);\n});\n\nit(\"filterStudentsByGradeRange([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }, { id: 4, name: 'David', grade: 95 }], { min: 60, max: 70 }) should return the original array if no students are within the grade range\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 },\n    { id: 4, name: \"David\", grade: 95 }\n  ];\n\n  expect(filterStudentsByGradeRange(students, { min: 60, max: 70 })).to.deep.equal(students);\n});\n\nit(\"filterStudentsByGradeRange([], { min: 80, max: 90 }) should return an empty array if the students array is empty\", () => {\n  const students = [];\n\n  expect(filterStudentsByGradeRange(students, { min: 80, max: 90 })).to.be.an('array').that.is.empty;\n});\n\nit(\"filterStudentsByGradeRange([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }, { id: 4, name: 'David', grade: 95 }], { min: 100, max: 110 }) should return the original array if no students are within the grade range\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 },\n    { id: 4, name: \"David\", grade: 95 }\n  ];\n\n  expect(filterStudentsByGradeRange(students, { min: 100, max: 110 })).to.deep.equal(students);\n});\n\nit(\"filterStudentsByGradeRange([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }, { id: 4, name: 'David', grade: 95 }], { min: 85, max: 90 }) should remove the first student with grade in the range and return the modified array\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 },\n    { id: 4, name: \"David\", grade: 95 }\n  ];\n\n  expect(filterStudentsByGradeRange(students, { min: 85, max: 90 })).to.deep.equal([\n    { id: 2, name: 'Bob', grade: 70 },\n    { id: 3, name: 'Charlie', grade: 90 },\n    { id: 4, name: 'David', grade: 95 }\n  ]);\n});\n\nit(\"filterStudentsByGradeRange([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }, { id: 4, name: 'David', grade: 95 }], { min: 0, max: 100 }) should remove the first student with grade in the range and return the modified array\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 },\n    { id: 4, name: \"David\", grade: 95 }\n  ];\n\n  expect(filterStudentsByGradeRange(students, { min: 0, max: 100 })).to.deep.equal([\n    { id: 2, name: 'Bob', grade: 70 },\n    { id: 3, name: 'Charlie', grade: 90 },\n    { id: 4, name: 'David', grade: 95 }\n  ]);\n});\n\nit(\"filterStudentsByGradeRange([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }, { id: 4, name: 'David', grade: 95 }], { min: 95, max: 100 }) should remove the last student with grade in the range and return the modified array\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 },\n    { id: 4, name: \"David\", grade: 95 }\n  ];\n\n  expect(filterStudentsByGradeRange(students, { min: 95, max: 100 })).to.deep.equal([\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: 'Bob', grade: 70 },\n    { id: 3, name: 'Charlie', grade: 90 }\n  ]);\n});\n\nit(\"filterStudentsByGradeRange([{ id: 1, name: 'Alice', grade: 85 }, { id: 2, name: 'Bob', grade: 70 }, { id: 3, name: 'Charlie', grade: 90 }, { id: 4, name: 'David', grade: 95 }], { min: 91, max: 94 }) should return the original array if no students are within the grade range\", () => {\n  const students = [\n    { id: 1, name: \"Alice\", grade: 85 },\n    { id: 2, name: \"Bob\", grade: 70 },\n    { id: 3, name: \"Charlie\", grade: 90 },\n    { id: 4, name: \"David\", grade: 95 }\n  ];\n\n  expect(filterStudentsByGradeRange(students, { min: 91, max: 94 })).to.deep.equal(students);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}