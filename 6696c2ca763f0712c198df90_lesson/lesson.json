{
  "_id": "6696c2ca763f0712c198df90",
  "content": {
    "ru": "Результат работы функции зависит от того, какие значения будут переданы в качестве аргументов.\n\nНапишем функцию `sum`. Она принимает два аргумента: `n1` и `n2`. Возвращает сумму этих двух аргументов.\n\n``` javascript\nfunction sum(n1, n2){\n  return n1 + n2;\n}\n\nconsole.log(sum(3, 5)); // выведется 8\n```\n\n### `undefined` как возвращаемое значение\n\nНо что будет, если один из аргументов не задан? \n\nЕсли при вызове функции один из аргументов не задан, он будет равен `undefined`. \n\nПопробуйте вызвать функцию `sum` с одним аргументом:\n\n``` javascript\nfunction sum(n1, n2){\n  return n1 + n2;\n}\n\nconsole.log(sum(3)); // выведется NaN, а не 8, так как результатом сложения 3 и undefined будет NaN\n\n// Пример сложения числа и undefined\n\nconsole.log(3 + undefined); // NaN\n```\n\n### Значение по умолчанию, заданное в функции\n\nЧтобы избежать такой ситуации, можно задать значение `по умолчанию` для аргумента. \n\nДля этого при объявлении функции нужно указать значение по умолчанию для аргумента. \n\nЗададим значение по умолчанию для аргументов `n1` и `n2` равное `0`:\n\n``` javascript    \nfunction sum(n1 = 0, n2 = 0){\n  return n1 + n2;\n}\n\nconsole.log(sum(3)); // выведется значение 3, так как второй аргумент равен 0\nconsole.log(sum()); //  выведется значение 0, так как оба аргумента равны 0\n```\n\n### Количество аргументов\n\nКоличество аргументов, которые принимает функция, может быть любым. \n\n``` javascript\nfunction sum(n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, n7 = 0, n8 = 0, n9 = 0, n10 = 0){\n  return n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10;\n}\n\nconsole.log(sum(1, 2, 3, 1, 2, 1, 8)); // в консоль будет выведено 18\n```\n\nЕсли переданных значений будет больше, чем заданных аргументов, то будет взято только необходимое количество значений.\n\n``` javascript\nconsole.log(sum(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) // в консоль будет выведено 10, сумма первых 10 заданных значений.\n```\n\n### Строки как аргументы функции\n\nВ качестве аргументов функции могут быть числа, строки и любые другие структуры.\n\nРассмотрим это на примере ниже.\n\nСоздадим функцию `greeting`, которая будет принимать `name` и возвращать `Hello name`:\n\n``` javascript\nfunction greeting(name){\n  return 'Hello ' + name; // оператор плюс `+` склеивает строку `Hello ` и значение переменной `name`\n}\n\nconsole.log(greeting('Alice')); // Hello Alice\n```\n\nОдну и ту же функцию можно запускать несколько раз с различными значениями.\n\nЗапустим функцию `greeting` с разными значениями:\n\n``` javascript\nconsole.log(greeting('Bob')); // Hello Bob\nconsole.log(greeting('Johny')); // Hello Johny\nconsole.log(greeting()); // Hello undefined, не было передано значения для параметра name.\n```\n\nДобавим еще один параметр `age`. Он будет принимать значение по умолчанию `0`. Для параметра `name` зададим значение по умолчанию в виде пустой строки `''`.\n\nФункция `greeting` будет возвращать строку `Hello name! Your age is age`.\n\n``` javascript\nfunction greeting(name = '', age = 0){\n  return 'Hello ' + name + '! Your age is ' + age;\n}\n\nconsole.log(greeting('Bob', 123)); // Hello Bob! Your age is 123\n```\n\nПопробуем запустить функцию `greeting` без передачи аргументов:\n\n``` javascript\n\nconsole.log(greeting('Alice')); // Hello Alice! Your age is 0 // Не было передано значения параметру age, но был задан 0 по умолчанию.\n\nconsole.log(greeting('Johny')); // Hello Johny! Your age is 0\n\nconsole.log(greeting()); // Hello ! Your age is 0 // Не были переданы значения параметрам name и age, значения взяты по умолчанию.\n```\n",
    "en": "The result of the function depends on what values are passed as arguments.\n\nLet's write a function `sum`. It takes two arguments: `n1` and `n2`. It returns the sum of these two arguments.\n\n``` javascript\nfunction sum(n1, n2){\n  return n1 + n2;\n}\n\nconsole.log(sum(3, 5)); // 8 will be returned\n```\n\n### `undefined` as the return value\n\nBut what happens if one of the arguments is not given? \n\nIf one of the arguments is not given when the function is called, it will be `undefined`. \n\nTry calling the `sum` function with one argument:\n\n``` javascript\nfunction sum(n1, n2){\n  return n1 + n2;\n}\n\nconsole.log(sum(3)); // NaN will be displayed, not 8, because the result of adding 3 and undefined will be NaN\n\n// Example of adding a number and undefined\n\nconsole.log(3 + undefined); // NaN\n```\n\n### The default value set in the function\n\nTo avoid this situation, you can set a `default` value for the argument. \n\nTo do this, you must specify a default value for the argument when declaring the function. \n\nSet the default value for the arguments `n1` and `n2` to `0`:\n\n``` javascript    \nfunction sum(n1 = 0, n2 = 0){\n  return n1 + n2;\n}\n\nconsole.log(sum(3)); // the value 3 will be returned, because the second argument is 0\nconsole.log(sum()); // the value 0 will be output, because both arguments are 0\n```\n\n### Number of arguments\n\nThe number of arguments the function accepts can be anything. \n\n``` javascript\nfunction sum(n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, n7 = 0, n8 = 0, n9 = 0, n10 = 0){\n  return n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10;\n}\n\nconsole.log(sum(1, 2, 3, 1, 2, 1, 8)); // the console will print 18\n```\n\nIf there are more values passed than the given arguments, only the necessary number of values will be taken.\n\n``` javascript\nconsole.log(sum(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) // the console will display 10, the sum of the first 10 given values.\n```\n\n### Strings as function arguments\n\nThe function arguments can be numbers, strings and any other structures.\n\nConsider this with the example below.\n\nCreate a function `greeting` that takes `name` and returns `Hello name`:\n\n``` javascript\nfunction greeting(name){\n  return 'Hello ' + name; // the plus `+` operator glues together the string `Hello ` and the value of the `name` variable\n}\n\nconsole.log(greeting('Alice')); // Hello Alice\n```\n\nThe same function can be run several times with different values.\n\nLet's run the `greeting` function with different values:\n\n``` javascript\nconsole.log(greeting('Bob')); // Hello Bob\nconsole.log(greeting('Johny')); // Hello Johny\nconsole.log(greeting()); // Hello undefined, no value was passed for the name parameter.\n```\n\nLet's add another parameter `age`. It will take the default value of `0`. For the parameter `name` set the default value as an empty string `''`.\n\nThe `greeting` function will return the string `Hello name! Your age is age`.\n\n``` javascript\nfunction greeting(name = '', age = 0){\n  return 'Hello ' + name + '! Your age is ' + age;\n}\n\nconsole.log(greeting('Bob', 123)); // Hello Bob! Your age is 123\n```\n\nLet's try to run the `greeting` function without passing any arguments:\n\n``` javascript\n\nconsole.log(greeting('Alice')); // Hello Alice! Your age is 0 // No value was passed to the age parameter, but it was set to 0 by default.\n\nconsole.log(greeting('Johny')); // Hello Johny! Your age is 0.\n\nconsole.log(greeting()); // Hello ! Your age is 0 // No values were passed to name and age, they are taken by default.\n```\n",
    "es": "# Функции с параметрами по умолчанию language: es"
  },
  "video": {
    "ru": "https://youtu.be/jl7a_uxZdZI",
    "en": "",
    "es": ""
  }
}