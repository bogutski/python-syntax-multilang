{
  "_id": "6696c2ca763f0712c198e680",
  "name": {
    "en": "Glue three objects together",
    "ru": "Склеить три объекта"
  },
  "instruction": {
    "en": "Create a function `mergeObjects`.\n\nFunction parameters:\n* `productSpecs` - object containing product specifications\n* `productInfo` - object containing information about the product\n* `productPrice` - object containing the price of the product\n\nThe function must return an object that contains all the properties of the objects `productSpecs`, `productInfo` and `productPrice`.\n\nThe `productSpecs` has the following structure:\n* `name` - product name, string\n* `sku` - unique identifier, string\n\nThe `productInfo` has the following structure:\n* `description` - product description, string\n* `manufacturer` - manufacturer of the product, string\n\nThe `productPrice` has the following structure:\n* `price` - price of the product, the number\n* `currency` - currency, string\n\n\nAn example of running the function:\n```javascript\nconst productSpecs = { name: 'Product 1', sku: '123' };\nconst productInfo = { description: 'Product 1 description', manufacturer: 'ABC' };\nconst productPrice = { price: 100, currency: 'USD' };\n\nmergeObjects(productSpecs, productInfo, productPrice);\n\n{\nname: 'Product 1',\nsku: '123',\ncode: 'abc',\ndescription: 'Product 1 description',\nmanufacturer: 'Product 1 manufacturer',\nprice: 100,\ncurrency: 'USD'\n}\n```",
    "ru": "Создайте функцию `mergeObjects`.\n\nПараметры функции:\n* `productSpecs` – объект, содержащий спецификации продукта\n* `productInfo` – объект, содержащий информацию о продукте\n* `productPrice` – объект, содержащий цену продукта\n\nФункция должна вернуть объект, содержащий все свойства объектов `productSpecs`, `productInfo` и `productPrice`.\n\n`productSpecs` имеет следующую структуру:\n* `name` – название продукта, строка\n* `sku` – уникальный идентификатор, строка\n\n`productInfo` имеет следующую структуру:\n* `description` – описание продукта, строка\n* `manufacturer` – производитель продукта, строка\n\n`productPrice` имеет следующую структуру:\n* `price` – цена продукта, число\n* `currency` – валюта, строка\n\n\nПример запуска функции:\n```javascript\nconst productSpecs = { name: 'Product 1', sku: '123' };\nconst productInfo = { description: 'Product 1 description', manufacturer: 'ABC' };\nconst productPrice = { price: 100, currency: 'USD' };\n\nmergeObjects(productSpecs, productInfo, productPrice);\n\n{\n    name: 'Product 1',\n    sku: '123',\n    description: 'Product 1 description',\n    manufacturer: 'ABC',\n    price: 100,\n    currency: 'USD'\n}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function mergeObjects(productSpecs, productInfo, productPrice) {\n  return {\n    name: productSpecs.name,\n    sku: productSpecs.sku,\n    description: productInfo.description,\n    manufacturer: productInfo.manufacturer,\n    price: productPrice.price,\n    currency: productPrice.currency,\n  };\n}",
  "openTest": "it('Created function mergeObjects', () => {\n  expect(mergeObjects).to.be.a('function');\n});\n\nit('mergeObjects({ name: \"Product 1\", sku: \"123\" }, { description: \"Product 1 description\", manufacturer: \"ABC\" }, { price: 100, currency: \"USD\" }) should return { name: \"Product 1\", sku: \"123\", description: \"Product 1 description\", manufacturer: \"ABC\", price: 100, currency: \"USD\" }', () => {\n  expect(\n    mergeObjects(\n      { name: 'Product 1', sku: '123' },\n      { description: 'Product 1 description', manufacturer: 'ABC' },\n      { price: 100, currency: 'USD' },\n    ),\n  ).to.deep.equal({\n    name: 'Product 1',\n    sku: '123',\n    description: 'Product 1 description',\n    manufacturer: 'ABC',\n    price: 100,\n    currency: 'USD',\n  });\n});\n\nit('mergeObjects({ name: \"Product 2\", sku: \"456\" }, { description: \"Product 2 description\", manufacturer: \"DEF\" }, { price: 200, currency: \"EUR\" }) should return { name: \"Product 2\", sku: \"456\", description: \"Product 2 description\", manufacturer: \"DEF\", price: 200, currency: \"EUR\" }', () => {\n  expect(\n    mergeObjects(\n      { name: 'Product 2', sku: '456' },\n      { description: 'Product 2 description', manufacturer: 'DEF' },\n      { price: 200, currency: 'EUR' },\n    ),\n  ).to.deep.equal({\n    name: 'Product 2',\n    sku: '456',\n    description: 'Product 2 description',\n    manufacturer: 'DEF',\n    price: 200,\n    currency: 'EUR',\n  });\n});\n\nit('mergeObjects({ name: \"Product 3\", sku: \"789\" }, { description: \"Product 3 description\", manufacturer: \"GHI\" }, { price: 300, currency: \"GBP\" }) should return { name: \"Product 3\", sku: \"789\", description: \"Product 3 description\", manufacturer: \"GHI\", price: 300, currency: \"GBP\" }', () => {\n  expect(\n    mergeObjects(\n      { name: 'Product 3', sku: '789' },\n      { description: 'Product 3 description', manufacturer: 'GHI' },\n      { price: 300, currency: 'GBP' },\n    ),\n  ).to.deep.equal({\n    name: 'Product 3',\n    sku: '789',\n    description: 'Product 3 description',\n    manufacturer: 'GHI',\n    price: 300,\n    currency: 'GBP',\n  });\n});\n\nit('mergeObjects({ name: \"Product 4\", sku: \"101112\" }, { description: \"Product 4 description\", manufacturer: \"JKL\" }, { price: 400, currency: \"USD\" }) should return { name: \"Product 4\", sku: \"101112\", description: \"Product 4 description\", manufacturer: \"JKL\", price: 400, currency: \"USD\" }', () => {\n  expect(\n    mergeObjects(\n      { name: 'Product 4', sku: '101112' },\n      { description: 'Product 4 description', manufacturer: 'JKL' },\n      { price: 400, currency: 'USD' },\n    ),\n  ).to.deep.equal({\n    name: 'Product 4',\n    sku: '101112',\n    description: 'Product 4 description',\n    manufacturer: 'JKL',\n    price: 400,\n    currency: 'USD',\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}