{
  "_id": "6696c2ca763f0712c198e682",
  "name": {
    "en": "Duplicate, if the similarity is more than 2 properties",
    "ru": "Дубликат, если схожесть больше 2-х свойств"
  },
  "instruction": {
    "en": "Write a function `isDuplicate` that takes two objects and returns `true` if at least two properties match, otherwise `false`.\n\nThe function takes two objects that may have the following properties:\n* `firstName` - user's first name, string\n* `lastName` - user's last name, string\n* `city` - user's city, string\n* `phone` - user's phone number, string\n\nAll properties may contain leading and trailing spaces, as well as different letter cases.\n\nThe phone number may have leading and trailing spaces, and may start with or without a `+` sign.\n\nPhone numbers with and without a `+` sign are considered the same.\n\nThe task is to check if the property values match, ignoring spaces and letter cases.\n\nIf at least two properties match, the function should return `true`, otherwise `false`.\n\nExample function calls:\n```javascript\nisDuplicate({\n  firstName: ' JohN ',\n  lastName: '  Doe',\n  phone: '+4234567890',\n  city: 'Miami'\n}, {\n  firstName: '  john  ',\n  lastName: ' D',\n  phone: ' 4234567890   ',\n  city: '  Florida '\n}) // true because firstName and phone match\n\nisDuplicate({\n  firstName: ' J ',\n  lastName: '  Doe',\n  phone: '+4234567890',\n  city: 'Miami'\n}, {\n  firstName: '  john  ',\n  lastName: ' D',\n  phone: ' 4234567890   ',\n  city: '  Florida '\n}) // false because only one property matches - phone\n\nisDuplicate({\n  firstName: ' J ',\n  lastName: '  Doe',\n  phone: '+4234567890',\n  city: '  MIAMi'\n}, {\n  firstName: '  john  ',\n  lastName: ' D',\n  phone: ' 4234567890   ',\n  city: '  miami '\n}) // true because two properties match - city and phone\n```\n\nThe combinations of properties can be different, but at least two properties must match.\n\nThe variable `count` will help you in solving the task, which will store the number of property matches.\n\nOnce a match is found, increase `count` by 1.\n\nAfter iterating through all properties, check if `count` is greater than or equal to 2.",
    "ru": "Напишите функцию `isDuplicate`, которая принимает два объекта и возвращает `true`, если совпадает хотя бы два свойства, иначе `false`.\n\nФункция принимает два объекта, в которых могут быть следующие свойства:\n* `firstName` – имя пользователя, строка\n* `lastName` – фамилия пользователя, строка\n* `city` – город пользователя, строка\n* `phone` – телефон пользователя, строка\n\nВсе свойства могут содержать пробелы в начале и в конце строки, а также разные регистры букв.\n\nВ телефоне могут быть пробелы в начале и в конце строки, а также может начинаться с `+` или без него.\n\nНомера телефонов с `+` и без него считаются одинаковыми.\n\nНужно проверить, совпадают ли значения свойств, игнорируя пробелы и регистр букв.\n\nЕсли совпадает хотя бы два свойства, то функция должна вернуть `true`, иначе `false`.\n\nПример запуска функции:\n```javascript\nisDuplicate({\n  firstName: ' JohN ',\n  lastName: '  Doe',\n  phone: '+4234567890',\n  city: 'Miami'\n}, {\n  firstName: '  john  ',\n  lastName: ' D',\n  phone: ' 4234567890   ',\n  city: '  Florida '\n}) // true потому что совпадает firstName и phone\n\nisDuplicate({\n  firstName: ' J ',\n  lastName: '  Doe',\n  phone: '+4234567890',\n  city: 'Miami'\n}, {\n  firstName: '  john  ',\n  lastName: ' D',\n  phone: ' 4234567890   ',\n  city: '  Florida '\n}) // false потому что совпадает только одно свойство - phone\n\nisDuplicate({\n  firstName: ' J ',\n  lastName: '  Doe',\n  phone: '+4234567890',\n  city: '  MIAMi'\n}, {\n  firstName: '  john  ',\n  lastName: ' D',\n  phone: ' 4234567890   ',\n  city: '  miami '\n}) // true потому что совпадает два свойства - city и phone\n```\n\nКомбинации свойств могут быть разными, но совпадать должны хотя бы два свойства.\n\nВ решении задачи вам поможет переменная `count`, которая будет хранить количество совпадений свойств.\n\nКак только нашли совпадение, увеличиваем `count` на 1.\n\nПосле того как перебрали все свойства, проверяем, что `count` больше или равно 2."
  },
  "initialSolution": "fun",
  "completedSolution": "function isDuplicate(obj1, obj2) {\n  let count = 0;\n\n  const normalize = (str) => str.trim().toLowerCase();\n  const phoneNormalize = (str) => normalize(str).replace(/^\\+/, '');\n\n  const obj1Normalized = {\n    firstName: normalize(obj1.firstName),\n    lastName: normalize(obj1.lastName),\n    city: normalize(obj1.city),\n    phone: phoneNormalize(obj1.phone),\n  };\n\n  const obj2Normalized = {\n    firstName: normalize(obj2.firstName),\n    lastName: normalize(obj2.lastName),\n    city: normalize(obj2.city),\n    phone: phoneNormalize(obj2.phone),\n  };\n\n  if (obj1Normalized.firstName === obj2Normalized.firstName) count++;\n  if (obj1Normalized.lastName === obj2Normalized.lastName) count++;\n  if (obj1Normalized.city === obj2Normalized.city) count++;\n  if (obj1Normalized.phone === obj2Normalized.phone) count++;\n\n  return count >= 2;\n}",
  "openTest": "it('Created function isDuplicate', () => {\n  expect(isDuplicate).to.be.a('function');\n});\n\nit('isDuplicate({ firstName: \" JohN \", lastName: \"  Doe\", phone: \"+4234567890\", city: \"Miami\" }, { firstName: \"  john  \", lastName: \" D\", phone: \" 4234567890   \", city: \"  Florida \" }) // true', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' JohN ',\n        lastName: '  Doe',\n        phone: '+4234567890',\n        city: 'Miami',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' D',\n        phone: ' 4234567890   ',\n        city: '  Florida ',\n      },\n    ),\n  ).to.be.true;\n});\n\nit('isDuplicate({ firstName: \" J \", lastName: \"  Doe\", phone: \"+4234567890\", city: \"Miami\" }, { firstName: \"  john  \", lastName: \" D\", phone: \" 4234567890   \", city: \"  Florida \" }) // false', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' J ',\n        lastName: '  Doe',\n        phone: '+4234567890',\n        city: 'Miami',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' D',\n        phone: ' 4234567890   ',\n        city: '  Florida ',\n      },\n    ),\n  ).to.be.false;\n});\n\nit('isDuplicate({ firstName: \" J \", lastName: \"  Doe\", phone: \"+4234567890\", city: \"  MIAMi\" }, { firstName: \"  john  \", lastName: \" D\", phone: \" 4234567890   \", city: \"  miami \" }) // true', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' J ',\n        lastName: '  Doe',\n        phone: '+4234567890',\n        city: '  MIAMi',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' D',\n        phone: ' 4234567890   ',\n        city: '  miami ',\n      },\n    ),\n  ).to.be.true;\n});\n\nit('isDuplicate({ firstName: \" J \", lastName: \"  Doe\", phone: \"+4234567890\", city: \"  MIAMi\" }, { firstName: \"  john  \", lastName: \" D\", phone: \" 4234567890   \", city: \"  miami \" }) // true', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' J ',\n        lastName: '  Doe',\n        phone: '+4234567890',\n        city: '  MIAMi',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' D',\n        phone: ' 4234567890   ',\n        city: '  miami ',\n      },\n    ),\n  ).to.be.true;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}