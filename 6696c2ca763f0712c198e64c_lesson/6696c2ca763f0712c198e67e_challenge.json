{
  "_id": "6696c2ca763f0712c198e67e",
  "name": {
    "en": "Create a copy of the product object",
    "ru": "Создайте копию объекта продукта"
  },
  "instruction": {
    "en": "Create a function `copyProduct`.\n\nFunction parameters:\n* `product` - object containing information about the product\n\nThe function should return a copy of the `product` object.\n\nThe object `product` has the following structure:\n* `name` - product name, string\n* `price` - price of the product, string\n* `sku` - unique identifier, string\n* `code` - product code, string\n\nExample of function launch:\n```javascript\nconst product = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\ncopyProduct(product); // { name: 'Product 1', price: 100, sku: '123', code: 'abc' }\n```\n\nIf you write a solution like this:\n```javascript\nfunction copyProduct(product) {\nreturn product;\n}\n```\nthen this solution would be wrong because you're not creating a copy of the object, you're returning a reference to the object.\n\nInside the `copyProduct` function, create a new object, copy all the properties of the `product` object into it and return it.\n\nThe copying of the object must be by properties only.",
    "ru": "Создайте функцию `copyProduct`.\n\nПараметры функции:\n* `product` – объект, содержащий информацию о продукте\n\nФункция должна вернуть копию объекта `product`.\n\nОбъект `product` имеет следующую структуру:\n* `name` – название продукта, строка\n* `price` – цена продукта, число\n* `sku` – уникальный идентификатор, строка\n* `code` – код продукта, строка\n\nПример запуска функции:\n```javascript\nconst product = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\ncopyProduct(product); // { name: 'Product 1', price: 100, sku: '123', code: 'abc' }\n```\n\nЕсли вы напишите такое решение:\n```javascript\nfunction copyProduct(product) {\n  return product;\n}\n```\nто это решение будет неверным, так как вы не создаёте копию объекта, а возвращаете ссылку на объект.\n\nВнутри функции `copyProduct` создайте новый объект, скопируйте в него все свойства объекта `product` и верните его.\n\nКопирование объекта должно происходить только по свойствам."
  },
  "initialSolution": "fun",
  "completedSolution": "function copyProduct(product) {\n  return {\n    name: product.name,\n    price: product.price,\n    sku: product.sku,\n    code: product.code,\n  };\n}",
  "openTest": "it('Created function copyProduct', () => {\n  expect(copyProduct).to.be.a('function');\n});\n\nit('Function copyProduct returns new object', () => {\n  const product = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\n  const productCopy = copyProduct(product);\n  expect(productCopy).to.be.an('object');\n  expect(productCopy).to.not.equal(product);\n});\n\nit('Function copyProduct returns object with same properties', () => {\n  const product = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\n  const productCopy = copyProduct(product);\n  expect(productCopy).to.have.all.keys('name', 'price', 'sku', 'code');\n});\n\nit('Function copyProduct returns object with same values', () => {\n  const product = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\n  const productCopy = copyProduct(product);\n  expect(productCopy).to.deep.equal(product);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}