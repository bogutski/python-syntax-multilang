{
  "_id": "6696c2ca763f0712c198e681",
  "name": {
    "en": "Voting results from four polling stations",
    "ru": "Результаты голосования с четырех участков"
  },
  "instruction": {
    "en": "There are four polling stations and five candidates.\n\nThe function `getVotingResults` needs to be written.\n\nThe function takes four objects as input.\n\nEach object contains information about the votes for each candidate from one polling station.\n\nEach object has the following structure:\n* `candidate1` - number of votes for the first candidate, number\n* `candidate2` - number of votes for the second candidate, number\n* `candidate3` - number of votes for the third candidate, a number\n* `candidate4` - number of votes for the fourth candidate, number\n* `candidate5` - number of votes for the fifth candidate, number\n\nThe function should return a string of the form: `candidate3 Wins! 150 votes`.\n\nAn example of running the function:\n```javascript\nconst votingResults1 = { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 };\nconst votingResults2 = { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 };\nconst votingResults3 = { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 };\nconst votingResults4 = { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 };\ngetVotingResults(votingResults1, votingResults2, votingResults3, votingResults4);\n// candidate5 Wins! 200 votes\n```\n\nThe function will always pass data where only one candidate has the most votes.\n\nThere will be no situation where two or more candidates have the same number of votes.",
    "ru": "Есть четыре избирательных участка и пять кандидатов.\n\nНеобходимо написать функцию `getVotingResults`.\n\nФункция принимает на вход четыре объекта.\n\nКаждый объект содержит информацию о голосах за каждого кандидата с одного избирательного участка.\n\nКаждый объект имеет следующую структуру:\n* `candidate1` – количество голосов за первого кандидата, число\n* `candidate2` – количество голосов за второго кандидата, число\n* `candidate3` – количество голосов за третьего кандидата, число\n* `candidate4` – количество голосов за четвертого кандидата, число\n* `candidate5` – количество голосов за пятого кандидата, число\n\nФункция должна вернуть строку вида: `candidate3 Wins! 150 votes`.\n\nПример запуска функции:\n```javascript\nconst votingResults1 = { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 };\nconst votingResults2 = { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 };\nconst votingResults3 = { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 };\nconst votingResults4 = { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 };\ngetVotingResults(votingResults1, votingResults2, votingResults3, votingResults4);\n// candidate5 Wins! 200 votes\n```\n\nВ функцию всегда будут передаваться данные, в которых только один кандидат набрал больше всех голосов.\n\nНе будет ситуации, когда два или более кандидатов набрали одинаковое количество голосов."
  },
  "initialSolution": "fun",
  "completedSolution": "//\nfunction getVotingResults(\n  votingResults1,\n  votingResults2,\n  votingResults3,\n  votingResults4,\n) {\n  const candidates = {\n    candidate1:\n      votingResults1.candidate1 +\n      votingResults2.candidate1 +\n      votingResults3.candidate1 +\n      votingResults4.candidate1,\n    candidate2:\n      votingResults1.candidate2 +\n      votingResults2.candidate2 +\n      votingResults3.candidate2 +\n      votingResults4.candidate2,\n    candidate3:\n      votingResults1.candidate3 +\n      votingResults2.candidate3 +\n      votingResults3.candidate3 +\n      votingResults4.candidate3,\n    candidate4:\n      votingResults1.candidate4 +\n      votingResults2.candidate4 +\n      votingResults3.candidate4 +\n      votingResults4.candidate4,\n    candidate5:\n      votingResults1.candidate5 +\n      votingResults2.candidate5 +\n      votingResults3.candidate5 +\n      votingResults4.candidate5,\n  };\n\n  if (\n    candidates.candidate1 > candidates.candidate2 &&\n    candidates.candidate1 > candidates.candidate3 &&\n    candidates.candidate1 > candidates.candidate4 &&\n    candidates.candidate1 > candidates.candidate5\n  ) {\n    return `candidate1 Wins! ${candidates.candidate1} votes`;\n  } else if (\n    candidates.candidate2 > candidates.candidate1 &&\n    candidates.candidate2 > candidates.candidate3 &&\n    candidates.candidate2 > candidates.candidate4 &&\n    candidates.candidate2 > candidates.candidate5\n  ) {\n    return `candidate2 Wins! ${candidates.candidate2} votes`;\n  } else if (\n    candidates.candidate3 > candidates.candidate1 &&\n    candidates.candidate3 > candidates.candidate2 &&\n    candidates.candidate3 > candidates.candidate4 &&\n    candidates.candidate3 > candidates.candidate5\n  ) {\n    return `candidate3 Wins! ${candidates.candidate3} votes`;\n  } else if (\n    candidates.candidate4 > candidates.candidate1 &&\n    candidates.candidate4 > candidates.candidate2 &&\n    candidates.candidate4 > candidates.candidate3 &&\n    candidates.candidate4 > candidates.candidate5\n  ) {\n    return `candidate4 Wins! ${candidates.candidate4} votes`;\n  } else if (\n    candidates.candidate5 > candidates.candidate1 &&\n    candidates.candidate5 > candidates.candidate2 &&\n    candidates.candidate5 > candidates.candidate3 &&\n    candidates.candidate5 > candidates.candidate4\n  ) {\n    return `candidate5 Wins! ${candidates.candidate5} votes`;\n  }\n}",
  "openTest": "it('Created function getVotingResults', () => {\n  expect(getVotingResults).to.be.a('function');\n});\n\nit('getVotingResults({ candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 }, { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 }, { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 }, { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 }) should return candidate5 Wins! 200 votes', () => {\n  expect(\n    getVotingResults(\n      { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 },\n      { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 },\n      { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 },\n      { candidate1: 10, candidate2: 20, candidate3: 30, candidate4: 40, candidate5: 50 },\n    ),\n  ).to.be.equal('candidate5 Wins! 200 votes');\n});\n\n// candidate 1 wins\nit('getVotingResults({ candidate1: 10, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 5 }, { candidate1: 10, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 5 }, { candidate1: 10, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 5 }, { candidate1: 10, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 5 }) should return candidate1 Wins! 40 votes', () => {\n  expect(\n    getVotingResults(\n      { candidate1: 10, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 5 },\n      { candidate1: 10, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 5 },\n      { candidate1: 10, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 5 },\n      { candidate1: 10, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 5 },\n    ),\n  ).to.be.equal('candidate1 Wins! 40 votes');\n});\n\n// candidate 2 wins\nit('getVotingResults({ candidate1: 1, candidate2: 20, candidate3: 3, candidate4: 4, candidate5: 5 }, { candidate1: 1, candidate2: 20, candidate3: 3, candidate4: 4, candidate5: 5 }, { candidate1: 1, candidate2: 20, candidate3: 3, candidate4: 4, candidate5: 5 }, { candidate1: 1, candidate2: 20, candidate3: 3, candidate4: 4, candidate5: 5 }) should return candidate2 Wins! 80 votes', () => {\n  expect(\n    getVotingResults(\n      { candidate1: 1, candidate2: 20, candidate3: 3, candidate4: 4, candidate5: 5 },\n      { candidate1: 1, candidate2: 20, candidate3: 3, candidate4: 4, candidate5: 5 },\n      { candidate1: 1, candidate2: 20, candidate3: 3, candidate4: 4, candidate5: 5 },\n      { candidate1: 1, candidate2: 20, candidate3: 3, candidate4: 4, candidate5: 5 },\n    ),\n  ).to.be.equal('candidate2 Wins! 80 votes');\n});\n\n// candidate 3 wins\nit('getVotingResults({ candidate1: 1, candidate2: 2, candidate3: 30, candidate4: 4, candidate5: 5 }, { candidate1: 1, candidate2: 2, candidate3: 30, candidate4: 4, candidate5: 5 }, { candidate1: 1, candidate2: 2, candidate3: 30, candidate4: 4, candidate5: 5 }, { candidate1: 1, candidate2: 2, candidate3: 30, candidate4: 4, candidate5: 5 }) should return candidate3 Wins! 120 votes', () => {\n  expect(\n    getVotingResults(\n      { candidate1: 1, candidate2: 2, candidate3: 30, candidate4: 4, candidate5: 5 },\n      { candidate1: 1, candidate2: 2, candidate3: 30, candidate4: 4, candidate5: 5 },\n      { candidate1: 1, candidate2: 2, candidate3: 30, candidate4: 4, candidate5: 5 },\n      { candidate1: 1, candidate2: 2, candidate3: 30, candidate4: 4, candidate5: 5 },\n    ),\n  ).to.be.equal('candidate3 Wins! 120 votes');\n});\n\n// candidate 4 wins\nit('getVotingResults({ candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 40, candidate5: 5 }, { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 40, candidate5: 5 }, { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 40, candidate5: 5 }, { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 40, candidate5: 5 }) should return candidate4 Wins! 160 votes', () => {\n  expect(\n    getVotingResults(\n      { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 40, candidate5: 5 },\n      { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 40, candidate5: 5 },\n      { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 40, candidate5: 5 },\n      { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 40, candidate5: 5 },\n    ),\n  ).to.be.equal('candidate4 Wins! 160 votes');\n});\n\n// candidate 5 wins\nit('getVotingResults({ candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 50 }, { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 50 }, { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 50 }, { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 50 }) should return candidate5 Wins! 200 votes', () => {\n  expect(\n    getVotingResults(\n      { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 50 },\n      { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 50 },\n      { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 50 },\n      { candidate1: 1, candidate2: 2, candidate3: 3, candidate4: 4, candidate5: 50 },\n    ),\n  ).to.be.equal('candidate5 Wins! 200 votes');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}