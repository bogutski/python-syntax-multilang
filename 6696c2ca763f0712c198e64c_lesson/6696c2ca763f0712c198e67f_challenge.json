{
  "_id": "6696c2ca763f0712c198e67f",
  "name": {
    "en": "Swap properties between objects. Product SKU",
    "ru": "Поменять свойства между объектами. SKU продукта"
  },
  "instruction": {
    "en": "Write a function `swapProductSku`.\n\nParameters of the function:\n* `product1` - object containing product information\n* `product2` - object containing information about the product\n\nThe function should swap the values of the properties `sku` of the objects `product1` and `product2`.\n\nThe function should not return anything.\n\nAn example of how to run the function:\n```javascript\nconst product1 = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\nconst product2 = { name: 'Product 2', price: 200, sku: '456', code: 'def' };\nswapProductSku(product1, product2);\nconsole.log(product1.sku); // '456'\nconsole.log(product2.sku); // '123'\n```\n\nSimilar example:\n```javascript\nfunction swapPrice(obj1, obj2) {\nconst temp = obj1.price;\nobj1.price = obj2.price;\nobj2.price = temp;\n}\n\nconst product1 = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\nconst product2 = { name: 'Product 2', price: 200, sku: '456', code: 'def' };\n\nswapPrice(product1, product2);\nconsole.log(product1.price); // 100\nconsole.log(product2.price); // 200\n```",
    "ru": "Напишите функцию `swapProductSku`.\n\nПараметры функции:\n* `product1` – объект, содержащий информацию о продукте\n* `product2` – объект, содержащий информацию о продукте\n\nФункция должна поменять местами значения свойств `sku` у объектов `product1` и `product2`.\n\nФункция не должна ничего возвращать.\n\nПример запуска функции:\n```javascript\nconst product1 = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\nconst product2 = { name: 'Product 2', price: 200, sku: '456', code: 'def' };\nswapProductSku(product1, product2);\nconsole.log(product1.sku); // '456'\nconsole.log(product2.sku); // '123'\n```\n\nПохожий пример:\n```javascript\nfunction swapPrice(obj1, obj2) {\n  const temp = obj1.price;\n  obj1.price = obj2.price;\n  obj2.price = temp;\n}\n\nconst product1 = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\nconst product2 = { name: 'Product 2', price: 200, sku: '456', code: 'def' };\n\nswapPrice(product1, product2);\nconsole.log(product1.price); // 100\nconsole.log(product2.price); // 200\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function swapProductSku(product1, product2) {\n  const temp = product1.sku;\n  product1.sku = product2.sku;\n  product2.sku = temp;\n}",
  "openTest": "it('Created function swapProductSku', () => {\n  expect(swapProductSku).to.be.a('function');\n});\n\nit('Swapped sku for { name: \"Product 1\", sku: \"123\" } and { name: \"Product 2\", sku: \"456\" })', () => {\n  const product1 = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\n  const product2 = { name: 'Product 2', price: 200, sku: '456', code: 'def' };\n  swapProductSku(product1, product2);\n  expect(product1.sku).to.equal('456');\n  expect(product2.sku).to.equal('123');\n});\n\nit('Swapped sku for { name: \"Product 1\", sku: \"A1678\" } and { name: \"Product 2\", sku: \"B1678\" })', () => {\n  const product1 = { name: 'Product 1', price: 100, sku: 'A1678', code: 'abc' };\n  const product2 = { name: 'Product 2', price: 200, sku: 'B1678', code: 'def' };\n  swapProductSku(product1, product2);\n  expect(product1.sku).to.equal('B1678');\n  expect(product2.sku).to.equal('A1678');\n});\n\nit('function returns undefined', () => {\n  const product1 = { name: 'Product 1', price: 100, sku: '123', code: 'abc' };\n  const product2 = { name: 'Product 2', price: 200, sku: '456', code: 'def' };\n  expect(swapProductSku(product1, product2)).to.equal(undefined);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}