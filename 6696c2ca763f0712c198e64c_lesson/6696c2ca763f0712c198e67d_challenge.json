{
  "_id": "6696c2ca763f0712c198e67d",
  "name": {
    "en": "Are the products the same. Comparing objects",
    "ru": "Одинаковые ли продукты. Сравнение объектов"
  },
  "instruction": {
    "en": "To the warehouse, a new batch of products has been delivered.\n\nYou need to write a function `isSameProduct` that should return `true` if there are identical products among the products, and `false` otherwise.\n\nThe function takes the following parameters:\n* `product1` - an object containing information about the first product\n* `product2` - an object containing information about the second product\n* `product3` - an object containing information about the third product\n\nThe products have properties:\n* `sku` - a unique identifier, string\n* `code` - product code, string\n* `name` - product name, string\n* `price` - product price, number\n\nThe function should return `true` if there are products with identical `sku` and `code` properties. Otherwise, the function should return `false`.\n\nComparison of products should only be based on the `sku` and `code` properties. Other properties should not be considered.\n\nExample function call:\n```javascript\nconst product1 = { sku: '123', code: 'abc', name: 'Product 1', price: 100 };\nconst product2 = { sku: '123', code: 'abc', name: 'Product 2', price: 200 };\nconst product3 = { sku: '124', code: 'abc', name: 'Product 3', price: 300 };\n\nisSameProduct(product1, product2, product3); // true. Products product1 and product2 are identical\n\nconst product10 = { sku: '121', code: 'abc', name: 'Product 1', price: 100 };\nconst product20 = { sku: '123', code: 'abcd', name: 'Product 2', price: 100 };\nconst product30 = { sku: '124', code: 'abc', name: 'Product 3', price: 100 };\n\nisSameProduct(product10, product20, product30); // false. All products are different\n```\n\nCompare each product with each other.\n\nIf at least one pair of products is found where the `sku` and `code` properties match, the function should return `true`, otherwise - `false`.",
    "ru": "На склад привезли новую партию продуктов.\n\nНужно написать функцию `isSameProduct`, которая должна вернуть `true`, если среди продуктов есть одинаковые, и `false` в противном случае.\n\nФункция принимает параметры:\n* `product1` – объект, содержащий информацию о первом продукте\n* `product2` – объект, содержащий информацию о втором продукте\n* `product3` – объект, содержащий информацию о третьем продукте\n\nВ продуктах есть свойства:\n* `sku` – уникальный идентификатор, строка\n* `code` – код продукта, строка\n* `name` – название продукта, строка\n* `price` – цена продукта, число\n\nФункция должна вернуть `true`, если есть продукты с одинаковыми свойствами `sku` и `code`. В противном случае функция должна вернуть `false`.\n\nСравнение продуктов должно происходить только по свойствам `sku` и `code`. Остальные свойства не должны учитываться.\n\nПример запуска функции:\n```javascript\nconst product1 = { sku: '123', code: 'abc', name: 'Product 1', price: 100 };\nconst product2 = { sku: '123', code: 'abc', name: 'Product 2', price: 200 };\nconst product3 = { sku: '124', code: 'abc', name: 'Product 3', price: 300 };\n\nisSameProduct(product1, product2, product3); // true. Продукты product1 и product2 одинаковые\n\nconst product10 = { sku: '121', code: 'abc', name: 'Product 1', price: 100 };\nconst product20 = { sku: '123', code: 'abcd', name: 'Product 2', price: 100 };\nconst product30 = { sku: '124', code: 'abc', name: 'Product 3', price: 100 };\n\nisSameProduct(product10, product20, product30); // false. Все продукты разные\n```\n\nСравните каждый продукт с каждым.\n\nЕсли найдётся хотя бы одна пара продуктов, у которых совпадают свойства `sku` и `code`, то функция должна вернуть `true`, иначе – `false`."
  },
  "initialSolution": "fun",
  "completedSolution": "function isSameProduct(product1, product2, product3) {\n  return (\n    (product1.sku === product2.sku && product1.code === product2.code) ||\n    (product1.sku === product3.sku && product1.code === product3.code) ||\n    (product2.sku === product3.sku && product2.code === product3.code)\n  );\n}",
  "openTest": "it('Created function isSameProduct', () => {\n  expect(isSameProduct).to.be.a('function');\n});\n\nit('isSameProduct({ sku: \"123\", code: \"abc\", name: \"Product 1\", price: 100 }, { sku: \"123\", code: \"abc\", name: \"Product 2\", price: 200 }, { sku: \"124\", code: \"abc\", name: \"Product 3\", price: 300 }) should return true', () => {\n  const product1 = { sku: '123', code: 'abc', name: 'Product 1', price: 100 };\n  const product2 = { sku: '123', code: 'abc', name: 'Product 2', price: 200 };\n  const product3 = { sku: '124', code: 'abc', name: 'Product 3', price: 300 };\n  expect(isSameProduct(product1, product2, product3)).to.be.true;\n});\n\nit('isSameProduct({ sku: \"121\", code: \"abc\", name: \"Product 1\", price: 100 }, { sku: \"123\", code: \"abcd\", name: \"Product 2\", price: 100 }, { sku: \"124\", code: \"abc\", name: \"Product 3\", price: 100 }) should return false', () => {\n  const product1 = { sku: '121', code: 'abc', name: 'Product 1', price: 100 };\n  const product2 = { sku: '123', code: 'abcd', name: 'Product 2', price: 100 };\n  const product3 = { sku: '124', code: 'abc', name: 'Product 3', price: 100 };\n  expect(isSameProduct(product1, product2, product3)).to.be.false;\n});\n\nit('isSameProduct({ sku: \"123\", code: \"abc\", name: \"Product 1\", price: 100 }, { sku: \"123\", code: \"abc\", name: \"Product 2\", price: 200 }, { sku: \"123\", code: \"abc\", name: \"Product 3\", price: 300 }) should return true', () => {\n  const product1 = { sku: '123', code: 'abc', name: 'Product 1', price: 100 };\n  const product2 = { sku: '123', code: 'abc', name: 'Product 2', price: 200 };\n  const product3 = { sku: '123', code: 'abc', name: 'Product 3', price: 300 };\n  expect(isSameProduct(product1, product2, product3)).to.be.true;\n});\n\n// 1 and 2 are the same\nit('isSameProduct({ sku: \"123\", code: \"abc\", name: \"Product 1\", price: 100 }, { sku: \"123\", code: \"abc\", name: \"Product 2\", price: 200 }, { sku: \"124\", code: \"abc\", name: \"Product 3\", price: 300 }) should return true', () => {\n  const product1 = { sku: '123', code: 'abc', name: 'Product 1', price: 100 };\n  const product2 = { sku: '123', code: 'abc', name: 'Product 2', price: 200 };\n  const product3 = { sku: '124', code: 'abc', name: 'Product 3', price: 300 };\n  expect(isSameProduct(product1, product2, product3)).to.be.true;\n});\n\n// 1 and 3 are the same\nit('isSameProduct({ sku: \"123\", code: \"abc\", name: \"Product 1\", price: 100 }, { sku: \"124\", code: \"abc\", name: \"Product 2\", price: 200 }, { sku: \"123\", code: \"abc\", name: \"Product 3\", price: 300 }) should return true', () => {\n  const product1 = { sku: '123', code: 'abc', name: 'Product 1', price: 100 };\n  const product2 = { sku: '124', code: 'abc', name: 'Product 2', price: 200 };\n  const product3 = { sku: '123', code: 'abc', name: 'Product 3', price: 300 };\n  expect(isSameProduct(product1, product2, product3)).to.be.true;\n});\n\n// 2 and 3 are the same\nit('isSameProduct({ sku: \"124\", code: \"abc\", name: \"Product 1\", price: 100 }, { sku: \"123\", code: \"abc\", name: \"Product 2\", price: 200 }, { sku: \"123\", code: \"abc\", name: \"Product 3\", price: 300 }) should return true', () => {\n  const product1 = { sku: '124', code: 'abc', name: 'Product 1', price: 100 };\n  const product2 = { sku: '123', code: 'abc', name: 'Product 2', price: 200 };\n  const product3 = { sku: '123', code: 'abc', name: 'Product 3', price: 300 };\n  expect(isSameProduct(product1, product2, product3)).to.be.true;\n});\n\n// 1 and 2 are the same, 2 and 3 are the same\nit('isSameProduct({ sku: \"123\", code: \"abc\", name: \"Product 1\", price: 100 }, { sku: \"123\", code: \"abc\", name: \"Product 2\", price: 200 }, { sku: \"123\", code: \"abc\", name: \"Product 3\", price: 300 }) should return true', () => {\n  const product1 = { sku: '123', code: 'abc', name: 'Product 1', price: 100 };\n  const product2 = { sku: '123', code: 'abc', name: 'Product 2', price: 200 };\n  const product3 = { sku: '123', code: 'abc', name: 'Product 3', price: 300 };\n  expect(isSameProduct(product1, product2, product3)).to.be.true;\n});\n\n// all different\nit('isSameProduct({ sku: \"121\", code: \"abc1\", name: \"Product 1\", price: 200 }, { sku: \"122\", code: \"ab2\", name: \"Product 1\", price: 200 }, { sku: \"123\", code: \"abc3\", name: \"Product 1\", price: 200 }) should return false', () => {\n  const product1 = { sku: '121', code: 'abc1', name: 'Product 1', price: 200 };\n  const product2 = { sku: '122', code: 'ab2', name: 'Product 1', price: 200 };\n  const product3 = { sku: '123', code: 'abc3', name: 'Product 1', price: 200 };\n  expect(isSameProduct(product1, product2, product3)).to.be.false;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}