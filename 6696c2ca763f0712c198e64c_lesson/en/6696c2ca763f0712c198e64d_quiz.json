{
  "name": "Reference data type. Copying objects",
  "questions": {
    "0": {
      "name": "What type of data does the object belong to?",
      "variants": {
        "0": {
          "name": "Primitive data type"
        },
        "1": {
          "name": "Reference data type"
        }
      }
    },
    "1": {
      "name": "Objects are stored and copied 'by reference'",
      "variants": {
        "0": {
          "name": "The statement is correct"
        },
        "1": {
          "name": "The statement is incorrect"
        }
      }
    },
    "2": {
      "name": "What does the variable to which the object is assigned store?",
      "variants": {
        "0": {
          "name": "The object itself"
        },
        "1": {
          "name": "Object Properties"
        },
        "2": {
          "name": "An object reference"
        },
        "3": {
          "name": "The values of the object properties"
        }
      }
    },
    "3": {
      "name": "When you assign a user object to another variable, it happens:",
      "description": "```javascript\n const user = {name: 'Alex', age: 35};\n const user2 = user;\n```",
      "variants": {
        "0": {
          "name": "Copying the whole object into a new variable"
        },
        "1": {
          "name": "The object is overwritten with a new variable"
        },
        "2": {
          "name": "Only a reference to the object is written to the new variable"
        },
        "3": {
          "name": "A new object with the same name is created"
        }
      }
    },
    "4": {
      "name": "How to properly copy one object into another?",
      "variants": {
        "0": {
          "name": "Copy each property of one object into another"
        },
        "1": {
          "name": "Copy a reference from one object to another using the assignment operator"
        }
      }
    },
    "5": {
      "name": "console.log({} === {}); What will the console display and why?",
      "variants": {
        "0": {
          "name": "true, because both objects are empty"
        },
        "1": {
          "name": "false, because object references are compared"
        },
        "2": {
          "name": "false, because empty objects are compared"
        },
        "3": {
          "name": "true, because the object references are the same"
        }
      }
    },
    "6": {
      "name": "What is stored in reference data types?",
      "variants": {
        "0": {
          "name": "Directly their data"
        },
        "1": {
          "name": "Type of transmitted data"
        },
        "2": {
          "name": "Link to their data"
        },
        "3": {
          "name": "Primitive data types"
        }
      }
    },
    "7": {
      "name": "Choose the correct way to copy a circle object with radius and color properties to an oval object",
      "variants": {
        "0": {
          "name": "const oval = circle;"
        },
        "1": {
          "name": "const circle = oval;"
        },
        "2": {
          "name": "oval.radius = circle.radius; oval.color = circle.color;"
        },
        "3": {
          "name": "const oval = circle.radius;"
        }
      }
    },
    "8": {
      "name": "const school = {students: 150}; What is written in the variable?",
      "variants": {
        "0": {
          "name": "Link to school object"
        },
        "1": {
          "name": "The object of the school"
        },
        "2": {
          "name": "School object properties"
        },
        "3": {
          "name": "The value of the students property of the school object"
        }
      }
    },
    "9": {
      "name": "const school = {students: 150}; const college = school; What is written in the college variable?",
      "variants": {
        "0": {
          "name": "Values of the students school object property"
        },
        "1": {
          "name": "Link to school object"
        },
        "2": {
          "name": "School object properties"
        },
        "3": {
          "name": "All options are correct"
        }
      }
    }
  }
}