{
  "_id": "6696c2ca763f0712c198e67b",
  "name": {
    "en": "Search for duplicate users",
    "ru": "Поиск дубликатов пользователей"
  },
  "instruction": {
    "en": "To participate in the event, users must fill out an application.\n\nEach completed application is an object with user information.\n\nAfter submitting the application, the system will compare it with each of the previously submitted applications.\n\nIf this application has already been submitted before, the resubmission will be considered a duplicate.\n\nWe will only create a mechanism to compare one application with another.\n\nWhen users submit an application, they fill in the following fields:\n* `firstName` - user's first name, string\n* `lastName` - user's last name, string\n* `phone` - user's phone number, string\n* `city` - user's city, string\n\nWrite a function `isDuplicate`.\n\nFunction parameters:\n* `profileSaved` - object with information about the user who has already submitted an application.\n* `profileNew` - object with information about the user who is about to submit an application.\n\nThe function should return `true` if the applications match, and `false` if they don't.\n\nIn the submitted and new applications, users can perform the following actions:\n* There may be spaces at the beginning and end of the first and last names.\n* The first and last names may have different letter cases.\n* There may be spaces at the beginning and end of the phone number.\n* The phone number may start with `+` or without it.\n\nPhone numbers with and without `+` are considered the same.\n\nFunction call example:\n```javascript\nisDuplicate({\n  firstName: ' JohN ',\n  lastName: '  Doe',\n  phone: '+4234567890',\n  city: 'Miami'\n}, {\n  firstName: '  john  ',\n  lastName: ' DOE',\n  phone: ' 4234567890   ',\n  city: '  MIAMI '\n}) // true\n```\n\nIn this example, the applications match because the users are the same regardless of different letter cases, spaces, and `+` in the phone number.",
    "ru": "Для участия в мероприятии пользователи должны заполнить заявку.\n\nКаждая заполненная заявка – объект с информацией о пользователе.\n\nПосле отправления заявки система будет сравнивать ее с каждой из уже отправленных заявок.\n\nЕсли эта заявка уже была отправлена ранее, то повторная отправка будет считаться дубликатом.\n\nМы сделаем только механизм сравнения одной заявки с другой.\n\nКогда пользователи оставляют заявку, они заполняют следующие поля:\n* `firstName` – имя пользователя, строка\n* `lastName` – фамилия пользователя, строка\n* `phone` – телефон пользователя, строка\n* `city` – город пользователя, строка\n\nНапишите функцию `isDuplicate`.\n\nПараметры функции:\n* `profileSaved` – объект с информацией о пользователе, который уже отправил заявку.\n* `profileNew` – объект с информацией о пользователе, который собирается отправить заявку.\n\nФункция должна вернуть `true`, если заявки совпадают, и `false`, если нет.\n\nВ отправленных и в новых заявках пользователи могут допускать следующие действия:\n* В имени и фамилии могут быть пробелы в начале и в конце строки.\n* В имени и фамилии могут быть разные регистры букв.\n* В телефоне могут быть пробелы в начале и в конце строки.\n* Номер телефона может начинаться с `+` или без него.\n\nНомера телефонов с `+` и без него считаются одинаковыми.\n\nПример запуска функции:\n```javascript\nisDuplicate({\n  firstName: ' JohN ',\n  lastName: '  Doe',\n  phone: '+4234567890',\n  city: 'Miami'\n}, {\n  firstName: '  john  ',\n  lastName: ' DOE',\n  phone: ' 4234567890   ',\n  city: '  MIAMI '\n}) // true\n```\n\nВ этом примере заявки совпадают, потому что пользователи одинаковые не смотря на разные регистры букв, пробелы и `+` в номере телефона."
  },
  "initialSolution": "fun",
  "completedSolution": "function isDuplicate(profileSaved, profileNew) {\n  const normalize = (str) => str.trim().toLowerCase();\n  const normalizePhone = (str) => normalize(str).replace(/^\\+/, '');\n\n  return (\n    normalize(profileSaved.firstName) === normalize(profileNew.firstName) &&\n    normalize(profileSaved.lastName) === normalize(profileNew.lastName) &&\n    normalizePhone(profileSaved.phone) === normalizePhone(profileNew.phone) &&\n    normalize(profileSaved.city) === normalize(profileNew.city)\n  );\n}",
  "openTest": "it('Created function isDuplicate', () => {\n  expect(isDuplicate).to.be.a('function');\n});\n\nit('isDuplicate({firstName: \" JohN \", lastName: \"  Doe\", phone: \"+4234567890\", city: \"Miami\"}, {firstName: \"  john  \", lastName: \" DOE\", phone: \" 4234567890   \", city: \"  MIAMI \"}) should return true', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' JohN ',\n        lastName: '  Doe',\n        phone: '+4234567890',\n        city: 'Miami',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' DOE',\n        phone: ' 4234567890   ',\n        city: '  MIAMI ',\n      },\n    ),\n  ).to.be.equal(true);\n});\n\n// almost equal\nit('isDuplicate({firstName: \" Alex \", lastName: \"  Doe\", phone: \"+4234567890\", city: \"Miami\"}, {firstName: \"  john  \", lastName: \" DOE\", phone: \" 4234567890   \", city: \"  MIAMI \"}) should return false', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' Alex ',\n        lastName: '  Doe',\n        phone: '+4234567890',\n        city: 'Miami',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' DOE',\n        phone: ' 4234567890   ',\n        city: '  MIAMI ',\n      },\n    ),\n  ).to.be.equal(false);\n});\n\n// different phone\nit('isDuplicate({firstName: \" JohN \", lastName: \"  Doe\", phone: \"+4234567890\", city: \"Miami\"}, {firstName: \"  john  \", lastName: \" DOE\", phone: \" 4234567891   \", city: \"  MIAMI \"}) should return false', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' JohN ',\n        lastName: '  Doe',\n        phone: '+4234567890',\n        city: 'Miami',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' DOE',\n        phone: ' 4234567891   ',\n        city: '  MIAMI ',\n      },\n    ),\n  ).to.be.equal(false);\n});\n\n// different city\nit('isDuplicate({firstName: \" JohN \", lastName: \"  Doe\", phone: \"+4234567890\", city: \"Miami\"}, {firstName: \"  john  \", lastName: \" DOE\", phone: \" 4234567890   \", city: \"  New York \"}) should return false', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' JohN ',\n        lastName: '  Doe',\n        phone: '+4234567890',\n        city: 'Miami',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' DOE',\n        phone: ' 4234567890   ',\n        city: '  New York ',\n      },\n    ),\n  ).to.be.equal(false);\n});\n\n// different first name\nit('isDuplicate({firstName: \" Alex \", lastName: \"  Doe\", phone: \"+4234567890\", city: \"Miami\"}, {firstName: \"  john  \", lastName: \" DOE\", phone: \" 4234567890   \", city: \"  MIAMI \"}) should return false', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' Alex ',\n        lastName: '  Doe',\n        phone: '+4234567890',\n        city: 'Miami',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' DOE',\n        phone: ' 4234567890   ',\n        city: '  MIAMI ',\n      },\n    ),\n  ).to.be.equal(false);\n});\n\n// different last name\nit('isDuplicate({firstName: \" JohN \", lastName: \"  Salley\", phone: \"+4234567890\", city: \"Miami\"}, {firstName: \"  john  \", lastName: \" DOE\", phone: \" 4234567890   \", city: \"  MIAMI \"}) should return false', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' JohN ',\n        lastName: '  Salley',\n        phone: '+4234567890',\n        city: 'Miami',\n      },\n      {\n        firstName: '  john  ',\n        lastName: ' DOE',\n        phone: ' 4234567890   ',\n        city: '  MIAMI ',\n      },\n    ),\n  ).to.be.equal(false);\n});\n\n// all equal. all fields with spaces. Name : Robert city : New York phone : +245678921324\nit('isDuplicate({firstName: \" Robert  \", lastName: \"  Wood\", phone: \"+245678921324\", city: \"New York\"}, {firstName: \"  Robert  \", lastName: \" WOod\", phone: \" 245678921324   \", city: \"  New York \"}) should return true', () => {\n  expect(\n    isDuplicate(\n      {\n        firstName: ' Robert  ',\n        lastName: '  Wood',\n        phone: '+245678921324',\n        city: 'New York',\n      },\n      {\n        firstName: '  Robert  ',\n        lastName: ' WOod',\n        phone: ' 245678921324   ',\n        city: '  New York ',\n      },\n    ),\n  ).to.be.equal(true);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}