{
  "_id": "6696c2ca763f0712c198e6c1",
  "content": {
    "ru": "Мы уже разобрали объекты, строки, числа, логические операторы, ветвление.\n\nТеперь давайте рассмотрим массив. Массивы - это упорядоченный тип данных.\n\nЕсли объект - это куча свойств, наваленных всё вместе, то массив - это список.\n\nТип данных массива - это объект.\n\nДля обращения к какому-то свойству объекта мы используем ключ, так как нельзя сказать,\nчто внутри объекта есть какой-то порядок: что-то первое, а что-то второе. Свойства объекта лежат как\nпредметы на столе.\n\nВ случае с массивом мы всегда говорим про список.\nНапример, список студентов, список учеников класса, порядок дней недели, список дел - это всё примеры списка.\n\nДля того чтобы создать массив, мы используем квадратные скобки.\n\nДавайте создадим массив списка дел:\n```javascript\nconst todoList = []    //мы создали пустой массив\n```\nВнутри массива могут быть любые типы данных: строки, числа, объекты, другие массивы.\n\nСделаем список строк.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call']    \n```\n\nЭлементы массива отделяются друг от друга запятой.\n\nЧтобы вывести массив в консоль, мы используем команду `console.log` и в скобках указываем имя массива.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call']    \n\nconsole.log(todoList)    //[\"Wash Car\", \"Store\", \"Call\"]\n```\nВ основе создания массива лежит объект. Если пользоваться консолью браузера, то можно увидеть, что рядом с каждым элементом стоит цифра (0, 1, 2).\nЭлементы массива имеют индексы.\n\nНумерация индексов начинается с нуля. Также как в строках.\n\nВ примере выше мы имеем индексы 0, 1, 2.\n```javascript\n0: \"Wash Car\"\n1: \"Store\"\n2: \"Call\"\n```\nТочно также как у строк, у массива тоже есть длина. Для получения длины массива мы используем свойство `length`.\n```javascript\nconsole.log(todoList.length)    //3\n```\nМассив имеет 3 элемента (на первом уровне!).\n\nВнутри элементов массива могут быть другие массивы. Это называется вложенностью.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call', []] //последний элемент массива это пустой массив    \n\nconsole.log(todoList.length)    //4\n```\n\nДля того чтобы обратиться к элементу массива, мы используем квадратные скобки и указываем индекс элемента в квадратных скобках.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call', []] //последний элемент массива это пустой массив    \n\nconsole.log(todoList[0])    //'Wash Car'\n```\n\nМассив может состоять из разных типов данных.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call', [2, 3, 4]];    \n\nconsole.log(todoList)         //[\"Wash Car\", \"Store\", \"Call\", Array(3)]\nconsole.log(todoList.length)  //4\n```\n\nДлина массива по-прежнему 4, несмотря на то, что внутри последнего элемента массива находится другой массив из трех элементов.\n\nРассмотрим еще один пример массива с содержанием разных типов данных.\n```javascript\nconst todoList = ['Hello', {name: 'Alice'}, 123, true, [2, 3, 4]];\nconsole.log(todoList)                  // [ 'Hello', { name: 'Alice' }, 123, true, [ 2, 3, 4 ] ]\nconsole.log(todoList.length)      // 5\n\n// Давайте обратимся к каждому элементу и проверим его тип данных\n\nconsole.log(todoList[0], typeof todoList[0])        // 'Hello', `string`\nconsole.log(todoList[1], typeof todoList[1])        // { name: 'Alice' }, `object`\nconsole.log(todoList[2], typeof todoList[2])        // 123, `number`\nconsole.log(todoList[3], typeof todoList[3])        // true, `boolean`\nconsole.log(todoList[4], typeof todoList[4])        // [ 2, 3, 4 ], `object`\n```\n",
    "en": "We've already taken apart objects, strings, numbers, logical operators, and branching.\n\nNow let's look at an array. Arrays are an ordered data type.\n\nIf an object is a bunch of properties piled together, an array is a list.\n\nThe data type of an array is an object.\n\nTo refer to some property of an object we use a key, because we cannot say,\nthat there is any order within an object: something first and something second. The properties of an object lie like\nobjects on the table.\n\nIn the case of an array, we are always talking about a list.\nFor example, a list of students, a list of class students, an order of days of the week, a to-do list are all examples of a list.\n\nTo create an array, we use square brackets.\n\nLet's create a to-do list array:\n```javascript\nconst todoList = [] //we created an empty array\n```\nInside the array can be any type of data: strings, numbers, objects, other arrays.\n\nLet's make a list of lines.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call']    \n```\n\nElements of the array are separated by a comma.\n\nTo output the array to the console, we use the `console.log` command and put the name of the array in brackets.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call']    \n\nconsole.log(todoList)    //[\"Wash Car\", \"Store\", \"Call\"]\n```\nThe creation of an array is based on an object. If you use the browser console, you can see that next to each element is a number (0, 1, 2).\nThe array elements have indices.\n\nThe indexes are numbered starting from zero. The same as in strings.\n\nIn the example above we have the indices 0, 1, 2.\n```javascript\n0: \"Wash Car\"\n1: \"Store\"\n2: \"Call\"\n```\nJust like strings, an array also has a length. To get the length of an array we use the `length` property.\n```javascript\nconsole.log(todoList.length)    //3\n```\nThe array has 3 elements (on the first level!).\n\nThere can be other arrays inside the elements of an array. This is called nesting.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call', []] //the last array element is an empty array    \n\nconsole.log(todoList.length)    //4\n```\n\nTo refer to an array element, we use square brackets and specify the element index in square brackets.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call', []] // the last array element is an empty array   \n\nconsole.log(todoList[0])    //'Wash Car'\n```\n\nAn array can consist of different types of data.\n```javascript\nconst todoList = ['Wash Car', 'Store', 'Call', [2, 3, 4]];    \n\nconsole.log(todoList)         //[\"Wash Car\", \"Store\", \"Call\", Array(3)]\nconsole.log(todoList.length)  //4\n```\n\nThe length of the array is still 4, even though there is another array of three elements inside the last element of the array.\n\nConsider another example of an array containing different types of data.\n```javascript\nconst todoList = ['Hello', {name: 'Alice'}, 123, true, [2, 3, 4]];\nconsole.log(todoList)                  // [ 'Hello', { name: 'Alice' }, 123, true, [ 2, 3, 4 ] ]\nconsole.log(todoList.length)      // 5\n\n// Let's access each element and check its data type\n\nconsole.log(todoList[0], typeof todoList[0])        // 'Hello', `string`\nconsole.log(todoList[1], typeof todoList[1])        // { name: 'Alice' }, `object`\nconsole.log(todoList[2], typeof todoList[2])        // 123, `number`\nconsole.log(todoList[3], typeof todoList[3])        // true, `boolean`\nconsole.log(todoList[4], typeof todoList[4])        // [ 2, 3, 4 ], `object`\n```\n",
    "es": "# Создание массива. Свойство length language: es"
  },
  "video": {
    "ru": "https://youtu.be/qUll1YcSC_o",
    "en": "",
    "es": ""
  }
}