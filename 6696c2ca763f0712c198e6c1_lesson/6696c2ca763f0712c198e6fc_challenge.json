{
  "_id": "6696c2ca763f0712c198e6fc",
  "name": {
    "en": "Find the sum, difference and product of the lengths of the arrays",
    "ru": "Найди сумму, разницу и произведение длин массивов"
  },
  "instruction": {
    "en": "Write a function `operationLength` that takes two parameters:\n* `arr1` - array of elements,\n* `arr2` - array of elements.\n\nThe function should return an array in which the first element is the sum of the lengths of the arrays,\nThe second is the difference of the lengths of the arrays, the third is the product of the lengths of the arrays.\n\nAn example of running the function:\n```javascript\noperationLength([14, 12, 35], [12, 22, 23, 43]);\n// [7, -1, 12]\n```\n\nA similar example with strings:\n```javascript\nfunction operationLength(str1, str2) {\nconst sum = str1.length + str2.length;\nconst difference = str1.length - str2.length;\nconst multiplication = str1.length * str2.length;\nreturn [sum, difference, multiplication];\n}\n```",
    "ru": "Напиши функцию `operationLength`, которая принимает два параметра:\n* `arr1` - массив элементов,\n* `arr2` - массив элементов.\n\nФункция должна возвращать массив, в котором первым элементом будет сумма длин массивов,\nвторым - разница длин массивов, третьим - произведение длин массивов.\n\nПример запуска функции:\n```javascript\noperationLength([14, 12, 35], [12, 22, 23, 43]);\n// [7, -1, 12]\n```\n\nПохожий пример со строками:\n```javascript\nfunction operationLength(str1, str2) {\n  const sum = str1.length + str2.length;\n  const difference = str1.length - str2.length;\n  const multiplication = str1.length * str2.length;\n  return [sum, difference, multiplication];\n}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function operationLength(arr1, arr2) {\n  const sum = arr1.length + arr2.length;\n  const difference = arr1.length - arr2.length;\n  const multiplication = arr1.length * arr2.length;\n  return [sum, difference, multiplication];\n}",
  "openTest": "it('Created function operationLength', () => {\n  expect(operationLength).to.be.a('function');\n});\n\nit('Function operationLength([14, 12, 35], [12, 22, 23, 43]) returns [7, -1, 12]', () => {\n  expect(operationLength([14, 12, 35], [12, 22, 23, 43])).to.deep.equal([7, -1, 12]);\n});\n\nit('Function operationLength([\"w\", \"fg\", null, 1, 2, 3, 4], [\"u\", 0, \"hello\"]) returns [10, 4, 21]', () => {\n  expect(operationLength(['w', 'fg', null, 1, 2, 3, 4], ['u', 0, 'hello'])).to.deep.equal(\n    [10, 4, 21],\n  );\n});\n\nit('Function operationLength([], [\"u\", 0, \"hello\", 3, 4]) returns [5, -5, 0]', () => {\n  expect(operationLength([], ['u', 0, 'hello', 3, 4])).to.deep.equal([5, -5, 0]);\n});\n\nit('Function operationLength([], []) returns [0, 0, 0]', () => {\n  expect(operationLength([], [])).to.deep.equal([0, 0, 0]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}