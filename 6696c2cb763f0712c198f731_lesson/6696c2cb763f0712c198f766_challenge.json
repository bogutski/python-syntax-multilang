{
  "_id": "6696c2cb763f0712c198f766",
  "name": {
    "en": "/*",
    "ru": "Найти последнюю строку, начинающуюся с заданной буквы"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastStartingWith`, которая принимает массив строк и символ (букву), и возвращает последнюю строку в массиве, начинающуюся с этого символа.\n\nЕсли такой строки нет, функция должна вернуть `undefined`.\n\n\nПримеры запуска функции:\n```javascript\nfindLastStartingWith(['apple', 'banana', 'apricot', 'kiwi', 'peach'], 'a') // \"apricot\"\nfindLastStartingWith(['apple', 'banana', 'kiwi', 'peach'], 'b') // \"banana\"\nfindLastStartingWith(['kiwi', 'peach'], 'a') // undefined\n```"
  },
  "initialSolution": "function findLastStartingWith(){\n\n}",
  "completedSolution": "function findLastStartingWith(arr, symbol) {\n  return arr.findLast(el => el.startsWith(symbol));\n}",
  "openTest": "it('Created function findLastStartingWith', () => {\n  expect(findLastStartingWith).to.be.a('function');\n});\n\nit(\"Function findLastStartingWith should include findLast method\", () => {\n  const result = findLastStartingWith.toString();\n  expect(result).to.include('.findLast(');\n});\n\nit('findLastStartingWith([\"apple\", \"banana\", \"apricot\", \"kiwi\", \"peach\"], \"a\") should return \"apricot\"', function() {\n  expect(findLastStartingWith(['apple', 'banana', 'apricot', 'kiwi', 'peach'], 'a')).to.equal('apricot');\n});\n\nit('findLastStartingWith([\"apple\", \"banana\", \"kiwi\", \"peach\"], \"b\") should return \"banana\"', function() {\n  expect(findLastStartingWith(['apple', 'banana', 'kiwi', 'peach'], 'b')).to.equal('banana');\n});\n\nit('findLastStartingWith([\"kiwi\", \"peach\"], \"a\") should return undefined', function() {\n  expect(findLastStartingWith(['kiwi', 'peach'], 'a')).to.be.undefined;\n});\n\nit('findLastStartingWith([\"banana\", \"apple\", \"apricot\"], \"a\") should return \"apricot\"', function() {\n  expect(findLastStartingWith(['banana', 'apple', 'apricot'], 'a')).to.equal('apricot');\n});\n\nit('findLastStartingWith([\"cherry\", \"plum\", \"pear\", \"apple\"], \"p\") should return \"pear\"', function() {\n  expect(findLastStartingWith(['cherry', 'plum', 'pear', 'apple'], 'p')).to.equal('pear');\n});\n\nit('findLastStartingWith([\"melon\", \"mango\", \"kiwi\"], \"m\") should return \"mango\"', function() {\n  expect(findLastStartingWith(['melon', 'mango', 'kiwi'], 'm')).to.equal('mango');\n});\n\nit('findLastStartingWith([\"strawberry\", \"raspberry\", \"blueberry\"], \"r\") should return \"raspberry\"', function() {\n  expect(findLastStartingWith(['strawberry', 'raspberry', 'blueberry'], 'r')).to.equal('raspberry');\n});\n\nit('findLastStartingWith([], \"k\") should return undefined', function() {\n  expect(findLastStartingWith([], 'k')).to.be.undefined;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}