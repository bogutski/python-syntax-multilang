{
  "_id": "6696c2cb763f0712c198f76a",
  "name": {
    "en": "/*",
    "ru": "Найти последний самый дорогой продукт в категории и отобразить отфильтрованные продукты"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastExpensiveInCategory`, которая принимает:\n * массив объектов (продукты),\n * строку (категория),\n * число (минимальная цена).\n\nФункция должна сначала отфильтровать массив, оставляя только продукты указанной категории с ценой выше или равной минимальной.\n\nЗатем функция должна находить последний самый дорогой продукт среди отфильтрованных.\n\nФункция возвращает объект с двумя свойствами: `filtered`, содержащий массив отфильтрованных продуктов, и `maxPrice`, содержащий последний продукт с максимальной ценой или `undefined`, если таковых нет.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLastExpensiveInCategory([{name: 'Apple', type: 'Fruit', price: 3}, {name: 'Banana', type: 'Fruit', price: 1}, {name: 'Cherry', type: 'Fruit', price: 5}], 'Fruit', 2))\n// {\n//   filtered: [\n//     { name: 'Apple', type: 'Fruit', price: 3 },\n//     { name: 'Cherry', type: 'Fruit', price: 5 }\n//   ],\n//   maxPrice: { name: 'Cherry', type: 'Fruit', price: 5 }\n// }\n\nconsole.log(findLastExpensiveInCategory([{name: 'Carrot', type: 'Vegetable', price: 2}, {name: 'Celery', type: 'Vegetable', price: 3}, {name: 'Beet', type: 'Vegetable', price: 1}], 'Vegetable', 2))\n// {\n//   filtered: [\n//     { name: 'Carrot', type: 'Vegetable', price: 2 },\n//     { name: 'Celery', type: 'Vegetable', price: 3 }\n//   ],\n//   maxPrice: { name: 'Celery', type: 'Vegetable', price: 3 }\n// }\n\nconsole.log(findLastExpensiveInCategory([{name: 'Milk', type: 'Dairy', price: 4}, {name: 'Cheese', type: 'Dairy', price: 5}], 'Dairy', 6))\n// { filtered: [], maxPrice: undefined }\n```"
  },
  "initialSolution": "function findLastExpensiveInCategory(){\n\n}",
  "completedSolution": "function findLastExpensiveInCategory(products, category, min) {\n  const filtered = products.filter(({type, price}) => type === category && price >= min);\n  const maxPrice = filtered.findLast((el, _, array) => el.price === Math.max(...array.map(({price}) => price)))\n\n  return {filtered, maxPrice}\n}",
  "openTest": "it('Created function findLastExpensiveInCategory', () => {\n  expect(findLastExpensiveInCategory).to.be.a('function');\n});\n\nit('findLastExpensiveInCategory([{name: \"Apple\", type: \"Fruit\", price: 3}, {name: \"Banana\", type: \"Fruit\", price: 1}, {name: \"Cherry\", type: \"Fruit\", price: 5}], \"Fruit\", 2) should return {filtered: [{name: \"Apple\", type: \"Fruit\", price: 3}, {name: \"Cherry\", type: \"Fruit\", price: 5}], maxPrice: {name: \"Cherry\", type: \"Fruit\", price: 5}}', function() {\n  expect(findLastExpensiveInCategory([{name: 'Apple', type: 'Fruit', price: 3}, {name: 'Banana', type: 'Fruit', price: 1}, {name: 'Cherry', type: 'Fruit', price: 5}], 'Fruit', 2)).to.deep.equal({\n    filtered: [{name: 'Apple', type: 'Fruit', price: 3}, {name: 'Cherry', type: 'Fruit', price: 5}],\n    maxPrice: {name: 'Cherry', type: 'Fruit', price: 5}\n  });\n});\n\nit('findLastExpensiveInCategory([{name: \"Carrot\", type: \"Vegetable\", price: 2}, {name: \"Celery\", type: \"Vegetab...', function(){\nexpect(findLastExpensiveInCategory([{name: 'Carrot', type: 'Vegetable', price: 2}, {name: 'Celery', type: 'Vegetable', price: 3}, {name: 'Beet', type: 'Vegetable', price: 1}], 'Vegetable', 2)).to.deep.equal({\n  filtered: [{name: 'Carrot', type: 'Vegetable', price: 2}, {name: 'Celery', type: 'Vegetable', price: 3}],\n  maxPrice: {name: 'Celery', type: 'Vegetable', price: 3}\n});\n});\n\nit('findLastExpensiveInCategory([{name: \"Milk\", type: \"Dairy\", price: 4}, {name: \"Cheese\", type: \"Dairy\", price: 5}], \"Dairy\", 6) should return {filtered: [], maxPrice: undefined}', function() {\n  expect(findLastExpensiveInCategory([{name: 'Milk', type: 'Dairy', price: 4}, {name: 'Cheese', type: 'Dairy', price: 5}], 'Dairy', 6)).to.deep.equal({\n    filtered: [],\n    maxPrice: undefined\n  });\n});\n\nit('findLastExpensiveInCategory([{name: \"Pear\", type: \"Fruit\", price: 3}, {name: \"Tomato\", type: \"Vegetable\", price: 2}, {name: \"Peach\", type: \"Fruit\", price: 4}], \"Fruit\", 2) should return {filtered: [{name: \"Pear\", type: \"Fruit\", price: 3}, {name: \"Peach\", type: \"Fruit\", price: 4}], maxPrice: {name: \"Peach\", type: \"Fruit\", price: 4}}', function() {\n  expect(findLastExpensiveInCategory([{name: 'Pear', type: 'Fruit', price: 3}, {name: 'Tomato', type: 'Vegetable', price: 2}, {name: 'Peach', type: 'Fruit', price: 4}], 'Fruit', 2)).to.deep.equal({\n    filtered: [{name: 'Pear', type: 'Fruit', price: 3}, {name: 'Peach', type: 'Fruit', price: 4}],\n    maxPrice: {name: 'Peach', type: 'Fruit', price: 4}\n  });\n});\n\nit('findLastExpensiveInCategory([{name: \"Zucchini\", type: \"Vegetable\", price: 1}, {name: \"Spinach\", type: \"Vegetable\", price: 2}], \"Vegetable\", 2) should return {filtered: [{name: \"Spinach\", type: \"Vegetable\", price: 2}], maxPrice: {name: \"Spinach\", type: \"Vegetable\", price: 2}}', function() {\n  expect(findLastExpensiveInCategory([{name: 'Zucchini', type: 'Vegetable', price: 1}, {name: 'Spinach', type: 'Vegetable', price: 2}], 'Vegetable', 2)).to.deep.equal({\n    filtered: [{name: 'Spinach', type: 'Vegetable', price: 2}],\n    maxPrice: {name: 'Spinach', type: 'Vegetable', price: 2}\n  });\n});\n\nit('findLastExpensiveInCategory([{name: \"Butter\", type: \"Dairy\", price: 3}, {name: \"Yogurt\", type: \"Dairy\", price: 4}], \"Dairy\", 3) should return {filtered: [{name: \"Butter\", type: \"Dairy\", price: 3}, {name: \"Yogurt\", type: \"Dairy\", price: 4}], maxPrice: {name: \"Yogurt\", type: \"Dairy\", price: 4}}', function() {\n  expect(findLastExpensiveInCategory([{name: 'Butter', type: 'Dairy', price: 3}, {name: 'Yogurt', type: 'Dairy', price: 4}], 'Dairy', 3)).to.deep.equal({\n    filtered: [{name: 'Butter', type: 'Dairy', price: 3}, {name: 'Yogurt', type: 'Dairy', price: 4}],\n    maxPrice: {name: 'Yogurt', type: 'Dairy', price: 4}\n  });\n});\n\nit('findLastExpensiveInCategory([{name: \"Salmon\", type: \"Fish\", price: 10}, {name: \"Tuna\", type: \"Fish\", price: 12}], \"Fish\", 10) should return {filtered: [{name: \"Salmon\", type: \"Fish\", price: 10}, {name: \"Tuna\", type: \"Fish\", price: 12}], maxPrice: {name: \"Tuna\", type: \"Fish\", price: 12}}', function() {\n  expect(findLastExpensiveInCategory([{name: 'Salmon', type: 'Fish', price: 10}, {name: 'Tuna', type: 'Fish', price: 12}], 'Fish', 10)).to.deep.equal({\n    filtered: [{name: 'Salmon', type: 'Fish', price: 10}, {name: 'Tuna', type: 'Fish', price: 12}],\n    maxPrice: {name: 'Tuna', type: 'Fish', price: 12}\n  });\n});\n\nit('findLastExpensiveInCategory([{name: \"Lager\", type: \"Beer\", price: 2}, {name: \"Ale\", type: \"Beer\", price: 3}, {name: \"Stout\", type: \"Beer\", price: 3}], \"Beer\", 2) should return {filtered: [{name: \"Lager\", type: \"Beer\", price: 2}, {name: \"Ale\", type: \"Beer\", price: 3}, {name: \"Stout\", type: \"Beer\", price: 3}], maxPrice: {name: \"Stout\", type: \"Beer\", price: 3}}', function() {\n  expect(findLastExpensiveInCategory([{name: 'Lager', type: 'Beer', price: 2}, {name: 'Ale', type: 'Beer', price: 3}, {name: 'Stout', type: 'Beer', price: 3}], 'Beer', 2)).to.deep.equal({\n    filtered: [{name: 'Lager', type: 'Beer', price: 2}, {name: 'Ale', type: 'Beer', price: 3}, {name: 'Stout', type: 'Beer', price: 3}],\n    maxPrice: {name: 'Stout', type: 'Beer', price: 3}\n  });\n});\n\nit('findLastExpensiveInCategory([], \"AnyCategory\", 1) should return {filtered: [], maxPrice: undefined}', function() {\n  expect(findLastExpensiveInCategory([], 'AnyCategory', 1)).to.deep.equal({\n    filtered: [],\n    maxPrice: undefined\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}