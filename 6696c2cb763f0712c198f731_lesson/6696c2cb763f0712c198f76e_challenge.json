{
  "_id": "6696c2cb763f0712c198f76e",
  "name": {
    "en": "/*",
    "ru": "Найти последний самый дорогой продукт в каждой категории"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию findLastMostExpensiveByCategory, которая принимает массив объектов.\n\nКаждый из объектов представляет продукт с атрибутами: `name`, `category`, и `price`:\n[\n  {name: 'Apple', category: 'Fruits', price: 5},\n  {name: 'Broccoli', category: 'Vegetables', price: 2},\n  {name: 'Orange', category: 'Fruits', price: 3},\n  {name: 'Carrot', category: 'Vegetables', price: 10}\n]\n\nФункция должна возвращать объект, где каждый ключ соответствует категории, а значение — это объект с данными о последнем самом дорогом продукте в этой категории:\n{\n  Fruits: {name: 'Apple', price: 5},\n  Vegetables: {name: 'Carrot', price: 10}\n}\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLastMostExpensiveByCategory(\n    [{name: 'Apple', category: 'Fruits', price: 4},\n      {name: 'Orange', category: 'Fruits', price: 1},\n      {name: 'Banana', category: 'Fruits', price: 4},\n      {name: 'Broccoli', category: 'Vegetables', price: 2},\n      {name: 'Carrot', category: 'Vegetables', price: 1}]))\n\n// {\n//   Fruits: { name: 'Banana', price: 4},\n//   Vegetables: { name: 'Broccoli', price: 2 }\n// }\n```"
  },
  "initialSolution": "function findLastMostExpensiveByCategory(){\n\n}",
  "completedSolution": "function findLastMostExpensiveByCategory(arr) {\n  let objectOfMax = {}\n\n  for(let obj of arr){\n    if(obj.category in objectOfMax){\n      if(objectOfMax[obj.category].price <= obj.price) objectOfMax[obj.category] = {name: obj.name, price: obj.price}\n    } else {\n      objectOfMax[obj.category] = {name: obj.name, price: obj.price}\n    }\n  }\n\n  return objectOfMax;\n}",
  "openTest": "it('Created function findLastMostExpensiveByCategory', () => {\n  expect(findLastMostExpensiveByCategory).to.be.a('function');\n});\n\nit('findLastMostExpensiveByCategory([{name: \"Apple\", category: \"Fruits\", price: 2}, {name: \"Orange\", category: \"Fruits\", price: 3}, {name: \"Banana\", category: \"Fruits\", price: 1}, {name: \"Broccoli\", category: \"Vegetables\", price: 2}, {name: \"Carrot\", category: \"Vegetables\", price: 1}]) should return {Fruits: {name: \"Orange\", price: 3}, Vegetables: {name: \"Broccoli\", price: 2}}', function() {\n  expect(findLastMostExpensiveByCategory([{name: 'Apple', category: 'Fruits', price: 2}, {name: 'Orange', category: 'Fruits', price: 3}, {name: 'Banana', category: 'Fruits', price: 1}, {name: 'Broccoli', category: 'Vegetables', price: 2}, {name: 'Carrot', category: 'Vegetables', price: 1}])).to.deep.equal({Fruits: {name: 'Orange', price: 3}, Vegetables: {name: 'Broccoli', price: 2}});\n});\n\nit('findLastMostExpensiveByCategory([]) should return {}', function() {\n  expect(findLastMostExpensiveByCategory([])).to.deep.equal({});\n});\n\nit('findLastMostExpensiveByCategory([{name: \"Pen\", category: \"Stationery\", price: 1.5}, {name: \"Pencil\", category: \"Stationery\", price: 0.5}, {name: \"Notebook\", category: \"Stationery\", price: 1.5}]) should return {Stationery: {name: \"Notebook\", price: 1.5}}', function() {\n  expect(findLastMostExpensiveByCategory([{name: 'Pen', category: 'Stationery', price: 1.5}, {name: 'Pencil', category: 'Stationery', price: 0.5}, {name: 'Notebook', category: 'Stationery', price: 1.5}])).to.deep.equal({Stationery: {name: 'Notebook', price: 1.5}});\n});\n\nit('findLastMostExpensiveByCategory([{name: \"Laptop\", category: \"Electronics\", price: 999}, {name: \"Smartphone\", category: \"Electronics\", price: 699}]) should return {Electronics: {name: \"Laptop\", price: 999}}', function() {\n  expect(findLastMostExpensiveByCategory([{name: 'Laptop', category: 'Electronics', price: 999}, {name: 'Smartphone', category: 'Electronics', price: 699}])).to.deep.equal({Electronics: {name: 'Laptop', price: 999}});\n});\n\nit('findLastMostExpensiveByCategory([{name: \"Gala Apple\", category: \"Fruits\", price: 1}, {name: \"Navel Orange\", category: \"Fruits\", price: 2}, {name: \"Granny Smith Apple\", category: \"Fruits\", price: 2}]) should return {Fruits: {name: \"Granny Smith Apple\", price: 2}}', function() {\n  expect(findLastMostExpensiveByCategory([{name: 'Gala Apple', category: 'Fruits', price: 1}, {name: 'Navel Orange', category: 'Fruits', price: 2}, {name: 'Granny Smith Apple', category: 'Fruits', price: 2}])).to.deep.equal({Fruits: {name: 'Granny Smith Apple', price: 2}});\n});\n\nit('findLastMostExpensiveByCategory([{name: \"Chicken Breast\", category: \"Meat\", price: 5}, {name: \"Pork Belly\", category: \"Meat\", price: 12}, {name: \"Chicken Thighs\", category: \"Meat\", price: 8}]) should return {Meat: {name: \"Pork Belly\", price: 12}}', function() {\n  expect(findLastMostExpensiveByCategory([{name: 'Chicken Breast', category: 'Meat', price: 5}, {name: 'Pork Belly', category: 'Meat', price: 12}, {name: 'Chicken Thighs', category: 'Meat', price: 8}])).to.deep.equal({Meat: {name: 'Pork Belly', price: 12}});\n});\n\nit('findLastMostExpensiveByCategory([{name: \"Almond Milk\", category: \"Beverages\", price: 3}, {name: \"Soy Milk\", category: \"Beverages\", price: 2}, {name: \"Cow Milk\", category: \"Beverages\", price: 1}]) should return {Beverages: {name: \"Almond Milk\", price: 3}}', function() {\n  expect(findLastMostExpensiveByCategory([{name: 'Almond Milk', category: 'Beverages', price: 3}, {name: 'Soy Milk', category: 'Beverages', price: 2}, {name: 'Cow Milk', category: 'Beverages', price: 1}])).to.deep.equal({Beverages: {name: 'Almond Milk', price: 3}});\n});\n\nit('findLastMostExpensiveByCategory([{name: \"Wheat Bread\", category: \"Bakery\", price: 2}, {name: \"Rye Bread\", category: \"Bakery\", price: 3}, {name: \"Sourdough\", category: \"Bakery\", price: 4}, {name: \"Baguette\", category: \"Bakery\", price: 4}]) should return {Bakery: {name: \"Baguette\", price: 4}}', function() {\n  expect(findLastMostExpensiveByCategory([{name: 'Wheat Bread', category: 'Bakery', price: 2}, {name: 'Rye Bread', category: 'Bakery', price: 3}, {name: 'Sourdough', category: 'Bakery', price: 4}, {name: 'Baguette', category: 'Bakery', price: 4}])).to.deep.equal({Bakery: {name: 'Baguette', price: 4}});\n});\n\nit('findLastMostExpensiveByCategory([{name: \"American Cheese\", category: \"Dairy\", price: 1}, {name: \"Cheddar Cheese\", category: \"Dairy\", price: 2}, {name: \"Gouda Cheese\", category: \"Dairy\", price: 3}, {name: \"Swiss Cheese\", category: \"Dairy\", price: 2}]) should return {Dairy: {name: \"Gouda Cheese\", price: 3}}', function() {\n  expect(findLastMostExpensiveByCategory([{name: 'American Cheese', category: 'Dairy', price: 1}, {name: 'Cheddar Cheese', category: 'Dairy', price: 2}, {name: 'Gouda Cheese', category: 'Dairy', price: 3}, {name: 'Swiss Cheese', category: 'Dairy', price: 2}])).to.deep.equal({Dairy: {name: 'Gouda Cheese', price: 3}});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}