{
  "_id": "6696c2cb763f0712c198f76c",
  "name": {
    "en": "/*",
    "ru": "Найти последнюю строку с суммой чисел больше заданного значения"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastStringWithSumAbove`, которая принимает:\n\n * массив строк, каждая из которых содержит числа, разделенные пробелами,\n * число, представляющее пороговое значение суммы.\n\nФункция должна сначала обработать каждую строку для вычисления суммы чисел в ней, затем найти последнюю строку, в которой сумма чисел превышает заданное пороговое значение.\n\nФункция должна возвращать объект с двумя свойствами: `processedSums`, массив сумм чисел каждой строки, и `matchingString`, последнюю строку, где сумма превышает порог, или `undefined`, если такой строки нет.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLastStringWithSumAbove([\"1 2 3\", \"4 5 6\", \"7 8 9\", \"10 11\"], 20));\n// Вывод:\n// {\n//   processedSums: [6, 15, 24, 21],\n//   matchingString: \"10 11\"\n// }\n\nconsole.log(findLastStringWithSumAbove([\"3 3 3\", \"4 1\", \"2 2 1 1\", \"8 0 2\"], 7));\n// Вывод:\n// {\n//   processedSums: [9, 5, 6, 10],\n//   matchingString: \"8 0 2\"\n// }\n\nconsole.log(findLastStringWithSumAbove([\"5\", \"1 1\", \"2 2\", \"3\"], 5));\n// Вывод:\n// {\n//   processedSums: [5, 2, 4, 3],\n//   matchingString: undefined\n// }\n```"
  },
  "initialSolution": "function findLastStringWithSumAbove(){\n\n}",
  "completedSolution": "function findLastStringWithSumAbove(arr, n) {\n  const processedSums = arr.map(str => str.split(' ').reduce((acc, el) => acc + Number(el), 0))\n  const matchingString = arr.findLast((_, i) => processedSums[i] > n)\n  return {processedSums, matchingString};\n}",
  "openTest": "it('Created function findLastStringWithSumAbove', () => {\n  expect(findLastStringWithSumAbove).to.be.a('function');\n});\n\nit('findLastStringWithSumAbove([\"1 2 3\", \"4 5 6\", \"7 8 9\", \"10 11\"], 20) should return {processedSums: [6, 15, 24, 21], matchingString: \"10 11\"}', function() {\n  expect(findLastStringWithSumAbove([\"1 2 3\", \"4 5 6\", \"7 8 9\", \"10 11\"], 20)).to.deep.equal({\n    processedSums: [6, 15, 24, 21],\n    matchingString: \"10 11\"\n  });\n});\n\nit('findLastStringWithSumAbove([\"3 3 3\", \"4 1\", \"2 2 1 1\", \"8 0 2\"], 7) should return {processedSums: [9, 5, 6, 10], matchingString: \"8 0 2\"}', function() {\n  expect(findLastStringWithSumAbove([\"3 3 3\", \"4 1\", \"2 2 1 1\", \"8 0 2\"], 7)).to.deep.equal({\n    processedSums: [9, 5, 6, 10],\n    matchingString: \"8 0 2\"\n  });\n});\n\nit('findLastStringWithSumAbove([\"5\", \"1 1\", \"2 2\", \"3\"], 5) should return {processedSums: [5, 2, 4, 3], matchingString: undefined}', function() {\n  expect(findLastStringWithSumAbove([\"5\", \"1 1\", \"2 2\", \"3\"], 5)).to.deep.equal({\n    processedSums: [5, 2, 4, 3],\n    matchingString: undefined\n  });\n});\n\nit('findLastStringWithSumAbove([\"2 4 6\", \"3 3 3\", \"4 2 2\", \"1 1 1 1\"], 10) should return {processedSums: [12, 9, 8, 4], matchingString: \"2 4 6\"}', function() {\n  expect(findLastStringWithSumAbove([\"2 4 6\", \"3 3 3\", \"4 2 2\", \"1 1 1 1\"], 10)).to.deep.equal({\n    processedSums: [12, 9, 8, 4],\n    matchingString: \"2 4 6\"\n  });\n});\n\nit('findLastStringWithSumAbove([\"1 1 1 2\", \"5 5\", \"7 0 0\", \"8\"], 9) should return {processedSums: [5, 10, 7, 8], matchingString: \"5 5\"}', function() {\n  expect(findLastStringWithSumAbove([\"1 1 1 2\", \"5 5\", \"7 0 0\", \"8\"], 9)).to.deep.equal({\n    processedSums: [5, 10, 7, 8],\n    matchingString: \"5 5\"\n  });\n});\n\nit('findLastStringWithSumAbove([\"9 0\", \"8 1\", \"6 2 2\", \"5 5\"], 11) should return {processedSums: [9, 9, 10, 10], matchingString: undefined}', function() {\n  expect(findLastStringWithSumAbove([\"9 0\", \"8 1\", \"6 2 2\", \"5 5\"], 11)).to.deep.equal({\n    processedSums: [9, 9, 10, 10],\n    matchingString: undefined\n  });\n});\n\nit('findLastStringWithSumAbove([\"10 10\", \"15 15\", \"20 20\", \"25 5\"], 30) should return {processedSums: [20, 30, 40, 30], matchingString: \"20 20\"}', function() {\n  expect(findLastStringWithSumAbove([\"10 10\", \"15 15\", \"20 20\", \"25 5\"], 30)).to.deep.equal({\n    processedSums: [20, 30, 40, 30],\n    matchingString: \"20 20\"\n  });\n});\n\nit('findLastStringWithSumAbove([\"0 0 0 0\", \"1 2 3\", \"4 5 6\", \"10 10 10\"], 20) should return {processedSums: [0, 6, 15, 30], matchingString: \"10 10 10\"}', function() {\n  expect(findLastStringWithSumAbove([\"0 0 0 0\", \"1 2 3\", \"4 5 6\", \"10 10 10\"], 20)).to.deep.equal({\n    processedSums: [0, 6, 15, 30],\n    matchingString: \"10 10 10\"\n  });\n});\n\nit('findLastStringWithSumAbove([\"11 12\", \"13 14\", \"15 16 1\", \"20 1\"], 25) should return {processedSums: [23, 27, 32, 21], matchingString: \"15 16 1\"}', function() {\n  expect(findLastStringWithSumAbove([\"11 12\", \"13 14\", \"15 16 1\", \"20 1\"], 25)).to.deep.equal({\n    processedSums: [23, 27, 32, 21],\n    matchingString: \"15 16 1\"\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}