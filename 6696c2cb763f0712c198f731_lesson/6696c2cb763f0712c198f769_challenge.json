{
  "_id": "6696c2cb763f0712c198f769",
  "name": {
    "en": "/*",
    "ru": "Найти последний продукт с заданным атрибутом и ценой выше указанной"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastProductWithAttribute`, которая принимает массив объектов (представляющих продукты), имя атрибута, значение этого атрибута и минимальную цену.\n\nФункция должна возвращать последний продукт, который имеет указанный атрибут со значением, равным заданному, и цену выше указанной.\n\nЕсли такого продукта нет, функция должна возвращать `Product was not found`.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLastProductWithAttribute([{name: 'Apple', type: 'Fruit', price: 3}, {name: 'Banana', type: 'Fruit', price: 1}, {name: 'Cucumber', type: 'Vegetable', price: 3}], 'name', 'Apple', 2))\n// { name: 'Apple', type: 'Fruit', price: 3 }\n\nconsole.log(findLastProductWithAttribute([{name: 'Carrot', type: 'Vegetable', price: 2}, {name: 'Banana', type: 'Fruit', price: 5}, {name: 'Apple', type: 'Fruit', price: 1}], 'type', 'Fruit', 3))\n// { name: 'Banana', type: 'Fruit', price: 5 }\n\nconsole.log(findLastProductWithAttribute([{name: 'Carrot', type: 'Vegetable', price: 2}], 'type', 'Fruit', 1))\n// \"Product was not found\"\n```"
  },
  "initialSolution": "function findLastProductWithAttribute(){\n\n}",
  "completedSolution": "function findLastProductWithAttribute(arr, attribute, value, minPrice) {\n  const result = arr.findLast(product => product[attribute] === value && product.price > minPrice)\n  return result ? result : 'Product was not found';\n}",
  "openTest": "it('Created function findLastProductWithAttribute', () => {\n  expect(findLastProductWithAttribute).to.be.a('function');\n});\n\nit(\"Function findLastProductWithAttribute should include findLast method\", () => {\n  const result = findLastProductWithAttribute.toString();\n  expect(result).to.include('.findLast(');\n});\n\nit('findLastProductWithAttribute([{name: \"Apple\", type: \"Fruit\", price: 2}, {name: \"Banana\", type: \"Fruit\", price: 1}, {name: \"Cucumber\", type: \"Vegetable\", price: 3}], \"type\", \"Fruit\", 1) should return {name: \"Apple\", type: \"Fruit\", price: 2}', function() {\n  expect(findLastProductWithAttribute([{name: 'Apple', type: 'Fruit', price: 2}, {name: 'Banana', type: 'Fruit', price: 1}, {name: 'Cucumber', type: 'Vegetable', price: 3}], 'type', 'Fruit', 1)).to.deep.equal({name: 'Apple', type: 'Fruit', price: 2});\n});\n\nit('findLastProductWithAttribute([{name: \"Carrot\", type: \"Vegetable\", price: 2}, {name: \"Apple\", type: \"Fruit\", price: 5}, {name: \"Banana\", type: \"Fruit\", price: 1}], \"type\", \"Fruit\", 3) should return {name: \"Apple\", type: \"Fruit\", price: 5}', function() {\n  expect(findLastProductWithAttribute([{name: 'Carrot', type: 'Vegetable', price: 2}, {name: 'Apple', type: 'Fruit', price: 5}, {name: 'Banana', type: 'Fruit', price: 1}], 'type', 'Fruit', 3)).to.deep.equal({name: 'Apple', type: 'Fruit', price: 5});\n});\n\nit('findLastProductWithAttribute([{name: \"Carrot\", type: \"Vegetable\", price: 2}], \"type\", \"Fruit\", 1) should return \"Product was not found\"', function() {\n  expect(findLastProductWithAttribute([{name: 'Carrot', type: 'Vegetable', price: 2}], 'type', 'Fruit', 1)).to.equal('Product was not found')\n});\n\nit('findLastProductWithAttribute([{name: \"Potato\", type: \"Vegetable\", price: 1}, {name: \"Tomato\", type: \"Vegetable\", price: 2}, {name: \"Lettuce\", type: \"Vegetable\", price: 3}], \"type\", \"Vegetable\", 2) should return {name: \"Lettuce\", type: \"Vegetable\", price: 3}', function() {\n  expect(findLastProductWithAttribute([{name: 'Potato', type: 'Vegetable', price: 1}, {name: 'Tomato', type: 'Vegetable', price: 2}, {name: 'Lettuce', type: 'Vegetable', price: 3}], 'type', 'Vegetable', 2)).to.deep.equal({name: 'Lettuce', type: 'Vegetable', price: 3});\n});\n\nit('findLastProductWithAttribute([{name: \"Strawberry\", type: \"Berry\", price: 4}, {name: \"Blueberry\", type: \"Berry\", price: 5}, {name: \"Blackberry\", type: \"Berry\", price: 5}], \"name\", \"Blueberry\", 4) should return {name: \"Blueberry\", type: \"Berry\", price: 5}', function() {\n  expect(findLastProductWithAttribute([{name: 'Strawberry', type: 'Berry', price: 4}, {name: 'Blueberry', type: 'Berry', price: 5}, {name: 'Blackberry', type: 'Berry', price: 5}], 'name', 'Blueberry', 4)).to.deep.equal({name: 'Blueberry', type: 'Berry', price: 5});\n});\n\nit('findLastProductWithAttribute([{name: \"Milk\", type: \"Dairy\", price: 2}, {name: \"Cheese\", type: \"Dairy\", price: 6}], \"type\", \"Dairy\", 5) should return {name: \"Cheese\", type: \"Dairy\", price: 6}', function() {\n  expect(findLastProductWithAttribute([{name: 'Milk', type: 'Dairy', price: 2}, {name: 'Cheese', type: 'Dairy', price: 6}], 'type', 'Dairy', 5)).to.deep.equal({name: 'Cheese', type: 'Dairy', price: 6});\n});\n\nit('findLastProductWithAttribute([{name: \"Chocolate\", type: \"Snack\", price: 2}, {name: \"Candy\", type: \"Snack\", price: 1}], \"type\", \"Snack\", 1) should return {name: \"Chocolate\", type: \"Snack\", price: 2}', function() {\n  expect(findLastProductWithAttribute([{name: 'Chocolate', type: 'Snack', price: 2}, {name: 'Candy', type: 'Snack', price: 1}], 'type', 'Snack', 1)).to.deep.equal({name: 'Chocolate', type: 'Snack', price: 2});\n});\n\nit('findLastProductWithAttribute([{name: \"Bread\", type: \"Bakery\", price: 2}, {name: \"Croissant\", type: \"Bakery\", price: 3}, {name: \"Bagel\", type: \"Bakery\", price: 1}], \"type\", \"Bakery\", 2) should return {name: \"Croissant\", type: \"Bakery\", price: 3}', function() {\n  expect(findLastProductWithAttribute([{name: 'Bread', type: 'Bakery', price: 2}, {name: 'Croissant', type: 'Bakery', price: 3}, {name: 'Bagel', type: 'Bakery', price: 1}], 'type', 'Bakery', 2)).to.deep.equal({name: 'Croissant', type: 'Bakery', price: 3});\n});\n\nit('findLastProductWithAttribute([{name: \"Coffee\", type: \"Beverage\", price: 10}, {name: \"Tea\", type: \"Beverage\", price: 5}], \"type\", \"Beverage\", 8) should return {name: \"Coffee\", type: \"Beverage\", price: 10}', function() {\n  expect(findLastProductWithAttribute([{name: 'Coffee', type: 'Beverage', price: 10}, {name: 'Tea', type: 'Beverage', price: 5}], 'type', 'Beverage', 8)).to.deep.equal({name: 'Coffee', type: 'Beverage', price: 10});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}