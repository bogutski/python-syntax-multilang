{
  "_id": "6696c2cb763f0712c198f76b",
  "name": {
    "en": "/*",
    "ru": "Обработка массива строк и поиск последней строки по заданной длине"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findLastStringByLength`, которая принимает массив строк и число, представляющее длину.\n\nФункция должна сначала удалить все пробелы из каждой строки в массиве. Затем она должна найти последнюю строку, чья длина совпадает с заданным числом.\n\nВозвращаемый объект должен содержать два свойства: `processedArray`, массив обработанных строк, и `matchingString`, последнюю строку, соответствующую заданной длине, или `undefined`, если такой строки нет.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findLastStringByLength([\" apple \", \"banana\", \" cherry \", \"date\", \"fig\"], 5));\n// Вывод:\n// {\n//   processedArray: [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"],\n//   matchingString: \"apple\"\n// }\n\nconsole.log(findLastStringByLength([\"kiwi \", \" mango\", \"p e a c h\", \" apr  icot \", \"p lu m\"], 4));\n// Вывод:\n// {\n//   processedArray: [\"kiwi\", \"mango\", \"peach\", \"apricot\", \"plum\"],\n//   matchingString: \"plum\"\n// }\n\nconsole.log(findLastStringByLength([\"  lemon  \", \" l ime \", \"grap e \", \" m elo n \", \"  berry  \"], 6));\n// Вывод:\n// {\n//   processedArray: [\"lemon\", \"lime\", \"grape\", \"melon\", \"berry\"],\n//   matchingString: undefined\n// }\n```"
  },
  "initialSolution": "function findLastStringByLength(){\n\n}",
  "completedSolution": "function findLastStringByLength(array, n) {\n  let processedArray = []\n\n  for(let string of array){\n    let newStr = ''\n\n    for(let symbol of string){\n      if(symbol !== ' ') newStr += symbol\n    }\n\n    processedArray.push(newStr)\n  }\n\n  const matchingString = processedArray.findLast(str => str.length === n)\n  return {processedArray, matchingString};\n}",
  "openTest": "it('Created function findLastStringByLength', () => {\n  expect(findLastStringByLength).to.be.a('function');\n});\n\nit('findLastStringByLength([\" apple \", \"banana\", \" cherry \", \"date\", \"fig\"], 5) should return {processedArray: [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"], matchingString: \"apple\"}', function() {\n  expect(findLastStringByLength([\" apple \", \"banana\", \" cherry \", \"date\", \"fig\"], 5)).to.deep.equal({\n    processedArray: [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"],\n    matchingString: \"apple\"\n  });\n});\n\nit('findLastStringByLength([\"kiwi \", \" mango\", \"p e a c h\", \" apr  icot \", \"p lu m\"], 4) should return {processedArray: [\"kiwi\", \"mango\", \"peach\", \"apricot\", \"plum\"], matchingString: \"plum\"}', function() {\n  expect(findLastStringByLength([\"kiwi \", \" mango\", \"peach\", \" apricot \", \"plum\"], 4)).to.deep.equal({\n    processedArray: [\"kiwi\", \"mango\", \"peach\", \"apricot\", \"plum\"],\n    matchingString: \"plum\"\n  });\n});\n\nit('findLastStringByLength([\"lemon\", \" lime \", \"grape\", \" melon\", \"berry\"], 6) should return {processedArray: [\"lemon\", \"lime\", \"grape\", \"melon\", \"berry\"], matchingString: undefined}', function() {\n  expect(findLastStringByLength([\"lemon\", \" lime \", \"grape\", \" melon\", \"berry\"], 6)).to.deep.equal({\n    processedArray: [\"lemon\", \"lime\", \"grape\", \"melon\", \"berry\"],\n    matchingString: undefined\n  });\n});\n\nit('findLastStringByLength([\"  b a n a n a  \", \"ap ple\", \" orange  \", \"grapefruit\", \"bl ueberry\"], 7) should return {processedArray: [\"banana\", \"apple\", \"orange\", \"grapefruit\", \"blueberry\"], matchingString: undefined}', function() {\n  expect(findLastStringByLength([\"  b a n a n a  \", \"ap ple\", \" orange  \", \"grapefruit\", \"bl ueberry\"], 7)).to.deep.equal({\n    processedArray: [\"banana\", \"apple\", \"orange\", \"grapefruit\", \"blueberry\"],\n    matchingString: undefined\n  });\n});\n\nit('findLastStringByLength([\"water melon\", \" peach \", \"necta rine\", \"man go\", \"lemonade\"], 9) should return {processedArray: [\"watermelon\", \"peach\", \"nectarine\", \"mango\", \"lemonade\"], matchingString: \"nectarine\"}', function() {\n  expect(findLastStringByLength([\"water melon\", \" peach \", \"necta rine\", \"man go\", \"lemonade\"], 9)).to.deep.equal({\n    processedArray: [\"watermelon\", \"peach\", \"nectarine\", \"mango\", \"lemonade\"],\n    matchingString: \"nectarine\"\n  });\n});\n\nit('findLastStringByLength([\"r aspberry \", \" black berry\", \" straw berry \", \"apple\", \"b anana\"], 10) should return {processedArray: [\"raspberry\", \"blackberry\", \"strawberry\", \"apple\", \"banana\"], matchingString: \"strawberry\"}', function() {\n  expect(findLastStringByLength([\"r aspberry \", \" black berry\", \" straw berry \", \"apple\", \"b anana\"], 10)).to.deep.equal({\n    processedArray: [\"raspberry\", \"blackberry\", \"strawberry\", \"apple\", \"banana\"],\n    matchingString: \"strawberry\"\n  });\n});\n\nit('findLastStringByLength([\"ki w i\", \"mango \", \"apri cot \", \" pl um \", \"grape\"], 4) should return {processedArray: [\"kiwi\", \"mango\", \"apricot\", \"plum\", \"grape\"], matchingString: \"plum\"}', function() {\n  expect(findLastStringByLength([\"ki w i\", \"mango \", \"apri cot \", \" pl um \", \"grape\"], 4)).to.deep.equal({\n    processedArray: [\"kiwi\", \"mango\", \"apricot\", \"plum\", \"grape\"],\n    matchingString: \"plum\"\n  });\n});\n\nit('findLastStringByLength([\"pe anut\", \"coco nut\", \"al mond\", \"hazeln ut\", \"cashe w\"], 6) should return {processedArray: [\"peanut\", \"coconut\", \"almond\", \"hazelnut\", \"cashew\"], matchingString: \"cashew\"}', function() {\n  expect(findLastStringByLength([\"pe anut\", \"coco nut\", \"al mond\", \"hazeln ut\", \"cashe w\"], 6)).to.deep.equal({\n    processedArray: [\"peanut\", \"coconut\", \"almond\", \"hazelnut\", \"cashew\"],\n    matchingString: \"cashew\"\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}