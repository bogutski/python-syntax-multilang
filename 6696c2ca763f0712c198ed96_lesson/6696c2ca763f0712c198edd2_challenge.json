{
  "_id": "6696c2ca763f0712c198edd2",
  "name": {
    "en": "",
    "ru": "Очистить строку от повторяющихся слов"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `noDuplicate` принимает строку и возвращает строку, в которой удалены все повторяющиеся слова.\n\nСлова в строке разделены пробелами, регистр написания не учитывается.\n\nСлова в новой строке должны быть разделены с помощью `***`.\n\nПример запуска функции:\n```javascript\nnoDuplicate('start learning js js ') // 'start***learning***js'\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function noDuplicate(str) {\n  let result = '';\n  let word = '';\n  const obj = {};\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] !== ' ') word += str[i];\n\n    if (str[i] === ' ' || i === str.length - 1) {\n      if (word && !obj[word]) {\n        obj[word] = 1;\n\n        if (result) result += '***' + word;\n        else result = word;\n      }\n      word = '';\n    }\n  }\n  return result\n}",
  "openTest": "it('Created function noDuplicate', () => {\n  expect(noDuplicate).to.be.a('function');\n});\n\nit('noDuplicate(\"Hello Hello\") returns \"Hello\"', () => {\n  expect(noDuplicate('Hello Hello')).to.equal('Hello');\n});\n\nit('noDuplicate(\"Hello \") returns \"Hello\"', () => {\n  expect(noDuplicate('Hello ')).to.equal('Hello');\n});\n\nit('noDuplicate(\"start learning js js \") returns \"start***learning***js\"', () => {\n  expect(noDuplicate('start learning js js ')).to.equal('start***learning***js');\n});\n\nit('noDuplicate(\"a b c d e f g g a a d c\") returns \"a***b***c***d***e***f***g\"', () => {\n  expect(noDuplicate('a b c d e f g g a a d c')).to.equal('a***b***c***d***e***f***g');\n});\n\nit('noDuplicate(\"  \") returns \"\"', () => {\n  expect(noDuplicate('  ')).to.equal('');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}