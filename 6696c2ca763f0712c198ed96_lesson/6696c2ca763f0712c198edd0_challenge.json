{
  "_id": "6696c2ca763f0712c198edd0",
  "name": {
    "en": "",
    "ru": "Сколько дубликатов в строке?"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `countDuplicates` принимает строку, состоящую из слов в одинаковом регистре.\n\nНеобходимо посчитать сколько cлов-дубликатов содержится в строке.\n\nПервое вхождение слова не считается дубликатом. Дубликаты разных слов суммируются между собой.\n\nПример запуска функции:\n```javascript\ncountDuplicates('abc cde def') // 0\ncountDuplicates('abc abc abc abc def def def') // 5\ncountDuplicates('abc cde abc cde') // 2\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function countDuplicates(str) {\n  let count = 0;\n  let word = '';\n  const obj = {};\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] !== ' ') word += str[i];\n\n    if (str[i] === ' ' || i === str.length - 1) {\n      if (word && !obj[word]) {\n        obj[word] = 1;\n      } else if (obj[word] === 1) {\n        count++;\n      }\n      word = '';\n    }\n  }\n  return count\n}",
  "openTest": "it('Created function countDuplicates', () => {\n  expect(countDuplicates).to.be.a('function');\n});\n\nit('countDuplicates(\"abc cde def\") should returns 0', () => {\n  expect(countDuplicates('abc cde def')).to.equal(0);\n});\n\nit('countDuplicates(\"abc cde abc\") should returns 1', () => {\n  expect(countDuplicates('abc cde abc')).to.equal(1);\n});\n\nit('countDuplicates(\"abc cde abc cde\") should returns 2', () => {\n  expect(countDuplicates('abc cde abc cde')).to.equal(2);\n});\n\nit('countDuplicates(\"\") should returns 0', () => {\n  expect(countDuplicates('')).to.equal(0);\n});\n\nit('countDuplicates(\"abc abc abc abc def def def\") should returns 5', () => {\n  expect(countDuplicates('abc abc abc abc def def def')).to.equal(5);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}