{
  "_id": "6696c2ca763f0712c198ed96",
  "content": {
    "ru": "В предыдущем занятии мы научились удалять дубликаты символов из строки, теперь давайте научимся **удалять дубликаты слов**.\n\nРассмотрим пример\n```javascript\nconst str = 'car js pasv car jsp coding    js car';\n//'car js pasv jsp coding' - предполагаем получить в результате решения строку данного вида\n\nconst words = {}  //создаем объект для того чтобы собирать в нем уже добавленные слова\nlet res = '';     //строка результат, в которой уже не будет дубликатов\nlet acc = '';     //строка аккумулятор, в которую мы будем собирать слово\n\n//Сделаем цикл по строке\nfor (let i = 0; i < str.length; i++) {\n  if(str[i] !== ' ') acc += str[i]  //если текущий символ не пробел, то добавляем его в аккумулятор\n  \n  if(str[i] === ' ' || i === str.length-1){  //проверяем, что если мы дошли до пробела или до конца строки\n    if(acc && !words[acc]) { //проверяем что если аккумулятор не пустой И объект words с ключом 'acc' возвращает false (то есть такого слова еще нет в объекте)\n    words[acc] = 1;          // добавляем слово аккумулятор в объект и присваиваем ключу значение 1;\n    res += acc + ' ';        //добавляем в строку результат наш аккумулятор и пробел\n    }\n    acc = '';                //аккумулятор нужно очищать, после того, как мы наткнулись на пробел\n  }\n}\n\nconsole.log(res)\n//'car js pasv jsp coding '\n```\nЗдесь мы получили пробел еще и в конце строки.\n\nЧтобы от этого избавиться можно сделать дополнительную проверку.\n\nА заодно немного преобразовать код:\n```javascript\nconst str = 'car js pasv car jsp coding    js car';\n\nconst words = {}  \nlet res = '';     \nlet acc = '';     \n\nfor (let i = 0; i < str.length; i++) {\n  if(str[i] !== ' ') acc += str[i]  \n  \n  if(str[i] === ' ' || i === str.length-1){  \n    if(acc && !words[acc]) { \n    words[acc] = 1;    \n    \n    if(res) res += ' ' + acc;  //если `res` не пустая строка и туда уже что-то добавили, тогда сначала ставим пробел, а потом добавляем слово аккумулятор\n    else res += acc;           //иначе (то есть в самом начале строки) в результат добавляем только слово аккумулятор\n    }\n    acc = '';                \n  }\n}\n\nconsole.log(res)\n//'car js pasv jsp coding'\n```\nМы получили правильный результат.\n\nКод получился компактным и мы не делаем проверку последнее слово или нет, чтобы не добавлять после него пробел,\nа проверяем если мы собрали первое слово.\n\nНебольшое пояснение проверки\n```javascript\nif(!words[acc]);\n```\nДанной проверкой мы не проверяет наличие ключа в объекте, а проверяем значение ключа.\nЕсли ключа нет, то вернется `undefined`, а `undefined` в логическом контексте будет `false`.\n\nЕсли бы мы хотели проверить наличие ключа в объекте, то использовали бы команду `in` или `hasOwnProperty`\n\nПроработайте эту задачу еще раз. Такие задания часто дают на собеседованиях.\n",
    "en": "In the previous lesson we learned how to remove duplicate characters from a string, now let's learn how to **remove duplicate words**.\n\nLet's look at an example\n```javascript\nconst str = 'car js pasv car jsp coding js car';\n//'car js pasv jsp coding' - we expect to get a string of this type as a result of the solution\n\nconst words = {} // create an object to collect already added words in it\nlet res = ''; //result string, where there will be no duplicates anymore\nlet acc = ''; //string accumulator, in which we will collect the word\n\n//Let's loop through the string\nfor (let i = 0; i < str.length; i++) {\n  if(str[i] !== ' ') acc += str[i] // if the current character is not a space, add it to the accumulator\n\n  if(str[i] === ' ' || i === str.length-1){ //check if we reached a space or the end of the line\n    if(acc && !words[acc]) { //check that if the accumulator is not empty and the words object with the key 'acc' returns false (i.e. this word is not in the object yet)\n    words[acc] = 1; // add the word accumulator to the object and assign the key the value 1;\n    res += acc + ' '; // add our accumulator and a space to the result string\n    }\n    acc = ''; //accumulator should be cleared after we hit a space\n  }\n}\n\nconsole.log(res)\n//'car js pasv jsp coding ''\n```\nHere we also got a space at the end of the line.\n\nTo get rid of this, you can do an extra check.\n\nAnd at the same time, convert the code a little bit:\n```javascript\nconst str = 'car js pasv car jsp coding js car';\n\nconst words = {}  \nlet res = '';   \nlet acc = '';   \n\nfor (let i = 0; i < str.length; i++) {\n  if(str[i] !== ' ') acc += str[i]  \n\n  if(str[i] === ' ' || i === str.length-1){  \n    if(acc && !words[acc]) { \n    words[acc] = 1;  \n\n    if(res) res += ' ' + acc; //if `res` is not an empty string and something has already been added there, then first we put a space, and then we add the word acc\n    else res += acc; //otherwise (i.e. at the very beginning of the line) we add only word accumulator to the result\n    }\n    acc = '';   \n  }\n}\n\nconsole.log(res)\n//'car js pasv jsp coding'\n```\nWe got the right result.\n\nThe code is compact and we don't check the last word or not, so we don't add a space after it,\nbut we check if we have the first word.\n\nA little clarification of the check\n```javascript\nif(!words[acc]);\n```\nWith this check we are not checking if the key exists in the object, we are checking the value of the key.\nIf there is no key, it will return `undefined` and `undefined` will be `false` in the logical context.\n\nIf we wanted to check if a key exists in the object, we would use the `in` or `hasOwnProperty` command\n\nWork through this task again. Such tasks are often given at job interviews.\n",
    "es": "# Удаление дубликатов слов из строки language: es"
  },
  "video": {
    "ru": "https://youtu.be/pNmEr89BFNI",
    "en": "",
    "es": ""
  }
}