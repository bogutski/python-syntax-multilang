{
  "_id": "6696c2ca763f0712c198eb31",
  "name": {
    "en": "Positive integers from array to string",
    "ru": "Целые положительные числа из массива в строку"
  },
  "instruction": {
    "en": "The function `stringOfPositiveIntegers` takes an array of numbers.\n\nThe function should return a string containing only positive integers from the array, separated by semicolons `;`.\n\nThe string must begin and end with parentheses: `(` and `)` respectively.\n\nTo check if a number is an integer, you can use the fact that when you divide an integer by 1, the remainder of the division must be zero.\n\nWhen writing numbers in a string, you must add a space before each number and a semicolon after the number.\n\nExamples of running a function:\n\n```javascript\nstringOfPositiveIntegers([1, 2, 3, 4, 5]); // '( 1; 2; 3; 4; 5;)'\nstringOfPositiveIntegers([-11, 2.56, 3, -4.7, 5.01, -60, 71, 0, 9, 1000]); // '( 3; 71; 9; 1000;)'\nstringOfPositiveIntegers([1.01, -2.2, 3.3, 0,-5.5]); // '()'\nstringOfPositiveIntegers([]); // '()'\n```",
    "ru": "Функция `stringOfPositiveIntegers` принимает массив чисел.\n\nФункция должна возвращать строку, в которой будут записаны только целые положительные числа из массива, разделенные точками с запятой `;`.\n\nСтрока должна начинаться и заканчиваться круглыми скобками: `(` и `)` соответственно.\n\nЧтобы проверить, является ли число целым, можно использовать тот факт, что при делении целого числа на 1 остаток от деления должен быть равен нулю.\n\nПри записи чисел в строку перед каждым числом нужно добавлять пробел, а после числа - точку с запятой.\n\nПримеры запуска функции:\n\n```javascript\nstringOfPositiveIntegers([1, 2, 3, 4, 5]); // '( 1; 2; 3; 4; 5;)'\nstringOfPositiveIntegers([-11, 2.56, 3, -4.7, 5.01, -60, 71, 0, 9, 1000]); // '( 3; 71; 9; 1000;)'\nstringOfPositiveIntegers([1.01, -2.2, 3.3, 0,-5.5]); // '()'\nstringOfPositiveIntegers([]); // '()'\n```"
  },
  "initialSolution": "function stringOfPositiveIntegers(arr) {",
  "completedSolution": "function stringOfPositiveIntegers(arr) {\n  let result = '(';\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 1 === 0) {\n      result += ' '+arr[i]+';';\n    }\n  }\n  result += ')';\n  return result;\n}",
  "openTest": "it('Created function stringOfPositiveIntegers', () => {\n  expect(stringOfPositiveIntegers).to.be.a('function');\n});\n\nit('stringOfPositiveIntegers([11, 22, 33, 44, 55]) should return \"( 11; 22; 33; 44; 55;)\"', () => {\n  expect(stringOfPositiveIntegers([11, 22, 33, 44, 55])).to.deep.equal('( 11; 22; 33; 44; 55;)');\n});\n\nit('stringOfPositiveIntegers([-11, 2.56, 3, -4.7, 5.01, -60, 71, 0, 9, 1000]) should return \"( 3; 71; 9; 1000;)\"', () => {\n  expect(stringOfPositiveIntegers([-11, 2.56, 3, -4.7, 5.01, -60, 71, 0, 9, 1000])).to.deep.equal('( 3; 71; 9; 1000;)');\n});\n\nit('stringOfPositiveIntegers([1.01, -2.2, 3.3, 0,-5.5]) should return \"()\"', () => {\n  expect(stringOfPositiveIntegers([1.01, -2.2, 3.3, 0,-5.5])).to.deep.equal('()');\n});\n\nit('stringOfPositiveIntegers([]) should return \"()\"', () => {\n  expect(stringOfPositiveIntegers([])).to.deep.equal('()');\n});\n\nit('stringOfPositiveIntegers([0, -2, 0, 4, 0]) should return \"( 4;)\"', () => {\n  expect(stringOfPositiveIntegers([0, -2, 0, 4, 0])).to.deep.equal('( 4;)');\n});\n\nit('stringOfPositiveIntegers([0.0001, -29.11, 3.5 , 0, 5.89]) should return \"()\"', () => {\n  expect(stringOfPositiveIntegers([0.0001, -29.11, 3.5 , 0, 5.89])).to.deep.equal('()');\n});\n\nit('stringOfPositiveIntegers([0, -1, 2,-3, 4, -5, 6]) should return \"( 2; 4; 6;)\"', () => {\n  expect(stringOfPositiveIntegers([0, -1, 2,-3, 4, -5, 6])).to.deep.equal('( 2; 4; 6;)');\n});\n\nit('stringOfPositiveIntegers([10, 20, 30, 404, 5, 0, 6.707, 45.00001]) should return \"( 10; 20; 30; 404; 5;)\"', () => {\n  expect(stringOfPositiveIntegers([10, 20, 30, 404, 5, 0, 6.707, 45.00001])).to.deep.equal('( 10; 20; 30; 404; 5;)');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}