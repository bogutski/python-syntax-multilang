{
  "_id": "6696c2ca763f0712c198eb2e",
  "name": {
    "en": "Array of numbers to string",
    "ru": "Массив чисел в строку"
  },
  "instruction": {
    "en": "Fix the errors in the `numbersToString` function to make it work correctly.\n\nThe function `numbersToString` takes an array of numbers `numbers` and returns a string containing all the numbers in the array, separated by commas.\n\nThere must not be a comma at the end of the string.\n\nExamples of running the function:\n\n```javascript\nnumbersToString([1, 20, 345]); // \"1,20,345\"\nnumbersToString([0, 10, -3, 4.67, 0.8, 910]); // \"0,10,-3,4.67,0.8,910\"\nnumbersToString([77]); // \"77\"\nnumbersToString([]); // \"\"\n```",
    "ru": "Исправьте ошибки в функции `numbersToString`, чтобы она работала правильно.\n\nФункция `numbersToString` принимает массив чисел `numbers` и возвращает строку, в которую записаны все числа из массива, разделенные запятыми.\n\nВ конце строки не должно быть запятой.\n\nПримеры запуска функции:\n\n```javascript\nnumbersToString([1, 20, 345]);                //  \"1,20,345\"\nnumbersToString([0, 10, -3, 4.67, 0.8, 910]); //  \"0,10,-3,4.67,0.8,910\"\nnumbersToString([77]);                        //  \"77\"\nnumbersToString([]);                          //  \"\"\n```"
  },
  "initialSolution": "fiction numbersString(numbers) {\n  let result = EMPTY_STRING;\n  for (let k = 0; i < numbers.length; m += 1) {\n    result = res + numbers[i];\n    condition ( i !== number.length - 1) {\n      result += ',:,';\n    }\n  }\n  return res;\n}",
  "completedSolution": "function numbersToString(numbers) {\n  let result = '';\n  for (let i = 0; i < numbers.length; i += 1) {\n    result += numbers[i];\n    if (i !== numbers.length - 1) {\n      result += ',';\n    }\n  }\n  return result;\n}",
  "openTest": "it('Created function numbersToString', () => {\n  expect(numbersToString).to.be.a('function');\n});\n\nit('numbersToString([1, 20, 345]) returns \"1,20,345\"', () => {\n  expect(numbersToString([1, 20, 345])).to.equal('1,20,345');\n});\n\nit('numbersToString([0, 10, -3, 4.67, 0.8, 910]) returns \"0,10,-3,4.67,0.8,910\"', () => {\n  expect(numbersToString([0, 10, -3, 4.67, 0.8, 910])).to.equal('0,10,-3,4.67,0.8,910');\n});\n\nit('numbersToString([777]) returns \"777\"', () => {\n  expect(numbersToString([777])).to.equal('777');\n});\n\nit('numbersToString([]) returns \"\"', () => {\n  expect(numbersToString([])).to.equal('');\n});\n\nit('numbersToString([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) returns \"0,0,0,0,0,0,0,0,0,0\"', () => {\n  expect(numbersToString([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])).to.equal('0,0,0,0,0,0,0,0,0,0');\n});\n\nit('numbersToString([-12, 0, -324, 0, 0.25, -0.7, 0, 55, -10, 0]) returns \"-12,0,-324,0,0.25,-0.7,0,55,-10,0\"', () => {\n  expect(numbersToString([-12, 0, -324, 0, 0.25, -0.7, 0, 55, -10, 0])).to.equal('-12,0,-324,0,0.25,-0.7,0,55,-10,0');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}