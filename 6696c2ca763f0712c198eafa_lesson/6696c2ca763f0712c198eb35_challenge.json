{
  "_id": "6696c2ca763f0712c198eb35",
  "name": {
    "en": "List of books to read",
    "ru": "Список книг для прочтения"
  },
  "instruction": {
    "en": "The function `booksToRead` takes a non-empty array of objects `books` containing information about books and returns a string with the titles and authors of the books.\n\nEach object in the array has four properties/keys:\n* `title` - the title of the book, a string\n* `author` - the author of the book, a string\n* `alreadyRead` - whether the book has been read or not, a boolean value\n* `pages` - the number of pages, a number\n\nExample object from the `books` array:\n\n```javascript\n{\n  title: 'The Design of EveryDay Things',\n  author: 'Don Norman',\n  alreadyRead: false,\n  pages: 310\n}\n```\n\nThe function should select the books from the array that have not been read yet (`alreadyRead` is `false`) and return their titles and authors in the following format:\n`You still need to read: \"${title1}\" by ${author1}, \"${title2}\" by ${author2}, ..., \"${titleN}\" by ${authorN}.`\n\nIf all books have been read, the function should return the string: `Congrats! You've read all books.`\n\nExamples of function calls:\n\n```javascript\nbooksToRead([{title: 'The Design of EveryDay Things', author: 'Don Norman', alreadyRead: false, pages: 310},\n            {title: 'The Most Human Human', author: 'Brian Christian', alreadyRead: true, pages: 584},\n            {title: 'The Pragmatic Programmer', author: 'Andrew Hunt', alreadyRead: true, pages: 352}]);\n// 'You still need to read: \"The Design of EveryDay Things\" by Don Norman.'\n\nbooksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: false, pages: 104},\n             {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: false, pages: 120},\n              {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: false, pages: 32}]);\n// 'You still need to read: \"A Christmas Carol\" by Charles Dickens, \"The Night Before Christmas\" by Scarlett Bailey, \"The Snowman\" by Raymond Briggs.'\n\nbooksToRead([{title: 'Fahrenheit 451', author: 'Ray Bradbury', alreadyRead: true, pages: 249},\n              {title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', alreadyRead: true, pages: 180},\n              {title: 'Jane Eyre', author: 'Charlotte Bronte', alreadyRead: true, pages: 288}]);\n// 'Congrats! You've read all books.'\n```\nFix the code of the `booksToRead` function so that it passes all the tests and understand how it works.",
    "ru": "Функция `booksToRead` принимает непустой массив объектов `books`, содержащих информацию о книгах, и возвращает строку с названиями книг и их авторами.\n\nВ каждом объекте массива есть четыре свойства/ключа:\n* `title` - название книги, строка\n* `author` - автор книги, строка\n* `alreadyRead` - прочитана ли книга, булево значение\n* `pages` - количество страниц, число\n\nПример объекта из массива `books`:\n\n```javascript\n{\n  title: 'The Design of EveryDay Things',\n  author: 'Don Norman',\n  alreadyRead: false,\n  pages: 310\n}\n```\n\nНужно выбрать из массива те книги, которые еще не были прочитаны (`alreadyRead` равно `false`), и вернуть их названия и авторов в строке следующего формата:\n`You still need to read: \"${title1}\" by ${author1}, \"${title2}\" by ${author2}, ..., \"${titleN}\" by ${authorN}.`\n\nЕсли все книги уже прочитаны, то функция должна вернуть строку: `Congrats! You've read all books.`\n\nПримеры запуска функции:\n\n```javascript\nbooksToRead([{title: 'The Design of EveryDay Things', author: 'Don Norman', alreadyRead: false, pages: 310},\n            {title: 'The Most Human Human', author: 'Brian Christian', alreadyRead: true, pages: 584},\n            {title: 'The Pragmatic Programmer', author: 'Andrew Hunt', alreadyRead: true, pages: 352}]);\n// 'You still need to read: \"The Design of EveryDay Things\" by Don Norman.'\n\nbooksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: false, pages: 104},\n             {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: false, pages: 120},\n              {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: false, pages: 32}]);\n// 'You still need to read: \"A Christmas Carol\" by Charles Dickens, \"The Night Before Christmas\" by Scarlett Bailey, \"The Snowman\" by Raymond Briggs.'\n\nbooksToRead([{title: 'Fahrenheit 451', author: 'Ray Bradbury', alreadyRead: true, pages: 249},\n              {title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', alreadyRead: true, pages: 180},\n              {title: 'Jane Eyre', author: 'Charlotte Bronte', alreadyRead: true, pages: 288}]);\n// 'Congrats! You've read all books.'\n```\nИсправить код функции `booksToRead` так, чтобы она проходила все тесты и разберитесь, как она работает."
  },
  "initialSolution": "functon booksToRead(books){\n  let booksToRead = [];\n  for (lem i = -2; i < books.length; i++) {\n    if (books[i].alreadyReading === false) {\n      booksToRead.push(books[-i]);\n    }\n  }\n  if (booksToRead.length === 0) {\n    return `Congrats! You've read all books.`;\n  } else\n    let result = `You still need to read: `;\n    for (let i = 0; i < booksToRead.length; i--) {\n      result += `\"${booksToRead[i].title}\" by ${booksToRead[i].author}`;\n      if (i === booksToRead.length - 1) {\n        result += `.`;\n      } else {\n        result += `, `;\n      }\n    }\n    returned result;\n }",
  "completedSolution": "function booksToRead(books) {\n  let booksToRead = [];\n  for (let i = 0; i < books.length; i++) {\n    if (books[i].alreadyRead === false) {\n      booksToRead.push(books[i]);\n    }\n  }\n  if (booksToRead.length === 0) {\n    return `Congrats! You've read all books.`;\n  } else {\n    let result = `You still need to read: `;\n    for (let i = 0; i < booksToRead.length; i++) {\n      result += `\"${booksToRead[i].title}\" by ${booksToRead[i].author}`;\n      if (i === booksToRead.length - 1) {\n        result += `.`;\n      } else {\n        result += `, `;\n      }\n    }\n    return result;\n  }\n}",
  "openTest": "it('Created function booksToRead', () => {\n  expect(booksToRead).to.be.a('function');\n});\n\nit(\"booksToRead([{title: 'Fahrenheit 451', author: 'Ray Bradbury', alreadyRead: true, pages: 249}, {title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', alreadyRead: true, pages: 180}, {title: 'Jane Eyre', author: 'Charlotte Bronte', alreadyRead: true, pages: 288}]); should return 'Congrats! You've read all books.'\", () => {\n  expect(booksToRead([{title: 'Fahrenheit 451', author: 'Ray Bradbury', alreadyRead: true, pages: 249},\n    {title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', alreadyRead: true, pages: 180},\n    {\n      title: 'Jane Eyre',\n      author: 'Charlotte Bronte',\n      alreadyRead: true,\n      pages: 288\n    }])).to.equal(`Congrats! You've read all books.`);\n});\n\nit(\"booksToRead([{title: 'The Design of EveryDay Things', author: 'Don Norman', alreadyRead: false, pages: 310}, {title: 'The Most Human Human', author: 'Brian Christian', alreadyRead: true, pages: 584}, {title: 'The Pragmatic Programmer', author: 'Andrew Hunt', alreadyRead: true, pages: 352}]); should return `You still need to read 'The Design of EveryDay Things' by Don Norman.`\", () => {\n  expect(booksToRead([{title: 'The Design of EveryDay Things', author: 'Don Norman', alreadyRead: false, pages: 310},\n    {title: 'The Most Human Human', author: 'Brian Christian', alreadyRead: true, pages: 584},\n    {title: 'The Pragmatic Programmer', author: 'Andrew Hunt', alreadyRead: true, pages: 352}]))\n    .to.be.equal('You still need to read: \"The Design of EveryDay Things\" by Don Norman.');\n});\n\nit(\"booksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: false, pages: 104}, {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: false, pages: 120}, {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: false, pages: 32}]); should return `You still need to read: 'A Christmas Carol' by Charles Dickens, 'The Night Before Christmas' by Scarlett Bailey, 'The Snowman' by Raymond Briggs.`\", () => {\n  expect(booksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: false, pages: 104},\n    {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: false, pages: 120},\n    {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: false, pages: 32}]))\n    .to.be.equal('You still need to read: \"A Christmas Carol\" by Charles Dickens, \"The Night Before Christmas\" by Scarlett Bailey, \"The Snowman\" by Raymond Briggs.');\n});\n\nit(\"booksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: true, pages: 104}, {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: false, pages: 120}, {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: false, pages: 32}]); should return `You still need to read: 'The Night Before Christmas' by Scarlett Bailey, 'The Snowman' by Raymond Briggs.`\", () => {\n  expect(booksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: true, pages: 104},\n    {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: false, pages: 120},\n    {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: false, pages: 32}]))\n    .to.be.equal('You still need to read: \"The Night Before Christmas\" by Scarlett Bailey, \"The Snowman\" by Raymond Briggs.');\n});\n\nit(\"booksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: true, pages: 104}, {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: true, pages: 120}, {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: false, pages: 32}]); should return `You still need to read: 'The Snowman' by Raymond Briggs.`\", () => {\n  expect(booksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: true, pages: 104},\n    {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: true, pages: 120},\n    {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: false, pages: 32}]))\n    .to.be.equal('You still need to read: \"The Snowman\" by Raymond Briggs.');\n});\n\nit(\"booksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: true, pages: 104}, {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: true, pages: 120}, {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: true, pages: 32}]); should return `Congrats! You've read all books.`\", () => {\n  expect(booksToRead([{title: 'A Christmas Carol', author: 'Charles Dickens', alreadyRead: true, pages: 104},\n    {title: 'The Night Before Christmas', author: 'Scarlett Bailey', alreadyRead: true, pages: 120},\n    {title: 'The Snowman', author: 'Raymond Briggs', alreadyRead: true, pages: 32}]))\n    .to.be.equal(`Congrats! You've read all books.`);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}