{
  "_id": "6696c2cb763f0712c198f7ea",
  "name": {
    "en": "/*",
    "ru": "Проверка присутствия подстроки в массиве строк и возврат их значений и индексов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findSubstringsIndices`, которая принимает массив строк и подстроку.\n\nФункция должна вернуть массив, состоящий из пар `[значение, индекс]` для каждого элемента массива, который содержит данную подстроку, без учета регистра.\n\nЕсли таких элементов нет, функция должна вернуть строку `No elements found`.\n\n\nПримеры запуска функции:\n```javascript\nfindSubstringsIndices(['apPle pIe', 'baNAna Split', 'cheRRy tArt', 'BananA brEad'], 'BANANA'); // [ [ 'baNAna Split', 1 ], [ 'BananA brEad', 3 ] ]\nfindSubstringsIndices(['Cat', 'Dog', 'Fish'], 'do'); // [ [ 'Dog', 1 ] ]\nfindSubstringsIndices(['apple pie', 'cherry tart'], 'banana'); // \"No elements found\"\n```"
  },
  "initialSolution": "function findSubstringsIndices(){\n\n}",
  "completedSolution": "function findSubstringsIndices(arr, str) {\n  let result = []\n  str = str.toLowerCase()\n\n  arr.forEach((curr, i) => {\n    const string = curr.toLowerCase()\n    if(string.indexOf(str) !== -1) result.push([curr, i])\n  })\n\n  return result.length ? result : 'No elements found';\n}",
  "openTest": "it('Created function findSubstringsIndices', () => {\n  expect(findSubstringsIndices).to.be.a('function');\n});\n\nit('findSubstringsIndices([\"apPle pIe\", \"baNAna Split\", \"cheRRy tArt\", \"BananA brEad\"], \"BANANA\") should return [ [ \"baNAna Split\", 1 ], [ \"BananA brEad\", 3 ] ]', function() {\n  expect(findSubstringsIndices([\"apPle pIe\", \"baNAna Split\", \"cheRRy tArt\", \"BananA brEad\"], \"BANANA\")).to.deep.equal([[\"baNAna Split\", 1], [\"BananA brEad\", 3]]);\n});\n\nit('findSubstringsIndices([\"Cat\", \"Dog\", \"Fish\"], \"do\") should return [ [ \"Dog\", 1 ] ]', function() {\n  expect(findSubstringsIndices([\"Cat\", \"Dog\", \"Fish\"], \"do\")).to.deep.equal([[\"Dog\", 1]]);\n});\n\nit('findSubstringsIndices([\"apple pie\", \"cherry tart\"], \"banana\") should return \"No elements found\"', function() {\n  expect(findSubstringsIndices([\"apple pie\", \"cherry tart\"], \"banana\")).to.equal(\"No elements found\");\n});\n\nit('findSubstringsIndices([\"hello world\", \"hi there\", \"hey\"], \"hi\") should return [ [ \"hi there\", 1 ] ]', function() {\n  expect(findSubstringsIndices([\"hello world\", \"hi there\", \"hey\"], \"hi\")).to.deep.equal([[\"hi there\", 1]]);\n});\n\nit('findSubstringsIndices([\"javascript\", \"java\", \"typescript\"], \"java\") should return [ [ \"javascript\", 0 ], [ \"java\", 1 ] ]', function() {\n  expect(findSubstringsIndices([\"javascript\", \"java\", \"typescript\"], \"java\")).to.deep.equal([[\"javascript\", 0], [\"java\", 1]]);\n});\n\nit('findSubstringsIndices([\"python\", \"ruby\", \"perl\"], \"ru\") should return [ [ \"ruby\", 1 ] ]', function() {\n  expect(findSubstringsIndices([\"python\", \"ruby\", \"perl\"], \"ru\")).to.deep.equal([[\"ruby\", 1]]);\n});\n\nit('findSubstringsIndices([\"a\", \"b\", \"c\"], \"d\") should return \"No elements found\"', function() {\n  expect(findSubstringsIndices([\"a\", \"b\", \"c\"], \"d\")).to.equal(\"No elements found\");\n});\n\nit('findSubstringsIndices([], \"anything\") should return \"No elements found\"', function() {\n  expect(findSubstringsIndices([], \"anything\")).to.equal(\"No elements found\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}