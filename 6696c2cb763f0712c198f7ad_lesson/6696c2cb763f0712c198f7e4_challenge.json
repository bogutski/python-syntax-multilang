{
  "_id": "6696c2cb763f0712c198f7e4",
  "name": {
    "en": "/*",
    "ru": "Найти индекс элемента, содержащего подстроку, с учетом регистра и нескольких подстрок"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findSubstringIndices`, которая принимает массив строк и массив подстрок.\n\nФункция должна вернуть массив индексов, где каждый индекс соответствует первому элементу массива, который содержит каждую подстроку из массива подстрок, с учетом регистра.\n\nЕсли подстрока не найдена, вместо индекса должно быть значение `Substring not found`.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findSubstringIndices(['apple pie', 'banana split', 'cherry tart'], ['split', 'apple', 'cake']));\n// [1, 0, \"Substring not found\"]\n\nconsole.log(findSubstringIndices(['apple pie', 'banana split', 'cherry tart'], ['tart', 'pie']));\n// [2, 0]\n\nconsole.log(findSubstringIndices(['cat', 'dog', 'fish'], ['bird', 'dog', 'cat']));\n// ['Substring not found', 1, 0]\n\nconsole.log(findSubstringIndices([\"abc\", \"def\", \"ghi\"], [\"gh\", \"ab\", \"de\"]))\n// [2, 0, 1]\n```"
  },
  "initialSolution": "function findSubstringIndices(){\n\n}",
  "completedSolution": "function findSubstringIndices(arr1, arr2) {\n  let result = []\n\n  for(let str of arr2){\n    let index = -1\n\n    for(let i = 0; i < arr1.length; i++){\n      if(arr1[i].indexOf(str) !== -1){\n        index = i\n        break\n      }\n    }\n\n    result.push(index !== -1 ? index : 'Substring not found')\n  }\n\n  return result;\n}",
  "openTest": "it('Created function findSubstringIndices', () => {\n  expect(findSubstringIndices).to.be.a('function');\n});\n\nit(\"Function findSubstringIndices should include indexOf method\", () => {\n  const result = findSubstringIndices.toString();\n  expect(result).to.include('.indexOf(');\n});\n\nit('findSubstringIndices([\"apple pie\", \"banana split\", \"cherry tart\"], [\"split\", \"apple\", \"cake\"]) should return [1, 0, \"Substring not found\"]', function() {\n  expect(findSubstringIndices([\"apple pie\", \"banana split\", \"cherry tart\"], [\"split\", \"apple\", \"cake\"])).to.deep.equal([1, 0, \"Substring not found\"]);\n});\n\nit('findSubstringIndices([\"apple pie\", \"banana split\", \"cherry tart\"], [\"tart\", \"pie\"]) should return [2, 0]', function() {\n  expect(findSubstringIndices([\"apple pie\", \"banana split\", \"cherry tart\"], [\"tart\", \"pie\"])).to.deep.equal([2, 0]);\n});\n\nit('findSubstringIndices([\"cat\", \"dog\", \"fish\"], [\"dog\", \"cat\", \"bird\"]) should return [1, 0, \"Substring not found\"]', function() {\n  expect(findSubstringIndices([\"cat\", \"dog\", \"fish\"], [\"dog\", \"cat\", \"bird\"])).to.deep.equal([1, 0, \"Substring not found\"]);\n});\n\nit('findSubstringIndices([\"hello world\", \"hi there\", \"hey\"], [\"world\", \"hi\", \"nope\"]) should return [0, 1, \"Substring not found\"]', function() {\n  expect(findSubstringIndices([\"hello world\", \"hi there\", \"hey\"], [\"world\", \"hi\", \"nope\"])).to.deep.equal([0, 1, \"Substring not found\"]);\n});\n\nit('findSubstringIndices([\"one\", \"two\", \"three\"], [\"four\", \"two\", \"three\"]) should return [\"Substring not found\", 1, 2]', function() {\n  expect(findSubstringIndices([\"one\", \"two\", \"three\"], [\"four\", \"two\", \"three\"])).to.deep.equal([\"Substring not found\", 1, 2]);\n});\n\nit('findSubstringIndices([], [\"anything\", \"nothing\"]) should return [\"Substring not found\", \"Substring not found\"]', function() {\n  expect(findSubstringIndices([], [\"anything\", \"nothing\"])).to.deep.equal([\"Substring not found\", \"Substring not found\"]);\n});\n\nit('findSubstringIndices([\"abc\", \"def\", \"ghi\"], [\"gh\", \"ab\", \"de\"]) should return [2, 0, 1]', function() {\n  expect(findSubstringIndices([\"abc\", \"def\", \"ghi\"], [\"gh\", \"ab\", \"de\"])).to.deep.equal([2, 0, 1]);\n});\n\nit('findSubstringIndices([\"abc\", \"def\", \"ghi\"], [\"xy\", \"yz\", \"kl\"]) should return [\"Substring not found\", \"Substring not found\", \"Substring not found\"]', function() {\n  expect(findSubstringIndices([\"abc\", \"def\", \"ghi\"], [\"xy\", \"yz\", \"kl\"])).to.deep.equal([\"Substring not found\", \"Substring not found\", \"Substring not found\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}