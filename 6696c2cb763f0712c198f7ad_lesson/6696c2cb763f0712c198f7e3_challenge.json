{
  "_id": "6696c2cb763f0712c198f7e3",
  "name": {
    "en": "/*",
    "ru": "Найти индекс элемента с определенным свойством в массиве объектов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findIndexByProperty`, которая принимает массив объектов, с ключом: `name` и значение свойства.\n\nФункция должна вернуть индекс первого объекта, у которого значение свойства совпадает с переданным. Если такой объект не найден, функция должна вернуть строку вида: `Value was not found`.\n\n\nПримеры запуска функции:\n```javascript\nfindIndexByProperty([{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}], 'Bob'); // 1\nfindIndexByProperty([{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}, {name: 'Alice'}], 'Alice'); // 0\nfindIndexByProperty([{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}], 'David'); // \"Value was not found\"\n```"
  },
  "initialSolution": "function findIndexByProperty(){\n\n}",
  "completedSolution": "function findIndexByProperty(arr, element) {\n  const res = arr.map(({name}) => name).indexOf(element);\n  return res !== -1 ? res : 'Value was not found'\n}",
  "openTest": "it('Created function findIndexByProperty', () => {\n  expect(findIndexByProperty).to.be.a('function');\n});\n\nit(\"Function findIndexByProperty should include indexOf method\", () => {\n  const result = findIndexByProperty.toString();\n  expect(result).to.include('.indexOf(');\n});\n\nit('findIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}], \"Bob\") should return 1', function() {\n  expect(findIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}], \"Bob\")).to.equal(1);\n});\n\nit('findIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}, {name: \"Alice\"}], \"Alice\") should return 0', function() {\n  expect(findIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}, {name: \"Alice\"}], \"Alice\")).to.equal(0);\n});\n\nit('findIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}], \"David\") should return \"Value was not found\"', function() {\n  expect(findIndexByProperty([{name: \"Alice\"}, {name: \"Bob\"}, {name: \"Charlie\"}], \"David\")).to.equal(\"Value was not found\");\n});\n\nit('findIndexByProperty([{name: \"John\"}, {name: \"Doe\"}, {name: \"Smith\"}], \"Smith\") should return 2', function() {\n  expect(findIndexByProperty([{name: \"John\"}, {name: \"Doe\"}, {name: \"Smith\"}], \"Smith\")).to.equal(2);\n});\n\nit('findIndexByProperty([{name: \"John\"}, {name: \"Doe\"}, {name: \"Smith\"}], \"Jane\") should return \"Value was not found\"', function() {\n  expect(findIndexByProperty([{name: \"John\"}, {name: \"Doe\"}, {name: \"Smith\"}], \"Jane\")).to.equal(\"Value was not found\");\n});\n\nit('findIndexByProperty([{name: \"Tom\"}, {name: \"Jerry\"}, {name: \"Spike\"}], \"Jerry\") should return 1', function() {\n  expect(findIndexByProperty([{name: \"Tom\"}, {name: \"Jerry\"}, {name: \"Spike\"}], \"Jerry\")).to.equal(1);\n});\n\nit('findIndexByProperty([{name: \"Anna\"}, {name: \"Elsa\"}, {name: \"Olaf\"}], \"Olaf\") should return 2', function() {\n  expect(findIndexByProperty([{name: \"Anna\"}, {name: \"Elsa\"}, {name: \"Olaf\"}], \"Olaf\")).to.equal(2);\n});\n\nit('findIndexByProperty([], \"anything\") should return \"Value was not found\"', function() {\n  expect(findIndexByProperty([], \"anything\")).to.equal(\"Value was not found\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}