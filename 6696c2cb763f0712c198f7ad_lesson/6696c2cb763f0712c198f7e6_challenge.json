{
  "_id": "6696c2cb763f0712c198f7e6",
  "name": {
    "en": "/*",
    "ru": "Найти индекс первого повторяющегося элемента"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findFirstRepeatingIndex`, которая принимает массив.\n\nФункция должна вернуть индекс первого элемента, который повторяется в массиве.\n\nЕсли таких элементов нет, функция должна вернуть строку \"No repeating elements\".\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(findFirstRepeatingIndex(['a', 'b', 'c', 'a', 'd', 'b'])); // 3\nconsole.log(findFirstRepeatingIndex([1, 2, 3, 4, 2, 5]));             // 4\nconsole.log(findFirstRepeatingIndex([1, 2, 3, 4, 5]));                // \"No repeating elements\"\nconsole.log(findFirstRepeatingIndex([NaN, NaN, 0]));                  // 1\nconsole.log(findFirstRepeatingIndex([5, NaN, 10, NaN, 100, NaN]));    // 3\n```"
  },
  "initialSolution": "function findFirstRepeatingIndex(){\n\n}",
  "completedSolution": "function findFirstRepeatingIndex(arr) {\n  const indexOfNaN = arr.findIndex(el => Number.isNaN(el))\n\n  for(let i = 0; i <= arr.length - 2; i++){\n\n    if(indexOfNaN === -1){\n      const index = arr.indexOf(arr[i], i + 1)\n      if(index !== -1) return index\n    } else {\n      if(Number.isNaN(arr[i]) && indexOfNaN !== i) return i\n    }\n\n  }\n\n  return 'No repeating elements';\n}",
  "openTest": "it('Created function findFirstRepeatingIndex', () => {\n  expect(findFirstRepeatingIndex).to.be.a('function');\n});\n\nit('findFirstRepeatingIndex([\"a\", \"b\", \"c\", \"a\", \"d\", \"b\"]) should return 3', function() {\n  expect(findFirstRepeatingIndex([\"a\", \"b\", \"c\", \"a\", \"d\", \"b\"])).to.equal(3);\n});\n\nit('findFirstRepeatingIndex([1, 2, 3, 4, 5]) should return \"No repeating elements\"', function() {\n  expect(findFirstRepeatingIndex([1, 2, 3, 4, 5])).to.equal(\"No repeating elements\");\n});\n\nit('findFirstRepeatingIndex([1, 2, 3, 4, 2, 5]) should return 4', function() {\n  expect(findFirstRepeatingIndex([1, 2, 3, 4, 2, 5])).to.equal(4);\n});\n\nit('findFirstRepeatingIndex([\"apple\", \"banana\", \"cherry\", \"apple\"]) should return 3', function() {\n  expect(findFirstRepeatingIndex([\"apple\", \"banana\", \"cherry\", \"apple\"])).to.equal(3);\n});\n\nit('findFirstRepeatingIndex([true, false, true, false]) should return 2', function() {\n  expect(findFirstRepeatingIndex([true, false, true, false])).to.equal(2);\n});\n\nit('findFirstRepeatingIndex([\"a\", \"b\", \"c\"]) should return \"No repeating elements\"', function() {\n  expect(findFirstRepeatingIndex([\"a\", \"b\", \"c\"])).to.equal(\"No repeating elements\");\n});\n\nit('findFirstRepeatingIndex([null, undefined, null]) should return 2', function() {\n  expect(findFirstRepeatingIndex([null, undefined, null])).to.equal(2);\n});\n\nit('findFirstRepeatingIndex([NaN, NaN, 0]) should return 1', function() {\n  expect(findFirstRepeatingIndex([NaN, NaN, 0])).to.equal(1);\n});\n\nit('findFirstRepeatingIndex([5, NaN, 10, NaN, 100, NaN]) should return 3', function() {\n  expect(findFirstRepeatingIndex([5, NaN, 10, NaN, 100, NaN])).to.equal(3);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}