{
  "_id": "6696c2cb763f0712c198f7e2",
  "name": {
    "en": "/*",
    "ru": "Найти индекс элемента без учета регистра"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findIndexIgnoreCase`, которая принимает массив строк и строку.\n\nФункция должна вернуть индекс первого вхождения строки в массиве без учета регистра. Если строка не найдена, функция должна вернуть `-1`.\n\n\nПримеры запуска функции:\n```javascript\nfindIndexIgnoreCase(['apple', 'banana', 'Mango'], 'mango'); // 2\nfindIndexIgnoreCase(['Cat', 'Dog', 'Fish'], 'cat'); // 0\nfindIndexIgnoreCase(['hello', 'world'], 'WORLD'); // 1\nfindIndexIgnoreCase(['a', 'b', 'c'], 'D'); // -1\n```"
  },
  "initialSolution": "function findIndexIgnoreCase(){\n\n}",
  "completedSolution": "function findIndexIgnoreCase(arr, element) {\n  const modified = arr.map(str => str.toLowerCase())\n  return modified.indexOf(element.toLowerCase());\n}",
  "openTest": "it('Created function findIndexIgnoreCase', () => {\n  expect(findIndexIgnoreCase).to.be.a('function');\n});\n\nit(\"Function findIndexIgnoreCase should include indexOf method\", () => {\n  const result = findIndexIgnoreCase.toString();\n  expect(result).to.include('.indexOf(');\n});\n\nit('findIndexIgnoreCase([\"apple\", \"banana\", \"Mango\"], \"mango\") should return 2', function() {\n  expect(findIndexIgnoreCase([\"apple\", \"banana\", \"Mango\"], \"mango\")).to.equal(2);\n});\n\nit('findIndexIgnoreCase([\"Cat\", \"Dog\", \"Fish\"], \"cat\") should return 0', function() {\n  expect(findIndexIgnoreCase([\"Cat\", \"Dog\", \"Fish\"], \"cat\")).to.equal(0);\n});\n\nit('findIndexIgnoreCase([\"hello\", \"world\"], \"WORLD\") should return 1', function() {\n  expect(findIndexIgnoreCase([\"hello\", \"world\"], \"WORLD\")).to.equal(1);\n});\n\nit('findIndexIgnoreCase([\"a\", \"b\", \"c\"], \"D\") should return -1', function() {\n  expect(findIndexIgnoreCase([\"a\", \"b\", \"c\"], \"D\")).to.equal(-1);\n});\n\nit('findIndexIgnoreCase([\"JavaScript\", \"Python\", \"Ruby\"], \"python\") should return 1', function() {\n  expect(findIndexIgnoreCase([\"JavaScript\", \"Python\", \"Ruby\"], \"python\")).to.equal(1);\n});\n\nit('findIndexIgnoreCase([\"One\", \"Two\", \"Three\"], \"three\") should return 2', function() {\n  expect(findIndexIgnoreCase([\"One\", \"Two\", \"Three\"], \"three\")).to.equal(2);\n});\n\nit('findIndexIgnoreCase([\"Red\", \"Green\", \"Blue\"], \"red\") should return 0', function() {\n  expect(findIndexIgnoreCase([\"Red\", \"Green\", \"Blue\"], \"red\")).to.equal(0);\n});\n\nit('findIndexIgnoreCase([], \"anything\") should return -1', function() {\n  expect(findIndexIgnoreCase([], \"anything\")).to.equal(-1);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}