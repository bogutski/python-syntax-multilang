{
  "_id": "6696c2cb763f0712c198f7e9",
  "name": {
    "en": "/*",
    "ru": "Найти индексы заданных элементов и сообщить о не найденных"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findIndices`, которая принимает массив и произвольное количество элементов.\n\nФункция должна вернуть объект, где ключами являются найденные элементы, а значениями — их индексы в массиве.\n\nЕсли элемент не найден, он должен быть добавлен в массив под ключом `notFound`.\n\nЕсли все элементы найдены, ключ `notFound` не должен присутствовать в объекте.\n\n\nПримеры запуска функции:\n```javascript\nfindIndices(['a', 'b', 'c'], 'b', 'c', 'd') // { notFound: [ 'd' ], b: 1, c: 2 }\nfindIndices(['hello', 'js', 'world'], 'js', 'hello') // { js: 1, hello: 0 }\nfindIndices(['apple', 'pear', 'strawberry'], 'pear', 'banana') // { notFound: [ 'banana' ], pear: 1 }\n```"
  },
  "initialSolution": "function findIndices(){\n\n}",
  "completedSolution": "function findIndices(arr, ...elements) {\n  let result = {notFound: []}\n\n  for(let el of [...elements]){\n    const curr = arr.indexOf(el)\n    if(curr === -1) result.notFound.push(el)\n    else result[el] = curr\n  }\n\n  if(!result.notFound.length) delete result.notFound\n\n  return result;\n}",
  "openTest": "it('Created function findIndices', () => {\n  expect(findIndices).to.be.a('function');\n});\n\nit('findIndices([\"a\", \"b\", \"c\"], \"b\", \"c\", \"d\") should return { notFound: [\"d\"], b: 1, c: 2 }', function() {\n  expect(findIndices([\"a\", \"b\", \"c\"], \"b\", \"c\", \"d\")).to.deep.equal({ notFound: [\"d\"], b: 1, c: 2 });\n});\n\nit('findIndices([\"hello\", \"js\", \"world\"], \"js\", \"hello\") should return { js: 1, hello: 0 }', function() {\n  expect(findIndices([\"hello\", \"js\", \"world\"], \"js\", \"hello\")).to.deep.equal({ js: 1, hello: 0 });\n});\n\nit('findIndices([\"apple\", \"pear\", \"strawberry\"], \"pear\", \"banana\") should return { notFound: [\"banana\"], pear: 1 }', function() {\n  expect(findIndices([\"apple\", \"pear\", \"strawberry\"], \"pear\", \"banana\")).to.deep.equal({ notFound: [\"banana\"], pear: 1 });\n});\n\nit('findIndices([\"car\", \"bike\", \"plane\"], \"bike\", \"car\", \"train\") should return { notFound: [\"train\"], bike: 1, car: 0 }', function() {\n  expect(findIndices([\"car\", \"bike\", \"plane\"], \"bike\", \"car\", \"train\")).to.deep.equal({ notFound: [\"train\"], bike: 1, car: 0 });\n});\n\nit('findIndices([\"cat\", \"dog\", \"fish\"], \"dog\", \"bird\") should return { notFound: [\"bird\"], dog: 1 }', function() {\n  expect(findIndices([\"cat\", \"dog\", \"fish\"], \"dog\", \"bird\")).to.deep.equal({ notFound: [\"bird\"], dog: 1 });\n});\n\nit('findIndices([\"red\", \"green\", \"blue\"], \"yellow\", \"green\") should return { notFound: [\"yellow\"], green: 1 }', function() {\n  expect(findIndices([\"red\", \"green\", \"blue\"], \"yellow\", \"green\")).to.deep.equal({ notFound: [\"yellow\"], green: 1 });\n});\n\nit('findIndices([\"a\", \"b\", \"c\"], \"a\", \"b\", \"c\") should return { a: 0, b: 1, c: 2 }', function() {\n  expect(findIndices([\"a\", \"b\", \"c\"], \"a\", \"b\", \"c\")).to.deep.equal({ a: 0, b: 1, c: 2 });\n});\n\nit('findIndices([], \"x\", \"y\", \"z\") should return { notFound: [\"x\", \"y\", \"z\"] }', function() {\n  expect(findIndices([], \"x\", \"y\", \"z\")).to.deep.equal({ notFound: [\"x\", \"y\", \"z\"] });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}