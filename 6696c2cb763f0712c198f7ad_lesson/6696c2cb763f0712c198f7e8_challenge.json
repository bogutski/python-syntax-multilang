{
  "_id": "6696c2cb763f0712c198f7e8",
  "name": {
    "en": "/*",
    "ru": "Найти индекс первого элемента, который начинается с заданной подстроки"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `findIndexStartingWith`, которая принимает массив строк и подстроку.\n\nФункция должна вернуть индекс первого элемента массива, который содержит данную подстроку.\n\n* Если массив пуст, функция должна вернуть строку `Array is empty`.\n* Если подстрока не задана, функция должна вернуть строку `Subarray is undefined`.\n* Если такой элемент не найден, функция должна вернуть строку `No element found`.\n\n\nПримеры запуска функции:\n```javascript\nfindIndexStartingWith(['apple', 'banana', 'cherry'], 'ba'); // 1\nfindIndexStartingWith(['cat', 'dog', 'fish'], 'fi'); // 2\nfindIndexStartingWith([], 'ca'); // Вывод: \"Array is empty\"\nfindIndexStartingWith(['apple', 'banana', 'cherry'], ''); // Вывод: \"Subarray is undefined\"\nfindIndexStartingWith(['apple', 'banana', 'cherry'], 'ca'); // Вывод: \"No element found\"\n```"
  },
  "initialSolution": "function findIndexStartingWith(){\n\n}",
  "completedSolution": "function findIndexStartingWith(arr, str) {\n  if(!arr.length) return 'Array is empty'\n  if(!str) return 'Subarray is undefined'\n\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].indexOf(str) !== -1) return i\n  }\n\n  return 'No element found';\n}",
  "openTest": "it('Created function findIndexStartingWith', () => {\n  expect(findIndexStartingWith).to.be.a('function');\n});\n\nit('findIndexStartingWith([\"apple\", \"banana\", \"cherry\"], \"ba\") should return 1', function() {\n  expect(findIndexStartingWith([\"apple\", \"banana\", \"cherry\"], \"ba\")).to.equal(1);\n});\n\nit('findIndexStartingWith([\"cat\", \"dog\", \"fish\"], \"do\") should return 1', function() {\n  expect(findIndexStartingWith([\"cat\", \"dog\", \"fish\"], \"do\")).to.equal(1);\n});\n\nit('findIndexStartingWith([], \"ca\") should return \"Array is empty\"', function() {\n  expect(findIndexStartingWith([], \"ca\")).to.equal(\"Array is empty\");\n});\n\nit('findIndexStartingWith([\"apple\", \"banana\", \"cherry\"], \"\") should return \"Subarray is undefined\"', function() {\n  expect(findIndexStartingWith([\"apple\", \"banana\", \"cherry\"], \"\")).to.equal(\"Subarray is undefined\");\n});\n\nit('findIndexStartingWith([\"apple\", \"banana\", \"cherry\"], \"ca\") should return \"No element found\"', function() {\n  expect(findIndexStartingWith([\"apple\", \"banana\", \"cherry\"], \"ca\")).to.equal(\"No element found\");\n});\n\nit('findIndexStartingWith([\"hello\", \"world\", \"hi\"], \"wo\") should return 1', function() {\n  expect(findIndexStartingWith([\"hello\", \"world\", \"hi\"], \"wo\")).to.equal(1);\n});\n\nit('findIndexStartingWith([\"javascript\", \"java\", \"typescript\"], \"java\") should return 0', function() {\n  expect(findIndexStartingWith([\"javascript\", \"java\", \"typescript\"], \"java\")).to.equal(0);\n});\n\nit('findIndexStartingWith([\"python\", \"ruby\", \"perl\"], \"ru\") should return 1', function() {\n  expect(findIndexStartingWith([\"python\", \"ruby\", \"perl\"], \"ru\")).to.equal(1);\n});\n\nit('findIndexStartingWith([\"a\", \"b\", \"c\"], \"d\") should return \"No element found\"', function() {\n  expect(findIndexStartingWith([\"a\", \"b\", \"c\"], \"d\")).to.equal(\"No element found\");\n});\n\nit('findIndexStartingWith([], \"anything\") should return \"Array is empty\"', function() {\n  expect(findIndexStartingWith([], \"anything\")).to.equal(\"Array is empty\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}