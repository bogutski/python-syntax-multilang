{
  "_id": "6696c2cb763f0712c198f215",
  "name": {
    "en": "Divide an array of numbers into subarrays and return the result as an object",
    "ru": "Разделить массив чисел на подмассивы и вернуть результат в виде объекта"
  },
  "instruction": {
    "en": "The function `objectOfArrays` takes an array of numbers, splits it into subarrays, and returns an object containing these subarrays.\n\nThe function should create the following subarrays and write them to the object properties with the corresponding keys:\n* decimals\n* integers\n* negative numbers\n* non-negative numbers, which means positive numbers and zeros\n* even numbers\n* odd numbers\n* numbers divisible by 3\n\nIf the array is empty, the function should return an error message - `'Array is empty'`.\n\nExample:\nThe array `[-3, -2, -0.5, -1, 0, 0.5, 1, 2, 2.25, 3]` should be split into subarrays and written to the object as follows:\n```javascript\n{ decimal: [-0.5, 0.5, 2.25],\n  integer: [-3, -2, -1, 0, 1, 2, 3],\n  negative: [-3, -2, -0.5, -1],\n  nonNegative: [0, 0.5, 1, 2, 2.25, 3],\n  even: [-2, 0, 2],\n  odd: [-3, -1, 1, 3],\n  multipleOf3: [-3, 0, 3]\n}\n```\nNote that some numbers are included in multiple subarrays, for example, the number 0 is included in the `integer`, `nonNegative`, and `multipleOf3` subarrays.\nIf there are no numbers in the array that satisfy certain conditions, the corresponding subarrays may be empty.\n\nExample function call:\n```javascript\nobjectOfArrays([-33, 432, -0.75, 0, 10, -131, 2, 12.2, 3]);\n```\nResult:\n```javascript\n{ decimal: [-0.75, 12.2],\n  integer: [-33, 432, 0, 10, -131, 2, 3],\n  negative: [-33, -0.75, -131],\n  nonNegative: [432, 0, 10, 2, 12.2, 3],\n  even: [432, 0, 10, 2, 12.2],\n  odd: [-33, -131, 3],\n  multipleOf3: [-33, 432, 0, 3]\n}\n```\nAnother example function call:\n```javascript\nobjectOfArrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n```\nResult:\n```javascript\n{ decimal: [],    // empty array, as there are no decimal numbers in the original array\n  integer: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  negative: [],   // empty array, as there are no negative numbers in the original array\n  nonNegative: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  even: [0, 2, 4, 6, 8],\n  odd: [1, 3, 5, 7, 9],\n  multipleOf3: [0, 3, 6, 9]\n}\n```",
    "ru": "Функция `objectOfArrays` принимает массив чисел, разбивает его на подмассивы и возвращает объект, содержащий эти подмассивы.\n\nФункция должна создать следующие подмассивы и записать их в свойства объекта с соответствующими ключами:\n* десятичные дроби\n* целые числа\n* отрицательные числа\n* неотрицательные числа, то есть положительные числа и нули\n* четные числа\n* нечетные числа\n* числа кратные 3\n\nЕсли массив пустой, то функция должна вернуть сообщение об ошибке - `'Array is empty'`.\n\nПример:\nМассив `[-3, -2, -0.5, -1, 0, 0.5, 1, 2, 2.25, 3]` должен быть разбит на подмассивы и записан в объект следующим образом:\n```javascript\n{ decimal: [-0.5, 0.5, 2.25],\n  integer: [-3, -2, -1, 0, 1, 2, 3],\n  negative: [-3, -2, -0.5, -1],\n  nonNegative: [0, 0.5, 1, 2, 2.25, 3],\n  even: [-2, 0, 2],\n  odd: [-3, -1, 1, 3],\n  multipleOf3: [-3, 0, 3]\n}\n```\nОбратите внимание, что в некоторые числа входят в несколько подмассивов, например, число 0 входит в подмассивы `integer`, `nonNegative` и `multipleOf3`.\nЕсли в массиве нет чисел, удовлетворяющих некоторым условиям, то соответствующие подмассивы могут быть пустыми.\n\nПример запуска функции:\n```javascript\nobjectOfArrays([-33, 432, -0.75, 0, 10, -131, 2, 12.2, 3]);\n```\nРезультат:\n```javascript\n{ decimal: [-0.75, 12.2],\n  integer: [-33, 432, 0, 10, -131, 2, 3],\n  negative: [-33, -0.75, -131],\n  nonNegative: [432, 0, 10, 2, 12.2, 3],\n  even: [432, 0, 10, 2, 12.2],\n  odd: [-33, -131, 3],\n  multipleOf3: [-33, 432б 0, 3]\n}\n```\nЕще один пример запуска функции:\n```javascript\nobjectOfArrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n```\nРезультат:\n```javascript\n{ decimal: [],    // пустой массив, так как в исходном массиве нет десятичных дробей\n  integer: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  negative: [],   // пустой массив, так как в исходном массиве нет отрицательных чисел\n  nonNegative: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  even: [0, 2, 4, 6, 8],\n  odd: [1, 3, 5, 7, 9],\n  multipleOf3: [0, 3, 6, 9]\n}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function objectOfArrays(arr) {\n  if (arr.length === 0) {\n    return 'Array is empty';\n  }\n  const result = {\n    decimal: [],\n    integer: [],\n    negative: [],\n    nonNegative: [],\n    even: [],\n    odd: [],\n    multipleOf3: []\n  };\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const item = arr[i];\n\n    if (item < 0) {\n      result.negative.push(item);\n    } else {\n      result.nonNegative.push(item);\n    }\n\n    if (item % 1 !== 0) {\n      result.decimal.push(item);\n    } else { // integers\n      result.integer.push(item);\n      if (item % 2 === 0) {\n        result.even.push(item);\n      } else {\n        result.odd.push(item);\n      }\n      if (item % 3 === 0) {\n        result.multipleOf3.push(item);\n      }\n    }\n  }\n  return result;\n}",
  "openTest": "it('Created function objectOfArrays', () => {\n  expect(objectOfArrays).to.be.a('function');\n});\n\nit('objectOfArrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) should return { decimal: [], integer: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], negative: [], nonNegative: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], even: [0, 2, 4, 6, 8], odd: [1, 3, 5, 7, 9], multipleOf3: [0, 3, 6, 9] }', () => {\n  expect(objectOfArrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])).to.deep.equal({ decimal: [], integer: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], negative: [], nonNegative: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], even: [0, 2, 4, 6, 8], odd: [1, 3, 5, 7, 9], multipleOf3: [0, 3, 6, 9] });\n});\n\nit('objectOfArrays([-33, 432, -0.75, 0, 10, -131, 2, 12.2, 3]) should return { decimal: [-0.75, 12.2], integer: [-33, 432, 0, 10, -131, 2, 3], negative: [-33, -0.75, -131], nonNegative: [432, 0, 10, 2, 12.2, 3], even: [432, 0, 10, 2], odd: [-33, -131, 3], multipleOf3: [-33, 432, 0, 3] }', () => {\n  expect(objectOfArrays([-33, 432, -0.75, 0, 10, -131, 2, 12.2, 3])).to.deep.equal({ decimal: [-0.75, 12.2], integer: [-33, 432, 0, 10, -131, 2, 3], negative: [-33, -0.75, -131], nonNegative: [432, 0, 10, 2, 12.2, 3], even: [432, 0, 10, 2], odd: [-33, -131, 3], multipleOf3: [-33, 432, 0, 3] });\n});\n\nit('objectOfArrays([]) should return \"Array is empty\"', () => {\n  expect(objectOfArrays([])).to.equal('Array is empty');\n});\n\nit('objectOfArrays([1.1, 2.2, 3.3]) should return { decimal: [1.1, 2.2, 3.3], integer: [], negative: [], nonNegative: [1.1, 2.2, 3.3], even: [], odd: [], multipleOf3: [] }', () => {\n  expect(objectOfArrays([1.1, 2.2, 3.3])).to.deep.equal({ decimal: [1.1, 2.2, 3.3], integer: [], negative: [], nonNegative: [1.1, 2.2, 3.3], even: [], odd: [], multipleOf3: [] });\n});\n\nit('objectOfArrays([-1.01, -20.2, -303]) should return { decimal: [-1.01, -20.2], integer: [-303], negative: [-1.01, -20.2, -303], nonNegative: [], even: [], odd: [-303], multipleOf3: [-303] }', () => {\n  expect(objectOfArrays([-1.01, -20.2, -303])).to.deep.equal({ decimal: [-1.01, -20.2], integer: [-303], negative: [-1.01, -20.2, -303], nonNegative: [], even: [], odd: [-303], multipleOf3: [-303] });\n});\n\nit('objectOfArrays([-1, 2, 3]) should return { decimal: [], integer: [-1, 2, 3], negative: [-1], nonNegative: [2, 3], even: [2], odd: [-1, 3], multipleOf3: [3] }', () => {\n  expect(objectOfArrays([-1, 2, 3])).to.deep.equal({ decimal: [], integer: [-1, 2, 3], negative: [-1], nonNegative: [2, 3], even: [2], odd: [-1, 3], multipleOf3: [3] });\n});\n\nit('objectOfArrays([-1, -111, 201, 301, 0.01]) should return { decimal: [0.01], integer: [-1, -111, 201, 301], negative: [-1, -111], nonNegative: [201, 301, 0.01], even: [], odd: [-1, -111, 201, 301], multipleOf3: [-111, 201] }', () => {\n  expect(objectOfArrays([-1, -111, 201, 301, 0.01])).to.deep.equal({ decimal: [0.01], integer: [-1, -111, 201, 301], negative: [-1, -111], nonNegative: [201, 301, 0.01], even: [], odd: [-1, -111, 201, 301], multipleOf3: [-111, 201] });\n});\n\nit('objectOfArrays([0]) should return { decimal: [], integer: [0], negative: [], nonNegative: [0], even: [0], odd: [], multipleOf3: [0] }', () => {\n  expect(objectOfArrays([0])).to.deep.equal({ decimal: [], integer: [0], negative: [], nonNegative: [0], even: [0], odd: [], multipleOf3: [0] });\n});\n\nit('objectOfArrays([-0.01]) should return { decimal: [-0.01], integer: [], negative: [-0.01], nonNegative: [], even: [], odd: [], multipleOf3: [] }', () => {\n  expect(objectOfArrays([-0.01])).to.deep.equal({ decimal: [-0.01], integer: [], negative: [-0.01], nonNegative: [], even: [], odd: [], multipleOf3: [] });\n});\n\nit('objectOfArrays([3]) should return { decimal: [], integer: [3], negative: [], nonNegative: [3], even: [], odd: [3], multipleOf3: [3] }', () => {\n  expect(objectOfArrays([3])).to.deep.equal({ decimal: [], integer: [3], negative: [], nonNegative: [3], even: [], odd: [3], multipleOf3: [3] });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}