{
  "_id": "6696c2cb763f0712c198f211",
  "name": {
    "en": "Divide array into subarrays by data types",
    "ru": "Разделить массив на подмассивы по типам данных"
  },
  "instruction": {
    "en": "The function `splitArrayByType` takes an array of arbitrary elements with different data types and returns an array where each element is an array containing elements of a specific type from the original array.\nOnly the following data types are considered: `number`, `string`, `boolean`. Elements with the types `undefined`, `null`, `object` are ignored.\nThis means that the original array should be divided into three subarrays: the first one with numbers, the second one with strings, and the third one with boolean values.\nIf a subarray does not contain any elements, it should not be included in the resulting array.\nIf the original array is empty or all the resulting subarrays are empty, the function should return an empty array.\n\nUsage examples:\n```javascript\nsplitArrayByType([1, 2, 'a', 'b', true, false]); // [[1, 2], ['a', 'b'], [true, false]]\nsplitArrayByType([1, 'a', true, null, undefined, {key: 'value'}, [1,2,3]]); // [[1], ['a'], [true]]\nsplitArrayByType([1, 2, 3, 4, 5]); // [[1, 2, 3, 4, 5]]\nsplitArrayByType(['a', 'b', 'c']); // [['a', 'b', 'c']]\nsplitArrayByType([true, false]); // [[true, false]]\nsplitArrayByType([null, undefined]); // []\nsplitArrayByType([]); // []\n```",
    "ru": "Функция `splitArrayByType` принимает массив произвольных элементов с разными типами данных и возвращает массив, в котором каждый элемент - это массив, содержащий элементы исходного массива определенного типа.\nРассматриваются только следующие типы данных: `number`, `string`, `boolean`. Элементы, имеющие тип `undefined`, `null`, `object`, игнорируются.\nТо есть исходный массив должен быть разбит на три подмассива: первый - с числами, второй - со строками, третий - с булевыми значениями.\nЕсли в каком-то подмассиве нет элементов, то он не должен включаться в результирующий массив.\nЕсли исходный массив пустой, или все полученные подмассивы пустые, то функция должна вернуть пустой массив.\n\nПримеры использования:\n```javascript\nsplitArrayByType([1, 2, 'a', 'b', true, false]); // [[1, 2], ['a', 'b'], [true, false]]\nsplitArrayByType([1, 'a', true, null, undefined, {key: 'value'}, [1,2,3]]); // [[1], ['a'], [true]]\nsplitArrayByType([1, 2, 3, 4, 5]); // [[1, 2, 3, 4, 5]]\nsplitArrayByType(['a', 'b', 'c']); // [['a', 'b', 'c']]\nsplitArrayByType([true, false]); // [[true, false]]\nsplitArrayByType([null, undefined]); // []\nsplitArrayByType([]); // []\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function splitArrayByType(arr) {\n  const numbers = [];\n  const strings = [];\n  const booleans = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i];\n    if (typeof element === 'number') {\n      numbers.push(element);\n    } else if (typeof element === 'string') {\n      strings.push(element);\n    } else if (typeof element === 'boolean') {\n      booleans.push(element);\n    }\n  }\n\n  const result = [];\n  if (numbers.length) result.push(numbers);\n  if (strings.length) result.push(strings);\n  if (booleans.length) result.push(booleans);\n\n  return result;\n}",
  "openTest": "it('Created function splitArrayByType', () => {\n  expect(splitArrayByType).to.be.a('function');\n});\n\nit('splitArrayByType([1, 2, \"a\", \"b\", true, false]) should return [[1, 2], [\"a\", \"b\"], [true, false]]', () => {\n  expect(splitArrayByType([1, 2, \"a\", \"b\", true, false])).to.deep.equal([[1, 2], [\"a\", \"b\"], [true, false]]);\n});\n\nit('splitArrayByType([1, \"a\", true, null, undefined, {key: \"value\"}, [1,2,3]]) should return [[1], [\"a\"], [true]]', () => {\n  expect(splitArrayByType([1, \"a\", true, null, undefined, {key: \"value\"}, [1, 2, 3]])).to.deep.equal([[1], [\"a\"], [true]]);\n});\n\nit('splitArrayByType([1, 2, 3, 4, 5]) should return [[1, 2, 3, 4, 5]]', () => {\n  expect(splitArrayByType([1, 2, 3, 4, 5])).to.deep.equal([[1, 2, 3, 4, 5]]);\n});\n\nit('splitArrayByType([\"a\", \"b\", \"c\"]) should return [[\"a\", \"b\", \"c\"]]', () => {\n  expect(splitArrayByType([\"a\", \"b\", \"c\"])).to.deep.equal([[\"a\", \"b\", \"c\"]]);\n});\n\nit('splitArrayByType([true, false, false]) should return [[true, false, false]]', () => {\n  expect(splitArrayByType([true, false, false])).to.deep.equal([[true, false, false]]);\n});\n\nit('splitArrayByType([null, undefined]) should return []', () => {\n  expect(splitArrayByType([null, undefined])).to.deep.equal([]);\n});\n\nit('splitArrayByType([]) should return []', () => {\n  expect(splitArrayByType([])).to.deep.equal([]);\n});\n\nit('splitArrayByType([true, 123, -90, 0, false]) should return [[123, -90, 0], [true, false]]', () => {\n  expect(splitArrayByType([true, 123, -90, 0, false])).to.deep.equal([[123, -90, 0], [true, false]]);\n});\n\nit('splitArrayByType([\"sad\", -0.2, 0.5, 1.5, \"funny\", \"calm\", \"happy\", \"111\", -10000]) should return [[-0.2, 0.5, 1.5, -10000], [\"sad\", \"funny\", \"calm\", \"happy\", \"111\"]]', () => {\n  expect(splitArrayByType([\"sad\", -0.2, 0.5, 1.5, \"funny\", \"calm\", \"happy\", \"111\", -10000])).to.deep.equal([[-0.2, 0.5, 1.5, -10000], [\"sad\", \"funny\", \"calm\", \"happy\", \"111\"]]);\n});\n\nit('splitArrayByType([true, null, 0, \"\", undefined, -15 ]) should return [[0, -15], [\"\"], [true]]', () => {\n  expect(splitArrayByType([true, null, 0, \"\", undefined, -15])).to.deep.equal([[0, -15], [\"\"], [true]]);\n});\n\nit('splitArrayByType([1, \"2, 3, 4\", 5, \"Alice\", true, null, 34, null, 12.9025, undefined, \"value:\", false, 0, -0, Infinity, \"true\"]) should return [[1, 5, 34, 12.9025, 0, -0, Infinity], [\"2, 3, 4\", \"Alice\", \"value:\", \"true\"], [true, false]]', () => {\n  expect(splitArrayByType([1, \"2, 3, 4\", 5, \"Alice\", true, null, 34, null, 12.9025, undefined, \"value:\", false, 0, -0, Infinity, \"true\"])).to.deep.equal([[1, 5, 34, 12.9025, 0, -0, Infinity], [\"2, 3, 4\", \"Alice\", \"value:\", \"true\"], [true, false]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}