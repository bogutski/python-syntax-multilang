{
  "_id": "6696c2cb763f0712c198f214",
  "name": {
    "en": "",
    "ru": "Разделите массив строк на подмассивы по длине строки"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `splitStringArray` принимает массив строк и число.\nФункция должна разделить массив на 3 подмассива, отфильтровав строки по длине, и вернуть массив из полученных подмассивов.\n\nВ первый подмассив должны попасть строки, длина которых меньше числа, переданного в функцию.\n\nВо второй подмассив должны попасть строки, длина которых равна числу, переданному в функцию.\n\nВ третий подмассив должны попасть строки, длина которых больше числа, переданного в функцию.\n\nЛюбой из подмассивов может быть пустым, если в исходном массиве не было строк, подходящих под соответствующее условие.\n\nЕсли массив пустой, то функция должна вернуть сообщение \"Array is empty\".\n\nЕсли второй аргумент - число меньше или равно 0, то функция должна вернуть исходный массив.\n\nЗадача должна быть решена с помощью цикла 'for' и последовательности операторов `if ... else`.\n\nПримеры вызова функции:\n```javascript\nsplitStringArray(['a', 'bb', 'ccc', 'dddd'], 3); // [['a', 'bb'], ['ccc'], ['dddd']]\nsplitStringArray(['a', 'cat', 'is', 'furry'], 6); // [['a', 'cat', 'is', 'furry'], [], []]\n'splitStringArray(['They','ate', 'all', 'the', 'pie'], 3); // [[], ['ate', 'all', 'the', 'pie'], ['They']]\nsplitStringArray(['I', '', 'am', 'a', '', 'student'], 2); // [['I', 'a'], ['am'], ['student']]\nsplitStringArray(['Game', 'is', 'on'], 0); // ['Game', 'is', 'on']\nsplitStringArray([], 2); // 'Array is empty'\nsplitStringArray(['', ''], 3); // [[],[],[]]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function splitStringArray(array, number) {\n  if (array.length === 0) {\n    return 'Array is empty';\n  }\n\n  if(number <= 0) return array;\n\n  const result = [[], [], []];\n\n  for (const item of array) {\n    if (item.length === 0) continue;\n    if (item.length < number) {\n      result[0].push(item);\n    } else if (item.length === number) {\n      result[1].push(item);\n    } else {\n      result[2].push(item);\n    }\n  }\n\n  return result;\n}",
  "openTest": "it('Created function splitStringArray', () => {\n  expect(splitStringArray).to.be.a('function');\n});\n\nit('Function splitStringArray should not use Array.prototype.filter', () => {\n  expect(splitStringArray.toString()).to.not.include('.filter(');\n});\n\nit('splitStringArray([\"a\", \"bb\", \"ccc\", \"dddd\"], 3) should return [[\"a\", \"bb\"], [\"ccc\"], [\"dddd\"]]', () => {\n  expect(splitStringArray(['a', 'bb', 'ccc', 'dddd'], 3)).to.deep.equal([['a', 'bb'], ['ccc'], ['dddd']]);\n});\n\nit('splitStringArray([\"a\", \"cat\", \"is\", \"furry\"], 6) should return [[\"a\", \"cat\", \"is\", \"furry\"], [], []]', () => {\n  expect(splitStringArray(['a', 'cat', 'is', 'furry'], 6)).to.deep.equal([['a', 'cat', 'is', 'furry'], [], []]);\n});\n\nit('splitStringArray([\"a\", \"cat\", \"is\", \"furry\"], 1) should return [[], [\"a\"], [\"cat\", \"is\", \"furry\"]]', () => {\n  expect(splitStringArray(['a', 'cat', 'is', 'furry'], 1)).to.deep.equal([[], ['a'], ['cat', 'is', 'furry']]);\n});\n\nit('splitStringArray([\"a\", \"cat\", \"is\", \"furry\"], 2) should return [[\"a\"], [\"is\"], [\"cat\", \"furry\"]]', () => {\n  expect(splitStringArray(['a', 'cat', 'is', 'furry'], 2)).to.deep.equal([['a'], ['is'], ['cat', 'furry']]);\n});\n\nit('splitStringArray([\"a\", \"\", \"cat\", \"\", \"is\", \"furry\", \"\"], 2) should return [[\"a\"], [\"is\"], [\"cat\", \"furry\"]]', () => {\n  expect(splitStringArray(['a', 'cat', 'is', 'furry'], 2)).to.deep.equal([['a'], ['is'], ['cat', 'furry']]);\n});\n\nit('splitStringArray([\"a\", \"cat\", \"is\", \"furry\"], 3) should return [[\"a\", \"is\"], [\"cat\"], [\"furry\"]]', () => {\n  expect(splitStringArray(['a', 'cat', 'is', 'furry'], 3)).to.deep.equal([['a', 'is'], ['cat'], ['furry']]);\n});\n\nit('splitStringArray([\"a\", \"cat\", \"is\", \"furry\"], 4) should return [[\"a\", \"cat\", \"is\"], [], [\"furry\"]]', () => {\n  expect(splitStringArray(['a', 'cat', 'is', 'furry'], 4)).to.deep.equal([['a', 'cat', 'is'], [], ['furry']]);\n});\n\nit('splitStringArray([\"a\", \"cat\", \"is\", \"furry\"], 5) should return [[\"a\", \"cat\", \"is\", \"furry\"], [], []]', () => {\n  expect(splitStringArray(['a', 'cat', 'is', 'furry'], 5)).to.deep.equal([['a', 'cat', 'is'], ['furry'], []]);\n});\n\nit('splitStringArray([\"I\", \"am\", \"a\", \"student\"], 2) should return [[\"I\", \"a\"], [\"am\"], [\"student\"]]', () => {\n  expect(splitStringArray(['I', 'am', 'a', 'student'], 2)).to.deep.equal([['I', 'a'], ['am'], ['student']]);\n});\n\nit('splitStringArray([\"They\", \"ate\", \"all\", \"the\", \"pie\"], 3) should return [[], [\"ate\", \"all\", \"the\", \"pie\"], [\"They\"]]', () => {\n  expect(splitStringArray(['They', 'ate', 'all', 'the', 'pie'], 3)).to.deep.equal([[], ['ate', 'all', 'the', 'pie'], ['They']]);\n});\n\nit('splitStringArray([\"They\", \"ate\", \"all\", \"the\", \"pie\"], 0) should return [\"They\", \"ate\", \"all\", \"the\", \"pie\"]', () => {\n  expect(splitStringArray(['They', 'ate', 'all', 'the', 'pie'], 0)).to.deep.equal(['They', 'ate', 'all', 'the', 'pie']);\n});\n\nit('splitStringArray([\"\"], 0) should return [\"\"]', () => {\n  expect(splitStringArray([''], 0)).to.deep.equal(['']);\n});\n\nit('splitStringArray([\"\"], 1) should return [[],[],[]]', () => {\n  expect(splitStringArray([''], 1)).to.deep.equal([[],[],[]]);\n});\n\nit('splitStringArray([\"\",\"\",\"\"], 2) should return [[],[],[]]', () => {\n  expect(splitStringArray(['','',''], 2)).to.deep.equal([[],[],[]]);\n});\n\nit('splitStringArray([], 2) should return \"Array is empty\"', () => {\n  expect(splitStringArray([], 2)).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}