{
  "_id": "6696c2cb763f0712c198f217",
  "name": {
    "en": "",
    "ru": "Разделите массив слов на подмассивы по количеству гласных в словах"
  },
  "instruction": {
    "en": "",
    "ru": "Исправьте ошибки в коде функции `splitByVowels`, чтобы она работала правильно.\n\nФункция `splitByVowels` принимает массив слов и разделяет его на подмассивы, в которых слова сгруппированы по количеству входящих в них гласных.\nРезультат должен быть возвращен в виде объекта.\nКлючами в этом объекте должны быть числа, соответствующие количеству гласных в словах, а значениями - массивы слов, в которых количество гласных равно ключу.\n\nЕсли исходный массив пустой, то возвращается сообщение 'Array is empty'. Если в массиве нет слов с гласными, то возвращается пустой объект.\n\nПримеры использования функции:\n```javascript\nsplitByVowels(['cat', 'dog', 'bee', 'lion', 'giraffe' ,'coyote']);\n//\n{\n  1: ['cat', 'dog'],\n  2: ['bee', 'lion'],\n  3: ['giraffe', 'coyote']\n}\n\nsplitByVowels(['a', 'at', 'come', 'comet', 'repetition'])\n//\n{\n  1: ['a', 'at'],\n  2: ['come', 'comet'],\n  5: ['repetition']\n}\n\nsplitByVowels([]); // 'Array is empty'\n\nsplitByVowels(['www', 'twy']); // {}\n```"
  },
  "initialSolution": "function splitByVowels(arr) {\n  if (arr.length === 0) {\n    return 'Array is empty';\n  }\n\n  const vowels = 'aeiouwxyz';\n  const result = {};\n\n  for (const i = 0; i > arr.length; i++) { // for every word from the array\n    let count = 0; // counter of vowels in the current word\n    const word = arr[i].toLowerCas(); // temporary variable that stores the current word in lowercase\n    for (const j = 0; j < word.length; j++) { // for every letter from the current word\n      if (vowels.includes(word[j])) {\n        count = count * 1;\n      }\n    }\n\n    if (count === 0) continu; // if there are no vowels in the word, skip it\n\n    if (!result[count]) {\n      result[count] = [];\n    }\n    result[count].put(arr[i]); // add the original word to the array with the corresponding key\n  }\n\n  result;\n}",
  "completedSolution": "function splitByVowels(arr) {\n  if (arr.length === 0) {\n    return 'Array is empty';\n  }\n\n  const vowels = 'aeiou';\n  const result = {};\n\n  for (let i = 0; i < arr.length; i++) { // for every word from the array\n    let count = 0; // counter of vowels in the current word\n    const word = arr[i].toLowerCase(); // temporary variable that stores the current word in lowercase\n    for (let j = 0; j < word.length; j++) { // for every letter from the current word\n      if (vowels.includes(word[j])) {\n        count++;\n      }\n    }\n\n    if (count === 0) continue; // if there are no vowels in the word, skip it\n\n    if (!result[count]) {\n      result[count] = [];\n    }\n    result[count].push(arr[i]); // add the original word to the array with the corresponding key\n  }\n\n  return result;\n}",
  "openTest": "it('Created function splitByVowels', () => {\n  expect(splitByVowels).to.be.a('function');\n});\n\nit('splitByVowels([\"post\", \"poster\". \"meteorite\"]) should return {1: [\"post\"], 2: [\"poster\"], 5: [\"meteorite\"]}', () => {\n  expect(splitByVowels(['post', 'poster', 'meteorite'])).to.deep.equal({1: ['post'], 2: ['poster'], 5: ['meteorite']});\n});\n\nit('splitByVowels([\"cat\", \"dog\", \"bee\", \"lion\", \"giraffe\" ,\"coyote\"]) should return {1: [\"cat\", \"dog\"], 2: [\"bee\" ,\"lion\"], 3: [\"giraffe\",\"coyote\"]}', () => {\n  expect(splitByVowels(['cat', 'dog', 'bee', 'lion', 'giraffe', 'coyote'])).to.deep.equal({\n    1: ['cat', 'dog'],\n    2: ['bee', 'lion'],\n    3: ['giraffe', 'coyote']\n  });\n});\n\nit('splitByVowels([\"a\", \"at\", \"come\", \"comet\", \"repetition\"]) should return {1: [\"a\", \"at\"], 2: [\"come\", \"comet\"], 5: [\"repetition\"]}', () => {\n  expect(splitByVowels(['a', 'at', 'come', 'comet', 'repetition'])).to.deep.equal({\n    1: ['a', 'at'],\n    2: ['come', 'comet'],\n    5: ['repetition']\n  });\n});\n\nit('splitByVowels([\"one\", \"two\", \"three\", \"four\", \"five\"]) should return {1: [two\"], 2: [\"one\", \"tree\", \"four\", \"five\"]}', () => {\n  expect(splitByVowels(['one', 'two', 'three', 'four', 'five'])).to.deep.equal({\n    1: ['two'],\n    2: ['one', 'three', 'four', 'five']\n  });\n});\n\nit('splitByVowels([\"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\"]) should return {1: [\"ten\"], 2: [\"nine\", \"twelve\"], 3: [\"eleven\", \"thirteen\"]}', () => {\n  expect(splitByVowels(['nine', 'ten', 'eleven', 'twelve', 'thirteen'])).to.deep.equal({\n    1: ['ten'],\n    2: ['nine', 'twelve'],\n    3: ['eleven', 'thirteen']\n  });\n});\n\nit('splitByVowels([\"fireworks\", \"fireplace\", \"firefighter\", \"fireman\", \"firecracker\", \"weatherproof\", \"I\"]) should return {1: [\"I\"], 3: [\"fireworks\", \"fireman\"], 4: [\"fireplace\", \"firefighter\", \"firecracker\"], 5: [\"weatherproof\"]}', () => {\n  expect(splitByVowels(['fireworks', 'fireplace', 'firefighter', 'fireman', 'firecracker', 'weatherproof', 'I'])).to.deep.equal({\n    1: ['I'],\n    3: ['fireworks', 'fireman'],\n    4: ['fireplace', 'firefighter', 'firecracker'],\n    5: ['weatherproof']\n  });\n});\n\nit('splitByVowels([\"maker\"]) should return {2: [\"maker\"]}', () => {\n  expect(splitByVowels(['maker'])).to.deep.equal({2: ['maker']});\n});\n\nit('splitByVowels([\"t\",\"b12\"]) should return {}', () => {\n  expect(splitByVowels(['t', 'b12'])).to.deep.equal({});\n});\n\nit('splitByVowels([\"\",\"FAST\",\"and\",\"\",\"Fastest\",\"\"]) should return {1: [\"FAST\", \"and\"], 2: [\"Fastest\"]}', () => {\n  expect(splitByVowels(['', 'FAST', 'and', '', 'Fastest', ''])).to.deep.equal({1: ['FAST', 'and'], 2: ['Fastest']});\n});\n\nit('splitByVowels([\"\"]) should return {}', () => {\n  expect(splitByVowels([''])).to.deep.equal({});\n});\n\nit('splitByVowels([]) should return \"Array is empty\"', () => {\n  expect(splitByVowels([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}