{
  "_id": "6696c2cb763f0712c198f213",
  "name": {
    "en": "Divide an array of numbers into 3 subarrays by intervals",
    "ru": "Разделить массив чисел на 3 подмассива по интервалам"
  },
  "instruction": {
    "en": "The function `splitArray` should take 3 arguments\n1. an array of numbers `numbers`, which needs to be divided into 3 subarrays,\n2. numbers `num1` and `num2` such that `num1 <= `num2`, which determine the intervals into which the array `numbers` should be divided.\n\nThe function should divide the array `numbers` into 3 subarrays in such a way that the first subarray contains numbers from the array `numbers` that are less than or equal to `num1`.\nThe second subarray should contain numbers from the array `numbers` that are greater than `num1` and less than or equal to `num2`.\nThe third subarray should contain numbers from the array `numbers` that are greater than `num2`.\n\nIf the array `numbers` is empty, the function should return an empty array.\n\nExamples of function calls:\n```javascript\nsplitArray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 6); // [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsplitArray([0, -5, 7, 4, 34, 6, -11, 8, 99], 0, 10); // [[0, -5, -11], [7, 4, 6, 8], [34, 99]]\nsplitArray([1, 2, 3, 4, 5, 6, 7, 8, 9], 10, 20); // [[1, 2, 3, 4, 5, 6, 7, 8, 9], [], []]\nsplitArray([], 10, 20); // []\n```",
    "ru": "Функция `splitArray` должна принимать 3 аргумента\n1. массив чисел `numbers`, который нужно разделить на 3 подмассива,\n2. числа `num1` и `num2` такие, что `num1 <= `num2`, которые определяют интервалы, на которые нужно разделить массив `numbers`.\n\nФункция должна разделить массив `numbers` на 3 подмассива таким образом, чтобы в первом подмассиве были числа из массива `numbers`, которые меньше или равны `num1`.\nВо втором подмассиве должны быть числа из массива `numbers`, которые больше `num1` и меньше или равны `num2`.\nВ третьем подмассиве должны быть числа из массива `numbers`, которые больше `num2`.\n\nЕсли массив `numbers` пустой, то функция должна вернуть пустой массив.\n\nПримеры запуска функции:\n```javascript\nsplitArray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 6); // [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsplitArray([0, -5, 7, 4, 34, 6, -11, 8, 99], 0, 10); // [[0, -5, -11], [7, 4, 6, 8], [34, 99]]\nsplitArray([1, 2, 3, 4, 5, 6, 7, 8, 9], 10, 20); // [[1, 2, 3, 4, 5, 6, 7, 8, 9], [], []]\nsplitArray([], 10, 20); // []\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function splitArray(numbers, num1, num2) {\n  const result = [[], [], []];\n  for (const number of numbers) {\n    if (number <= num1) {\n      result[0].push(number);\n    } else if (number > num1 && number <= num2) {\n      result[1].push(number);\n    } else if (number > num2) {\n      result[2].push(number);\n    }\n  }\n  if ( !numbers.length || (!result[0].length  && !result[1].length  && !result[2].length)) {\n    return [];\n  }\n  return result;\n}",
  "openTest": "it('Created function splitArray', () => {\n  expect(splitArray).to.be.a('function');\n});\n\nit('splitArray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 6) should return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]', () => {\n  expect(splitArray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 6)).to.deep.equal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n});\n\nit('splitArray([0, -5, 7, 4, 34, 6, -11, 8, 99], 0, 10) should return [[0, -5, -11], [7, 4, 6, 8], [34, 99]]', () => {\n  expect(splitArray([0, -5, 7, 4, 34, 6, -11, 8, 99], 0, 10)).to.deep.equal([[0, -5, -11], [7, 4, 6, 8], [34, 99]]);\n});\n\nit('splitArray([1, 2, 3, 4, 5, 6, 7, 8, 9], 10, 20) should return [[1, 2, 3, 4, 5, 6, 7, 8, 9], [], []]', () => {\n  expect(splitArray([1, 2, 3, 4, 5, 6, 7, 8, 9], 10, 20)).to.deep.equal([[1, 2, 3, 4, 5, 6, 7, 8, 9], [], []]);\n});\n\nit('splitArray([], 10, 20) should return []', () => {\n  expect(splitArray([], 10, 20)).to.deep.equal([]);\n});\n\nit('splitArray([-1, 20, 300, -4.5, 55, 0.6, -7, 8, 0.9, -2200, 0, 777, 4, 5, -1, 8, -7], -2, 600) should return [[-4.5, -7, -2200, -7], [-1, 20, 300, 55, 0.6, 8, 0.9, 0, 4, 5, -1, 8], [777]]', () => {\n  expect(splitArray([-1, 20, 300, -4.5, 55, 0.6, -7, 8, 0.9, -2200, 0, 777, 4, 5, -1, 8, -7], -2, 600)).to.deep.equal([[-4.5, -7, -2200, -7], [-1, 20, 300, 55, 0.6, 8, 0.9, 0, 4, 5, -1, 8], [777]]);\n});\n\nit('splitArray([10, 20], 10, 20) should return [[10], [20], []]', () => {\n  expect(splitArray([10, 20], 10, 20)).to.deep.equal([[10], [20], []]);\n});\n\nit('splitArray([10, 20], 5, 10) should return [[], [10], [20]]', () => {\n  expect(splitArray([10, 20], 5, 10)).to.deep.equal([[], [10], [20]]);\n});\n\nit('splitArray([10, 20], 20, 30) should return [[10, 20], [], []]', () => {\n  expect(splitArray([10, 20], 20, 30)).to.deep.equal([[10, 20], [], []]);\n});\n\nit('splitArray([10, 20], 0, 5) should return [[], [], [10, 20]]', () => {\n  expect(splitArray([10, 20], 0, 5)).to.deep.equal([[], [], [10, 20]]);\n});\n\nit('splitArray([100, -200], 0, 10) should return [[-200], [], [100 ]]', () => {\n  expect(splitArray([100, -200], 0, 10)).to.deep.equal([[-200], [], [100]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}