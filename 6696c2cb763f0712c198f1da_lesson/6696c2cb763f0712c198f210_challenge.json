{
  "_id": "6696c2cb763f0712c198f210",
  "name": {
    "en": "",
    "ru": "Разделить массив на 2 подмассива по четному и нечетному индексу"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `splitArrayByIndex` должна принимать произвольный массив и возвращать массив из двух подмассивов, первый из которых содержит элементы из входного массива с четными индексами, а второй - с нечетными.\nЕсли массив пустой, то функция должна сообщение \"Array is empty\".\nЕсли массив содержит только один элемент, то функция должна сообщение \"Array has only one element\".\n\nПримеры запуска функции:\n```javascript\nsplitArrayByIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) // [[0, 2, 4, 6, 8], [1, 3, 5, 7, 9]]\nsplitArrayByIndex(['a', 'b', 'c', 'd', 'e', 'f']) // [['a', 'c', 'e'], ['b', 'd', 'f']]\nsplitArrayByIndex([]) // 'Array is empty'\nsplitArrayByIndex([1]) // 'Array has only one element'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function splitArrayByIndex(array) {\n  if (array.length === 0) {\n    return 'Array is empty';\n  }\n\n  if (array.length === 1) {\n    return 'Array has only one element';\n  }\n\n  const even = [];\n  const odd = [];\n\n  for (let i = 0; i < array.length; i++) {\n    if (i % 2 === 0) {\n      even.push(array[i]);\n    } else {\n      odd.push(array[i]);\n    }\n  }\n\n  return [even, odd];\n}",
  "openTest": "it('Created function splitArrayByIndex', () => {\n  expect(splitArrayByIndex).to.be.a('function');\n});\n\nit('splitArrayByIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) should return [[0, 2, 4, 6, 8], [1, 3, 5, 7, 9]]', () => {\n  expect(splitArrayByIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])).to.deep.equal([[0, 2, 4, 6, 8], [1, 3, 5, 7, 9]]);\n});\n\nit('splitArrayByIndex([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) should return [[\"a\", \"c\", \"e\"], [\"b\", \"d\", \"f\"]]', () => {\n  expect(splitArrayByIndex(['a', 'b', 'c', 'd', 'e', 'f'])).to.deep.equal([['a', 'c', 'e'], ['b', 'd', 'f']]);\n});\n\nit('splitArrayByIndex([]) should return \"Array is empty\"', () => {\n  expect(splitArrayByIndex([])).to.equal('Array is empty');\n});\n\nit('splitArrayByIndex([true]) should return \"Array has only one element\"', () => {\n  expect(splitArrayByIndex([true])).to.equal('Array has only one element');\n});\n\nit('splitArrayByIndex([\"cat\", \"dog\", \"mouse\", \"bird\", \"fish\"]) should return [[\"cat\", \"mouse\", \"fish\"], [\"dog\", \"bird\"]]', () => {\n  expect(splitArrayByIndex(['cat', 'dog', 'mouse', 'bird', 'fish'])).to.deep.equal([['cat', 'mouse', 'fish'], ['dog', 'bird']]);\n});\n\nit('splitArrayByIndex([-202.678, false]) should return [[-202.678], [false]]', () => {\n  expect(splitArrayByIndex([-202.678, false])).to.deep.equal([[-202.678], [false]]);\n});\n\nit('splitArrayByIndex([11, 56.78, -7756, -23, 55.01 , true, null, \"count zero\", \"\", undefined]) should return [[11, -7756, 55.01, null, \"\"], [56.78, -23, true, \"count zero\", undefined]]', () => {\n  expect(splitArrayByIndex([11, 56.78, -7756, -23, 55.01, true, null, 'count zero', '', undefined])).to.deep.equal([[11, -7756, 55.01, null, ''], [56.78, -23, true, 'count zero', undefined]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}