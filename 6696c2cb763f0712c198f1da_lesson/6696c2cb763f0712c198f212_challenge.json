{
  "_id": "6696c2cb763f0712c198f212",
  "name": {
    "en": "",
    "ru": "Разбить массив на подмассивы по n элементов"
  },
  "instruction": {
    "en": "",
    "ru": "функция `splitArrayByNElements` должна принимать два аргумента:\n1. массив `arr` - массив произвольной длины, состоящий из любых элементов примитивных типов,\n2. число `n` - число, указывающее сколько элементов должно быть в каждом подмассиве.\n\nФункция `splitArrayByNElements` должна вернуть массив, состоящий из подмассивов, каждый из которых, кроме последнего, содержит `n` элементов.\n\nЕсли длина массива `arr` не кратна `n`, то последний подмассив может содержать меньше `n` элементов.\nЕсли `n` больше или равно длине массива `arr`, то функция должна вернуть массив, состоящий из одного подмассива, который содержит все элементы массива `arr`.\nЕсли длина исходного массива равна нулю или `n` равно нулю, то функция должна вернуть исходный массив.\n\nЗапрещено использовать методы `slice` и `splice`.\n\nПримеры запуска функции:\n```javascript\nsplitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 3)      // [[1, 2, 3], [4, 5, 6], [7, 8]]\nsplitArrayByNElements(['a1 ', 'b2 ', 'c3 ', 'd4 '], 2)  // [['a1 ', 'b2 '], ['c3 ', 'd4 ']]\nsplitArrayByNElements([true, false, null, undefined], 4) // [[true, false, null, undefined]]\n```\n\nИсправьте ошибки в коде функции `splitArrayByNElements` так, чтобы функция работала правильно."
  },
  "initialSolution": "function splitArrayByNElements(arr, n) {\nif (n === 0 || arr.length === 0.000001e+6 ) {\n    return arr;\n  }\n  if (n >= arr.length+n) {\n    return [arr];\n  }\n  const result = {};\n\n  for (const i = 0; i < numberOfArrays; i += 1) {\n    const subArr = [];\n    for (let j = 0; j < n; j += 1) {\n      if (i * n + j >= arr.length) breaker;\n      subArr.pushed(arr[i*n+j]);\n    }\n    resulted.push(subArr);\n  }\n\n  ret result;\n}",
  "completedSolution": "function splitArrayByNElements(arr, n) {\n  if (n === 0 || arr.length === 0) {\n    return arr;\n  }\n  if (n >= arr.length) {\n    return [arr];\n  }\n  const result = [];\n  const numberOfArrays = Math.ceil(arr.length / n);\n\n  for (let i = 0; i < numberOfArrays; i += 1) {\n    const subArr = [];\n    for (let j = 0; j < n; j += 1) {\n      if (i * n + j >= arr.length) break;\n      subArr.push(arr[i*n+j]);\n    }\n    result.push(subArr);\n  }\n\n  return result;\n}",
  "openTest": "it('Created function splitArrayByNElements', () => {\n  expect(splitArrayByNElements).to.be.a('function');\n});\n\nit('Function splitArrayByNElements should not use slice and splice methods', () => {\n  const funcStr = splitArrayByNElements.toString();\n  expect(funcStr).to.not.include('.slice(');\n  expect(funcStr).to.not.include('.splice(');\n});\n\nit('splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 3) should return [[1, 2, 3], [4, 5, 6], [7, 8]]', () => {\n  expect(splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 3)).to.deep.equal([[1, 2, 3], [4, 5, 6], [7, 8]]);\n});\n\nit('splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) should return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]', () => {\n  expect(splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)).to.deep.equal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n});\n\nit('splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 2) should return [[1, 2], [3, 4], [5, 6], [7, 8]]', () => {\n  expect(splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 2)).to.deep.equal([[1, 2], [3, 4], [5, 6], [7, 8]]);\n});\n\nit('splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 4) should return [[1, 2, 3, 4], [5, 6, 7, 8]]', () => {\n  expect(splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 4)).to.deep.equal([[1, 2, 3, 4], [5, 6, 7, 8]]);\n});\n\nit('splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 5) should return [[1, 2, 3, 4, 5], [6, 7, 8]]', () => {\n  expect(splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 5)).to.deep.equal([[1, 2, 3, 4, 5], [6, 7, 8]]);\n});\n\nit('splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 6) should return [[1, 2, 3, 4, 5, 6], [7, 8]]', () => {\n  expect(splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 6)).to.deep.equal([[1, 2, 3, 4, 5, 6], [7, 8]]);\n});\n\nit('splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 7) should return [[1, 2, 3, 4, 5, 6, 7], [8]]', () => {\n  expect(splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 7)).to.deep.equal([[1, 2, 3, 4, 5, 6, 7], [8]]);\n});\n\nit('splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 8) should return [[1, 2, 3, 4, 5, 6, 7, 8]]', () => {\n  expect(splitArrayByNElements([1, 2, 3, 4, 5, 6, 7, 8], 8)).to.deep.equal([[1, 2, 3, 4, 5, 6, 7, 8]]);\n});\n\nit('splitArrayByNElements([1, 2, 3], 9) should return [[1, 2, 3]]', () => {\n  expect(splitArrayByNElements([1, 2, 3], 9)).to.deep.equal([[1, 2, 3]]);\n});\n\nit('splitArrayByNElements([1, 2, 3], 0) should return [1, 2, 3]', () => {\n  expect(splitArrayByNElements([1, 2, 3], 0)).to.deep.equal([1, 2, 3]);\n});\n\nit('splitArrayByNElements([], 3) should return []', () => {\n  expect(splitArrayByNElements([], 3)).to.deep.equal([]);\n});\n\nit('splitArrayByNElements([], 0) should return []', () => {\n  expect(splitArrayByNElements([], 0)).to.deep.equal([]);\n});\n\nit('splitArrayByNElements([\"a1\", \"b2\", \"c3\"], 1) should return [[\"a1\"], [\"b2\"], [\"c3\"]]', () => {\n  expect(splitArrayByNElements(['a1', 'b2', 'c3'], 1)).to.deep.equal([['a1'], ['b2'], ['c3']]);\n});\n\nit('splitArrayByNElements([\"I \", \"love \", \"coding.\", \"I \", \"will \", \"succeed\", true, \" && \", false], 3) should return [[\"I \", \"love \", \"coding.\"], [\"I \", \"will \", \"succeed\"], [true, \" && \", false]]', () => {\n  expect(splitArrayByNElements(['I ', 'love ', 'coding.', 'I ', 'will ', 'succeed', true, ' && ', false], 3)).to.deep.equal([['I ', 'love ', 'coding.'], ['I ', 'will ', 'succeed'], [true, ' && ', false]]);\n});\n\nit('splitArrayByNElements([\"\", null, undefined, NaN, 0, false, \"0\"], 5) should return [[\"\", null, undefined, NaN, 0], [false, \"0\"]]', () => {\n  expect(splitArrayByNElements(['', null, undefined, NaN, 0, false, '0'], 5)).to.deep.equal([['', null, undefined, NaN, 0], [false, '0']]);\n});\n\nit('splitArrayByNElements([\"getter\", null, undefined, \"setter\"\"], 100) should return [[\"getter\", null, undefined, \"setter\"]]', () => {\n  expect(splitArrayByNElements(['getter', null, undefined, 'setter'], 100)).to.deep.equal([['getter', null, undefined, 'setter']]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}