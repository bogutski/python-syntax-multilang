{
  "name": "Divide an array into 2 subarrays with the same sum of elements",
  "instruction": "Fix the errors in the code so that the `splitByEqualSum` function works correctly.\n\nThe `splitByEqualSum` function accepts an integer array and must return an array of two subarrays whose sum of numbers is equal.\nIf such a split does not exist or an empty array is passed to the function, the function must return an empty array.\n\nTo solve the problem, sum the elements of the array in the order they go in the array.\nIn a loop moving through the array from left to right, calculate the sums of the elements on the left and right and compare them.\nIf the sums are equal, remember the index of the place where this happened and divide the array into two parts by this index.\n\nExample calls:\n```javascript\nsplitByEqualSum([1, 2, 3, 4, 5, 5, 5]) // [[1, 2, 3, 4], [5, 5]] =&gt; 10 === 10\nsplitByEqualSum([-1, 2, 3, -4, 5]) // [[-1, 2, 3, -4], [ 5]] =&gt; 5 === 5\nsplitByEqualSum([1, 2, 3, 4]) // [] =&gt; no split possible\n```\n\nThere are several small errors in the solution, find and correct them.\n\nDissect the examples and the solution algorithm, check your solution on other values.\n\nThis is one of the problems that you may encounter in a job interview.\nThe given algorithm is not the only way to solve this problem, but it is simple and clear.\nYou can think how you can optimize it.\n\nAnother variant of this task that may come up in an interview: divide an array into three parts so that the sum of elements in the left part is less than the sum of elements in the center part, and the sum of elements in the center part is less than the sum of elements in the right part.",
  "instructions": {}
}