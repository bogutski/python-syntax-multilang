{
  "_id": "6696c2cb763f0712c198f1da",
  "content": {
    "ru": "Разделение массива на подмассивы может значительно облегчить обработку и анализ данных. В JavaScript существует несколько методов для выполнения этой задачи, включая использование `циклов`, методов `slice`, `splice` и `filter`. Давайте рассмотрим несколько практических примеров.\n\n### Использование `цикла for` и `метода push`\n\nМожно использовать `цикл for` и `метод push` для создания подмассивов на основе типов данных элементов. Это полезно, когда нужно разделить исходный массив на группы по определённому критерию.\n\nПример:\n\n```javascript\nfunction splitArray(mixedArray) {\n    // Инициализируем пустые массивы для строк, чисел и булевых значений.\n    let strings = [], numbers = [], booleans = [];\n\n    // Проходим циклом по всем элементам исходного массива.\n    for (let i = 0; i < mixedArray.length; i++) {\n        if (typeof mixedArray[i] === 'string') {  // Проверяем, является ли текущий элемент строкой\n            strings.push(mixedArray[i]);          // Добавляем в массив строк\n        } \n        \n        else if (typeof mixedArray[i] === 'number') { // Проверяем, является ли текущий элемент числом\n            numbers.push(mixedArray[i]);              // Добавляем в массив чисел\n        } \n        \n        else if (typeof mixedArray[i] === 'boolean') { // Проверяем, является ли текущий элемент булевым значением.\n            booleans.push(mixedArray[i]);              // Добавляем в массив булевых значений\n        }\n    }\n\n    // Возвращаем массив, содержащий три подмассива: с строками, числами и булевыми значениями.\n    return [strings, numbers, booleans];\n}\n\nconsole.log(splitArray([1, 'two', true, 2, 'three', false])); // [ [ 'two', 'three' ], [ 1, 2 ], [ true, false ] ]\n```\n\n\n### Разделение с использованием методов `slice` и `splice`\n\nМетод `slice`: создаёт новый массив, включая элементы от начального до конечного индекса, не изменяя исходный массив.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst firstPart = numbers.slice(0, 3);\nconst secondPart = numbers.slice(3);\n\nconsole.log(firstPart); // [1, 2, 3]\nconsole.log(secondPart); // [4, 5]\n```\n\n\nМетод `splice`: изменяет исходный массив, удаляя или добавляя элементы, и возвращает удалённые элементы как новый массив.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst removed = numbers.splice(1, 2);\n\nconsole.log(numbers); // [1, 4, 5]\nconsole.log(removed); // [2, 3]\n```\n\n### Разделение с использованием метода `filter`\n\nРассмотрим пример: разделение на позитивные и негативные числа используя метод `filter`.\n\n```javascript\nfunction splitPositiveNegative(numbersArray) {\n    const positive = numbersArray.filter(number => number > 0);\n    const negative = numbersArray.filter(number => number < 0);\n\n    return [positive, negative];\n}\n\nconsole.log(splitPositiveNegative([1, -2, 3, -4, 5, -6])); // [ [ 1, 3, 5 ], [ -2, -4, -6 ] ]\n```\n\nВ этой лекции мы рассмотрели, как использовать различные подходы в JavaScript для разделения массивов на подмассивы по определённым критериям, что может быть особенно полезно при обработке и анализе данных.",
    "en": "# Разделить массив на подмассивы language: en",
    "es": "# Разделить массив на подмассивы language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}