{
  "_id": "6696c2ca763f0712c198e00c",
  "name": {
    "en": "A function and a problem about buses. Version 3",
    "ru": "Функция и задача про автобусы. Версия 3"
  },
  "instruction": {
    "en": "Two buses left the same point at the same time and are moving in perpendicular directions.\n\nPerpendicular directions means that if the first bus moves up, the second bus moves right.\nOr you could say that the first bus is going north and the second bus is going west.\n\nThe speed of the buses is different.\n\nCreate a function `busDistance` that takes three parameters: `bus1`, `bus2` and `time`.\n\nThe function should return the distance between the buses.\n\nThe `bus1` and `bus2` are numbers, the speed, in miles per hour, at which the buses move.\n\nThe `time` is a number, the time, in minutes, that has elapsed since the buses left.\n\nRequirements for writing the function:\n* Create a variable `distanceBus1` in the function and assign to it the calculation of the distance traveled by the first bus.\n* Create a variable `distanceBus2` in the function and assign to it the calculation of the distance traveled by the second bus.\n* Do the rest however you want.\n\nExamples:\n```javascript\nbusDistance(10, 10, 60) // 14.142135623730951\nbusDistance(10, 20, 60) // 22.360679774997898\nbusDistance(10, 20, 120) // 44.721359549995796)\n```\n\nThis will come in handy:\n1. Recall geometry and the Pythagoras theorem.\n2. Use the `**` operator for squaring.\n3. To extract a square root use the powers of `0.5\n\n```javascript\nconst a = 2;\nconst b = 3;\nconst c = (a ** 2 + b ** 2) ** 0.5;\n```",
    "ru": "Одновременно 2 автобуса выехали из одной точки и движутся в перпендикулярных направлениях.\n\nПерпендикулярные направления означает, что если первый автобус движется вверх, то второй автобус движется вправо.\nИли можно сказать, что первый автобус движется на север, а второй автобус движется на запад.\n\nСкорость автобусов разная.\n\nСоздайте функцию `busDistance`, которая принимает три параметра: `bus1`, `bus2` и `time`.\n\nФункция должна возвращать расстояние между автобусами.\n\n`bus1` и `bus2` - это числа, скорость, в милях в час, с которой движутся автобусы.\n\n`time` - это число, время, в минутах, которое прошло с момента выезда автобусов.\n\nТребования к написанию функции:\n* Создайте в функции переменную `distanceBus1` и присвойте в нее вычисление расстояния, которое проехал первый автобус.\n* Создайте в функции переменную `distanceBus2` и присвойте в нее вычисление расстояния, которое проехал второй автобус.\n* Остальное делайте как хотите.\n\nПримеры:\n```javascript\nbusDistance(10, 10, 60) // 14.142135623730951\nbusDistance(10, 20, 60) // 22.360679774997898\nbusDistance(10, 20, 120) // 44.721359549995796)\n```\n\nЭто вам пригодится:\n1. Вспомните геометрию и теорему Пифагора\n2. Для возведения в квадрат используйте оператор `**`\n3. Для извлечения квадратного корня используйте возведение в степень `0.5\n\n```javascript\nconst a = 2;\nconst b = 3;\nconst c = (a ** 2 + b ** 2) ** 0.5;\n```"
  },
  "initialSolution": "fun bus 2",
  "completedSolution": "function busDistance(bus1, bus2, time) {\n  const distanceBus1 = bus1 * time / 60;\n  const distanceBus2 = bus2 * time / 60;\n  return (distanceBus1 ** 2 + distanceBus2 ** 2) ** 0.5;\n}",
  "openTest": "it('Created function busDistance', () => {\n  expect(busDistance).to.be.a('function');\n});\n\nit('Function busDistance has tree parameters bus1, bus2, time', () => {\n  // function to string and then to array of arguments\n  const args = busDistance.toString().match(/\\(([^)]*)\\)/)[1].split(',').map(arg => arg.trim());\n  expect(args).to.be.eql(['bus1', 'bus2', 'time']);\n});\n\nit('Function busDistance returns correct value with 10, 10, 60', () => {\n  expect(busDistance(10, 10, 60)).to.be.equal(14.142135623730951);\n} );\n\nit('Function busDistance returns correct value with 10, 20, 60', () => {\n  expect(busDistance(10, 20, 60)).to.be.equal(22.360679774997898);\n} );\n\nit('Function busDistance returns correct value with 10, 20, 120', () => {\n  expect(busDistance(10, 20, 120)).to.be.equal(44.721359549995796);\n} );\n\nit('Function busDistance returns correct value with 20, 10, 120', () => {\n  expect(busDistance(30, 10, 120)).to.be.equal(63.245553203367585);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}