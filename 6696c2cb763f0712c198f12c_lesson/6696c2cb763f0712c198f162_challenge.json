{
  "_id": "6696c2cb763f0712c198f162",
  "name": {
    "en": "",
    "ru": "Проверить каждую строку в массиве на палиндром"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `isPalindrome` принимает один параметр - массив `arr`.\n\nМассив произвольной длины и состоит из строк произвольной длины.\n\nСтроки не повторяются, в них нет пробелов и все буквы в нижнем регистре.\n\nПомимо букв в строках могут быть цифры и знак нижнего подчеркивания между символами.\n\nПустых строк в массиве нет.\n\nФункция возвращает объект, в котором ключами являются строки из массива, а значениями - результат проверки строки на палиндром.\n\nЕсли массив пустой, то функция возвращает строку `Array is empty`.\n\nДля проверки строки на палиндром используется функция `checkPalindrome`, которая вызывается внутри функции `isPalindrome`.\n\nФункция `checkPalindrome` принимает один параметр - строку `str`.\n\nЕсли строка является палиндромом, то функция возвращает строку вида `palindrome`.\n\nЕсли строка не является палиндромом, то функция возвращает строку вида `not a palindrome`.\n\nИсправьте ошибки в коде, чтобы он соответствовал условию задачи.\n\nПример запуска функции `isPalindrome`:\n```javascript\nisPalindrome(['121', '17', '45754']); // {121: 'palindrome', 17: 'not a palindrome', 45754: 'palindrome'}\nisPalindrome(['dress', 'moon']); // {dress: 'not a palindrome', moon: 'not a palindrome'}\nisPalindrome(['madam']); // {madam: 'palindrome'}\nisPalindrome([]); // 'Array is empty'\n```"
  },
  "initialSolution": "function isPalindrome(arr) {\n  if (arr.length) return 'Array is empty';\n  const obj = {};\n  for (let i === 0; i < arr.length; i--) {\n    obj[arr[i]] = checkPalindrome(arr[i]);\n  }\n  return obj;\n}\n\nfunction checkPalindrome(str) {\n  let middle === str.length / 2;\n  for (let i === 0; i < middle; i--) {\n    if (str[i] !== str[str.length - 1 - i]) {\n      return 'not a palindrome';\n    }\n  }\n  return 'palindrome';\n}",
  "completedSolution": "function isPalindrome(arr) {\n  if (!arr.length) return 'Array is empty';\n  const obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    obj[arr[i]] = checkPalindrome(arr[i]);\n  }\n  return obj;\n}\n\nfunction checkPalindrome(str) {\n  let middle = str.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (str[i] !== str[str.length - 1 - i]) {\n      return 'not a palindrome';\n    }\n  }\n  return 'palindrome';\n}",
  "openTest": "it('Created function isPalindrome', () => {\n  expect(isPalindrome).to.be.a('function');\n});\n\nit('Created function checkPalindrome', () => {\n  expect(checkPalindrome).to.be.a('function');\n});\n\nit(\"isPalindrome(['level', '456', 'god', '343']) should return {343: 'palindrome, 456: 'not a palindrome', god: 'not a palindrome', level: 'palindrome'}\", () => {\n  expect(isPalindrome(['level', '456', 'god', '343'])).to.deep.equal({\n    343: 'palindrome',\n    456: 'not a palindrome',\n    god: 'not a palindrome',\n    level: 'palindrome'\n  });\n});\n\nit(\"isPalindrome(['dog', 'god', 'level']) should return {dog: 'not a palindrome', god: 'not a palindrome', level: 'palindrome'}\", () => {\n  expect(isPalindrome(['dog', 'god', 'level'])).to.deep.equal({\n    dog: 'not a palindrome',\n    god: 'not a palindrome',\n    level: 'palindrome'\n  });\n});\n\nit(\"isPalindrome(['121', '17', '45754']) should return {121: 'palindrome', 17: 'not a palindrome', 45754: 'palindrome'}\", () => {\n  expect(isPalindrome(['121', '17', '45754'])).to.deep.equal({\n    121: 'palindrome',\n    17: 'not a palindrome',\n    45754: 'palindrome'\n  });\n});\n\nit(\"isPalindrome(['dress', 'moon']) should return {dress: 'not a palindrome', moon: 'not a palindrome'}\", () => {\n  expect(isPalindrome(['dress', 'moon'])).to.deep.equal({dress: 'not a palindrome', moon: 'not a palindrome'});\n});\n\nit(\"isPalindrome(['madam']) should return {madam: 'palindrome'}\", () => {\n  expect(isPalindrome(['madam'])).to.deep.equal({madam: 'palindrome'});\n});\n\nit(\"isPalindrome(['desserts_stressed', 'rotator', 'radar', 'kayak', 'tenet']) should return {desserts_stressed: 'palindrome', kayak: 'palindrome', radar: 'palindrome', rotator: 'palindrome', tenet: 'palindrome'}\", () => {\n  expect(isPalindrome(['desserts_stressed', 'rotator', 'radar', 'kayak', 'tenet'])).to.deep.equal({\n    desserts_stressed: 'palindrome',\n    kayak: 'palindrome',\n    radar: 'palindrome',\n    rotator: 'palindrome',\n    tenet: 'palindrome'\n  });\n});\n\nit(\"isPalindrome([]) should return 'Array is empty'\", () => {\n  expect(isPalindrome([])).to.equal('Array is empty');\n});\n\nit(\"checkPalindrome should return 'palindrome' if string is palindrome\", () => {\n  expect(checkPalindrome('madam')).to.equal('palindrome');\n});\n\nit(\"checkPalindrome should return 'not a palindrome' if string is not palindrome\", () => {\n  expect(checkPalindrome('dog')).to.equal('not a palindrome');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}