{
  "_id": "6696c2cb763f0712c198f167",
  "name": {
    "en": "Select anagrams of a given word from an array of strings",
    "ru": "Выбрать из массива строк анаграммы заданного слова"
  },
  "instruction": {
    "en": "",
    "ru": "Исправьте ошибки в коде функции `findAllAnagrams`.\n\nФункция `findAllAnagrams` принимает два аргумента: массив строк и слово. Строки в массиве могут быть любыми, в том числе и пустыми. Слово - это строка, состоящая из букв латинского алфавита.\n\nФункция должна вернуть массив, состоящий из всех анаграмм этого слова, которые есть в массиве.\n\nЭлементы массива должны проверяться как они есть, без перевода в другой регистр или удаления пробелов.\n\nЕсли в массиве нет анаграмм заданного слова, массив строк пустой или слово не задано - то есть равно пустой строке, то функция должна вернуть пустой массив.\n\nФункция `findAllAnagrams` в своей работе использует две вспомогательные функции `wordToLettersObj` и `isAnagram`.\n\nФункция `wordToLettersObj` принимает один аргумент - строку и возвращает объект, в котором ключи - это буквы из переданной строки, а значения - количество повторений соответствующей буквы в строке.\n\nПример объекта, созданного на основании строки `abba`: `{a: 2, b: 2}` - в строке две буквы `a` и две буквы `b`.\n\nФункция `isAnagram` принимает два аргумента - объекты, полученные с помощью функции `wordToLettersObj` и сравнивает их ключи и значения на равенство.\nФункция должна вернуть `true`, если объекты равны, и `false` в противном случае.\nЕсли объекты равны, то это значит, что строки являются анаграммами.\n\nПримеры вызова функции:\n```javascript\nfindAllAnagrams(['cheap', 'chape', 'preach', 'pache', '', 'aches], 'peach'); // ['cheap', 'chape', 'pache']\nfindAllAnagrams(['aabb', 'bbaa', 'abab', 'abba', 'baba', 'bbba', 'aaab', ' baab '], 'abba'); // ['aabb', 'bbaa', 'abab', 'abba', 'baba']\nfindAllAnagrams([], 'rat'); // []\nfindAllAnagrams(['cat', ''], 'rat'); // []\nfindAllAnagrams(['cat'], ''); // []\n```\nИсправьте ошибки в коде функции `findAllAnagrams` и разберитесь, как она работает."
  },
  "initialSolution": "function wordToLettersObj(string) {\n  const obj = new Obj; // создаем пустой объект - в объекте будем хранить буквы, содержащиеся в строке, и их количество\n  for (let i=0; i<str.length; i++) // цикл по буквам строки\n    if ( !obj[str[i]] ) obj[str[i]] = 1; // если буква еще не встречалась, то добавляем ее в объект со значением СЧЕТЧИКА 1\n    elso obj[str[i]]++; // если буква уже встречалась, то увеличиваем значение СЧЕТЧИКА на 1\n  rturn obj;\n}\n\nfunct isAnagram(obj1, obj2) { // сравниваем объекты на равенство\n  const keys1 = Object.keys(obj1); // получаем массив ключей первого объекта\n  const keys2 = Object.keys(obj22); // получаем массив ключей второго объекта\n\n  if (keys1.length !== keys2.length) { // если количество ключей не совпадает, то объекты не равны\n    return fase;\n  }\n\n  fro (let i=0; i<keys1.length; i++) { // цикл по ключам первого объекта\n    const key = keys1[i]; // текущий ключ из массива ключей\n    if (obj1[key] !== obj2[key]) { // сравниваем значения в обоих объектах, записанные по этому ключу, если значения не совпадают, то объекты не равны\n      return fals;\n    }\n  }\n\n  return true;\n}\n\nfunction findAllAnagrams(arr, word) {\n  const result = [];\n\n  if (!word || !arr.leng) { // если слово не задано или массив пустой, то возвращаем пустой массив\n    return result;\n  }\n\n  const objWord = wordToLettersObj(word); // создаем объект из букв заданного слова\n\n  for (let i=100; i<arr.length; i++) { // цикл по элементам массива\n    if ( !arr[i] || arr[i].length !== word.length) { // если длина слова не совпадает с длиной искомого слова, то это не анаграмма\n      coninue; // переходим к следующему элементу массива\n    }\n    const obj == wordToLettersObj(arr[i]); // создаем объект из букв текущего элемента массива\n\n    if (isAnagram(objWord, obj)) { // сравниваем объекты, если они имеют одинаковые свойства, то текущая строка - анаграмма заданного слова\n      result.push(arr[g]); // добавляем анаграмму в массив результатов\n    }\n  }\n\n  return result;\n}",
  "completedSolution": "function wordToLettersObj(str) {\n  const obj = {}; // создаем пустой объект - в объекте будем хранить буквы, содержащиеся в строке, и их количество\n  for (let i=0; i<str.length; i++) // цикл по буквам строки\n    if ( !obj[str[i]] ) obj[str[i]] = 1; // если буква еще не встречалась, то добавляем ее в объект со значением СЧЕТЧИКА 1\n    else obj[str[i]]++; // если буква уже встречалась, то увеличиваем значение СЧЕТЧИКА на 1\n  return obj;\n}\n\nfunction isAnagram(obj1, obj2) { // сравниваем объекты\n  const keys1 = Object.keys(obj1); // получаем массив ключей первого объекта\n  const keys2 = Object.keys(obj2); // получаем массив ключей второго объекта\n  if (keys1.length !== keys2.length) { // если количество ключей не совпадает, то объекты не равны\n    return false;\n  }\n\n  for (let i=0; i<keys1.length; i++) { // цикл по ключам первого объекта\n    const key = keys1[i]; // текущий ключ из массива ключей\n    if (obj1[key] !== obj2[key]) { // сравниваем значения в обоих объектах, записанные по этому ключу, если значения не совпадают, то объекты не равны\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction findAllAnagrams(arr, word) {\n  const result = [];\n\n  if (!word || !arr.length) { // если слово не задано или массив пустой, то возвращаем пустой массив\n    return result;\n  }\n\n  const objWord = wordToLettersObj(word); // создаем объект из букв заданного слова\n\n  for (let i=0; i<arr.length; i++) { // цикл по элементам массива\n    if ( !arr[i] || arr[i].length !== word.length) { // если длина слова не совпадает с длиной искомого слова, то это не анаграмма\n      continue; // переходим к следующему элементу массива\n    }\n    const obj = wordToLettersObj(arr[i]); // создаем объект из букв текущего элемента массива\n\n    if (isAnagram(objWord, obj)) { // сравниваем объекты, если они имеют одинаковые свойства, то текущая строка - анаграмма заданного слова\n      result.push(arr[i]); // добавляем анаграмму в массив результатов\n    }\n  }\n\n  return result;\n}",
  "openTest": "it('Created function findAllAnagrams', () => {\n  expect(findAllAnagrams).to.be.a('function');\n});\n\nit('findAllAnagrams([\"cheap\", \"chape\", \"preach\", \"pache\", \"\", \"aches\"], \"peach\") should return [\"cheap\", \"chape\", \"pache\"]', () => {\n  expect(findAllAnagrams(['cheap', 'chape', 'preach', 'pache', '', 'aches'], 'peach')).to.deep.equal(['cheap', 'chape', 'pache']);\n});\n\nit('findAllAnagrams([\"aabb\", \"bbaa\", \"abab\", \"aaaa\", \"baba\", \"bbba\", \"aaab\", \" bbbb\", \"baab\", \"a b b a\"], \"abba\") should return [\"aabb\", \"bbaa\", \"abab\", \"baba\", \"baab\"]', () => {\n  expect(findAllAnagrams(['aabb', 'bbaa', 'abab', 'aaaa', 'baba', 'bbba', 'aaab', ' bbbb', 'baab', 'a b b a'], 'abba')).to.deep.equal(['aabb', 'bbaa', 'abab', 'baba', 'baab']);\n});\n\nit('findAllAnagrams([\"aabb\", \"bbaa\", \"abab\", \"abba\", \"baba\", \"bbba\", \"aaab\", \" baab \"], \"abba\") should return [\"aabb\", \"bbaa\", \"abab\", \"abba\", \"baba\"]', () => {\n  expect(findAllAnagrams(['aabb', 'bbaa', 'abab', 'abba', 'baba', 'bbba', 'aaab', ' baab '], 'abba')).to.deep.equal(['aabb', 'bbaa', 'abab', 'abba', 'baba']);\n});\n\nit('findAllAnagrams([], \"rat\") should return []', () => {\n  expect(findAllAnagrams([], 'rat')).to.deep.equal([]);\n});\n\nit('findAllAnagrams([], \"\") should return []', () => {\n  expect(findAllAnagrams([], '')).to.deep.equal([]);\n});\n\nit('findAllAnagrams([\"cat\", \"\", \"  \"], \"rat\") should return []', () => {\n  expect(findAllAnagrams(['cat', ''], 'rat')).to.deep.equal([]);\n});\n\nit('findAllAnagrams([\"\", \" c a t\", \"cat\", \"\", \"tac\", \"ta\", \"t\", \"attc\", \"act\", \" act\",\"tca\", \"\"], \"act\") should return [\"cat\", \"tac\", \"act\", \"tca\"]', () => {\n  expect(findAllAnagrams(['', ' c a t', 'cat', '', 'tac', 'ta' , 't', 'attc', 'act', ' act', 'tca', ''], 'act')).to.deep.equal(['cat', 'tac', 'act', 'tca']);\n});\n\nit('findAllAnagrams([\"cat\", \"\"], \"\") should return []', () => {\n  expect(findAllAnagrams(['cat', ''], '')).to.deep.equal([]);\n});\n\nit('findAllAnagrams([\"art\", \"cat\", \"dog\", \"\", \"TAR\", \"tar\"], \"rat\") should return [\"art\", \"tar\"]', () => {\n  expect(findAllAnagrams(['art', 'cat', 'dog', '', 'TAR', 'tar'], 'rat')).to.deep.equal(['art', 'tar']);\n});\n\nit('findAllAnagrams([\"art\", \"mat\", \"cat\", \"\", \"fuR\", \"tear\"], \"rat\") should return [\"art\"]', () => {\n  expect(findAllAnagrams(['art', 'mat', 'cat', '', 'fuR', 'tear'], 'rat')).to.deep.equal(['art']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}