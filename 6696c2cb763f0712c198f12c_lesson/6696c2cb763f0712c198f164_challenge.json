{
  "_id": "6696c2cb763f0712c198f164",
  "name": {
    "en": "Check if an array element is a palindrome",
    "ru": "Проверить, является ли элемент массива палиндромом"
  },
  "instruction": {
    "en": "Create a function `isPalindrome` that takes one parameter, an array.\n\nThe array is of arbitrary length and can contain data types `string` and/or `number`.\n\nThe `string` data type can contain any characters, letters in different case, spaces at the end or beginning of a word.\n\nIf a string consists of several words, the words are always separated by the underscore character `_`.\n\nIf the data type of an array element is `string`, you must remove spaces at the beginning and end of the string.\n\nThe `number` data type can only contain positive integers and/or fractional numbers.\n\nStrings and numbers in the array are unique.\n\nThe function returns an object where the keys are the elements from the array and the values are the result of checking the element for a palindrome.\n\nIf the array is empty, the function returns the string `Array is empty`.\n\n\nThe `isElPalindrome` function, which is called inside the `isPalindrome` function, is used to check an element for a palindrome.\n\nThe `isElPalindrome` function accepts one parameter - an array element.\n\nIf the array element is a number, it must be converted to a string.\n\nIf the array element is a string, it must be converted to a single case.\n\nIf an array element is an empty string, the function returns a string of `String is empty` form.\n\nIf the array element is a palindrome, the function returns the string `palindrome`.\n\nIf the array element is not a palindrome, the function returns the string `not a palindrome`.\n\nExample of running the function:\n```javascript\nisPalindrome(['madaM', 'level', 121, 13, ' cat ']);\n// {cat: 'not a palindrome', 121: 'palindrome', 13: 'not a palindrome', level: 'palindrome', madaM: 'palindrome'}\nisPalindrome([47974, 1.1, 53]); // {1.1: \"palindrome\", 47974: \"palindrome\", 53: \"not a palindrome\"}\nisPalindrome(['ciVIC', 'radaR', ' wow', '']);\n// {'': \"String is empty\", wow: \"palindrome\", ciVIC: \"palindrome\", radaR: \"palindrome\"}\nisPalindrome(['step_on_no_pets', 'Level', ' 777 ', 89]);\n// {777 : \"palindrome\", 89: \"not a palindrome\", Level: \"palindrome\", step_on_no_pets: \"palindrome\"}\nisPalindrome([]); // 'Array is empty'\n```",
    "ru": "Создайте функцию `isPalindrome` которая принимает один параметр - массив.\n\nМассив произвольной длины и может содержать типы данных `string` и/или `number`.\n\nТип данных `string` может содержать любые символы, буквы в разном регистре, пробелы в конце или начале слова.\n\nЕсли строка состоит из нескольких слов, то слова всегда разделены между собой символом нижнего подчеркивания `_`.\n\nЕсли тип данных элемента массива `string`, то необходимо удалить пробелы в начале и в конце строки.\n\nТип данных `number` может содержать только положительные целые и/или дробные числа.\n\nСтроки и числа в массиве уникальны.\n\nФункция возвращает объект, в котором ключами являются элементы из массива, а значениями - результат проверки элемента на палиндром.\n\nЕсли массив пустой, то функция возвращает строку `Array is empty`.\n\n\nДля проверки элемента на палиндром используется функция `isElPalindrome`, которая вызывается внутри функции `isPalindrome`.\n\nФункция `isElPalindrome` принимает один параметр - элемент массива.\n\nЕсли элемент массива является числом, то необходимо его преобразовать в строку.\n\nЕсли элемент массива - строка, то необходимо привести ее к единому регистру.\n\nЕсли элемент массива - пустая строка, то функция возвращает строку вида `String is empty`.\n\nЕсли элемент массива - палиндром, то функция возвращает строку `palindrome`.\n\nЕсли элемент массива - не палиндром, то функция возвращает строку `not a palindrome`.\n\nПример запуска функции:\n```javascript\nisPalindrome(['madaM', 'level', 121, 13, ' cat ']);\n// {cat: \"not a palindrome\", 121: \"palindrome\", 13: \"not a palindrome\", level: \"palindrome\", madaM: \"palindrome\"}\nisPalindrome([47974, 1.1, 53]); // {1.1: \"palindrome\", 47974: \"palindrome\", 53: \"not a palindrome\"}\nisPalindrome(['ciVIC', 'radaR', ' wow', '']);\n// {'': \"String is empty\", wow: \"palindrome\", ciVIC: \"palindrome\", radaR: \"palindrome\"}\nisPalindrome(['step_on_no_pets', 'Level', '  777 ', 89]);\n// {777 : \"palindrome\", 89: \"not a palindrome\", Level: \"palindrome\", step_on_no_pets: \"palindrome\"}\nisPalindrome([]); // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function isPalindrome(arr) {\n  if (!arr.length) return 'Array is empty';\n  const obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (typeof arr[i] === 'string') arr[i] = arr[i].trim();\n    obj[arr[i]] = isElPalindrome(arr[i]);\n  }\n  return obj;\n}\n\nfunction isElPalindrome(el) {\n  if(typeof el === 'number') el = el.toString();\n  if(typeof el === 'string') el = el.toLowerCase();\n  if(!el.length) return 'String is empty';\n  let middle = el.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (el[i] !== el[el.length - 1 - i]) {\n      return 'not a palindrome';\n    }\n  }\n  return 'palindrome';\n}",
  "openTest": "it('Created function isPalindrome', () => {\n  expect(isPalindrome).to.be.a('function');\n});\n\nit('Created function isElPalindrome', () => {\n  expect(isElPalindrome).to.be.a('function');\n});\n\nit(\"isPalindrome(['madaM', 'level', 121, 13, ' cat ']) should return {cat : 'not a palindrome', 121: 'palindrome', 13: 'not a palindrome', level: 'palindrome', madaM: 'palindrome'}\", () => {\n  expect(isPalindrome(['madaM', 'level', 121, 13, ' cat '])).to.deep.equal({\n    cat: 'not a palindrome',\n    121: 'palindrome',\n    13: 'not a palindrome',\n    level: 'palindrome',\n    madaM: 'palindrome'\n  });\n});\n\nit(\"isPalindrome(['', 'lEveL', 121, 1.3, 'cat']) should return {'': 'String is empty', 121: 'palindrome', 1.3: 'not a palindrome', cat: 'not a palindrome', lEveL: 'palindrome'}\", () => {\n  expect(isPalindrome(['', 'lEveL', 121, 1.3, 'cat'])).to.deep.equal({\n    '': 'String is empty',\n    121: 'palindrome',\n    1.3: 'not a palindrome',\n    cat: 'not a palindrome',\n    lEveL: 'palindrome'\n  })\n  ;\n});\n\nit(\"isPalindrome([47974, 1.1, 53]) should return {1.1: 'palindrome', 47974: 'palindrome', 53: 'not a palindrome'}\", () => {\n  expect(isPalindrome([47974, 1.1, 53])).to.deep.equal({\n    1.1: 'palindrome',\n    47974: 'palindrome',\n    53: 'not a palindrome'\n  });\n});\n\nit(\"isPalindrome(['ciVIC', 'radaR', ' wow', '']) should return {'': 'String is empty', wow: 'palindrome', ciVIC: 'palindrome', radaR: 'palindrome'}\", () => {\n  expect(isPalindrome(['ciVIC', 'radaR', ' wow', ''])).to.deep.equal({\n    '': 'String is empty',\n    wow: 'palindrome',\n    ciVIC: 'palindrome',\n    radaR: 'palindrome'\n  })\n  ;\n});\n\nit(\"isPalindrome(['step_on_no_pets', 'Level', '  777 ', 89]) should return {777 : 'palindrome', 89: 'not a palindrome', Level: 'palindrome', step_on_no_pets: 'palindrome'}\", () => {\n  expect(isPalindrome(['step_on_no_pets', 'Level', '  777 ', 89])).to.deep.equal({\n    777: 'palindrome',\n    89: 'not a palindrome',\n    Level: 'palindrome',\n    step_on_no_pets: 'palindrome'\n  });\n});\n\nit(\"isPalindrome(['love', 'DoG']) should return {DoG: 'not a palindrome', love: 'not a palindrome'}\", () => {\n  expect(isPalindrome(['love', 'DoG'])).to.deep.equal({DoG: 'not a palindrome', love: 'not a palindrome'});\n});\n\nit(\"isPalindrome([]) should return 'Array is empty'\", () => {\n  expect(isPalindrome([])).to.equal('Array is empty');\n});\n\nit(\"isElPalindrome (['level']) should return 'palindrome'\", () => {\n  expect(isElPalindrome('level')).to.equal('palindrome');\n});\n\nit(\"isElPalindrome (['love'])should return 'not a palindrome'\", () => {\n  expect(isElPalindrome('love')).to.equal('not a palindrome');\n});\n\nit(\"isElPalindrome (['']) should return 'String is empty'\", () => {\n  expect(isElPalindrome('')).to.equal('String is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}