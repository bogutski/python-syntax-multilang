{
  "_id": "6696c2cb763f0712c198f169",
  "name": {
    "en": "/*",
    "ru": "Палиндром или анаграмма"
  },
  "instruction": {
    "en": "",
    "ru": "Создайте функцию `isPalindromeOrAnagram`, которая принимает два массива в качестве аргументов.\n\nФункция должна возвращать строку \"palindrome\", если `первый` массив является палиндромом, \"anagram\", если массивы являются анаграммами друг друга, и \"none\", если ни одно из условий не выполнено.\n\nПалиндром - массив, который одинаково читается как с начала, так и с конца.\nАнаграмма - массивы, содержащие одни и те же элементы, но возможно, в разном порядке.\n\nПримеры использования функции:\n```javascript\nisPalindromeOrAnagram([1, 2, 3, 2, 1], [5, 4, 3]); // \"palindrome\"\nisPalindromeOrAnagram([1, 2, 3], [3, 2, 1]); // \"anagram\"\nisPalindromeOrAnagram([1, 2, 3], [4, 5, 6]); // \"none\"\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function isPalindromeOrAnagram(arr1, arr2) {\n  if(!arr1.length) return 'none'\n  if(arr1.join('') === arr1.slice().reverse().join('')) {\n    return \"palindrome\";\n  }\n  if(arr1.slice().sort().join('') === arr2.slice().sort().join('')) {\n    return \"anagram\";\n  }\n  return \"none\";\n}",
  "openTest": "it('Created function isPalindromeOrAnagram', () => {\n  expect(isPalindromeOrAnagram).to.be.a('function');\n});\n\nit('Created function isPalindromeOrAnagram', () => {\n  expect(isPalindromeOrAnagram([1, 2, 3, 2, 1], [5, 4, 3])).to.eql('palindrome');\n});\n\nit('isPalindromeOrAnagram([1, 2, 3], [3, 2, 1]) should return \"anagram\"', () => {\n  expect(isPalindromeOrAnagram([1, 2, 3], [3, 2, 1])).to.eql('anagram');\n});\n\nit('isPalindromeOrAnagram([1, 2, 3], [4, 5, 6]) should return \"none\"', () => {\n  expect(isPalindromeOrAnagram([1, 2, 3], [4, 5, 6])).to.eql('none');\n});\n\nit('isPalindromeOrAnagram should handle empty arrays correctly', () => {\n  expect(isPalindromeOrAnagram([], [])).to.eql('none');\n});\n\nit('isPalindromeOrAnagram should return \"none\" for non-matching non-palindrome arrays', () => {\n  expect(isPalindromeOrAnagram([1, 2, 3], [1, 2, 4])).to.eql('none');\n});\n\nit('isPalindromeOrAnagram should identify a single-element array as a palindrome', () => {\n  expect(isPalindromeOrAnagram([1], [])).to.eql('palindrome');\n});\n\nit('isPalindromeOrAnagram should return \"anagram\" for arrays with identical elements in different orders', () => {\n  expect(isPalindromeOrAnagram(['a', 'b', 'c'], ['c', 'b', 'a'])).to.eql('anagram');\n});\n\nit('isPalindromeOrAnagram should return \"none\" for arrays with different elements', () => {\n  expect(isPalindromeOrAnagram(['a', 'b', 'c'], ['d', 'e', 'f'])).to.eql('none');\n});\n\nit('isPalindromeOrAnagram should return \"palindrome\" for a complex palindrome array', () => {\n  expect(isPalindromeOrAnagram(['a', 1, 'b', 'b', 1, 'a'], [])).to.eql('palindrome');\n});\n\nit('isPalindromeOrAnagram should return \"anagram\" for complex arrays that are anagrams of each other', () => {\n  expect(isPalindromeOrAnagram(['cat', 'dog', 'bird'], ['bird', 'dog', 'cat'])).to.eql('anagram');\n});\n\nit('isPalindromeOrAnagram should handle arrays with repeated elements correctly', () => {\n  expect(isPalindromeOrAnagram([1, 2, 2, 1, 1], [2, 1, 1, 1, 2])).to.eql('anagram');\n});\n\nit('isPalindromeOrAnagram should return \"none\" for partially matching arrays', () => {\n  expect(isPalindromeOrAnagram([1, 2, 3, 4, 5], [5, 4, 3, 2])).to.eql('none');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}