{
  "_id": "6696c2cb763f0712c198f165",
  "name": {
    "en": "",
    "ru": "Проверить, являются ли два массива анаграммами друг друга"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `isAnagram` принимает два параметра - массивы.\n\nМассивы произвольной длины и содержат только строки.\n\nВ строках нет пробелов и они состоят только из букв в верхнем или нижнем регистре и/или цифр.\n\nСтроки не могут быть пустыми.\n\nНеобходимо проверить, являются ли эти массивы анаграммами друг друга с помощью методов join(), sort(), split().\n\nЕсли массивы являются анаграммами друг друга, то функция должна вернуть true, в противном случае - false.\n\nЕсли оба массива пустые, то функция должна вернуть строку 'Arrays are empty'.\n\nЕсли один из массивов пустой, то функция должна вернуть `false`.\n\nПоиск не чувствителен к регистру.\n\nАлгоритм решения:\n\n1. Сделать проверку на пустые массивы.\n2. Сделать проверку на пустоту одного из массивов.\n3. Объединить все элементы первого и второго массивов в строки и привести строки к единому регистру.\n4. Разбить строки на массивы, отсортировать их и снова объединить в строки.\n5. Сравнить строки.\n\n\nПример запуска функции:\n```javascript\nisAnagram(['dog', 'spam'], ['god']); // false\nisAnagram(['7', 'spam', '35'], ['maps', '735']); // true\nisAnagram(['dog', 'spam'], []); // false\nisAnagram([], []); // 'Arrays are empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function isAnagram(arr1, arr2) {\n  if (!arr1.length && !arr2.length) return 'Arrays are empty';\n  if (!arr1.length || !arr2.length) return false;\n\n  const str1lowerCase = arr1.join('').toLowerCase();\n  const str2lowerCase = arr2.join('').toLowerCase();\n\n  const str1 = str1lowerCase.split('').sort().join('');\n  const str2 = str2lowerCase.split('').sort().join('');\n\n  return str1 === str2;\n}",
  "openTest": "it('Created function isAnagram', () => {\n  expect(isAnagram).to.be.a('function');\n});\n\nit(\"isAnagram(['dog', 'DUSTY', 'spam'], ['study', 'maps', 'GOD']) should return true\", () => {\n  expect(isAnagram(['dog', 'DUSTY', 'spam'], ['study', 'maps', 'GOD'])).to.be.true;\n});\n\nit(\"isAnagram(['dog', 'spam'], ['god']) should return false\", () => {\n  expect(isAnagram(['dog', 'spam'], ['god'])).to.be.false;\n});\n\nit(\"isAnagram(['level', 'O'], ['love', 'EL']) should return true\", () => {\n  expect(isAnagram(['level', 'O'], ['love', 'EL'])).to.be.true;\n});\n\nit(\"isAnagram(['7', 'spam', '35'], ['maps', '735']) should return true\", () => {\n  expect(isAnagram(['7', 'spam', '35'], ['maps', '735'])).to.be.true;\n});\n\nit(\"isAnagram(['dog', 'spam'], []) should return false\", () => {\n  expect(isAnagram(['dog', 'spam'], [])).to.be.false;\n});\n\nit(\"isAnagram([], ['maps', 'god']) should return false\", () => {\n  expect(isAnagram([], ['maps', 'god'])).to.be.false;\n});\n\nit(\"isAnagram([], []) should return 'Arrays are empty'\", () => {\n  expect(isAnagram([], [])).to.be.equal('Arrays are empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}