{
  "_id": "6696c2cb763f0712c198f161",
  "name": {
    "en": "",
    "ru": "Проверить, является ли массив палиндромом с помощью цикла"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `isPalindrome` принимает один параметр -  массив `arr`.\n\nМассив произвольной длины и содержит типы данных `string` и `number`.\n\nТип данных `string` может содержать любые символы и длина строки всегда равна 1.\n\nТип данных `number` может содержать любые цифры от 0 до 9.\n\nФункция возвращает `true`, если массив является палиндромом, и `false` в противном случае.\n\nЕсли массив пустой, функция возвращает строку `'Array is empty'`.\n\nИсправьте ошибки в коде чтобы функция работала правильно.\n\nПример запуска функции:\n```javascript\nisPalindrome(['g', 'o', 'd', 'g', 'o', 'd']); // false\nisPalindrome([1, 2, 3, 2, 1]); // true\nisPalindrome(['g', 'o', 'd', 'd', 'o' , 'g']); // true\nisPalindrome([]); // 'Array is empty'\n```"
  },
  "initialSolution": "function isPalindrome(arr) {\n  if (arr.length) return 'Array is empty';\n  for (let i === 0; i < arr.length - 2; i++) {\n    if (arr[i] === arr[arr.length - 1 - i]) return false;\n  }\n  return true;\n}",
  "completedSolution": "function isPalindrome(arr) {\n  if (!arr.length) return 'Array is empty';\n  for (let i = 0; i < arr.length / 2; i++) {\n    if (arr[i] !== arr[arr.length - 1 - i]) return false;\n  }\n  return true;\n}",
  "openTest": "it('Created function isPalindrome', () => {\n  expect(isPalindrome).to.be.a('function');\n});\n\nit(\"isPalindrome(['g', 'o', 'd', 'g', 'o', 'd']) should return false\", () => {\n  expect(isPalindrome(['g', 'o', 'd', 'g', 'o', 'd'])).to.be.false;\n});\n\nit(\"isPalindrome([1, 2, 3, 2, 1]) should return true\", () => {\n  expect(isPalindrome([1, 2, 3, 2, 1])).to.be.true;\n});\n\nit(\"isPalindrome(['g', 'o', 'd', 'd', 'o' , 'g']) should return true\", () => {\n  expect(isPalindrome(['g', 'o', 'd', 'd', 'o', 'g'])).to.be.true;\n});\n\nit(\"isPalindrome([7, 8, 3, 7, 8, 7]) should return false\", () => {\n  expect(isPalindrome([7, 8, 3, 7, 8, 7])).to.be.false;\n});\n\nit(\"isPalindrome(['a', 'b', 7, 'b', 'a']) should return true\", () => {\n  expect(isPalindrome(['a', 'b', 7, 'b', 'a'])).to.be.true;\n});\n\nit(\"isPalindrome([1, 2, '5', 2, 1]) should return true\", () => {\n  expect(isPalindrome([1, 2, '5', 2, 1])).to.be.true;\n});\n\nit(\"isPalindrome([]) should return 'Array is empty'\", () => {\n  expect(isPalindrome([])).to.be.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}