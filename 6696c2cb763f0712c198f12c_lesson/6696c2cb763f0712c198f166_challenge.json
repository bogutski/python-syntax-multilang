{
  "_id": "6696c2cb763f0712c198f166",
  "name": {
    "en": "Check if the elements of the array are an anagram of the string",
    "ru": "Проверить, являются ли элементы массива анаграммой строки"
  },
  "instruction": {
    "en": "The function `isAnagram` takes two parameters - an array `arr` and a string `str`.\n\nThe array is of arbitrary length and contains only strings consisting of uppercase or lowercase letters.\n\nThe strings in the array are unique, may contain spaces, cannot be empty, and always consist of only one word.\n\nThe string `str` may contain spaces at the beginning and/or end, be in uppercase or lowercase, and may also be empty.\n\nThe function checks whether the strings in the array are anagrams of the string `str` and returns an object with the results of the check for each element of the array.\n\nThe keys in the object are the strings from the array, and the values are the results of the anagram check.\n\nIf the array `arr` or the string `str` is empty, the function returns the string `Array or string are empty`.\n\nIf both the array `arr` and the string `str` are empty, the function returns the string `Array and string are empty`.\n\n\n\nTo check whether the strings are anagrams, use the function `anagram`, which is called inside the function `isAnagram`.\n\nThe function `anagram` takes two parameters - the strings `str1` and `str2`.\n\nThe function checks whether the string `str1` is an anagram of the string `str2` and returns a string with the result of the check.\n\nIf the strings `str1` and `str2` are anagrams, the function returns the string `anagram for the ${str2}`.\n\nIf the strings `str1` and `str2` are not anagrams, the function returns the string `not anagram for the ${str2}`.\n\nIf the strings `str1` and `str2` have different lengths, the function returns the string `not anagram for the ${str2}`.\n\nThe search is case-insensitive.\n\nFix the errors in the code to make the function work correctly.\n\nExample function calls:\n```javascript\nisAnagram(['hose', 'eat'], 'TEA'); // {hose: 'not anagram for the tea', eat: 'anagram for the tea'}\nisAnagram(['Lapse', 'leapS'], '  peals'); // {lapse: 'anagram for the peals', leaps: 'anagram for the peals'}\nisAnagram(['alert'], 'later'); // {alert: 'anagram for the later'}\nisAnagram(['hose'], ''); // 'Array or string are empty'\nisAnagram([], ''); // 'Array and string are empty'\n```",
    "ru": "Функция `isAnagram`, принимает два параметра - массив `arr` и строку `str`.\n\nМассив произвольной длины, содержит только строки, состоящие из букв в верхнем или нижнем регистре.\n\nСтроки в массиве уникальны, могут содержать пробелы, не могут быть пустыми и всегда состоят только из одного слова.\n\nСтрока `str` может содержать пробелы в начале и/или конце, быть в верхнем или нижнем регистре, а также быть пустой.\n\nФункция проверяет, являются ли строки в массиве анаграммами строки `str` и возвращает объект с результатами проверки по каждому элементу массива.\n\nКлючи в объекте - строки из массива, а значения - результаты проверки на анаграмму.\n\nЕсли массив `arr` или строка `str` пустые, то функция возвращает строку `Array or string are empty`.\n\nЕсли массив `arr` и строка `str` пустые, то функция возвращает строку `Array and string are empty`.\n\n\n\nДля проверки, являются ли строки анаграммами, используйте функцию `anagram`, которая вызывается внутри функции `isAnagram`.\n\nФункция `anagram` принимает два параметра - строки `str1` и `str2`.\n\nФункция проверяет, является ли строка `str1` анаграммой строки `str2` и возвращает строку с результатом проверки.\n\nЕсли строки `str1` и `str2` являются анаграммами, то функция возвращает строку `anagram for the ${str2}`.\n\nЕсли строки `str1` и `str2` не являются анаграммами, то функция возвращает строку `not anagram for the ${str2}`.\n\nЕсли строки `str1` и `str2` имеют разную длину, то функция возвращает строку `not anagram for the ${str2}`.\n\nПоиск не чувствителен к регистру.\n\nИсправьте ошибки в коде, чтобы функция работала правильно.\n\nПример запуска функции:\n```javascript\nisAnagram(['hose', 'eat'], 'TEA'); // {hose: 'not anagram for the tea', eat: 'anagram for the tea'}\nisAnagram(['Lapse', 'leapS'], '  peals'); // {lapse: 'anagram for the peals', leaps: 'anagram for the peals'}\nisAnagram(['alert'], 'later'); // {alert: 'anagram for the later'}\nisAnagram(['hose'], ''); // 'Array or string are empty'\nisAnagram([], ''); // 'Array and string are empty'\n```"
  },
  "initialSolution": "function isAnagram(arr str) {\n  if (!arr.length && !str.length) return Array and string are empty;\n  if (!arr.length || !str.length) return 'Array or string are empty';\n\n  const obj = {};\n  str = str.trim().toLowerCase();\n\n  for (let i === 0; i < arr.length; i-+) {\n    arr[i] = arr[i].trim().toLowerCase();\n    obj[arr(i)] = anagram(arr[i], str);\n  }\n\n  return obj;\n}\nfunction anagram(str1, str2) {\n\n  if (str1.length !== str2.length) return `not anagram for the ${str2}`;\n\n  for (let i = 0; i < str1.length; i++) {\n    for (let j = 0; j < str2:length; j+-) {\n      if (str1[i] === str2[j]) Break;\n      if (str2.length - 1 === j) return `not anagram for the ${str2}`;\n    }\n  }\n  Return `anagram for the ${str2}`;\n}",
  "completedSolution": "function isAnagram(arr, str) {\n  if (!arr.length && !str.length) return 'Array and string are empty';\n  if (!arr.length || !str.length) return 'Array or string are empty';\n\n  const obj = {};\n  str = str.trim().toLowerCase();\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = arr[i].trim().toLowerCase();\n    obj[arr[i]] = anagram(arr[i], str);\n  }\n\n  return obj;\n}\n\nfunction anagram(str1, str2) {\n\n  if (str1.length !== str2.length) return `not anagram for the ${str2}`;\n\n  for (let i = 0; i < str1.length; i++) {\n    for (let j = 0; j < str2.length; j++) {\n      if (str1[i] === str2[j]) break;\n      if (str2.length - 1 === j) return `not anagram for the ${str2}`;\n    }\n  }\n  return `anagram for the ${str2}`;\n}",
  "openTest": "it('Created function isAnagram', () => {\n  expect(isAnagram).to.be.a('function');\n});\n\nit('Created function anagram', () => {\n  expect(anagram).to.be.a('function');\n});\n\nit(\"isAnagram(['arts', 'rats', 'star'], 'earth') should return {arts: 'not anagram for the earth', rats: 'not anagram for the earth', star: 'not anagram for the earth'}\", () => {\n  expect(isAnagram(['arts', 'rats', 'star'], 'earth')).to.deep.equal({\n    arts: 'not anagram for the earth',\n    rats: 'not anagram for the earth',\n    star: 'not anagram for the earth'\n  });\n});\n\nit(\"isAnagram([' eats', 'SATE', 'seat', 'teas'], ' east ') should return {eats: 'anagram for the east', sate: 'anagram for the east', seat: 'anagram for the east', teas: 'anagram for the east'}\", () => {\n  expect(isAnagram([' eats', 'SATE', 'seat', 'teas'], ' east ')).to.deep.equal({\n    eats: 'anagram for the east',\n    sate: 'anagram for the east',\n    seat: 'anagram for the east',\n    teas: 'anagram for the east'\n  });\n});\n\nit(\"isAnagram(['hose', 'eat'], 'TEA') should return {hose: 'not anagram for the tea', eat: 'anagram for the tea'}\", () => {\n  expect(isAnagram(['hose', 'eat'], 'TEA')).to.deep.equal({\n    hose: 'not anagram for the tea',\n    eat: 'anagram for the tea'\n  });\n});\n\nit(\"isAnagram(['Lapse', 'leapS'], '  peals') should return {lapse: 'anagram for the peals', leaps: 'anagram for the peals'}\", () => {\n  expect(isAnagram(['Lapse', 'leapS'], '  peals')).to.deep.equal({\n    lapse: 'anagram for the peals',\n    leaps: 'anagram for the peals'\n  });\n});\n\nit(\"isAnagram(['capitol', 'optical'], 'topical') should return {capitol: 'anagram for the topical', optical: 'anagram for the topical'}\", () => {\n  expect(isAnagram(['capitol', 'optical'], 'topical')).to.deep.equal({\n    capitol: 'anagram for the topical',\n    optical: 'anagram for the topical'\n  });\n});\n\nit(\"isAnagram(['alert'], 'later') should return {alert: 'anagram for the later'}\", () => {\n  expect(isAnagram(['alert'], 'later')).to.deep.equal({alert: 'anagram for the later'});\n});\n\nit(\"isAnagram(['hose'], '') should return 'Array or string are empty'\", () => {\n  expect(isAnagram(['hose'], '')).to.equal('Array or string are empty');\n});\n\nit(\"isAnagram([], 'shoe') should return 'Array or string are empty'\", () => {\n  expect(isAnagram([], 'shoe')).to.equal('Array or string are empty');\n});\n\nit(\"isAnagram([], '') should return 'Array and string are empty'\", () => {\n  expect(isAnagram([], '')).to.equal('Array and string are empty');\n});\n\nit(\"anagram('arts', 'earth') should return 'not anagram for the earth'\", () => {\n  expect(anagram('arts', 'earth')).to.equal('not anagram for the earth');\n});\n\nit(\"anagram('eats', 'east') should return 'anagram for the east'\", () => {\n  expect(anagram('eats', 'east')).to.equal('anagram for the east');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}