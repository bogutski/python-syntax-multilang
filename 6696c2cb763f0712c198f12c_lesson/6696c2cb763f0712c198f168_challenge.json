{
  "_id": "6696c2cb763f0712c198f168",
  "name": {
    "en": "Check if all subarrays are anagrams of the first one",
    "ru": "Проверить, являются ли все подмассивы анаграммами первого"
  },
  "instruction": {
    "en": "The function `areAllArraysAnagrams` should take an array of arrays and return true if all subarrays are anagrams of the first subarray, and false if not.\n\nSubarrays can contain elements of different primitive types and can be of any length. The number of subarrays is greater than or equal to 2.\n\nIn this task, use the `sort` method to sort the arrays before comparison, and then use the `join` method to convert them into strings.\n\nFirst, create a string that will store the sorted first subarray.\n\nIn a loop, compare the strings obtained from the other subarrays with the first one. If the strings are equal, then the subarrays are anagrams.\n\nExamples of function usage:\n```javascript\nareAllArraysAnagrams([[1, 2, 3], [3, 2, 1], [2, 1, 3]]); // true\nareAllArraysAnagrams([['abc', 'def', true, false], [true, false, 'abc', 'def'], [false, 'abc', true, 'def'], ['def', false, 'abc', true]]); // true\nareAllArraysAnagrams([[1, true, 3], [3, 2, 1]]); // false\nareAllArraysAnagrams([[1, 2, 3, 4], [2, 3, 10, 1], [2, 1, 3, 4]]); // false\nareAllArraysAnagrams([[], []]); // true\n```",
    "ru": "Функция `areAllArraysAnagrams` должна принимать массив массивов и возвращать true, если все подмассивы являются анаграммами первого подмассива, и false, если нет.\n\nПодмассивы могут содержать элементы разных примитивных типов и быть любой длины. Количество подмассивов больше или равно 2.\n\nВ этой задаче используйте метод `sort` для сортировки массивов перед сравнением, затем метод `join` для преобразования в строки.\n\nСначала создайте строку, в которой будет храниться отсортированный первый подмассив.\n\nВ цикле сравнивайте строки, полученные из остальных подмассивов с первой. Если строки равны, то подмассивы являются анаграммами.\n\nПримеры использования функции:\n```javascript\nareAllArraysAnagrams([[1, 2, 3], [3, 2, 1], [2, 1, 3]]); // true\nareAllArraysAnagrams([['abc', 'def', true, false], [true, false, 'abc', 'def'], [false, 'abc', true, 'def'], ['def', false, 'abc', true]]); // true\nareAllArraysAnagrams([[1, true, 3], [3, 2, 1]]); // false\nareAllArraysAnagrams([[1, 2, 3, 4], [2, 3, 10, 1], [2, 1, 3, 4]]); // false\nareAllArraysAnagrams([[], []]); // true\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function areAllArraysAnagrams(arr) {\n  const first = arr[0].sort().join('');\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i].sort().join('') !== first) {\n      return false;\n    }\n  }\n  return true;\n}",
  "openTest": "it('Created function areAllArraysAnagrams', () => {\n  expect(areAllArraysAnagrams).to.be.a('function');\n});\n\nit('Function areAllArraysAnagrams should use sort() and join() methods', () => {\n  const funcStr = areAllArraysAnagrams.toString();\n  expect(funcStr).to.include('.sort(');\n  expect(funcStr).to.include('.join(');\n});\n\nit('areAllArraysAnagrams([[1, 2, 3], [3, 2, 1], [2, 1, 3] , [3, 1, 2]]) should return true', () => {\n  expect(areAllArraysAnagrams([[1, 2, 3], [3, 2, 1], [2, 1, 3], [3, 1, 2]])).to.be.true;\n});\n\nit('areAllArraysAnagrams([[1, 2, 3, 4, 5], [3, 4, 2, 1, 5]]) should return true', () => {\n  expect(areAllArraysAnagrams([[1, 2, 3, 4, 5], [3, 4, 2, 1, 5]])).to.be.true;\n});\n\nit('areAllArraysAnagrams([[1, true, 3], [3, 2, 1]]) should return false', () => {\n  expect(areAllArraysAnagrams([[1, true, 3], [3, 2, 1]])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[1, 2, 3], [3, 0, 1], [2, 1, 3] , [3, 1, 2]]) should return false', () => {\n  expect(areAllArraysAnagrams([[1, 2, 3], [3, 0, 1], [2, 1, 3], [3, 1, 2]])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[1, 2, 3], [3, 2, 1], [2, 1, 3] , [3, 1]]) should return false', () => {\n  expect(areAllArraysAnagrams([[1, 2, 3], [3, 2, 1], [2, 1, 3], [3, 1]])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[1, 2, 3], [3, 2, 1], [2, 1, 3] , [3, 3, 2], [3, 1, 2]]) should return false', () => {\n  expect(areAllArraysAnagrams([[1, 2, 3], [3, 2, 1], [2, 1, 3], [3, 3, 2], [3, 1, 2]])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[\"abc\", \"def\", true, false], [true, false, \"abc\", \"def\"], [false, \"abc\", true, \"def\"], [\"def\", false, \"abc\", true]]) should return true', () => {\n  expect(areAllArraysAnagrams([['abc', 'def', true, false], [true, false, 'abc', 'def'], [false, 'abc', true, 'def'], ['def', false, 'abc', true]])).to.be.true;\n});\n\nit('areAllArraysAnagrams([[\"abc\", \"def\", true, false], [true, false, \"abc\", \"def\"], [false, \"abc\", true, \"def\"], [\"def\", false, \"abc\", true], [\"def\", false, \"abc\", true] , [\"abc\", true, \"def\", false]]) should return true', () => {\n  expect(areAllArraysAnagrams([['abc', 'def', true, false], [true, false, 'abc', 'def'], [false, 'abc', true, 'def'], ['def', false, 'abc', true], ['def', false, 'abc', true], ['abc', true, 'def', false]])).to.be.true;\n});\n\nit('areAllArraysAnagrams([[\"abc\", \"dff\", true, false], [true, false, \"abc\", \"def\"], [false, \"abc\", true, \"def\"], [\"def\", false, \"abc\", true]]) should return false', () => {\n  expect(areAllArraysAnagrams([['abc', 'dff', true, false], [true, false, 'abc', 'def'], [false, 'abc', true, 'def'], ['def', false, 'abc', true]])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[\"a\", \"01\"], [true, \"false\"]]) should return false', () => {\n  expect(areAllArraysAnagrams([['a', '01'], [true, 'false']])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[\"a\", \"01\"], [\"a\", \"01\", \"a\"]]) should return false', () => {\n  expect(areAllArraysAnagrams([['a', '01'], ['a', '01', 'a']])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[\"a\", \"01\"], [\"a\", \"01\"], [\"01\", \"a\"]]) should return true', () => {\n  expect(areAllArraysAnagrams([['a', '01'], ['a', '01'], ['01', 'a']])).to.be.true;\n});\n\nit('areAllArraysAnagrams([[\"a\"], [\"a\"], [\"a\"]]) should return true', () => {\n  expect(areAllArraysAnagrams([['a'], ['a'], ['a']])).to.be.true;\n});\n\nit('areAllArraysAnagrams([[\"a\"], [\"a\"], [\"b\"], [\"a\"]]) should return false', () => {\n  expect(areAllArraysAnagrams([['a'], ['a'], ['b'], ['a']])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[\"a\"], [\"b\"]]) should return false', () => {\n  expect(areAllArraysAnagrams([['a'], ['b']])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[\"a\"], [\"a\", \"b\"]]) should return false', () => {\n  expect(areAllArraysAnagrams([['a'], ['a', 'b']])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[\"a\"], [\"ab\"]]) should return false', () => {\n  expect(areAllArraysAnagrams([['a'], ['ab']])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[\"a\", \"01\"], [], [], [\"01\"]]) should return false', () => {\n  expect(areAllArraysAnagrams([['a', '01'], [], [], ['01']])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[\"a\", \"01\"], [], [\"01\", \"a\"]]) should return false', () => {\n  expect(areAllArraysAnagrams([['a', '01'], [], ['01', 'a']])).to.be.false;\n});\n\nit('areAllArraysAnagrams([[], [], [], []]) should return true', () => {\n  expect(areAllArraysAnagrams([[], [], [], []])).to.be.true;\n});\n\nit('areAllArraysAnagrams([[], [\"01\", \"a\"]]) should return false', () => {\n  expect(areAllArraysAnagrams([[], ['01', 'a']])).to.be.false;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}