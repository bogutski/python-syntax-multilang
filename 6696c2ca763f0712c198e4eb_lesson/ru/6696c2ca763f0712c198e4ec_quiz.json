{
  "name": "Объекты в JavaScript",
  "questions": {
    "0": {
      "name": "Что такое объект?",
      "variants": {
        "0": {
          "name": "Это место хранения строк и чисел без возможности доступа к конкретному элементу."
        },
        "1": {
          "name": "Это коллекция свойств, где свойство — это пара `ключ: значение`."
        },
        "2": {
          "name": "Это функция, которая возвращает различные значения в зависимости от ключа."
        },
        "3": {
          "name": "Это структура данных, хранящая информацию в виде списка."
        }
      }
    },
    "1": {
      "name": "Какие скобки используются чтобы создать объект?",
      "variants": {
        "0": {
          "name": "let obj = [key: value, key1: value1]"
        },
        "1": {
          "name": "let obj = {key: value, key1: value1}"
        },
        "2": {
          "name": "let obj = (key: value, key1: value1)"
        },
        "3": {
          "name": "let obj = <key: value, key1: value1>"
        }
      }
    },
    "2": {
      "name": "Что такое свойство объекта?",
      "variants": {
        "0": {
          "name": "это функция, объявленная внутри объекта"
        },
        "1": {
          "name": "это уникальный идентификатор объекта"
        },
        "2": {
          "name": "это пара ключ-значение"
        },
        "3": {
          "name": "это строка, которая содержит имя объекта"
        }
      }
    },
    "3": {
      "name": "Можно ли использовать одинаковые ключи в объекте?",
      "variants": {
        "0": {
          "name": "Да, можно"
        },
        "1": {
          "name": "Нет, нельзя"
        }
      }
    },
    "4": {
      "name": "Какой тип данных может быть значением свойства объекта?",
      "variants": {
        "0": {
          "name": "Значением могут быть только примитивные данные."
        },
        "1": {
          "name": "Значением может быть любой тип данных в JavaScript, включая другой объект."
        },
        "2": {
          "name": "Значением могут быть только другие объекты."
        },
        "3": {
          "name": "Значением могут быть что-то уникальное — то, что не повторяется в данном объекте."
        }
      }
    },
    "5": {
      "name": "Какой объект содержит ошибку?",
      "variants": {
        "0": {
          "name": "const obj = { name: 'Lilu', age: 34 }"
        },
        "1": {
          "name": "const obj = { name: 34, age: 'Lilu' }"
        },
        "2": {
          "name": "const obj = { age: 34, age: 'Lilu' }"
        },
        "3": {
          "name": "const obj = { age: 34, age1: 34 }"
        }
      }
    },
    "6": {
      "name": "Могут ли повторяться значения в объекте?",
      "variants": {
        "0": {
          "name": "Нет, не могут."
        },
        "1": {
          "name": "Да, могут."
        },
        "2": {
          "name": "Зависит от ситуации."
        }
      }
    },
    "7": {
      "name": "Какого типа данных могут быть ключи в объекте?",
      "variants": {
        "0": {
          "name": "только строки"
        },
        "1": {
          "name": "только числа"
        },
        "2": {
          "name": "только булевы значения"
        },
        "3": {
          "name": "любые типы данных, включая другие объекты"
        }
      }
    },
    "8": {
      "name": "Какой из следующих вариантов является корректным синтаксисом создания объекта?",
      "variants": {
        "0": {
          "name": "let object = {key: value,}"
        },
        "1": {
          "name": "let object = {key = value}"
        },
        "2": {
          "name": "let object = [key: value]"
        },
        "3": {
          "name": "let object = {key: value}"
        }
      }
    },
    "9": {
      "name": "Напишите функцию, которая принимает имя и возраст и возвращает объект с этими свойствами.",
      "variants": {
        "0": {
          "name": "function createPerson(name) { return { name, age: 54 } }"
        },
        "1": {
          "name": "function makePerson(name, age) { return ' name, age ' }"
        },
        "2": {
          "name": "function createPersonObject(name, age) { return { name: name, age: age } }"
        },
        "3": {
          "name": "function makePersonObject(name, age) { return { name: age } }"
        }
      }
    }
  }
}