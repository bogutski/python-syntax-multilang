{
  "_id": "6696c2ca763f0712c198e2da",
  "name": {
    "en": "In which number the fractional part is greater",
    "ru": "В каком числе дробная часть больше"
  },
  "instruction": {
    "en": "Write a function `compareFractionalParts`.\n\nThe function accepts two numbers and returns the number with the fractional part greater.\n\nIf the fractional parts are equal, the first number is returned.\n\nExamples of running the function:\n```javascript.\ncompareFractionalParts(1.10, 1.2) // 1.2\ncompareFractionalParts(1.2, 1.1) // 1.2\ncompareFractionalParts(2.1, 1.1) // 2.1\ncompareFractionalParts(10.1, 2.3) // 2.3\n```",
    "ru": "Напишите функцию `compareFractionalParts`.\n\nФункция принимает два числа, возвращает число, у которого дробная часть больше.\n\nЕсли дробные части равны, то возвращается первое число.\n\nПримеры запуска функции:\n```javascript\ncompareFractionalParts(1.10, 1.2) // 1.2\ncompareFractionalParts(1.2, 1.1) // 1.2\ncompareFractionalParts(2.1, 1.1) // 2.1\ncompareFractionalParts(10.1, 2.3) // 2.3\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function compareFractionalParts(num1, num2) {\n  const num1FractionalPart = num1 - Math.floor(num1);\n  const num2FractionalPart = num2 - Math.floor(num2);\n  if (num1FractionalPart === num2FractionalPart) return num1;\n  return num1FractionalPart > num2FractionalPart ? num1 : num2;\n}",
  "openTest": "it('Created function compareFractionalParts', () => {\n  expect(compareFractionalParts).to.be.a('function');\n});\n\nit('compareFractionalParts(1.10, 1.2) should return 1.2', () => {\n  expect(compareFractionalParts(1.10, 1.2)).to.equal(1.2);\n});\n\nit('compareFractionalParts(1.2, 1.1) should return 1.2', () => {\n  expect(compareFractionalParts(1.2, 1.1)).to.equal(1.2);\n});\n\nit('compareFractionalParts(2.1, 1.1) should return 2.1', () => {\n  expect(compareFractionalParts(2.1, 1.1)).to.equal(2.1);\n});\n\nit('compareFractionalParts(10.1, 2.3) should return 2.3', () => {\n  expect(compareFractionalParts(10.1, 2.3)).to.equal(2.3);\n});\n\nit('compareFractionalParts(10.1, 10.2) should return 10.2', () => {\n  expect(compareFractionalParts(10.1, 10.2)).to.equal(10.2);\n});\n\nit('compareFractionalParts(10.2, 10.1) should return 10.2', () => {\n  expect(compareFractionalParts(10.2, 10.1)).to.equal(10.2);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}