{
  "_id": "6696c2ca763f0712c198db71",
  "video": {
    "ru": "https://youtu.be/UaM6GtOZQdU",
    "en": "https://youtu.be/UaM6GtOZQdU",
    "es": ""
  },
  "content": {
    "ru": "* **let** и **const** имеют **блочную область видимости** (видны только после объявления и только в текущем блоке).\n\nПример №1:\n```\n{\n  let a = 100;\n  const b = 200;\n}\nconsole.log(a, b); // попытка вывести значения переменных в консоль выдаст ошибку \"ReferenceError\"\n```\nПример №2:\n```\n{\n  let a = 100;\n  const b = 200;\n  console.log(a, b); // в консоль будет выведено 100 и 200\n}\n ```\nПример №3:\n```\n{\n  let a = 1;\n  const b = 2;\n  console.log(a, b); \n}\nlet a = 3;\nconst b = 4;\nconsole.log(a, b); // в консоль будет выведено 1, 2, 3 и 4\n```\n\n* let и const нельзя объявлять повторно в одном блоке.\n\nПример №4:\n```\n{\n  let a = 100;\n  let a = 200; // повторно объявляем переменную a \n  console.log(a); // при попытке вывести значение переменной a в консоль будет получена ошибка \"SyntaxError\"\n}\n``` \nПример №5:\n```\n{\n  let a = 100;\n  a = 200; // изменяем значение переменной a\n  console.log(a); // в консоль будет выведено 200 \n}\nlet b = 300;\nb = 400;\nconsole.log(b); // в консоль будет выведено 400 \n ```\nПример №6:\n```\n{\n  let b = 100;\n  const b = 200; // приведет к ошибке \"SyntaxError\"\n}\n let a = 300;\n const a = 400; // приведет к ошибке \"SyntaxError\"\n```\n* Переменные **var не имеют блочной области видимости**, они ограничены телом функции.\n\nПример №7:\n```\n{\n  var a = 10;\n}\na = 100;\nconsole.log(a); // в консоль будет выведено 100\n ```\nПример №8:\n```\nvar a = 100;\n{\n  a = 10;\n}\nconsole.log(a); // в консоль будет выведено 10\n ```\nПример №9:\n```\n{\n  var a = 10;\n  let b = 100;\n  const c = 1000;  \n}\nlet b = 500;\nconst c = 700;\nconsole.log(a, b, c); // в консоль будет выведено 10, 500 и 700\n```\n* Обычно var не используется в современных скриптах.\n* Блочная область видимости – это удобно. Поэтому много лет назад let и const были введены в стандарт и сейчас являются основным способом объявления переменных.\n\n![](https://course-js-syntax.s3-us-west-1.amazonaws.com/no-var.PNG)\n\n##### Дополнительная информация:\n\nСтрогий режим — это стандарт, который существует уже многие годы. Он пользуется чрезвычайно широкой поддержкой браузеров.\nСтрогий режим (*strict mode*) — это важная часть современного JavaScript. \n\nСтрогий режим помогает в написании программ, в которых нет недочётов, мешающих JS-движкам оптимизировать код. \nВ JavaScript-модулях, которые появились в стандарте ES2015, строгий режим включён по умолчанию. Поэтому при работе с ними включать его явным образом не нужно.\n\nСемантика строгого режима отличается от традиционного нестрогого режима, который иногда называют «грязным» (sloppy mode). В  нестрогом режиме (sloppy mode) синтаксические правила языка не так строги, а когда происходят некоторые ошибки, система никак не оповещает о них пользователя. То есть — ошибки могут быть проигнорированы, а код, в котором они допущены, сможет выполняться дальше. Это способно привести к неожиданным результатам выполнения кода.\n\nСтрогий режим не даёт системе закрывать глаза на ошибки, выдавая соответствующие исключения. Это приводит к остановке выполнения программ. Например, в строгом режиме  переменные и константы нельзя объявлять без использования директив var, let или const. В результате создание переменных без этих директив приведёт к неработоспособности программы. \n\nВнимание! Директива \"use strict\" распознается только в начале скрипта или функции.\n\n![](https://github.com/bogutski/jsp/blob/master/section-1/use_strict.png?raw=true)\n\n",
    "en": "* **let** and **const** have **block visibility** (visible only after the announcement and only in the current block).\n\nExample No1:\n```\n{\n  let a = 100;\n  const b = 200;\n}\nconsole.log(a, b); // an attempt to print variable values to the console will produce a \"ReferenceError\" error\n```\nExample No2:\n```\n{\n  let a = 100;\n  const b = 200;\n  console.log(a, b); // the console will display 100 and 200\n}\n ```\nExample No3:\n```\n{\n  let a = 1;\n  const b = 2;\n  console.log(a, b); \n}\nlet a = 3;\nconst b = 4;\nconsole.log(a, b); // console will print 1, 2, 3, and 4\n```\n\n* let and const cannot be declared repeatedly in the same block.\n\nExample No4:\n```\n{\n  let a = 100;\n  let a = 200; // redeclare the a variable \n  console.log(a); // \"SyntaxError\" error will be thrown if you try to output the a variable value to the console\n}\n``` \nExample No5:\n```\n{\n  let a = 100;\n  a = 200; // change the value of the a variable\n  console.log(a); // console will print 200 \n}\nlet b = 300;\nb = 400;\nconsole.log(b); // console will print 400 \n ```\nExample No6:\n```\n{\n  let b = 100;\n  const b = 200; // will cause a \"SyntaxError\" error\n}\n let a = 300;\n const a = 400; // cause \"SyntaxError\" error\n```\n* **var variables have no block scope**, they are limited to the body of the function.\n\nExample No7:\n```\n{\n  var a = 10;\n}\na = 100;\nconsole.log(a); // 100 will be displayed in the console\n ```\nExample No8:\n```\nvar a = 100;\n{\n  a = 10;\n}\nconsole.log(a); // 10 will be displayed in the console\n ```\nExample No9:\n```\n{\n  var a = 10;\n  let b = 100;\n  const c = 1000;  \n}\nlet b = 500;\nconst c = 700;\nconsole.log(a, b, c); // the console will display 10, 500, and 700\n```\n* Usually var is not used in modern scripts.\n* The block scope is convenient. That is why let and const were introduced into the standard many years ago and are now the main way to declare variables.\n\n![](https://course-js-syntax.s3-us-west-1.amazonaws.com/no-var.PNG)\n\n##### Additional information:\n\nStrict Mode is a standard that has been around for many years. It has extremely wide browser support.\nStrict mode is an important part of modern JavaScript. \n\nStrict mode helps in writing programs that do not have flaws that prevent JS engines from optimizing code. \nIn JavaScript modules that appeared in the ES2015 standard, strict mode is enabled by default. Therefore, there is no need to explicitly enable it when working with them.\n\nThe semantics of strict mode is different from the traditional nonstrict mode, which is sometimes called \"sloppy mode\". In sloppy mode, the syntax rules of the language are not so strict, and when some errors occur, the system does not notify the user about them in any way. That is, the errors can be ignored, while the code containing them will be executed further. This can lead to unexpected results of code execution.\n\nStrict mode prevents the system from turning a blind eye to errors by issuing appropriate exceptions. This causes programs to stop executing. For example, in strict mode, variables and constants cannot be declared without using var, let or const directives. As a result, creating variables without these directives will make the program inoperable. \n\nWarning! The \"use strict\" directive is only recognized at the beginning of a script or function.\n\n![](https://github.com/bogutski/jsp/blob/master/section-1/use_strict.png?raw=true)\n\n",
    "es": "\n"
  }
}