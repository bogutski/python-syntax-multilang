{
  "content": {
    "ru": "Что такое область видимости переменной в Python?\r\n\r\n**Область видимости** — это то место, где переменная доступна. \r\nЕсли переменная создана, её можно использовать. Если не создана — будет ошибка.\r\n\r\nВ Python переменные можно создавать вне блоков (например, вне функций — это глобальные переменные), и внутри блоков (например, внутри функций — это локальные переменные).\r\n\r\n**Не волнуйтесь, если вы ещё не знаете, что такое функция**.\r\nСейчас мы будем использовать функции просто как \"коробки\", в которые можно что-то положить — например, переменные. Это нужно лишь для демонстрации.\r\n\r\nПозже мы обязательно подробно разберём, что такое функции, зачем они нужны и как с ними работать.\r\nПока просто помните: если переменная создаётся внутри такой \"коробки\", то она работает только внутри неё — за пределами она недоступна.\r\n\r\n_Пример №1:_ переменная создана вне блоков\r\n```python\r\na = 20\r\nprint(a)  # выведет: 20\r\n```\r\nЗдесь всё просто: переменная `a` создана вне блоков, и её можно использовать.\r\n\r\n\r\n_Пример №2:_ переменная внутри блока (функции)\r\n```python\r\ndef demo():\r\n    a = 10              # переменная создана внутри функции\r\n    print(a)            # выведет: 10\r\n\r\ndemo()\r\n\r\nprint(\"снаружи функции:\", a)    # ошибка: переменная a не существует снаружи блока фунции\r\n```\r\nПеременная `a` была создана внутри функции — и работает только внутри неё.\r\nСнаружи — она не существует, и Python выдаст ошибку.\r\n\r\n\r\n_Пример №3:_ переменная снаружи и внутри с одинаковым именем\r\n```python\r\na = 5                           # переменная создана вне блоков\r\n\r\ndef demo():\r\n    a = 100                     # переменная создана внутри блока функции\r\n    print(\"внутри функции:\", a) # внутри функции: 100\r\n\r\ndemo()\r\n\r\nprint(\"снаружи функции:\", a)    # снаружи функции: 5\r\n```\r\nПеременная `a` внутри функции — это другая, отдельная `a`.\r\nОна не изменяет значение глобальной переменной `a`.\r\n\r\n\r\n_Пример №4:_ как получить доступ к глобальной переменной внутри функции\r\n```python\r\na = 30\r\n\r\ndef demo():\r\n    print(\"внутри функции:\", a)  # внутри функции: 30 \r\n\r\ndemo()\r\n\r\nprint(\"снаружи функции:\", a) # снаружи функции: 30\r\n```\r\n\r\nЕсли внутри функции ты только читаешь глобальную переменную (`а` не переписываешь её), — всё работает.\r\n\r\n\r\n_Пример №5:_ использовать глобальную переменную внутри функции и изменить её\r\n```python\r\na = 10\r\n\r\ndef demo():\r\n    global a\r\n\r\n    print(\"внутри функции, до изменения:\", a)     # внутри функции, до изменения: 10\r\n    a = 50                                        # изменяем переменную\r\n    print(\"внутри функции, после изменения:\", a)  # внутри функции, после изменения: 50\r\n\r\ndemo()\r\n\r\nprint(\"снаружи функции:\", a)                      # снаружи функции: 50\r\n```\r\nКлючевое слово `global` говорит Python, что a — это глобальная переменная,\r\nи мы хотим изменить её внутри функции.\r\n\r\n\r\n### Что нужно запомнить:\r\n- Переменные, созданные внутри блока (к примеру функции), работают только внутри неё.\r\n- Переменные, созданные снаружи блока (к примеру функции), называются глобальными.\r\n- Если внутри блока ты создаёшь переменную с тем же именем — это новая переменная, она не меняет внешнюю.\r\n- Чтобы изменить глобальную переменную внутри функции, нужно написать `global` имя_переменной.",
    "en": "Here you will learn how to program.\r\n\r\nWe will use `Python` - one of the most popular programming languages."
  }
}