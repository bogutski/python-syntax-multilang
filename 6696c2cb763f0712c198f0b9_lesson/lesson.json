{
  "_id": "6696c2cb763f0712c198f0b9",
  "content": {
    "ru": "### Создание нового массива\n\nВ этом примере мы разберем как удалить все элементы, которые не являются числами из массива. \n\nДля этого мы создадим новый массив и будем в него добавлять только числа.\n\n```javascript\nconst arr = [76, '#2', 'ewq', 6, NaN, '', 2, 1, null, -5, [], 87]\n\nconst numbers = [];\n\nfor(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] === 'number' && !isNaN(arr[i])){  // Если тип данных элемента массива - число и он не NaN\n        numbers.push(arr[i])                           // Добавляем элемент в новый массив\n    }\n}\n\nconsole.log(numbers)  // [ 76, 6, 2, 1, -5, 87 ]\n```\n\nВсе работает, как и ожидалось.\n\n\n### Использование метода `splice()` для удаления элементов\n\nМетод `splice()` позволяет удалять элементы из массива.\n\nРазберем несколько примеров.\n\n```javascript\nconst arr = ['a', 'b', 'c', 'd']\n\narr.splice(1, 2)  // 1 - с первого индекса, включительно; 2 - удалить 2 элемента\n\nconsole.log(arr) // [ 'a', 'd' ]\n```\nВ этом примере мы удалили элементы с индексами 1 и 2.\n\n\n```javascript\nconst arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\narr.splice(0, 4)  // 0 - начальный индекс; 4 - удалить 4 элемента\n\nconsole.log(arr) // [ 'e', 'f', 'g' ]\n```\nМы удалили первые 4 элемента массива.\n\n\nТак же метод `splice()` позволяет добавлять элементы в массив.\n\n```javascript\nconst arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\narr.splice(3, 4, 'new', 'elements', 'here')  // 3 - начальный индекс; 4 - удалить 4 элемента; \n                                             // добавить новые элементы: 'new', 'elements', 'here'\n\nconsole.log(arr) // [ 'a', 'b', 'c', 'new', 'elements', 'here' ]\n```\n\nВ этом примере мы удалили 4 элемента, начиная с индекса 3 и добавили новые элементы в массив.\n\nТеперь вернемся к нашей теме и попробуем удалить все элементы, которые не являются числами с помощью метода `splice()`.\n\n```javascript\nconst arr = [76, '#2', 'ewq', 6, NaN, '', 2, 1, null, -5, [], 87]\n\nfor(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] !== 'number' || isNaN(arr[i])){  // Если элемента массива не число или элемент является NaN\n        arr.splice(i, 1)                              // Удаляем элемент\n    }\n}\n\nconsole.log(arr)  // [ 76, 'ewq', 6, '', 2, 1, -5, 87 ]\n```\n\nОжидаемый результат у нас не получился, так как две строки остались в массиве: `'ewq'`, `''`.\n\nДавайте разберем почему так случилось.\n\n```\nПредставим массив цифр:     [0, 1, 2, 3, 4, 5]\nИ такой же итератор/индексы: 0, 1, 2, 3, 4, 5\n```\n\n\nЧто будет если мы уберем один элемент с массива?\n```\nArray: [0, 2, 3, 4, 5]\nIndex:  0, 1, 2, 3, 4, 5\n```\n\nМы видим что индексы теперь не совпадают с элементами массива.\n\nВернемся к циклу, допустим на втором круге цикла мы удалили элемент, числа массива сместились влево, но индекс не изменился.\n\nНа следующем круге цикла мы перейдем к следующему элементу, но `2-ка` так и останется без проверки, потому что теперь она находиться на индексе - `1`, который уже был проверен.\n\nЧтобы решить эту проблему, нам нужно уменьшать индекс на `1`, если мы удалили элемент.\n\n```javascript\nconst arr = [76, '#2', 'ewq', 6, NaN, '', 2, 1, null, -5, [], 87]\n\nfor(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] !== 'number' || isNaN(arr[i])){\n        arr.splice(i, 1)                                // Удаляем элемент\n        i--;                                            // Уменьшаем индекс на 1\n    }\n}\n\nconsole.log(arr)  // [ 76, 6, 2, 1, -5, 87 ]\n```\n\nОтлично, теперь все работает как надо.\n\n\nДавайте рассмотрим второй вариант обхода этой проблемы.\n\n```javascript\nconst arr = [76, '#2', 'ewq', 6, NaN, '', 2, 1, null, -5, [], 87]\n\nfor(let i = arr.length - 1; i >= 0; i--){              // Идем с конца массива\n\n    if(typeof arr[i] !== 'number' || isNaN(arr[i])){\n        arr.splice(i, 1)\n    }\n}\n\nconsole.log(arr)  // [ 76, 6, 2, 1, -5, 87 ]\n```\n\nВ этом примере мы идем с конца массива, поэтому индексы не смещаются и мы можем спокойно удалять элементы.\n\nТакой метод работает быстрее, чем предыдущий, так как нам не нужно добавлять дополнительную итерацию, каждый раз когда мы удаляем элемент.\n",
    "en": "### Creating a new array\n\nIn this example, we'll figure out how to remove all elements that are not numbers from an array. \n\nTo do this, we will create a new array and add only numbers to it.\n\n```javascript\nconst arr = [76, '#2', 'ewq', 6, NaN, '', 2, 1, null, -5, [], 87]\n\nconst numbers = [];\n\nfor(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] === 'number' && !isNaN(arr[i])){  // If the data type of the array element is a number and it is not NaN\n        numbers.push(arr[i])                           // Add an element to a new array\n    }\n}\n\nconsole.log(numbers)  // [ 76, 6, 2, 1, -5, 87 ]\n```\n\nEverything works as expected.\n\n\n### Using the `splice()` method to remove items\n\nThe `splice()` method allows you to remove elements from an array.\n\nLet's look at a few examples.\n\n```javascript\nconst arr = ['a', 'b', 'c', 'd']\n\narr.splice(1, 2)  // 1 - from the first index, inclusive; 2 - remove 2 elements\n\nconsole.log(arr) // [ 'a', 'd' ]\n```\nIn this example, we removed elements with indexes 1 and 2.\n\n\n```javascript\nconst arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\narr.splice(0, 4)  // 0 - initial index; 4 - remove 4 elements\n\nconsole.log(arr) // [ 'e', 'f', 'g' ]\n```\nWe deleted the first 4 elements of the array.\n\n\nThe `splice()` method also allows you to add elements to an array.\n\n```javascript\nconst arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\narr.splice(3, 4, 'new', 'elements', 'here') // 3 - initial index; 4 - remove 4 elements; \n                                             // add new elements: 'new', 'elements', 'here'\n\nconsole.log(arr) // ['a', 'b', 'c', 'new', 'elements', 'here' ]\n```\n\nIn this example, we removed 4 elements starting with index 3 and added new elements to the array.\n\nNow let's go back to our topic and try to remove all elements that are not numbers using the `splice()` method.\n\n```javascript\nconst arr = [76, '#2', 'ewq', 6, NaN, '', 2, 1, null, -5, [], 87]\n\nfor(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] !== 'number' || isNaN(arr[i])){  // If the array element is not a number or the element is NaN\n        arr.splice(i, 1)                              // Delete the element\n    }\n}\n\nconsole.log(arr)  // [ 76, 'ewq', 6, '', 2, 1, -5, 87 ]\n```\n\nWe did not get the expected result, because two lines remained in the array: `'ewq'`, `''`.\n\nLet's look at why this happened.\n\n```\nImagine an array of numbers:     [0, 1, 2, 3, 4, 5]\nAnd the same iterator/indexes: 0, 1, 2, 3, 4, 5\n```\n\n\nWhat happens if we remove one element from the array?\n```\nArray: [0, 2, 3, 4, 5]\nIndex: 0, 1, 2, 3, 4, 5\n```\n\nWe see that the indexes now do not coincide with the array elements.\n\nBack to the loop, let's say on the second round of the loop we deleted an element, the array numbers shifted to the left, but the index did not change.\n\nOn the next loop round we will move on to the next element, but `2` will still remain unchecked because it is now at the index - `1`, which has already been checked.\n\nTo solve this problem, we need to decrease the index by `1` if we delete an element.\n\n```javascript\nconst arr = [76, '#2', 'ewq', 6, NaN, '', 2, 1, null, -5, [], 87]\n\nfor(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] !== 'number' || isNaN(arr[i])){\n        arr.splice(i, 1)                                // Delete the element\n        i--;                                            // Decrease the index by 1 1\n    }\n}\n\nconsole.log(arr)  // [ 76, 6, 2, 1, -5, 87 ]\n```\n\nGreat, now everything is working properly.\n\n\nLet's look at the second way around this problem.\n\n```javascript\nconst arr = [76, '#2', 'ewq', 6, NaN, '', 2, 1, null, -5, [], 87]\n\nfor(let i = arr.length - 1; i >= 0; i--){              // Go from the end of the array\n\n    if(typeof arr[i] !== 'number' || isNaN(arr[i])){\n        arr.splice(i, 1)\n    }\n}\n\nconsole.log(arr)  // [ 76, 6, 2, 1, -5, 87 ]\n```\n\nIn this example, we go from the end of the array, so the indexes are not shifted and we can safely delete elements.\n\nThis method works faster than the previous one, since we don't need to add an extra iteration every time we delete an item.\n",
    "es": "# Удалить из массива все элементы, которые не являются числами language: es"
  },
  "video": {
    "ru": "https://youtu.be/4diIcHbRRAk",
    "en": "",
    "es": ""
  }
}