{
  "_id": "6696c2cb763f0712c198f0ee",
  "name": {
    "en": "",
    "ru": "Найти все числа в массиве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `onlyNumbers`, которая принимает массив с разными типами данных.\n\nЧисла могут быть как в числовом типе, так и в строковом.\n\nФункция должна найти все числа, включая числа в строковом типе, и вернуть их в виде массива.\n\nЧисла в строковом типе должны быть преобразованы в числовой тип, перед тем как добавить их в массив.\n\nЕсли массив пустой или нет чисел, то функция должна вернуть пустой массив.\n\n\nПримеры запуска функции:\n```javascript\nonlyNumbers([1, 'test', 42, false, '44', undefined, NaN]); // [1, 42, 44]\nonlyNumbers([1, '2', 3, '4', 5]);                          // [1, 2, 3, 4, 5]\nonlyNumbers([true, false, null]);                          // []\nonlyNumbers([]);                                           // []\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function onlyNumbers(arr){\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++){\n    if (typeof arr[i] === 'number' && !isNaN(arr[i])) newArr.push(arr[i])\n    else if(!isNaN(arr[i]) && arr[i] !== true && arr[i] !== false && arr[i] !== null && arr[i] !== '') newArr.push(+arr[i])\n  }\n  return newArr\n}",
  "openTest": "it('Created function onlyNumbers', () => {\n  expect(onlyNumbers).to.be.a('function');\n});\n\nit(\"onlyNumbers([1, 42, false, 4, undefined, 'test']) should return [1, 42, 4]\", () => {\n  expect(onlyNumbers([1, 42, false, 4, undefined, 'test'])).to.deep.equal([1, 42, 4]);\n});\n\nit(\"onlyNumbers([1, '2', 3, '4', 5]) should return [1, 2, 3, 4, 5]\", () => {\n  expect(onlyNumbers([1, '2', 3, '4', 5])).to.deep.equal([1, 2, 3, 4, 5]);\n});\n\nit(\"onlyNumbers(['10', 20, '30', 40, '50', 100]) should return [10, 20, 30, 40, 50, 100]\", () => {\n  expect(onlyNumbers(['10', 20, '30', 40, '50', 100])).to.deep.equal([10, 20, 30, 40, 50, 100]);\n});\n\nit(\"onlyNumbers([NaN, 'test', undefined, false, true]) should return []\", () => {\n  expect(onlyNumbers([NaN, 'test', undefined, false, true])).to.deep.equal([]);\n});\n\nit(\"onlyNumbers([(5 > 2), true, NaN, '1256874', false, null, '']) should return [1256874]\", () => {\n  expect(onlyNumbers([(5 > 2), true, NaN, '1256874', false, null, ''])).to.deep.equal([1256874]);\n});\n\nit(\"onlyNumbers(['555']) should return [555]\", () => {\n  expect(onlyNumbers(['555'])).to.deep.equal([555]);\n});\n\nit(\"onlyNumbers([]) should return []\", () => {\n  expect(onlyNumbers([])).to.deep.equal([]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}