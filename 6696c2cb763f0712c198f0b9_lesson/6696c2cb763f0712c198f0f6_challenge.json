{
  "_id": "6696c2cb763f0712c198f0f6",
  "name": {
    "en": "Find an array of numbers",
    "ru": "Найти массив с числами"
  },
  "instruction": {
    "en": "Write a function 'findArrayWithNumbers' that takes an array of arrays.\n\nThe function should return a new array with two elements:\n\n* The first element - a string `'Array with numbers by index <index>'`, where `<index>` is the index of the array in the original array where the numbers were found.\n* The second element - an array consisting of the numbers that were found in the original array.\n\nBefore adding to the new array, each number should be multiplied by 3.\n\nExample: array `[['1','2','3'], ['test'], [7,8,9]]` should return array `['Array with numbers by index 2', [21,24,27]]`.\n\nAll internal arrays will consist only of strings and only one will consist of numbers.\n\nAn empty array will not be passed.\n\nSolution algorithm:\n* The first loop iterates over the outer array.\n* The second loop iterates over the inner array.\n* The `if` condition checks if the first element is not a number, then it breaks the loop.\n* In the `else` condition, we add the number multiplied by 3 to the new array.\n* Also, we need to save the index in a variable when we find which array contains the numbers.\n* At the end of the loop, we need to compose the string correctly and add the index to it.\n* Return the new array with the string and the array of numbers.\n\nExample function call:\n```javascript\nfindArrayWithNumbers([['1','2','3'], ['test'], [7,8,9]]); // ['Array with numbers by index 2', [21,24,27]]\nfindArrayWithNumbers([[20, 30, 40], ['a', 'b', 'c']]); // ['Array with numbers by index 0', [60, 90, 120]]\n```",
    "ru": "Напишите функцию 'findArrayWithNumbers', которая принимает массив массивов.\n\nФункция должна вернуть новый массив с двумя элементами:\n\n* Первый элемент - строка `'Array with numbers by index <index>'`, где `<index>` - индекс массива в исходном массиве, в котором были числа.\n* Второй элемент - массив, состоящий из чисел, который был найден в оригинальном массиве.\n\nПеред добавлением в новый массив, каждое число должно быть умножено на 3.\n\nПример: массив `[['1','2','3'], ['test'], [7,8,9]]` должен вернуть массив `['Array with numbers by index 2', [21,24,27]]`.\n\nВсе внутренние массивы будут состоять только из строк и только один будет состоять из чисел.\n\nПустой массив передаваться не будет.\n\nАлгоритм решения:\n* Первый цикл проходит по внешнему массиву.\n* Второй цикл проходит по внутреннему массиву.\n* Условие `if` проверяет, что если первый элемент не является числом, то прерывает цикл.\n* В условии `else`, мы добавляем в новый массив число, умноженное на 3.\n* Так же, нужно сохранить индекс в переменную, когда мы найдем какой массив содержит числа.\n* В конце цикла, нужно составить правильно строку и добавить в нее индекс.\n* Вернуть новый массив со строкой и массивом чисел.\n\nПример запуска функции:\n```javascript\nfindArrayWithNumbers([['1','2','3'], ['test'], [7,8,9]]); // ['Array with numbers by index 2', [21,24,27]]\nfindArrayWithNumbers([[20, 30, 40], ['a', 'b', 'c']]); // ['Array with numbers by index 0', [60, 90, 120]]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function findArrayWithNumbers(arr){\n  const newArr = [];\n  let index;\n  for(let i = 0; i < arr.length; i++){\n\n    for(let j = 0; j < arr[i].length; j++){\n      if(typeof arr[i][j] !== 'number') break;\n      else {\n        if(index === undefined) index = i;\n        newArr.push(arr[i][j] * 3);\n      }\n    }\n\n  }\n  const str = `Array with numbers by index ${index}`\n  return [str, newArr];\n}",
  "openTest": "it('Created function findArrayWithNumbers', () => {\n  expect(findArrayWithNumbers).to.be.a('function');\n});\n\nit(\"findArrayWithNumbers([['1','2','3'], ['test'], [7,8,9]]) should return ['Array with numbers by index 2', [21,24,27]]\", () => {\n  expect(findArrayWithNumbers([['1','2','3'], ['test'], [7,8,9]])).to.deep.equal(['Array with numbers by index 2', [21,24,27]]);\n});\n\nit(\"findArrayWithNumbers([[25, 35, 45], ['a', 'b', 'c']]) should return ['Array with numbers by index 0', [75, 105, 135]]\", () => {\n  expect(findArrayWithNumbers([[25, 35, 45], ['a', 'b', 'c']])).to.deep.equal(['Array with numbers by index 0', [75, 105, 135]]);\n});\n\nit(\"findArrayWithNumbers([[], [], ['text'], [1, 2, 3]]) should return ['Array with numbers by index 3', [3, 6, 9]]\", () => {\n  expect(findArrayWithNumbers([[], [], ['text'], [1, 2, 3]])).to.deep.equal(['Array with numbers by index 3', [3, 6, 9]]);\n});\n\nit(\"findArrayWithNumbers([['1','2','3'], ['test'], [0, 100, 900], []]) should return ['Array with numbers by index 2', [0, 300, 2700]]\", () => {\n  expect(findArrayWithNumbers([['1','2','3'], ['test'], [0, 100, 900], []])).to.deep.equal(['Array with numbers by index 2', [0, 300, 2700]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}