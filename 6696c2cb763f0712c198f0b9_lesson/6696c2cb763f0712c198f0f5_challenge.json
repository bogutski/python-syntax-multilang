{
  "_id": "6696c2cb763f0712c198f0f5",
  "name": {
    "en": "",
    "ru": "Найти только отрицательные нечетные числа"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `onlyNegativeAndOdd`, которая принимает массив положительных, отрицательных чисел и строки.\n\nФункция должна вернуть новый массив, в котором будут только отрицательные нечетные числа из исходного массива, строки игнорируются.\n\n* Если в исходном массиве нет подходящих чисел, то функция должна вернуть строку 'No matches found'.\n\n* Если передан пустой массив, то функция должна вернуть строку 'Array is empty'.\n\n\nПримеры запуска функции:\n```javascript\nonlyNegativeAndOdd([-56, 40, 8, 'hello', 142, '46', -74, 0]); // 'No matches found'\nonlyNegativeAndOdd([-47, '-34', 59, '-72', -90]);             // [ -47 ]\nonlyNegativeAndOdd([-1, -3, -5, -7, -9]);                     // [ -1, -3, -5, -7, -9 ]\nonlyNegativeAndOdd([]);                                       // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function onlyNegativeAndOdd(arr){\n  if(!arr.length) return 'Array is empty';\n  const newArr = [];\n  for(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] === 'number' && arr[i] < 0 && arr[i] % 2) newArr.push(arr[i]);\n  }\n  if(!newArr.length) return 'No matches found';\n  else return newArr;\n}",
  "openTest": "it('Created function onlyNegativeAndOdd', () => {\n  expect(onlyNegativeAndOdd).to.be.a('function');\n});\n\nit(\"Function onlyNegativeAndOdd doesn't include method filter\", () => {\n  expect(onlyNegativeAndOdd.toString()).to.not.include('filter');\n});\n\nit(\"onlyNegativeAndOdd([1, 2, -3, -4, -5, -6, 7, 8, 9, 10]) should return [-3, -5]\", () => {\n  expect(onlyNegativeAndOdd([1, 2, -3, -4, -5, -6, 7, 8, 9, 10])).to.deep.equal([-3, -5]);\n});\n\nit(\"onlyNegativeAndOdd([-56, 400, 88, 693, 142, 46, -74, 0]) should return 'No matches found'\", () => {\n  expect(onlyNegativeAndOdd([-56, 400, 88, 693, 142, 46, -74, 0])).to.deep.equal('No matches found');\n});\n\nit(\"onlyNegativeAndOdd([-47, -34, 5-6, -78, -900]) should return [-47, -1]\", () => {\n  expect(onlyNegativeAndOdd([-47, -34, 5-6, -78, -900])).to.deep.equal([-47, -1]);\n});\n\nit(\"onlyNegativeAndOdd(['-87', -45, 85, 45, '31', -71, '0', 'text']) should return [-45, -71]\", () => {\n  expect(onlyNegativeAndOdd(['-87', -45, 85, 45, '31', -71, '0', 'text'])).to.deep.equal([-45, -71]);\n});\n\nit(\"onlyNegativeAndOdd([1, 3, 5, 7, 9]) should return 'No matches found'\", () => {\n  expect(onlyNegativeAndOdd([1, 3, 5, 7, 9])).to.deep.equal('No matches found');\n});\n\nit(\"onlyNegativeAndOdd([]) should return 'Array is empty'\", () => {\n  expect(onlyNegativeAndOdd([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}