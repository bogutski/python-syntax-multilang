{
  "_id": "6696c2cb763f0712c198f0f4",
  "name": {
    "en": "Find only positive even integers",
    "ru": "Найти только положительные четные числа"
  },
  "instruction": {
    "en": "Write a function `onlyPositiveAndEven` that takes an array of positive and negative numbers.\n\nThe function should return a new array that contains only the positive even numbers from the original array.\n\n* If there are no suitable numbers in the original array, the function should return the string 'No matches found'.\n\n* If an empty array is passed, the function should return the string 'Array is empty'.\n\n\nExamples of function calls:\n```javascript\nonlyPositiveAndEven([1, 2, -3, -4, -5, -6, 7, 8, 9, 10]); // [2, 8, 10]\nonlyPositiveAndEven([-56, 40, 8, 693, 142, 46, -74, 0]);  // [40, 8, 142, 46]\nonlyPositiveAndEven([-47, -34, 59, -72, -90]);            // 'No matches found'\nonlyPositiveAndEven([1, 3, 5, 7, 9]);                     // 'No matches found'\nonlyPositiveAndEven([]);                                  // 'Array is empty'\n```",
    "ru": "Напишите функцию `onlyPositiveAndEven`, которая принимает массив положительных и отрицательных чисел.\n\nФункция должна вернуть новый массив, в котором будут только положительные четные числа из исходного массива.\n\n* Если в исходном массиве нет подходящих чисел, то функция должна вернуть строку 'No matches found'.\n\n* Если передан пустой массив, то функция должна вернуть строку 'Array is empty'.\n\n\nПримеры запуска функции:\n```javascript\nonlyPositiveAndEven([1, 2, -3, -4, -5, -6, 7, 8, 9, 10]); // [2, 8, 10]\nonlyPositiveAndEven([-56, 40, 8, 693, 142, 46, -74, 0]);  // [40, 8, 142, 46]\nonlyPositiveAndEven([-47, -34, 59, -72, -90]);            // 'No matches found'\nonlyPositiveAndEven([1, 3, 5, 7, 9]);                     // 'No matches found'\nonlyPositiveAndEven([]);                                  // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function onlyPositiveAndEven(arr){\n  if(!arr.length) return 'Array is empty';\n  const newArr = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > 0 && arr[i] % 2 === 0) newArr.push(arr[i]);\n  }\n  if(!newArr.length) return 'No matches found';\n  else return newArr;\n}",
  "openTest": "it('Created function onlyPositiveAndEven', () => {\n  expect(onlyPositiveAndEven).to.be.a('function');\n});\n\nit(\"Function onlyPositiveAndEven doesn't include method filter\", () => {\n  expect(onlyPositiveAndEven.toString()).to.not.include('filter');\n});\n\nit(\"onlyPositiveAndEven([1, 2, -3, -4, -5, -6, 7, 8, 9, 10]) should return [2, 8, 10]\", () => {\n  expect(onlyPositiveAndEven([1, 2, -3, -4, -5, -6, 7, 8, 9, 10])).to.deep.equal([2, 8, 10]);\n});\n\nit(\"onlyPositiveAndEven([-56, 400, 88, 693, 142, 46, -74, 0]) should return [400, 88, 142, 46]\", () => {\n  expect(onlyPositiveAndEven([-56, 400, 88, 693, 142, 46, -74, 0])).to.deep.equal([400, 88, 142, 46]);\n});\n\nit(\"onlyPositiveAndEven([-47, -34, 5-6, -78, -900]) should return 'No matches found'\", () => {\n  expect(onlyPositiveAndEven([-47, -34, 5-6, -78, -900])).to.equal('No matches found');\n});\n\nit(\"onlyPositiveAndEven([1, 3, 5, 7, 9]) should return 'No matches found'\", () => {\n  expect(onlyPositiveAndEven([1, 3, 5, 7, 9])).to.equal('No matches found');\n});\n\nit(\"onlyPositiveAndEven([]) should return 'Array is empty'\", () => {\n  expect(onlyPositiveAndEven([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}