{
  "_id": "6696c2cb763f0712c198f0f2",
  "name": {
    "en": "",
    "ru": "Найти однозначные и трехзначные числа"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `only1And3LengthDigits`, которая принимает массив положительных чисел.\n\nФункция должна вернуть новый массив, состоящий только из однозначных и трехзначных чисел.\n\nПри добавлении элементов в новый массив:\n* однозначные числа должны добавляться в начало массива - метод `unshift`;\n* трехзначные числа должны добавляться в конец массива - метод `push`.\n\nЕсли массив пустой или в нем нет однозначных и трехзначных чисел, то функция должна вернуть `false`.\n\n\nПримеры запуска функции:\n```javascript\nonly1And3LengthDigits([54528, 78, 25, 12, 1, 0, 7, 1, 6, 2236, 7542]); // [6, 1, 7, 0, 1]\nonly1And3LengthDigits([0, 5, 10, 99, 100, 1000, 10000]);               // [5, 0, 100]\nonly1And3LengthDigits([1, 1000, 10000]);                               // false\nonly1And3LengthDigits([]);                                             // false\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function only1And3LengthDigits(arr){\n  if(!arr.length) return false;\n  const newArr = [];\n\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i].toString().length === 1) newArr.unshift(arr[i]);\n    else if (arr[i].toString().length === 3) newArr.push(arr[i]);\n  }\n\n  if(!newArr.length) return false;\n  else return newArr;\n}",
  "openTest": "it('Created function only1And3LengthDigits', () => {\n  expect(only1And3LengthDigits).to.be.a('function');\n});\n\nit(\"Function only1And3LengthDigits does not include method 'filter'\", () => {\n  expect(only1And3LengthDigits.toString()).to.not.include('filter');\n});\n\nit(\"only1And3LengthDigits([1, 2, 3, 22, 44, 68, 99, 10, 222, 354, 987, 4000]) should return [3, 2, 1, 222, 354, 987]\", () => {\n  expect(only1And3LengthDigits([1, 2, 3, 22, 44, 68, 99, 10, 222, 354, 987, 4000])).to.deep.equal([3, 2, 1, 222, 354, 987]);\n});\n\nit(\"only1And3LengthDigits([55, 99, 75, 12, 0, 9, 5, 1, 7, 2236, 7854126]) should return [7, 1, 5, 9, 0]\", () => {\n  expect(only1And3LengthDigits([55, 99, 75, 12, 0, 9, 5, 1, 7, 2236, 7854126])).to.deep.equal([7, 1, 5, 9, 0]);\n});\n\nit(\"only1And3LengthDigits([0, 9, 10, 99, 100, 999, 1000, 9999, 10000]) should return [9, 0, 100, 999]\", () => {\n  expect(only1And3LengthDigits([0, 9, 10, 99, 100, 999, 1000, 9999, 10000])).to.deep.equal([9, 0, 100, 999]);\n});\n\nit(\"only1And3LengthDigits([51, 64, 4569, 21478, 21, 36, 9654, 87415]) should return false\", () => {\n  expect(only1And3LengthDigits([51, 64, 4569, 21478, 21, 36, 9654, 87415])).to.equal(false);\n});\n\nit(\"only1And3LengthDigits([9, 786, 1, 442, 365, 1, 852, 6, 147]) should return [6, 1, 1, 9, 786, 442, 365, 852, 147]\", () => {\n  expect(only1And3LengthDigits([9, 786, 1, 442, 365, 1, 852, 6, 147])).to.deep.equal([6, 1, 1, 9, 786, 442, 365, 852, 147]);\n});\n\nit(\"only1And3LengthDigits([]) should return false\", () => {\n  expect(only1And3LengthDigits([])).to.equal(false);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}