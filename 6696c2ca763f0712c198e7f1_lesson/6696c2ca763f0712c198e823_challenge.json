{
  "_id": "6696c2ca763f0712c198e823",
  "name": {
    "en": "Add a string to an array at a certain position",
    "ru": "Добавить строку в массив в определенную позицию"
  },
  "instruction": {
    "en": "The `addStr` function takes three parameters:\n* `array` - array, contains strings\n* `str` - string\n* `n` - number.\n\nThe function must add the string `str` to the array by an ordinal number equal to the number `n`.\n\nIf the number `n` is greater than the length of the array, then add the string to the end of the array.\n\nThe function must return the changed array.\n\nExamples of running the function:\n```javascript\naddStr([\"x\", \"y\", \"z\"], \"a\", 10) // [\"x\", \"y\", \"z\", \"a\"]\naddStr([\"a\", \"b\", \"c\", \"x\"], \"a\", 2) // [\"a\", \"a\", \"b\", \"c\", \"x\"]\n```",
    "ru": "Функция `addStr` принимает три параметра:\n* `array` - массив, содержит строки\n* `str` - строка\n* `n` - число.\n\nФункция должна добавить строку `str` в массив по порядковому номеру, равному числу `n`.\n\nЕсли число `n` больше длины массива, то добавить строку в конец массива.\n\nФункция должна вернуть измененный массив.\n\nПримеры запуска функции:\n```javascript\naddStr([\"x\", \"y\", \"z\"], \"a\", 10) // [\"x\", \"y\", \"z\", \"a\"]\naddStr([\"a\", \"b\", \"c\", \"x\"], \"a\", 2) // [\"a\", \"a\", \"b\", \"c\", \"x\"]\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function addStr(array, str, n) {\n  if(n < array.length) array.splice((n-1), 0, str)\n  else array.push(str)\n  return array\n}",
  "openTest": "it('Created function addStr', () => {\n  expect(addStr).to.be.a('function');\n});\n\nit('addStr([\"Alice\", \"Tom\", \"Tomas\",\"Leo\"], \"Dina\", 1) should return [\"Dina\", \"Alice\", \"Tom\", \"Tomas\",\"Leo\"]', () => {\n  expect(addStr([\"Alice\", \"Tom\", \"Tomas\",\"Leo\"], \"Dina\", 1)).to.eql([\"Dina\", \"Alice\", \"Tom\", \"Tomas\",\"Leo\"]);\n});\n\nit('addStr([\"Alice\", \"Tom\",\"Tomas\",\"Leo\"], \"Dina\", 2) should return [\"Alice\", \"Dina\", \"Tom\",\"Tomas\",\"Leo\"]', () => {\n  expect(addStr(['Alice', 'Tom', 'Tomas','Leo'], 'Dina', 2)).to.eql(['Alice', 'Dina', 'Tom', 'Tomas','Leo']);\n});\n\nit(`addStr([\"Alice\", \"Dina\", \"Tom\",\"Tomas\",\"Leo\"], \"Dina\", 3) should return [\"Alice\", \"Dina\", \"Dina\", \"Tom\", \"Tomas\",\"Leo\"]`, () => {\n  expect(addStr(['Alice', 'Dina', 'Tom', 'Tomas', 'Leo'], 'Dina', 3)).to.eql([\"Alice\", \"Dina\", \"Dina\", \"Tom\", \"Tomas\",\"Leo\"]);\n});\n\nit(`addStr([\"Alice\", \"Tom\",\"Tomas\",\"Leo\"], \"Dina\", 10) should return [\"Alice\", \"Tom\",\"Tomas\",\"Leo\", \"Dina\"]`, () => {\n  expect(addStr(['Alice', 'Tom', 'Tomas', 'Leo'], 'Dina', 10)).to.eql(['Alice', 'Tom', 'Tomas', 'Leo', 'Dina']);\n});\n\nit(`addStr(['apple', 'banana', 'mango', 'mango', 'kiwi'] 'mango', 1) should return ['mango', 'apple', 'banana', 'mango', 'mango', 'kiwi'`, () => {\n  expect(addStr(['apple', 'banana', 'mango', 'mango', 'kiwi'], 'mango', 1)).to.eql(['mango', 'apple', 'banana', 'mango', 'mango', 'kiwi']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}