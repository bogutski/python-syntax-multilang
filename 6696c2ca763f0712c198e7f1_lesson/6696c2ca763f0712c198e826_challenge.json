{
  "_id": "6696c2ca763f0712c198e826",
  "name": {
    "en": "Remove elements from a two-dimensional array",
    "ru": "Удалить элементы из двумерного массива"
  },
  "instruction": {
    "en": "The `doubleArray` function takes a two-dimensional array and a number.\n\nYou need to remove a given number of elements from each array from the beginning of the array and return the resulting two-dimensional array.\n\nThe number of subarrays is 2.\n\nAn example of a function with two subarrays:\n```javascript\ndoubleArray([[\"a\", \"a\", \"a\", \"a\", \"a\"], [\"b\", \"b\", \"b\", \"b\", \"b\"]], 2)\n```\n\nAn example of running a function:\n```javascript\ndoubleArray([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\", \"i\", \"j\"]], 2) // [[\"c\", \"d\", \"e\"], [\"h\", \"i\", \"j\"]]\ndoubleArray([[0, 0, 0, 0, 0], [1, 1]], 3) // [[0, 0], []]\n```",
    "ru": "Функция `doubleArray` принимает двумерный массив и число.\n\nНеобходимо удалить из каждого массива заданное количество элементов с начала массива и вернуть получившийся двумерный массив.\n\nКоличество подмассивов равно 2.\n\nПример задания функции c двумя подмассивами:\n```javascript\ndoubleArray([[\"a\", \"a\", \"a\", \"a\", \"a\"], [\"b\", \"b\", \"b\", \"b\", \"b\"]], 2)\n```\n\nПример запуска функции:\n```javascript\ndoubleArray([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\", \"i\", \"j\"]], 2) // [[\"c\", \"d\", \"e\"], [\"h\", \"i\", \"j\"]]\ndoubleArray([[0, 0, 0, 0, 0], [1, 1]], 3) // [[0, 0], []]\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function doubleArray(arr, num) {\n  const arr1 = arr[0];\n  arr1.splice(0, num)\n  const arr2 = arr[1];\n  arr2.splice(0, num)\n  return [arr1, arr2]\n}",
  "openTest": "it('Created function doubleArray', () => {\n  expect(doubleArray).to.be.a('function');\n});\n\nit(`doubleArray([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\", \"i\", \"j\"]], 2) should return [[\"c\", \"d\", \"e\"], [\"h\", \"i\", \"j\"]]`, () => {\n  expect(doubleArray([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\", \"i\", \"j\"]], 2)).to.eql([[\"c\", \"d\", \"e\"], [\"h\", \"i\", \"j\"]]);\n});\n\nit(`doubleArray([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\", \"i\", \"j\"]], 1) should return [[\"b\", \"c\", \"d\", \"e\"], [\"g\", \"h\", \"i\", \"j\"]]`, () => {\n  expect(doubleArray([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\", \"h\", \"i\", \"j\"]], 1)).to.eql([[\"b\", \"c\", \"d\", \"e\"], [\"g\", \"h\", \"i\", \"j\"]]);\n});\n\nit(`doubleArray([[\"a\"], []], 0) should return [[\"a\"], []]`, () => {\n  expect(doubleArray([[\"a\"], []], 0)).to.eql([[\"a\"], []]);\n});\n\nit(`doubleArray([[1, 2, 3, 4, 5], [0, '', 3, 5]], 3) should return [[4, 5], [5]]`, () => {\n  expect(doubleArray([[1, 2, 3, 4, 5], [0, '', 3, 5]], 3)).to.eql([[4, 5], [5]]);\n});\n\nit(`doubleArray([[0, 0, 0, 0, 0], [1, 1]], 3) should return [[0, 0], []]`, () => {\n  expect(doubleArray([[0, 0, 0, 0, 0], [1, 1]], 3)).to.eql([[0, 0], []]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}