{
  "_id": "6696c2ca763f0712c198e7f1",
  "content": {
    "ru": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/girl-delete.png)\n\nДобавлять элементы в массив мы можем с помощью двух методов : `push()` и `unshift()`.\n\n* `push()` – добавляет элементы в конец массива\n* `unshift()` – добавляет элементы в начало массива\n\nА вот удалять элементы из массива мы можем несколькими способами.\n\n### Метод `pop()`\n\nМетод `pop()` используется для удаления последнего элемента из массива и возврата его значения.\n\nСинтаксис метода `pop()`:\n\n```javascript\narr.pop()\n```\n\nМетод `pop()` не принимает никаких аргументов. Он удаляет последний элемент из массива и возвращает его значение. Если массив пустой, метод `pop()` вернет `undefined`.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.pop();\nconsole.log(friends); // ['Alice', 'Bill'], удалили 'Carson'\n\nconst el = friends.pop();\nconsole.log(friends); // ['Alice'], удалили 'Bill'\nconsole.log(el); // 'Bill'\n```\n\n### Метод `shift()`\n\nМетод `shift()` используется для удаления первого элемента из массива и возврата его значения.\n\nСинтаксис метода `shift()`:\n\n```javascript\narray.shift()\n```\n\nМетод `shift()` не принимает никаких аргументов. Он удаляет первый элемент из массива и возвращает его значение. Если массив пустой, метод `shift()` вернет `undefined`.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nconst el = friends.shift();\nconsole.log(friends); // ['Bill', 'Carson'], удалили 'Alice'\nconsole.log(el); // 'Alice'\n```\n\nМетоды `push()` и `pop()` используются для реализации `LIFO` (Last-In-First-Out) структуры данных, такой как стек.\n\nМетод `push()` добавляет элемент в конец массива и возвращает его длину, а метод `pop()` удаляет последний элемент из массива и возвращает его значение.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nconst el = friends.push('Alex');\nconsole.log(el); // 4, длина массива\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', 'Alex']\n\nconst el1 = friends.pop();\nconsole.log(el1); // 'Alex', элемент который мы удалили\nconsole.log(friends); // ['Alice', 'Bill', 'Carson']\n```\n\nМетоды `shift()` и `unshift()` используются для работы со структурой данных, называемой `FIFO` (First-In-First-Out) очередь. `FIFO` очередь (queue) - это структура данных, в которой элементы добавляются в конец и удаляются из начала, как в обычной очереди.\n\nМетод `unshift()` добавляет элемент в начало массива и возвращает его длину, а метод `shift()` удаляет первый элемент из массива и возвращает его значение.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nconst el = friends.unshift('Alex');\nconsole.log(el); // 4, длина массива\nconsole.log(friends); // ['Alex', 'Alice', 'Bill', 'Carson']\n\nconst el1 = friends.shift();\nconsole.log(el1); // 'Alex', элемент который мы удалили\nconsole.log(friends); // ['Alice', 'Bill', 'Carson']\n```\n\n### Метод `splice()`\n\nМетод `splice()` используется для удаления, замены или добавления элементов в массив.\n\nСинтаксис метода `splice()`:\n\n```javascript\narray.splice(start, deleteCount, item1, item2, ..., itemN)\n```\n\n* `start` – индекс, с которого начинается изменение массива\n* `deleteCount` (необязательный) – количество удаляемых элементов, начиная с индекса `start`. Если `deleteCount` параметр не указан, удаляются все элементы, начиная с индекса `start`. Если значение `deleteCount` равно 0, элементы не будут удалены.\n* `item1, item2, ..., itemN` (необязательные) – элементы, которые нужно добавить в массив, начиная с индекса `start`\n\nМетод `splice()` изменяет исходный массив и возвращает новый массив, содержащий удаленные элементы, если они были удалены.\n\nНачиная с первого индекса `(start = 1)` в массиве `friends` удалим все элементы:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.splice(1);\n\nconsole.log(friends); // ['Alice']\n```\n\nНачиная со второго индекса `(start = 2)` в массиве `friends` удалим все элементы:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson', 'KJ', 'Viktor'];\n\nfriends.splice(2);\n\nconsole.log(friends); // ['Alice', 'Bill']\n```\n\nТеперь, начиная с первого индекса удалим 3 элемента `(start = 1, deleteCount = 3)`:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson', 'KJ', 'Viktor'];\n\nfriends.splice(1, 3);\n\nconsole.log(friends); // ['Alice', 'Viktor'], 'Bill', 'Carson', 'KJ' - удалились\n```\n\nПовторим все то что мы делали в прошлом примере, но теперь на место удаленных элементов подставим `'Michael'`, то есть `(start = 1, deleteCount = 3, item1 = 'Michael')`. Также посмотрим что возвращает `splice()`:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson', 'KJ', 'Viktor'];\n\nconst delElem = friends.splice(1, 3, 'Michael');\n\nconsole.log(friends); // ['Alice', 'Michael', 'Viktor']\n                      // 'Bill', 'Carson', 'KJ' - удалились, \n                      // 'Michael' - поставили на их место\n\nconsole.log(delElem); // ['Bill', 'Carson', 'KJ'], возвращает массив удаленных элементов\n```\n\nПосмотрим что вернет `splice()` если мы не будем ничего удалять из массива `(start = 1, deleteCount = 0, item1 = 'Michael')`:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson', 'KJ', 'Viktor'];\n\nconst delElem = friends.splice(1, 0, 'Michael');\n\nconsole.log(friends); // ['Alice', 'Michael', 'Bill', 'Carson', 'KJ', 'Viktor']\n                      // 'Michael' - вставился в массив на индекс 1\n\nconsole.log(delElem); // [], ничего не удалили\n```\n",
    "en": "![](https://course-qa-basics.s3.us-west-1.amazonaws.com/girl-delete.png)\n\nWe can add elements to the array using two methods: `push()` and `unshift()`.\n\n* `push()` - adds elements to the end of the array\n* `unshift()` - adds elements to the beginning of the array\n\nBut we can remove elements from an array in several ways.\n\n### Method `pop()`\n\nThe `pop()` method is used to remove the last element from the array and return its value.\n\nThe syntax of the `pop()` method:\n\n```javascript\narr.pop()\n```\n\nThe `pop()` method takes no arguments. It removes the last element from the array and returns its value. If the array is empty, the `pop()` method will return `undefined`.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.pop();\nconsole.log(friends); // ['Alice', 'Bill'], deleted 'Carson'\n\nconst el = friends.pop();\nconsole.log(friends); // ['Alice'], deleted 'Bill'\nconsole.log(el); // 'Bill'\n```\n\n### Method `shift()`\n\nThe `shift()` method is used to remove the first element from the array and return its value.\n\nThe syntax of the `shift()` method:\n\n```javascript\narray.shift()\n```\n\nThe `shift()` method takes no arguments. It removes the first element from the array and returns its value. If the array is empty, the `shift()` method will return `undefined`.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nconst el = friends.shift();\nconsole.log(friends); // ['Bill', 'Carson'], deleted 'Alice'\nconsole.log(el); // 'Alice'\n```\n\nThe `push()` and `pop()` methods are used to implement a `LIFO` (Last-In-First-Out) data structure such as a stack.\n\nThe `push()` method adds an element to the end of the array and returns its length, and the `pop()` method removes the last element from the array and returns its value.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nconst el = friends.push('Alex');\nconsole.log(el); // 4, length of array\nconsole.log(friends); // ['Alice', 'Bill', 'Carson', 'Alex']\n\nconst el1 = friends.pop();\nconsole.log(el1); // 'Alex', the element we deleted\nconsole.log(friends); // ['Alice', 'Bill', 'Carson']\n```\n\nThe `shift()` and `unshift()` methods are used to handle a data structure called a `FIFO` (First-In-First-Out) queue. A `FIFO` queue is a data structure in which elements are added to the end and removed from the beginning like a normal queue.\n\nThe `unshift()` method adds an element to the beginning of the array and returns its length, and the `shift()` method removes the first element from the array and returns its value.\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nconst el = friends.unshift('Alex');\nconsole.log(el); // 4, length of array\nconsole.log(friends); // ['Alex', 'Alice', 'Bill', 'Carson']\n\nconst el1 = friends.shift();\nconsole.log(el1); // 'Alex', the element we deleted\nconsole.log(friends); // ['Alice', 'Bill', 'Carson']\n```\n\n### The `splice()` method\n\nThe `splice()` method is used to remove, replace or add elements to an array.\n\nThe syntax of the `splice()` method:\n\n```javascript\narray.splice(start, deleteCount, item1, item2, ..., itemN)\n```\n\n* `start` - index from which the change of the array begins\n* `deleteCount` (optional) - the number of items to be deleted starting from the `start` index. If `deleteCount` parameter is not specified, all items starting from the `start` index are deleted. If `deleteCount` value is 0, elements will not be deleted.\n* `item1, item2, ..., itemN` (optional) - items to be added to the array, starting from the `start` index\n\nThe `splice()` method changes the original array and returns a new array containing the deleted elements, if they were deleted.\n\nStarting with the first index `(start = 1)` in the `friends` array, delete all elements:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson'];\n\nfriends.splice(1);\n\nconsole.log(friends); // ['Alice']\n```\n\nStarting from the second index `(start = 2)` in the `friends` array, delete all elements:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson', 'KJ', 'Viktor'];\n\nfriends.splice(2);\n\nconsole.log(friends); // ['Alice', 'Bill']\n```\n\nNow, starting from the first index, delete 3 elements `(start = 1, deleteCount = 3)`:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson', 'KJ', 'Viktor'];\n\nfriends.splice(1, 3);\n\nconsole.log(friends); // ['Alice', 'Viktor'], 'Bill', 'Carson', 'KJ' - deleted\n```\n\nLet's repeat everything we did in the last example, but now we replace the deleted items with `'Michael'`, that is, `(start = 1, deleteCount = 3, item1 = 'Michael')`. Let's also see what `splice()` returns:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson', 'KJ', 'Viktor'];\n\nconst delElem = friends.splice(1, 3, 'Michael');\n\nconsole.log(friends); // ['Alice', 'Michael', 'Viktor']\n                      // 'Bill', 'Carson', 'KJ' - deleted, \n                      // 'Michael' - put in their place.\n\nconsole.log(delElem); // ['Bill', 'Carson', 'KJ'], returns the array of deleted elements\n```\n\nLet's see what `splice()` returns if we don't delete anything from the array `(start = 1, deleteCount = 0, item1 = 'Michael')`:\n\n```javascript\nconst friends = ['Alice', 'Bill', 'Carson', 'KJ', 'Viktor'];\n\nconst delElem = friends.splice(1, 0, 'Michael');\n\nconsole.log(friends); // ['Alice', 'Michael', 'Bill', 'Carson', 'KJ', 'Viktor']\n                      // 'Michael' - inserted into the array at index 1\n\nconsole.log(delElem); // [], nothing was deleted\n```\n",
    "es": "# Удаление элементов из массива language: es"
  },
  "video": {
    "ru": "https://youtu.be/GBtV7P740lw",
    "en": "",
    "es": ""
  }
}