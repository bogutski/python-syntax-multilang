{
  "_id": "6696c2ca763f0712c198ef04",
  "name": {
    "en": "Reverse the longest line",
    "ru": "Перевернуть самую длинную строку"
  },
  "instruction": {
    "en": "Write a `reverseBiggerString` function that takes an array of two strings.\n\nThe function should compare the lengths of the strings and reverse the one that is longer.\n\nIf the strings are the same length, then reverse the first string.\n\nThe function must return an array with `first string`, `second string` and `flipped string`.\n\n\nExamples of how to run the function:\n```js\nreverseBiggerString(['Hello', 'World']) // => [ 'Hello', 'World', 'olleH' ]\nreverseBiggerString(['blue', 'red']) // => [ 'blue', 'red', 'eulb' ]\nreverseBiggerString(['Hello', 'JS']) // => [ 'Hello', 'JS', 'olleH' ]\nreverseBiggerString(['', '']) // => [ '', '', '' ]\n```",
    "ru": "Напишите функцию `reverseBiggerString`, которая принимает массив из двух строк.\n\nФункция должна сравнить длину строк и перевернуть ту, которая длиннее.\n\nЕсли строки одинаковой длины, то переверните первую строку.\n\nФункция должна возвращать массив с `первой строкой`, `второй строкой` и `перевернутой строкой`.\n\n\nПримеры запуска функции:\n```js\nreverseBiggerString(['Hello', 'World']) // => [ 'Hello', 'World', 'olleH' ]\nreverseBiggerString(['blue', 'red'])    // => [ 'blue', 'red', 'eulb' ]\nreverseBiggerString(['Hello', 'JS'])    // => [ 'Hello', 'JS', 'olleH' ]\nreverseBiggerString(['', ''])           // => [ '', '', '' ]\n```"
  },
  "initialSolution": "function reverseBiggerString",
  "completedSolution": "function reverseBiggerString(arr){\n  let string;\n  let reversed = '';\n  if(arr[0].length < arr[1].length) string = arr[1]\n  else string = arr[0]\n  for(let i = string.length - 1; i >= 0; i--){\n    reversed += string[i];\n  }\n  arr.push(reversed)\n  return arr;\n}",
  "openTest": "it('Created function reverseBiggerString', () => {\n  expect(reverseBiggerString).to.be.a('function');\n});\n\nit(\"reverseBiggerString(['Hello', 'World']) should return ['Hello', 'World', 'olleH']\", () => {\n  expect(reverseBiggerString(['Hello', 'World'])).to.deep.equal(['Hello', 'World', 'olleH']);\n});\n\nit(\"reverseBiggerString(['blue', 'red']) should return ['blue', 'red', 'eulb']\", () => {\n  expect(reverseBiggerString(['blue', 'red'])).to.deep.equal(['blue', 'red', 'eulb']);\n});\n\nit(\"reverseBiggerString(['Hello', 'JS']) should return ['Hello', 'JS', 'olleH']\", () => {\n  expect(reverseBiggerString(['Hello', 'JS'])).to.deep.equal(['Hello', 'JS', 'olleH']);\n});\n\nit(\"reverseBiggerString(['123', '12345']) should return ['123', '12345', '54321']\", () => {\n  expect(reverseBiggerString(['123', '12345'])).to.deep.equal(['123', '12345', '54321']);\n});\n\nit(\"reverseBiggerString(['', '']) should return ['', '', '']\", () => {\n  expect(reverseBiggerString(['', ''])).to.deep.equal(['', '', '']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}