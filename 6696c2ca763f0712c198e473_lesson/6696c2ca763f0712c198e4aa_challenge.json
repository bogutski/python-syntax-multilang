{
  "_id": "6696c2ca763f0712c198e4aa",
  "name": {
    "en": "Format a contact in the directory",
    "ru": "Отформатировать контакт в записной книжке"
  },
  "instruction": {
    "en": "The length of the notebook line is 50 characters.\n\nWrite a function `formatContact` that takes two parameters: `name`, and `phone`.\n\nThe function should return a string that contains name and phone number separated by dots.\n\nAn example of running the function:\n```javascript\nformatContact(' John ', ' 12345678901 '); // 'JOHN............................+1 (234) 567 89-01'\n```\n\nSpaces at the beginning and end of both parameters must be removed.\nThe name must be in uppercase.\n\nTo format the phone, refer to each phone character by an index. Use string concatenation.\n\nThe returned string must be 50 characters long.\n\nThere must be dots between the name and the phone number.\n\nDetermine how many dots you need to put to make the string 50 characters long, based on the length of the name and phone number.",
    "ru": "Длина строки записной книжки равна 50 символам.\n\nНапишите функцию `formatContact`, которая принимает два параметра: `name`, и `phone`.\n\nФункция должна вернуть строку, которая будет содержать в себе имя и телефон, разделенные точками.\n\nПример запуска функции:\n```javascript\nformatContact('  John   ', '  12345678901 '); // 'JOHN............................+1 (234) 567 89-01'\n```\n\nПробелы в начале и конце обоих параметров должны быть удалены.\nИмя должно быть в верхнем регистре.\n\nДля форматирования телефона обращайтесь к каждому символу телефона по индексу. Используйте конкатенацию строк.\n\nВозвращаемая строка должна быть длиной 50 символов.\n\nМежду именем и телефоном должны быть точки.\n\nСколько точек нужно поставить, чтобы длина строки была 50 символов, определяйте на основе длины имени и телефона."
  },
  "initialSolution": "fun",
  "completedSolution": "function formatContact(name, phone) {\n  const n = name.trim().toUpperCase();\n  const p = phone.trim();\n  const formattedPhone = `+${p[0]} (${p[1]}${p[2]}${p[3]}) ${p[4]}${p[5]}${p[6]} ${p[7]}${p[8]}-${p[9]}${p[10]}`;\n  const dotCount = 50 - n.length - formattedPhone.length;\n  return n + '.'.repeat(dotCount) + formattedPhone;\n}",
  "openTest": "it('Created function formatContact', () => {\n  expect(formatContact).to.be.a('function');\n});\n\nit('formatContact(\"  John   \", \"  12345678901 \") should return \"JOHN............................+1 (234) 567 89-01\"', () => {\n  expect(formatContact('  John   ', '  12345678901 ')).to.be.equal(\n    'JOHN............................+1 (234) 567 89-01',\n  );\n});\n\nit('formatContact(\"  Samuel   \", \"  49876541232 \") should return \"SAMUEL..........................+4 (987) 654 12-32\"', () => {\n  expect(formatContact('  Samuel   ', '  49876541232 ')).to.be.equal(\n    'SAMUEL..........................+4 (987) 654 12-32',\n  );\n});\n\nit('formatContact(\"  Jane   \", \"  32345678901 \") should return \"JANE............................+3 (234) 567 89-01\"', () => {\n  expect(formatContact('  Jane   ', '  32345678901 ')).to.be.equal(\n    'JANE............................+3 (234) 567 89-01',\n  );\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}