{
  "_id": "6696c2cb763f0712c198f193",
  "name": {
    "en": "",
    "ru": "Проверка массива строк на симметричность"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `isArraySymmetrical`, которая принимает массив строк.\n\nСтроки передаются в разном регистре, для правильной проверки на симметричность, регистр не должен учитываться.\n\nДля этого, перед проверкой, преобразуйте строку к одному регистру.\n\nФункция должна вернуть `true`, если массив симметричный и `false` если не симметричный.\n\nЕсли массив пустой, то функция должна вернуть строку `Array is empty`.\n\n\nПримеры запуска функции:\n```javascript\nisArraySymmetrical(['a', 'B', 'C', 'b', 'A']);         // true\nisArraySymmetrical(['ONE', 'two', 'A', 'Two', 'ONE']); // true\nisArraySymmetrical(['FALSE', 'true', 'false']);        // true\nisArraySymmetrical(['a', 'B', 'c', 't', 'A']);         // false\nisArraySymmetrical([]);                                // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function isArraySymmetrical(arr){\n  if(!arr.length) return 'Array is empty';\n\n  for(let i = 0; i < arr.length / 2; i++){\n    if(arr[i].toLowerCase() !== arr[arr.length - 1 - i].toLowerCase()){\n      return false\n    }\n  }\n\n  return true;\n}",
  "openTest": "it('Created function isArraySymmetrical', () => {\n  expect(isArraySymmetrical).to.be.a('function');\n});\n\nit(\"Function isArraySymmetrical does not include 'reverse' method\", () => {\n  expect(isArraySymmetrical.toString()).to.not.include('reverse');\n});\n\nit(\"Function isArraySymmetrical does not include 'join' method\", () => {\n  expect(isArraySymmetrical.toString()).to.not.include('join');\n});\n\nit(\"isArraySymmetrical(['oNE', 'twO', 'three', 'Two', 'ONE']) should return true\", () => {\n  expect(isArraySymmetrical(['oNE', 'twO', 'three', 'Two', 'ONE'])).to.be.true;\n});\n\nit(\"isArraySymmetrical(['test', 'should', 'BE', 'FALSE']) should return false\", () => {\n  expect(isArraySymmetrical(['test', 'should', 'BE', 'FALSE'])).to.be.false;\n});\n\nit(\"isArraySymmetrical(['hELLO', 'JavaScript', 'WORLD', 'JAVASCRIPT', 'hello']) should return true\", () => {\n  expect(isArraySymmetrical(['hELLO', 'JavaScript', 'WORLD', 'JAVASCRIPT', 'hello'])).to.be.true;\n});\n\nit(\"isArraySymmetrical(['trUE', 'false', 'TRue']) should return true\", () => {\n  expect(isArraySymmetrical(['trUE', 'false', 'TRue'])).to.be.true;\n});\n\nit(\"isArraySymmetrical(['A', 'b', 'C', 'E', 'b', 'A']) should return false\", () => {\n  expect(isArraySymmetrical(['A', 'b', 'C', 'E', 'b', 'A'])).to.be.false;\n});\n\nit(\"isArraySymmetrical([]) should return 'Array is empty'\", () => {\n  expect(isArraySymmetrical([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}