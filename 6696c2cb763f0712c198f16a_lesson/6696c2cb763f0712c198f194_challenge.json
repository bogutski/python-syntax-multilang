{
  "_id": "6696c2cb763f0712c198f194",
  "name": {
    "en": "",
    "ru": "Нахождение чисел и проверка на симметричность"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `isArraySymmetrical`, которая принимает массив с разными типами данных.\n\nФункция должно найти все числа в массиве и записать их в новый массив.\n\nПроверка на симметричность должна происходить только по новому массиву, в котором хранятся числа.\n\n* Функция должна вернуть `true`, если массив симметричный и `false` если не симметричный.\n\n* Если массив пустой, то функция должна вернуть строку `Array is empty`.\n\n* Если в массиве нет чисел, то функция должна вернуть строку `There are no numbers in the array`.\n\n\nПримеры запуска функции:\n```javascript\nisArraySymmetrical(['a', 1, 2, 4, 'B', 3, 'C', 2, 'b', 1, 'A']); // => [1, 2, 4, 3, 2, 1] => false\nisArraySymmetrical([23, 55, 'a', 74, 'b', 55, 23]);              // => [23, 55, 74, 55, 23] => true\nisArraySymmetrical(['a', 'b', 'c', 'test', true, false]);        // There are no numbers in the array\nisArraySymmetrical([]);                                          // 'Array is empty'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function isArraySymmetrical(arr){\n  if(!arr.length) return 'Array is empty';\n  const newArr = [];\n\n  for(let i = 0; i < arr.length; i++){\n    if(typeof arr[i] === 'number') newArr.push(arr[i]);\n  }\n\n  if(!newArr.length) return 'There are no numbers in the array';\n\n  for(let i = 0; i < newArr.length / 2; i++){\n    if(newArr[i] !== newArr[newArr.length - 1 - i]) return false\n  }\n\n  return true;\n}",
  "openTest": "it('Created function isArraySymmetrical', () => {\n  expect(isArraySymmetrical).to.be.a('function');\n});\n\nit(\"Function isArraySymmetrical does not include 'reverse' method\", () => {\n  expect(isArraySymmetrical.toString()).to.not.include('reverse');\n});\n\nit(\"Function isArraySymmetrical does not include 'join' method\", () => {\n  expect(isArraySymmetrical.toString()).to.not.include('join');\n});\n\nit(\"isArraySymmetrical([23, 5, 'a', 74, 'b', 5, 23]) should return true\", () => {\n  expect(isArraySymmetrical([23, 5, 'a', 74, 'b', 5, 23])).to.be.true;\n});\n\nit(\"isArraySymmetrical([2, 1, 0, 'test', 2, 'should', 6, 'BE', 0, 'FALSE', 2]) should return false\", () => {\n  expect(isArraySymmetrical([2, 1, 0, 'test', 2, 'should', 6, 'BE', 0, 'FALSE', 2])).to.be.false;\n});\n\nit(\"isArraySymmetrical([999, '1', 'JavaScript', 123, 'WORLD', 123, 'JAVASCRIPT', '1', 999]) should return true\", () => {\n  expect(isArraySymmetrical([999, '1', 'JavaScript', 123, 'WORLD', 123, 'JAVASCRIPT', '1', 999])).to.be.true;\n});\n\nit(\"isArraySymmetrical([10, 20, 30, true,40, 50, 40, false, 30, 20, true, 10]) should return true\", () => {\n  expect(isArraySymmetrical([10, 20, 30, true,40, 50, 40, false, 30, 20, true, 10])).to.be.true;\n});\n\nit(\"isArraySymmetrical(['A', 'b', 'C', 'E', 'b', 'A']) should return 'There are no numbers in the array'\", () => {\n  expect(isArraySymmetrical(['A', 'b', 'C', 'E', 'b', 'A'])).to.equal('There are no numbers in the array');\n});\n\nit(\"isArraySymmetrical([]) should return 'Array is empty'\", () => {\n  expect(isArraySymmetrical([])).to.equal('Array is empty');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}