{
  "_id": "6696c2cb763f0712c198f486",
  "content": {
    "ru": "Метод `Array.prototype.forEach()` является одним из основных инструментов для итерации по массивам в JavaScript. \n\nЭтот метод позволяет выполнить заданную функцию один раз для каждого элемента в массиве, облегчая процесс обработки данных и внесения изменений.\n\n### Основы метода `forEach()`\n\nМетод `forEach()` вызывается для каждого элемента массива и принимает в качестве аргумента функцию обратного вызова (callback function), которая будет выполнена для каждого элемента. \n\nПрототип метода выглядит следующим образом:\n\n```javascript\narr.forEach(function callback(currentValue, index, array) {\n// ваш код\n});\n```\n\n* **currentValue**: Текущий обрабатываемый элемент в массиве.\n* **index**: Индекс текущего обрабатываемого элемента в массиве.\n* **array**: Массив, для которого был вызван метод forEach.\n\n\nПример использования:\n```javascript\nconst fruits = ['Apple', 'Banana', 'Cherry'];\n\nfruits.forEach((fruit, index, arr) => {\n    console.log(`${index + 1}: ${fruit}; Original array: ${arr}`);\n});\n// 1: Apple; Original array: Apple,Banana,Cherry\n// 2: Banana; Original array: Apple,Banana,Cherry\n// 3: Cherry; Original array: Apple,Banana,Cherry\n```\n\nРассмотрим еще один пример с изменением массива:\n```javascript\nconst fruits = ['Apple', 'Banana', 'Cherry'];\n\nfruits.forEach((fruit, index, arr) => {\n    arr[index] = 'Fruit - ' + fruit;\n});\n\nconsole.log(fruits); // [ 'Fruit - Apple', 'Fruit - Banana', 'Fruit - Cherry' ]\n```\n\nВ этом случае, для каждого элемента массива `fruits` выполняется операция конкатенации с добавлением строки, и результат этой операции присваивается обратно в массив по текущему индексу. \nЭто приводит к изменению исходного массива.\n\n\n### Преимущества и особенности\n\n* **Упрощение кода**: `forEach()` позволяет избежать использования традиционных циклов `for` или `for...of` для итерации по массиву, делая код более читабельным и лаконичным.\n* **Доступ к индексу**: В отличие от некоторых других методов обхода массива, `forEach` предоставляет доступ не только к самому элементу, но и к его индексу.\n* **Гибкость**: Метод `forEach` можно использовать для выполнения любых операций с элементами массива, включая изменение элементов, работу с внешними переменными и так далее.\n\n### Ограничения\n\n* **Не возвращает новый массив**: В отличие от методов `map`, `filter` и других, `forEach` не создает и не возвращает новый массив, а лишь выполняет операции над каждым элементом исходного массива.\n* **Остановка выполнения**: Не предоставляет простого способа немедленно прервать выполнение, как это можно сделать в циклах `for` или `while` с помощью инструкций `break` или `return`.\n\n\nМетод `Array.prototype.forEach()` является мощным инструментом для работы с массивами в JavaScript. Он позволяет эффективно и удобно обрабатывать каждый элемент массива, делая код более чистым и понятным.\n",
    "en": "# Array.prototype.forEach() – выполняет функцию для каждого элемента массива language: en",
    "es": "# Array.prototype.forEach() – выполняет функцию для каждого элемента массива language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}