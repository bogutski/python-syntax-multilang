{
  "_id": "6696c2cb763f0712c198f4bf",
  "name": {
    "en": "/*",
    "ru": "Суммирование определенных значений"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `sumSpecificValues`, которая принимает массив чисел и две функции-предиката.\n\nПервый предикат определяет, какие числа суммировать, второй — какие вычитать.\n\nИспользуйте метод `forEach` для итерации по массиву.\n\nФункция должна возвращать итоговую сумму после применения обоих предикатов.\n\n\nПример запуска функции:\n```javascript\nconst sumEven = n => n % 2 === 0;\nconst subtractOdd = n => n % 2 !== 0;\nsumSpecificValues([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], sumEven, subtractOdd);\n// 2 + 4 + 6 + 8 + 10 - 1 - 3 - 5 - 7 - 9 = Вывод: 5\n\n\nconst positive = n => n > 0;\nconst negative = n => n < 0;\nsumSpecificValues([10, 20, 30, -10, -20], positive, negative);\n// 10 + 20 + 30 - (-10) - (-20) = Вывод: 90\n```"
  },
  "initialSolution": "function sumSpecificValues(){\n\n}",
  "completedSolution": "function sumSpecificValues(arr, toSum, toSubtract) {\n  let res = 0;\n\n  arr.forEach(el => {\n    if(toSum(el)) res += el\n    else if(toSubtract(el)) res -= el\n  })\n\n  return res;\n}",
  "openTest": "it('Created function sumSpecificValues', () => {\n  expect(sumSpecificValues).to.be.a('function');\n});\n\nit('Function sumSpecificValues should include method forEach()', () => {\n  const res = sumSpecificValues.toString()\n  expect(res).to.include('.forEach(')\n});\n\nit(\"sumSpecificValues([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], sumEven, subtractOdd) should return 5\", () => {\n  const sumEven = n => n % 2 === 0;\n  const subtractOdd = n => n % 2 !== 0;\n  expect(sumSpecificValues([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], sumEven, subtractOdd)).to.equal(5);\n});\n\nit(\"sumSpecificValues([10, 20, 30, -10, -20], n => n > 0, n => n < 0) should return 90\", () => {\n  const positive = n => n > 0;\n  const negative = n => n < 0;\n  expect(sumSpecificValues([10, 20, 30, -10, -20], positive, negative)).to.equal(90);\n});\n\nit(\"sumSpecificValues([], n => n > 5, n => n < 5) should return 0\", () => {\n  const greaterThanFive = n => n > 5;\n  const lessThanFive = n => n < 5;\n  expect(sumSpecificValues([], greaterThanFive, lessThanFive)).to.equal(0);\n});\n\nit(\"sumSpecificValues([5, 7, 2, 9], n => n === 9, n => n === 2) should return 7\", () => {\n  const isNine = n => n === 9;\n  const isTwo = n => n === 2;\n  expect(sumSpecificValues([5, 7, 2, 9], isNine, isTwo)).to.equal(7);\n});\n\nit(\"sumSpecificValues([1, 3, 5], n => false, n => true) should return -9\", () => {\n  expect(sumSpecificValues([1, 3, 5], n => false, n => true)).to.equal(-9);\n});\n\nit(\"sumSpecificValues([0, 0, 0, 0], n => n === 0, n => false) should return 0\", () => {\n  expect(sumSpecificValues([0, 0, 0, 0], n => n === 0, n => false)).to.equal(0);\n});\n\nit(\"sumSpecificValues([-5, -4, -3, -2, -1], n => n < -3, n => n > -3) should return -6\", () => {\n  expect(sumSpecificValues([-5, -4, -3, -2, -1], n => n < -3, n => n > -3)).to.equal(-6);\n});\n\nit(\"sumSpecificValues([100, 200, 300], n => n <= 200, n => n > 200) should return 0\", () => {\n  expect(sumSpecificValues([100, 200, 300], n => n <= 200, n => n > 200)).to.equal(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}