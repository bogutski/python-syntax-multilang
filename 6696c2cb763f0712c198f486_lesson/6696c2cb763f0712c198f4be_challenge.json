{
  "_id": "6696c2cb763f0712c198f4be",
  "name": {
    "en": "/*",
    "ru": "Индексация элементов массива"
  },
  "instruction": {
    "en": "",
    "ru": "Создайте функцию `indexElements`, которая принимает массив произвольных значений и возвращает объект, где ключами будут значения массива, а значениями — их индексы в исходном массиве.\n\nИспользуйте метод `forEach` для реализации этой задачи.\n\n\nПример запуска функции:\n```javascript\nindexElements(['a', 'b', 'c', 'd', 'e']); // { a: 0, b: 1, c: 2, d: 3, e: 4 }\nindexElements(['apple', 'banana', 'apple', 'cherry']); // { apple: 2, banana: 1, cherry: 3 }\n```"
  },
  "initialSolution": "function indexElements(){\n\n}",
  "completedSolution": "function indexElements(arr) {\n  let res = {}\n  arr.forEach((el, index) => res[el] = index)\n\n  return res;\n}",
  "openTest": "it('Created function indexElements', () => {\n  expect(indexElements).to.be.a('function');\n});\n\nit('Function indexElements should include method forEach()', () => {\n  const res = indexElements.toString()\n  expect(res).to.include('.forEach(')\n});\n\nit(\"indexElements(['apple', 'banana', 'apple', 'cherry']) should return { 'apple': 2, 'banana': 1, 'cherry': 3 }\", () => {\n  expect(indexElements([\"apple\", \"banana\", \"apple\", \"cherry\"])).to.deep.equal({ \"apple\": 2, \"banana\": 1, \"cherry\": 3 });\n});\n\nit(\"indexElements(['a', 'b', 'c', 'd']) should return { 'a': 0, 'b': 1, 'c': 2, 'd': 3 }\", () => {\n  expect(indexElements([\"a\", \"b\", \"c\", \"d\"])).to.deep.equal({ \"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3 });\n});\n\nit(\"indexElements([]) should return {}\", () => {\n  expect(indexElements([])).to.deep.equal({});\n});\n\nit(\"indexElements(['hello', 'world']) should return { 'hello': 0, 'world': 1 }\", () => {\n  expect(indexElements([\"hello\", \"world\"])).to.deep.equal({ \"hello\": 0, \"world\": 1 });\n});\n\nit(\"indexElements([10, 20, 10, 30]) should return { '10': 2, '20': 1, '30': 3 }\", () => {\n  expect(indexElements([10, 20, 10, 30])).to.deep.equal({ \"10\": 2, \"20\": 1, \"30\": 3 });\n});\n\nit(\"indexElements(['same', 'same', 'same']) should return { 'same': 2 }\", () => {\n  expect(indexElements([\"same\", \"same\", \"same\"])).to.deep.equal({ \"same\": 2 });\n});\n\nit(\"indexElements(['one']) should return { 'one': 0 }\", () => {\n  expect(indexElements([\"one\"])).to.deep.equal({ \"one\": 0 });\n});\n\nit(\"indexElements(['first', 'second']) should return { 'first': 0, 'second': 1 }\", () => {\n  expect(indexElements([\"first\", \"second\"])).to.deep.equal({ \"first\": 0, \"second\": 1 });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}