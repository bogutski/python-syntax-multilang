{
  "_id": "6696c2cb763f0712c198f4bd",
  "name": {
    "en": "/*",
    "ru": "Отфильтровать и преобразовать массив"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `filterAndTransform`, которая принимает массив чисел, фильтрует из него все четные числа, а затем преобразует оставшиеся нечетные числа, умножая их на 2.\n\nИспользуйте метод `forEach` для реализации этой задачи и возвращайте новый массив с результатами преобразования нечетных чисел.\n\n\nПример запуска функции:\n```javascript\nfilterAndTransform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [ 2, 6, 10, 14, 18 ]\nfilterAndTransform([2, 40, 86, 100]); // []\nfilterAndTransform([-7, -1, 3, 9]); // [ -14, -2, 6, 18 ]\nfilterAndTransform([]); // []\n```"
  },
  "initialSolution": "function filterAndTransform(){\n\n}",
  "completedSolution": "function filterAndTransform(arr) {\n  let res = [];\n  arr.forEach(n => {\n    if(n % 2) res.push(n * 2)\n  })\n\n  return res;\n}",
  "openTest": "it('Created function filterAndTransform', () => {\n  expect(filterAndTransform).to.be.a('function');\n});\n\nit('Function filterAndTransform should include method forEach()', () => {\n  const res = filterAndTransform.toString()\n  expect(res).to.include('.forEach(')\n});\n\nit(\"filterAndTransform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) should return [2, 6, 10, 14, 18]\", () => {\n  expect(filterAndTransform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])).to.deep.equal([2, 6, 10, 14, 18]);\n});\n\nit(\"filterAndTransform([2, 4, 6, 8, 10]) should return []\", () => {\n  expect(filterAndTransform([2, 4, 6, 8, 10])).to.deep.equal([]);\n});\n\nit(\"filterAndTransform([11, 13, 15, 17, 19]) should return [22, 26, 30, 34, 38]\", () => {\n  expect(filterAndTransform([11, 13, 15, 17, 19])).to.deep.equal([22, 26, 30, 34, 38]);\n});\n\nit(\"filterAndTransform([]) should return []\", () => {\n  expect(filterAndTransform([])).to.deep.equal([]);\n});\n\nit(\"filterAndTransform([1, 3, 5, 7, 9, 11]) should return [2, 6, 10, 14, 18, 22]\", () => {\n  expect(filterAndTransform([1, 3, 5, 7, 9, 11])).to.deep.equal([2, 6, 10, 14, 18, 22]);\n});\n\nit(\"filterAndTransform([21, 22, 23, 24, 25]) should return [42, 46, 50]\", () => {\n  expect(filterAndTransform([21, 22, 23, 24, 25])).to.deep.equal([42, 46, 50]);\n});\n\nit(\"filterAndTransform([-1, -3, -5, -2, -4]) should return [-2, -6, -10]\", () => {\n  expect(filterAndTransform([-1, -3, -5, -2, -4])).to.deep.equal([-2, -6, -10]);\n});\n\nit(\"filterAndTransform([0, 33, 50, 99, 100]) should return [66, 198]\", () => {\n  expect(filterAndTransform([0, 33, 50, 99, 100])).to.deep.equal([66, 198]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}