{
  "_id": "6696c2cb763f0712c198f4c2",
  "name": {
    "en": "/*",
    "ru": "Объединение информации из массива объектов"
  },
  "instruction": {
    "en": "",
    "ru": "Разработайте функцию `mergeObjectInfo`, которая принимает массив объектов и возвращает строку, объединяющую информацию из всех объектов в формате \"ключ: значение\".\n\nКлючи и значения каждого объекта должны быть разделены двоеточием и пробелом, а пары ключ-значение — запятой и пробелом.\n\nОбратите внимание, пар \"ключ: значение\" может быть разное количество в объектах.\n\nИспользуйте метод `forEach` для итерации по массиву и объектам.\n\n\nПример запуска функции:\n```javascript\nmergeObjectInfo([{ animal: 'dog' }, { item: 'ball' }]) // \"animal: dog, item: ball\"\n\n\nconst users = [\n  { name: \"John\", age: 30 },\n  { name: \"Jane\", age: 25 },\n  { name: \"Doe\", age: 50 }\n];\nmergeObjectInfo(users); // \"name: John, age: 30, name: Jane, age: 25, name: Doe, age: 50\"\n```"
  },
  "initialSolution": "function mergeObjectInfo(){\n\n}",
  "completedSolution": "function mergeObjectInfo(arr) {\n  let str = ''\n\n  arr.forEach(obj => {\n    const parsedObj = Object.keys(obj)\n\n    parsedObj.forEach(key => {\n      if(!str) str += key + ': ' + obj[key]\n      else str += ', ' + key + ': ' + obj[key]\n    })\n  })\n\n  return str;\n}",
  "openTest": "it('Created function mergeObjectInfo', () => {\n  expect(mergeObjectInfo).to.be.a('function');\n});\n\nit('Function mergeObjectInfo should include method forEach()', () => {\n  const res = mergeObjectInfo.toString()\n  expect(res).to.include('.forEach(')\n});\n\nit(\"mergeObjectInfo([{ name: 'John', age: 30 }, { name: 'Jane', age: 25 }, { name: 'Doe', age: 50 }]) should return 'name: John, age: 30, name: Jane, age: 25, name: Doe, age: 50'\", () => {\n  expect(mergeObjectInfo([\n    { name: \"John\", age: 30 },\n    { name: \"Jane\", age: 25 },\n    { name: \"Doe\", age: 50 }\n  ])).to.equal(\"name: John, age: 30, name: Jane, age: 25, name: Doe, age: 50\");\n});\n\nit(\"mergeObjectInfo([]) should return an empty string\", () => {\n  expect(mergeObjectInfo([])).to.equal(\"\");\n});\n\nit(\"mergeObjectInfo([{ key1: 'value1' }, { key2: 'value2' }]) should return 'key1: value1, key2: value2'\", () => {\n  expect(mergeObjectInfo([{ key1: 'value1' }, { key2: 'value2' }])).to.equal(\"key1: value1, key2: value2\");\n});\n\nit(\"mergeObjectInfo([{ fruit: 'apple' }, { fruit: 'banana' }, { fruit: 'cherry' }]) should return 'fruit: apple, fruit: banana, fruit: cherry'\", () => {\n  expect(mergeObjectInfo([\n    { fruit: \"apple\" },\n    { fruit: \"banana\" },\n    { fruit: \"cherry\" }\n  ])).to.equal(\"fruit: apple, fruit: banana, fruit: cherry\");\n});\n\nit(\"mergeObjectInfo([{ animal: 'dog' }, { item: 'ball' }]) should return 'animal: dog, item: ball'\", () => {\n  expect(mergeObjectInfo([{ animal: 'dog' }, { item: 'ball' }])).to.equal(\"animal: dog, item: ball\");\n});\n\nit(\"mergeObjectInfo([{color: 'red'}, {color: 'green'}, {color: 'blue'}]) should return 'color: red, color: green, color: blue'\", () => {\n  expect(mergeObjectInfo([\n    { color: \"red\" },\n    { color: \"green\" },\n    { color: \"blue\" }\n  ])).to.equal(\"color: red, color: green, color: blue\");\n});\n\nit(\"mergeObjectInfo([{id: 1, status: 'active'}, {id: 2, status: 'inactive'}]) should return 'id: 1, status: active, id: 2, status: inactive'\", () => {\n  expect(mergeObjectInfo([\n    { id: 1, status: \"active\" },\n    { id: 2, status: \"inactive\" }\n  ])).to.equal(\"id: 1, status: active, id: 2, status: inactive\");\n});\n\nit(\"mergeObjectInfo([{product: 'book', quantity: 3}, {product: 'pen', quantity: 10}]) should return 'product: book, quantity: 3, product: pen, quantity: 10'\", () => {\n  expect(mergeObjectInfo([\n    { product: \"book\", quantity: 3 },\n    { product: \"pen\", quantity: 10 }\n  ])).to.equal(\"product: book, quantity: 3, product: pen, quantity: 10\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}