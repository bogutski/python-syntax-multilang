{
  "_id": "6696c2ca763f0712c198e390",
  "content": {
    "ru": "Свойство `length` возвращает целочисленное значение, представляющее количество символов в строке, то есть длину стоки. \n\nНапример, длина строки `\"Hello\"` равна 5.\n\nСинтаксис свойства `length` следующий: `str.length`, где `str` — строка.\n\nНайдем количество символов в строке `'Hello'`:\n\n```javascript\nconst str = 'Hello';\nconsole.log(str.length); // 5\n```\n\nЭтот же пример можно записать и так:\n\n```javascript\nconsole.log('Hello'.length); // 5\n```\n\nДля пустых строк свойство `length` возвращает `0`.\n\n```javascript\nconst str = '';\nconsole.log(str.length); // выведет 0, строка пустая\n```\n\nРассмотрим пример использования свойства `length` с переменной:\n\n```javascript\nconst greeting = 'Hello'\nconst strLength = greeting.length;\nconsole.log(strLength - 1); // 4\n```\n\nТеперь объявим переменную с именем `length` и присвоим ей `greeting.length`:\n\n```javascript\nconst greeting = 'Hello'\nconst length = greeting.length\n\nconsole.log(length);  // в консоль выведет 5, вывели переменную в которую записали длину строки \n```\n\nПеременная может быть названа `length`, так как она не перекрывает свойство `length` строки. Мы рекомендуем не называть переменные именами свойств, чтобы избежать путаницы. \n\n\nТакже попробуем вызвать свойство `length` для переменной `greeting` в которой была выполнена конкатенация:\n\n```javascript\nconst greeting = 'Hello ' + 'world'\nconst greetingLength = greeting.length\n\nconsole.log(greetingLength); // в консоль выведет 11. В переменной greeting хранится строка 'Hello world' \n```\n\nВ этом примере мы объявили переменную `greetingLength` и присвоили ей значение свойства `length` строки `greeting`. В консоль выведется `11`, так как в переменной `greeting` хранится строка `'Hello world'`, которая состоит из 11 символов.\n\nНазвание переменной `greetingLength` явно сообщает, что в ней хранится. Это хорошо.\n",
    "en": "The `length` property returns an integer value representing the number of characters in the string, that is, the length of the stack. \n\nFor example, the length of the string `\"Hello\"` is 5.\n\nThe syntax of the `length` property is as follows: `str.length`, where `str` is a string.\n\nFind the number of characters in the string `'Hello'`:\n\n```javascript\nconst str = 'Hello';\nconsole.log(str.length); // 5\n```\n\nThe same example can also be written like this:\n\n```javascript\nconsole.log('Hello'.length); // 5\n```\n\nFor empty strings the `length` property returns `0`.\n\n```javascript\nconst str = '';\nconsole.log(str.length); // print 0, the string is empty\n```\n\nConsider an example of using the `length` property with a variable:\n\n```javascript\nconst greeting = 'Hello'\nconst strLength = greeting.length;\nconsole.log(strLength - 1); // 4\n```\n\nNow declare a variable named `length` and assign it `greeting.length`:\n\n```javascript\nconst greeting = 'Hello'\nconst length = greeting.length\n\nconsole.log(length); // the console will print 5, the variable we wrote the length of the string into \n```\n\nA variable can be named `length` because it does not override the `length` property of the string. We recommend not naming variables with property names to avoid confusion. \n\n\nLet's also try to call the `length` property of the `greeting` variable in which the concatenation was performed:\n\n```javascript\nconst greeting = 'Hello ' + 'world'\nconst greetingLength = greeting.length\n\nconsole.log(greetingLength); // the console will print 11. The variable greeting stores the string 'Hello world' \n```\n\nIn this example, we declare a variable `greetingLength` and assign it the value of the `length` property of the string `greeting`. The console will print `11`, because the `greeting` variable stores the string `'Hello world'`, which consists of 11 characters.\n\nThe name of the `greetingLength` variable explicitly tells you what it stores. This is a good thing.\n",
    "es": "# Длина строки language: es"
  },
  "video": {
    "ru": "https://youtu.be/ebCvKZGkPw4",
    "en": "",
    "es": ""
  }
}