{
  "_id": "6696c2ca763f0712c198e3c2",
  "name": {
    "en": "The lengths of the lines increase sequentially",
    "ru": "Длины строк последовательно увеличиваются"
  },
  "instruction": {
    "en": "Write a function `stringSequence` that takes three strings and returns `true` if the strings are incremented by 1 in sequence, and `false` otherwise.\n\nConsider the example to understand the problem condition.\n\nExamples of running the function:\n```javascript\nstringSequence('', 'a', 'aa'); // true\nstringSequence('a', 'aa', 'aaa'); // true\nstringSequence('aaa', 'aaaa', 'aaaaa'); // true\n\nstringSequence('a', 'aa', 'aaaa'); // false\nstringSequence('a', 'aa', 'a'); // false\nstringSequence('a', 'a', 'a'); // false\n```",
    "ru": "Напишите функцию `stringSequence`, которая принимает три строки и возвращает `true`, если длины строк последовательно увеличиваются на 1, и `false` в противном случае.\n\nРассмотрите пример для понимания условия задачи.\n\nПримеры запуска функции:\n```javascript\nstringSequence('', 'a', 'aa'); // true\nstringSequence('a', 'aa', 'aaa'); // true\nstringSequence('aaa', 'aaaa', 'aaaaa'); // true\n\nstringSequence('a', 'aa', 'aaaa'); // false\nstringSequence('a', 'aa', 'a'); // false\nstringSequence('a', 'a', 'a'); // false\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function stringSequence(str1, str2, str3) {\n  return str1.length + 1 === str2.length && str2.length + 1 === str3.length;\n}",
  "openTest": "it('Created function stringSequence', () => {\n  expect(stringSequence).to.be.a('function');\n});\n\nit('stringSequence(\"\", \"a\", \"aa\") should return true', () => {\n  expect(stringSequence('', 'a', 'aa')).to.equal(true);\n});\n\nit('stringSequence(\"a\", \"aa\", \"aaa\") should return true', () => {\n  expect(stringSequence('a', 'aa', 'aaa')).to.equal(true);\n});\n\nit('stringSequence(\"aaa\", \"aaaa\", \"aaaaa\") should return true', () => {\n  expect(stringSequence('aaa', 'aaaa', 'aaaaa')).to.equal(true);\n});\n\nit('stringSequence(\"aaa\", \"aaaaqq\", \"aaaaaqq\") should return false', () => {\n  expect(stringSequence('aaa', 'aaaaqq', 'aaaaaqq')).to.equal(false);\n});\n\nit('stringSequence(\"a\", \"aa\", \"aaaaaqq\") should return false', () => {\n  expect(stringSequence('a', 'aa', 'aaaaaqq')).to.equal(false);\n});\n\nit('stringSequence(\"a\", \"aa\", \"aaaa\") should return false', () => {\n  expect(stringSequence('a', 'aa', 'aaaa')).to.equal(false);\n});\n\nit('stringSequence(\"a\", \"aa\", \"a\") should return false', () => {\n  expect(stringSequence('a', 'aa', 'a')).to.equal(false);\n});\n\nit('stringSequence(\"a\", \"a\", \"a\") should return false', () => {\n  expect(stringSequence('a', 'a', 'a')).to.equal(false);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}