{
  "_id": "6696c2ca763f0712c198e3bc",
  "name": {
    "en": "The longest line of two",
    "ru": "Самая длинная строка из двух"
  },
  "instruction": {
    "en": "Write a function `longestString` that takes two strings and returns the longest string.\n\nIf the lengths are equal, the first string is returned.\n\nExamples of running the function:\n```javascript\nlongestString('aaa', 'aa'); // 'aaa'\nlongestString('aaa', 'bbbb'); // 'bbbb'\nlongestString('aaa', 'qqq'); // 'aaa'\n```",
    "ru": "Напишите функцию `longestString`, которая принимает две строки и возвращает самую длинную из них.\n\nПри равенстве длин возвращается первая строка.\n\nПримеры запуска функции:\n```javascript\nlongestString('aaa', 'aa'); // 'aaa'\nlongestString('aaa', 'bbbb'); // 'bbbb'\nlongestString('aaa', 'qqq'); // 'aaa'\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function longestString(str1, str2) {\n  return str1.length >= str2.length ? str1 : str2;\n}",
  "openTest": "it('Created function longestString', () => {\n  expect(longestString).to.be.a('function');\n});\n\nit('longestString(\"aaa\", \"aa\") should return \"aaa\"', () => {\n  expect(longestString('aaa', 'aa')).to.equal('aaa');\n});\n\nit('longestString(\"aaa\", \"bbbb\") should return \"bbbb\"', () => {\n  expect(longestString('aaa', 'bbbb')).to.equal('bbbb');\n});\n\nit('longestString(\"aaa\", \"qqq\") should return \"aaa\"', () => {\n  expect(longestString('aaa', 'qqq')).to.equal('aaa');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}