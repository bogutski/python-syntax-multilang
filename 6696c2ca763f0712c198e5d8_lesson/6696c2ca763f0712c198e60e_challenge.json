{
  "_id": "6696c2ca763f0712c198e60e",
  "name": {
    "en": "Correct the values of the object properties",
    "ru": "Исправьте значения свойств объекта"
  },
  "instruction": {
    "en": "Write a function `fixValues` that takes an object with two properties:\n* `name` - should be a string\n* `age` - should be a number\n\nThe properties in the object are mixed up, for example:\n* {name: 1990, age: 'Mike'} - should be {name: 'Mike', age: 1990}\n\nThe function should return a new object with the corrected property values.\n\n\nExample function call:\n```javascript\nfixValues({name: 1978, age: 'Tim'}) // {name: 'Tim', age: 1978}\n```",
    "ru": "Напишите функцию `fixValues`, которая принимает объект с двумя свойствами:\n* `name` - должно быть строкой (string)\n* `age` - должно быть числом (number)\n\nВ объекте перепутаны значения свойств, например:\n* {name: 1990, age: 'Mike'} - должно быть {name: 'Mike', age: 1990}\n\nФункция должна возвращать новый объект с исправленными значениями свойств.\n\n\nПример запуска функции:\n```javascript\nfixValues({name: 1978, age: 'Tim'}) // {name: 'Tim', age: 1978}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function fixValues(student) {\n  let newObj = {};\n  if (typeof student.name === 'string') newObj.name = student.name;\n  if (typeof student.name === 'number') newObj.age = student.name;\n  if (typeof student.age === 'string') newObj.name = student.age;\n  if (typeof student.age === 'number') newObj.age = student.age;\n  return newObj;\n}",
  "openTest": "it('Created function fixValues', () => {\n  expect(fixValues).to.be.a('function');\n});\n\nit('fixValues({ name: 1999, age: \"Monica\" }) should return { name: \"Monica\", age: 1999 }', () => {\n  expect(fixValues({ name: 1999, age: \"Monica\" })).to.deep.equal({ name: \"Monica\", age: 1999 });\n});\n\nit('fixValues({ name: 2010, age: \"Jack\" }) should return { name: \"Jack\", age: 2010 }', () => {\n  expect(fixValues({ name: 2010, age: \"Jack\" })).to.deep.equal({ name: \"Jack\", age: 2010 });\n});\n\nit('fixValues({ name: \"John\", age: 2000 }) should return { name: \"John\", age: 2000 }', () => {\n  expect(fixValues({ name: \"John\", age: 2000 })).to.deep.equal({ name: \"John\", age: 2000 });\n});\n\nit('fixValues({ name: \"Ken\", age: 2011 }) should return { name: \"Ken\", age: 2011 }', () => {\n  expect(fixValues({ name: \"Ken\", age: 2011 })).to.deep.equal({ name: \"Ken\", age: 2011 });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}