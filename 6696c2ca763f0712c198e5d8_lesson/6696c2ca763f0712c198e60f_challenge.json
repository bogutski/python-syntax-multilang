{
  "_id": "6696c2ca763f0712c198e60f",
  "name": {
    "en": "Best Student",
    "ru": "Лучший студент"
  },
  "instruction": {
    "en": "Write a function `bestStudent` that takes four objects.\n\nThe first two objects, `student1` and `student2`, include the names of students\n\n* `{ firstName: 'John', lastName: 'Smith' }\n* `{ firstName: 'Mike', lastName: 'Williams' }`\n\nThe second two objects, `scoreOfStudent1` and `scoreOfStudent2`, include the students' earned scores:\n\n* `{ score1: 89, score2: 44 }`\n* `{ score1: 75, score2: 77 }`\n\nThe function should return a string with the full name of the student who, by the sum of their scores, has the higher score.\n* ``Student Mike Williams has the score of 152\n\nIf the scores are the same, return the following line:\n* `Both students have the same score of 100`, where 100 is the sum of one of the students' scores\n\nAn example of running the function:\n```javascript\nbestStudent(\n{ firstName: \"John\", lastName: \"Smith\" },\n{ firstName: \"Mike\", lastName: \"Williams\" },\n{ score1: 25, score2: 35 },\n{ score1: 40, score2: 30 }\n); // Student Mike Williams has the score of 70\n```",
    "ru": "Напишите функцию `bestStudent`, которая принимает четыре объекта.\n\nПервые два объекта: `student1` и `student2`, включают имена студентов\n\n* `{ firstName: 'John', lastName: 'Smith' }`\n* `{ firstName: 'Mike', lastName: 'Williams' }`\n\nВторые два объекта: `scoreOfStudent1` и `scoreOfStudent2`, включают заработанные баллы студентов:\n\n* `{ score1: 89, score2: 44 }`\n* `{ score1: 75, score2: 77 }`\n\nФункция должна вернуть строку с полным именем студента, который, по сумме своих баллов, набрал большее количество.\n* `Student Mike Williams has the score of 152`\n\nЕсли количество баллов одинаковое, вернуть следующую строку:\n* `Both students have the same score of 100`, где 100 - сумма баллов одного из студентов\n\nПример запуска функции:\n```javascript\nbestStudent(\n  { firstName: \"John\", lastName: \"Smith\" },\n  { firstName: \"Mike\", lastName: \"Williams\" },\n  { score1: 25, score2: 35 },\n  { score1: 40, score2: 30 }\n);  // Student Mike Williams has the score of 70\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function bestStudent(student1, student2, scoreOfStudent1, scoreOfStudent2) {\n  // student1 { firstName: 'John', lastName: 'Smith'},\n  // student2 { firstName: 'Mike', lastName: 'Williams' },\n  // scoreOfStudent1 { score1: 89, score2: 44 },\n  // scoreOfStudent2 { score1: 75, score2: 77 }\n  const st1 = scoreOfStudent1.score1 + scoreOfStudent1.score2;\n  const st2 = scoreOfStudent2.score1 + scoreOfStudent2.score2;\n  if (st1 > st2)\n    return `Student ${student1.firstName} ${student1.lastName} with the score of ${st1}`;\n  else if (st2 > st1)\n    return `Student ${student2.firstName} ${student2.lastName} has the score of ${st2}`;\n  else return `Both students have the same score of ${st1}`;\n}",
  "openTest": "it('Created function example', () => {\n  expect(bestStudent).to.be.a('function');\n});\n\nit(\n  'bestStudent({ firstName: \"John\", lastName: \"Smith\"}, { firstName: \"Mike\", lastName: \"Williams\" }, {score1: 89,' +\n    ' score2: 44 }, { score1: 75, score2: 77 }} return Student Mike Williams has the score of 152',\n  () => {\n    expect(\n      bestStudent(\n        { firstName: 'John', lastName: 'Smith' },\n        { firstName: 'Mike', lastName: 'Williams' },\n        { score1: 89, score2: 44 },\n        { score1: 75, score2: 77 },\n      ),\n    ).eql('Student Mike Williams has the score of 152');\n  },\n);\n\nit(\n  'bestStudent({ firstName: \"Jessy\", lastName: \"Jones\"}, { firstName: \"Bob\", lastName: \"Brown\" }, {score1: 34, score2: 66 },' +\n    ' { score1: 56, score2: 71 }} return Student Mike Williams has the score of 152',\n  () => {\n    expect(\n      bestStudent(\n        { firstName: 'Jessy', lastName: 'Jones' },\n        { firstName: 'Bob', lastName: 'Brown' },\n        { score1: 34, score2: 66 },\n        { score1: 56, score2: 71 },\n      ),\n    ).eql('Student Bob Brown has the score of 127');\n  },\n);\n\nit(\n  'bestStudent({ firstName: \"Robert\", lastName: \"Davis\"}, { firstName: \"Thomas\", lastName: \"Garcia\" }, {score1: 40,' +\n    ' score2: 80 }, { score1: 60, score2: 60 }} return Both students have the same score of 120',\n  () => {\n    expect(\n      bestStudent(\n        { firstName: 'Robert', lastName: 'Davis' },\n        { firstName: 'Thomas', lastName: 'Garcia' },\n        { score1: 40, score2: 80 },\n        { score1: 60, score2: 60 },\n      ),\n    ).eql('Both students have the same score of 120');\n  },\n);",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}