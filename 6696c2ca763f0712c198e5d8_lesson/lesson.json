{
  "_id": "6696c2ca763f0712c198e5d8",
  "content": {
    "ru": "В объект можно добавлять новые свойства.\n\nДля добавления свойства объекта в JavaScript используется синтаксис точки или квадратных скобок. Давайте рассмотрим оба варианта более подробно.\n\n**Добавление свойства с помощью точки:**\n\n```js\nconst car = {\n  make: \"Toyota\",\n  model: \"Prius\",\n};\n\ncar.year = \"2023\";\nconsole.log(car); // Выведет: { make: \"Toyota\", model: \"Prius\", year: \"2023\" }\n\ncar.year = \"2027\";\nconsole.log(car); // Выведет: { make: \"Toyota\", model: \"Prius\", year: \"2027\" }\n```\n\nВ этом примере мы добавили новое свойство `year` к объекту `car` с помощью точки. Перезаписывать свойство можно сколько угодно раз.\n\n**Добавление свойства с помощью квадратных скобок:**\n\n```js\nconst car = {\n  make: \"Toyota\",\n  model: \"Prius\",\n};\n\ncar[\"year-year\"] = \"1234\";\n\nconsole.log(car); // Выведет: { make: \"Toyota\", model: \"Prius\", year-year: \"1234\" }\nconsole.log(car[\"year-year\"]); // Выведет: 1234\n```\n\nВ этом примере мы добавили новое свойство `year-year` к объекту `car` с помощью квадратных скобок. Мы также можем получить доступ к этому свойству, используя квадратные скобки и строку в качестве имени свойства.\n\nРассмотрим еще один пример:\n\n```js\nconst car = {\n  make: \"Toyota\",\n  model: \"Prius\",\n};\n\n\ncar[\"year year\"] = \"1234\";\n\nconsole.log(car); // Выведет: { make: \"Toyota\", model: \"Prius\", year year: \"1234\" }\nconsole.log(car[\"year-year\"]); // Выведет: 1234\n```\n\nОба метода дают одинаковый результат, но использование точечной нотации предпочтительнее, если имя свойства является строкой без символов. Если имя свойства содержит пробелы, цифры или другие специальные символы, то необходимо использовать квадратные скобки.\n\nДалее напишем функцию, которая возвращает нам 'склеенный' объект, состоящий из двух разных объектов – `part1` и `part2`.\n\n```js\nfunction mergeProperties(part1, part2) {\n  return {\n    make: part1.make,\n    model: part1.model,\n    year: part2.year,\n    price: part2.price,\n  };\n}\n\nconsole.log(\n  mergeProperties(\n    { make: \"Toyota\", model: \"Sienna\" },\n    { year: 2078, price: 789987 }\n  )\n); // Выведет: { make: \"Toyota\", model: \"Sienna\", year: 2078, price: 789987 }\n```\n",
    "en": "New properties can be added to the object.\n\nJavaScript uses either the point or square bracket syntax to add an object property. Let's take a closer look at both.\n\n**Adding a property with a point:**\n\n```js\nconst car = {\n  make: \"Toyota,\n  model: \"Prius\",\n};\n\ncar.year = \"2023\";\nconsole.log(car); // Output: { make: \"Toyota\", model: \"Prius\", year: \"2023\" }\n\ncar.year = \"2027\";\nconsole.log(car); // Output: { make: \"Toyota\", model: \"Prius\", year: \"2027\" }\n```\n\nIn this example we have added a new property `year` to the `car` object with a dot. You can overwrite the property as many times as you want.\n\n**Adding a property using square brackets:**\n\n```js\nconst car = {\n  make: \"Toyota,\n  model: \"Prius\",\n};\n\ncar[\"year-year\"] = \"1234\";\n\nconsole.log(car); // output: { make: \"Toyota\", model: \"Prius\", year-year: \"1234\" }\nconsole.log(car[\"year-year\"]); // output: 1234\n```\n\nIn this example we have added a new `year-year` property to the `car` object using square brackets. We can also access this property using square brackets and a string as the property name.\n\nLet's look at another example:\n\n```js\nconst car = {\n  make: \"Toyota,\n  model: \"Prius\",\n};\n\n\ncar[\"year year\"] = \"1234\";\n\nconsole.log(car); // output: { make: \"Toyota\", model: \"Prius\", year year: \"1234\" }\nconsole.log(car[\"year-year\"]); // output: 1234\n```\n\nBoth methods give the same result, but using dot notation is preferable if the property name is a characterless string. If the property name contains spaces, numbers, or other special characters, you must use square brackets.\n\nNext, write a function that returns to us a 'glued' object consisting of two different objects, `part1` and `part2`.\n\n```js\nfunction mergeProperties(part1, part2) {\n  return {\n    make: part1.make,\n    model: part1.model,\n    year: part2.year,\n    price: part2.price,\n  };\n}\n\nconsole.log(\n  mergeProperties(\n    { make: \"Toyota\", model: \"Sienna\" },\n    { year: 2078, price: 789987 }\n  )\n); // output: { make: \"Toyota\", model: \"Sienna\", year: 2078, price: 789987 }\n```\n",
    "es": "# Добавление свойств объекта language: es"
  },
  "video": {
    "ru": "https://youtu.be/TM3EV71H6h4",
    "en": "",
    "es": ""
  }
}