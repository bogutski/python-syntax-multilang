{
  "_id": "6696c2ca763f0712c198e60a",
  "name": {
    "en": "Checking data types and adding properties to an object",
    "ru": "Проверка типов данных и добавление свойств в объект"
  },
  "instruction": {
    "en": "Write a function `addItems` that takes four parameters:\n* `firstName` - the data type must be `string`,\n* `lastName` - the data type must be `string`,\n* `age` - the data type must be `number`,\n* `isStudent` - the data type must be `boolean`.\n\n\nThe function must return a new object, in which the properties should be added if they match the data types,\nspecified above.\nIf any of the properties do not match the data type, they should not be added to the object.\nIf all properties do not match the data type, the function should return an empty object.\n\n\nAn example of running a function:\n```javascript\naddItems('John', 'Doe', 25, true); // { firstName: \"John\", lastName: \"Doe\", age: 25, isStudent: true }\naddItems(undefined, undefined, null, null); // {}\naddItems('Angel', 'Fisk', null, null); // { firstName: \"Angel\", lastName: \"Fisk\" }\n```\n\nSimilar example:\n```javascript\nfunction addItems(name, year, isOnSale) {\nconst obj = {};\nif (typeof name === 'string') obj.name = name;\nif (typeof year === 'number') obj.year = year;\nif (typeof isOnSale === 'boolean') obj.isOnSale = isOnSale;\nreturn obj;\n}\n```",
    "ru": "Напишите функцию `addItems`, которая принимает четыре параметра:\n* `firstName` - тип данных должен быть `string`,\n* `lastName` - тип данных должен быть `string`,\n* `age` - тип данных должен быть `number`,\n* `isStudent` - тип данных должен быть `boolean`.\n\n\nФункция должна вернуть новый объект, в который должны будут добавлены свойства, если они соответствуют типам данных,\nуказанным выше.\nЕсли какое-либо из свойств не соответствует типу данных, то оно не должно быть добавлено в объект.\nЕсли все свойства не соответствуют типу данных, то функция должна вернуть пустой объект.\n\n\nПример запуска функции:\n```javascript\naddItems('John', 'Doe', 25, true); // { firstName: \"John\", lastName: \"Doe\", age: 25, isStudent: true }\naddItems(undefined, undefined, null, null); // {}\naddItems('Angel', 'Fisk', null, null); // { firstName: \"Angel\", lastName: \"Fisk\" }\n```\n\nАналогичный пример:\n```javascript\nfunction addItems(name, year, isOnSale) {\n  const obj = {};\n  if (typeof name === 'string') obj.name = name;\n  if (typeof year === 'number') obj.year = year;\n  if (typeof isOnSale === 'boolean') obj.isOnSale = isOnSale;\n  return obj;\n}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function addItems(firstName, lastName, age, isStudent) {\n  const obj = {};\n  if (typeof firstName === 'string') obj.firstName = firstName;\n  if (typeof lastName === 'string') obj.lastName = lastName;\n  if (typeof age === 'number') obj.age = age;\n  if (typeof isStudent === 'boolean') obj.isStudent = isStudent;\n  return obj;\n}",
  "openTest": "it('Created function addItems', () => {\n  expect(addItems).to.be.a('function');\n});\n\nit('Function addItems returns object', () => {\n  expect(addItems('John', 'Doe', 25, true)).to.be.a('object');\n});\n\nit('addItems(\"John\", \"Doe\", 25, true) returns { firstName: \"John\", lastName: \"Doe\", age: 25, isStudent: true }', () => {\n  expect(addItems('John', 'Doe', 25, true)).to.eql({\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 25,\n    isStudent: true,\n  });\n});\n\nit('addItems(undefined, undefined, null, null) returns {}', () => {\n  expect(addItems(undefined, undefined, null, null)).to.eql({});\n});\n\nit('addItems(\"Jack\", \"Smith\", 55, false) returns { firstName: \"Jack\", lastName: \"Smith\", age: 55, isStudent: false }', () => {\n  expect(addItems(undefined, 'Smith', true, false)).to.eql({\n    lastName: 'Smith',\n    isStudent: false,\n  });\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}