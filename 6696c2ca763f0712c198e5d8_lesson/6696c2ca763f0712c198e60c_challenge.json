{
  "_id": "6696c2ca763f0712c198e60c",
  "name": {
    "en": "Transaction with a bank account",
    "ru": "Транзакция с банковским счетом"
  },
  "instruction": {
    "en": "Write a `bankTransaction` function that takes two objects.\n\nThe first object is the customer account object, which contains the following properties:\n* `name` - account holder name (string)\n* `balance` - account balance (number)\n\nThe second is a transaction object that contains the following properties:\n* `type` - transaction type (string): `deposit` or `withdrawal`\n* `amount` - transaction amount (number)\n\nIf the transaction type is `deposit`, then the function must add the transaction amount to the balance and return a string like:\n* \"Success: John Smith has a balance of 7000\".\n\nIf the transaction type is `withdrawal` and the transaction amount is less than or equal to the balance, then the function should subtract the amount\ntransactions from the balance and return a string like:\n* \"Success: John Smith has a balance of 3000\".\n\nIf the transaction type is `withdrawal` and the transaction amount is greater than the balance, then the function should return a string like:\n* \"Error: John Smith has insufficient funds\".\n\n\nFunction launch example:\n```javascript\nbankTransaction({ name: 'John Smith', balance: 5000 }, { type: 'deposit', amount: 2000 });\n// \"Success: John Smith has a balance of 7000\"\n\nbankTransaction({ name: 'John Smith', balance: 5000 }, { type: 'withdrawal', amount: 2000 });\n// \"Success: John Smith has a balance of 3000\"\n\nbankTransaction({ name: 'John Smith', balance: 5000 }, { type: 'withdrawal', amount: 6000 });\n// \"Error: John Smith has insufficient funds\"\n```",
    "ru": "Напишите функцию `bankTransaction`, которая принимает два объекта: `client` и `transaction`.\n\nПервый объект - это объект счета клиента, который содержит следующие свойства:\n* `name` - имя владельца счета (string)\n* `balance` - баланс счета (number)\n\nВторой - это объект транзакции, который содержит следующие свойства:\n* `type` - тип транзакции (string): `deposit` или `withdrawal`\n* `amount` - сумма транзакции (number)\n\nЕсли тип транзакции `deposit`, то функция должна добавить сумму транзакции к балансу и вернуть строку вида:\n* `Success: John Smith has a balance of 7000`.\n\nЕсли тип транзакции `withdrawal` и сумма транзакции меньше или равна балансу, то функция должна вычесть сумму\n транзакции из баланса и вернуть строку вида:\n* `Success: John Smith has a balance of 3000`.\n\nЕсли тип транзакции `withdrawal` и сумма транзакции больше баланса, то функция должна вернуть строку вида:\n* `Error: John Smith has insufficient funds`.\n\n\nПример запуска функции:\n```javascript\nbankTransaction({ name: 'John Smith', balance: 5000 }, { type: 'deposit', amount: 2000 });\n// \"Success: John Smith has a balance of 7000\"\n\nbankTransaction({ name: 'John Smith', balance: 5000 }, { type: 'withdrawal', amount: 2000 });\n// \"Success: John Smith has a balance of 3000\"\n\nbankTransaction({ name: 'John Smith', balance: 5000 }, { type: 'withdrawal', amount: 6000 });\n// \"Error: John Smith has insufficient funds\"\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function bankTransaction(client, transaction) {\n  if (transaction.type === 'deposit') {\n    return `Success: ${client.name} has a balance of ${client.balance + transaction.amount}`;\n  } else if (transaction.type === 'withdrawal' && transaction.amount > client.balance) {\n    return `Error: ${client.name} has insufficient funds`;\n  } else {\n    return `Success: ${client.name} has a balance of ${client.balance - transaction.amount}`;\n  }\n}",
  "openTest": "it('Created function bankTransaction', () => {\n  expect(bankTransaction).to.be.a('function');\n});\n\nit('bankTransaction({ name: \"John Smith\", balance: 5000 }, { type: \"deposit\", amount: 2000 }) should return \"Success: John Smith has a balance of 7000\"', () => {\n  expect(bankTransaction(\n      { name: 'John Smith', balance: 5000 },\n      { type: 'deposit', amount: 2000 }))\n    .to.be.equal('Success: John Smith has a balance of 7000');\n});\n\nit('bankTransaction({ name: \"Mike Gran\", balance: 2000000 }, { type: \"deposit\", amount: 500155 }) should return \"Success: Mike Gran has a balance of 2500155\"', () => {\n  expect(bankTransaction(\n      { name: 'Mike Gran', balance: 2000000 },\n      { type: 'deposit', amount: 500155 }))\n    .to.be.equal('Success: Mike Gran has a balance of 2500155');\n});\n\nit('bankTransaction({ name: \"John Smith\", balance: 5000 }, { type: \"withdrawal\", amount: 2000 }) should return \"Success: John Smith has a balance of 3000\"', () => {\n  expect(bankTransaction(\n      { name: 'John Smith', balance: 5000 },\n      { type: 'withdrawal', amount: 2000 }))\n    .to.be.equal('Success: John Smith has a balance of 3000');\n});\n\nit('bankTransaction({ name: \"Mike Gran\", balance: 800000 }, { type: \"withdrawal\", amount: 54800 }) should return \"Success: Mike Gran has a balance of 745200\"', () => {\n  expect(bankTransaction(\n      { name: 'Mike Gran', balance: 800000 },\n      { type: 'withdrawal', amount: 54800 }))\n    .to.be.equal('Success: Mike Gran has a balance of 745200');\n});\n\nit('bankTransaction({ name: \"John Smith\", balance: 5000 }, { type: \"withdrawal\", amount: 6000 }) should return \"Error: John Smith has insufficient funds\"', () => {\n  expect(bankTransaction(\n      { name: 'John Smith', balance: 5000 },\n      { type: 'withdrawal', amount: 6000 }))\n    .to.be.equal('Error: John Smith has insufficient funds');\n});\n\nit('bankTransaction({ name: \"John Smith\", balance: 5000 }, { type: \"withdrawal\", amount: 6000 }) should return \"Error: John Smith has insufficient funds\"', () => {\n  expect(bankTransaction(\n      { name: 'John Smith', balance: 5000 },\n      { type: 'withdrawal', amount: 6000 }))\n    .to.be.equal('Error: John Smith has insufficient funds');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}