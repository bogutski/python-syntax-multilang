{
  "_id": "6696c2ca763f0712c198dde8",
  "video": {
    "ru": "https://youtu.be/nRl-fn-2ILY",
    "en": "",
    "es": ""
  },
  "content": {
    "ru": "Операторы бывают разными! Рассмотрим самые простые из них. Кажется, что мы их уже очень хорошо знаем, но в JavaScript обычный оператор “+” не только складывает значения!\n\n**Унарным** называется оператор, который применяется к одному операнду. Например, оператор унарный минус `-` меняет знак числа на противоположный:\n```\nlet x = 1;\nx = -x;\nconsole.log(x); // -1\n```\n**Бинарным** называется оператор, который применяется к двум операндам.\n```\nlet sum = a + b;\n```\n##### Сложение строк, бинарный `+`\n\nОбычно при помощи плюса `+` складывают числа. \nОперация конкатенации (слияния) строк также обозначается с помощью оператора `+`:\n```\nlet s = \"my\" + \"string\";\nconsole.log(s); // \"mystring\"\n```\nЕсли хотя бы один операнд является строкой, то второй будет также преобразован к строке. Например:\n```\nconsole.log('1' + 2); // \"12\"\n```\nСложение и преобразование строк – это особенность бинарного плюса `+`. Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.\n```\nconsole.log(2 - '1');   // 1\nconsole.log('6' / '2'); // 3\n```\n##### Преобразование к числу, унарный плюс `+`\n\nПлюс `+` существует в двух формах: бинарной и унарной. Унарный плюс `+` преобразует нечисловые значения в число.\n```\nconsole.log(+true);  // 1\nconsole.log(+'2');   // 2\n```\nБинарный плюс выполнит слияние строк:\n```\nlet apples = '2';\nlet oranges = '3';\nconsole.log(apples + oranges);   // \"23\"\nconsole.log(+apples + +oranges); // 5\n```\n**Инкремент ++** увеличивает на 1:\n```\nlet counter = 2;\ncounter++;            // counter = counter + 1\nconsole.log(counter); // 3\n```\n**Декремент --** уменьшает на 1:\n```\nlet counter = 2;\ncounter--;             // counter = counter - 1\nconsole.log(counter); // 1\n```\n**Постфиксная форма** –  оператор идёт после переменной:  counter++.\n**Префиксная форма** – оператор идёт перед переменной:  ++counter.\n```\nlet counter = 1;\nlet a = counter++; \nconsole.log(a); // 1\n```\n##### Сокращённая арифметика с присваиванием\n\nЧасто нужно применить оператор к переменной и сохранить результат в ней же. Например:\n```\nlet n = 2;\nn = n + 5;\nn = n * 2;\n```\nЭту запись можно укоротить при помощи совмещённых операторов += и *=:\n```\nlet n = 2;\nn += 5;          //  n = n + 5\nn *= 2;          //  n = n * 2\nconsole.log(n);  // 14\n```\n",
    "en": "Operators come in many forms! Let's look at the simplest ones. It seems like we already know them very well, but in JavaScript the usual \"+\" operator does more than just add values!\n\n**Unary** is an operator that applies to a single operand. For example, the unary minus `-` operator reverses the sign of a number:\n```\nlet x = 1;\nx = -x;\nconsole.log(x); // -1\n```\n**Binary** is an operator that applies to two operands.\n```\nlet sum = a + b;\n```\n##### String addition, binary `+`\n\nUsually the plus `+` is used to add numbers. \nThe concatenation (merge) operation is also indicated with the `+` operator:\n```\nlet s = \"my\" + \"string\";\nconsole.log(s); // \"mystring\"\n```\nIf at least one operand is a string, the second operand will also be converted to a string. For example:\n```\nconsole.log('1' + 2); // \"12\"\n```\nString addition and conversion is a feature of the binary plus `+`. Other arithmetic operators work only with numbers and always convert operands to numbers.\n```\nconsole.log(2 - '1'); // 1\nconsole.log('6' / '2'); // 3\n```\n##### Conversion to a number, unary plus `+`\n\nPlus `+` exists in two forms: binary and unary. Unary plus `+` converts nonnumeric values to numbers.\n```\nconsole.log(+true); // 1\nconsole.log(+'2'); // 2\n```\nBinary Plus will perform a string merge:\n```\nlet apples = '2';\nlet oranges = '3';\nconsole.log(apples + oranges); // \"23\"\nconsole.log(+apples + +oranges); // 5\n```\n** Increment ++** increases by 1:\n```\nlet counter = 2;\ncounter++; // counter = counter + 1\nconsole.log(counter); // 3\n```\n**Decrement --** reduces by 1:\n```\nlet counter = 2;\ncounter--;             // counter = counter - 1\nconsole.log(counter); // 1\n```\n**Postfix form** - the operator comes after the variable: counter++.\n**Prefix form** - the operator goes before the variable: ++counter.\n```\nlet counter = 1;\nlet a = counter++; \nconsole.log(a); // 1\n```\n##### Reduced arithmetic with assignment\n\nOften it is necessary to apply a statement to a variable and store the result in the same variable. For example:\n```\nlet n = 2;\nn = n + 5;\nn = n * 2;\n```\nThis entry can be shortened using the combined operators += and *=:\n```\nlet n = 2;\nn += 5;          //  n = n + 5\nn *= 2;          //  n = n * 2\nconsole.log(n);  // 14\n```\n",
    "es": "\n"
  }
}