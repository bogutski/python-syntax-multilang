{
  "_id": "6696c2ca763f0712c198de57",
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  },
  "content": {
    "ru": "Давайте рассмотрим простой пример со сложением, записанный с помощью JavaScript.\n```\nlet a = 15;\nlet b = 20;\nlet c = a + b;\n```\nВ третьей строке используется не только оператор бинарный плюс, который складывает `a` и `b`, но и оператор присваивания `=`. В выражениях, имеющих несколько операторов, порядок их выполнения определяется *приоритетом*.  \nПервыми выполняются операторы, приоритет которых *выше*. Так, например, умножение выполняется раньше сложения, а использование скобок и унарный плюс выполнится даже раньше умножения. Приоритет у оператора присваивания `=` один из самых низких, поэтому в длинных выражениях обычно сперва выполняются все действия \"справа от равно\", а затем результат присваивается в переменную.  \n```\nlet d = 2 * 2 + (3 - +'1');\n```\nВ JavaScript существует целая таблица приоритетов. Ознакомиться с ней можно по ссылке: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n\nИногда в JavaScript используются сокращения для некоторых комбинаций операторов:\n```\ny = y + x; равносильно y += x;\ny = y - x; равносильно y -= x;\ny = y * x; равносильно y *= x;\ny = y / x; равносильно y /= x;\ny = y % x; равносильно y %= x;\n```\nНе удивляйтесь, встретив подобные комбинации в задачах! Вы всегда можете переписать эти сочетания в удобном для вас виде.\n",
    "en": "Let's look at a simple addition example written with JavaScript.\n```\nlet a = 15;\nlet b = 20;\nlet c = a + b;\n```\nIn the third line, not only the binary plus operator, which adds `a` and `b`, is used, but also the assignment operator `=`. In expressions with multiple operators, the order of their execution is determined by *priority*. \nOperators with *higher* priority are executed first. For example, multiplication is performed before addition, and the use of parentheses and unary plus is even performed before multiplication. The assignment operator `=` has one of the lowest priorities, so in long expressions, usually all actions \"to the right of the equal sign\" are performed first, and then the result is assigned to a variable.\n```\nlet d = 2 * 2 + (3 - +'1');\n```\nThere is a whole table of priorities in JavaScript. You can read it here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n\nSometimes abbreviations are used in JavaScript for certain combinations of operators:\n```\ny = y + x; is equivalent to y += x;\ny = y - x; is equivalent to y -= x;\ny = y * x; is equivalent to y *= x;\ny = y / x; is equivalent to y /= x;\ny = y % x; is equivalent to y %= x;\n```\nDo not be surprised to encounter such combinations in tasks! You can always rewrite these combinations in a convenient way for you.\n",
    "es": "\n"
  }
}