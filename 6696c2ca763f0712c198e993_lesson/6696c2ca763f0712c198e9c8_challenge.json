{
  "_id": "6696c2ca763f0712c198e9c8",
  "name": {
    "en": "Correct the error in the code. Method continue",
    "ru": "Исправьте ошибку в коде. Метод continue"
  },
  "instruction": {
    "en": "The `onlyNegative` function takes an array of numbers.\n\nThe function should return an array with negative numbers only.\n\nCorrect the error in the code so that the function works correctly.\n\nUse the `continue` method to skip loop iteration.\n\nThe solution will be tested on the application of the `continue` method.\n\nAn example of running a function:\n```javascript\nonlyNegative([1, 2, 3, -1, -2, -3]); // [-1, -2, -3];\nonlyNegative([1, 2, 3]); // [];\n```",
    "ru": "Функция `onlyNegative` принимает массив чисел.\n\nФункция должна вернуть массив только с отрицательными числами.\n\nИсправьте ошибку в коде, чтобы функция работала правильно.\n\nИспользуйте метод `continue` для пропуска итерации цикла.\n\nРешение будет проверяться на применение метода `continue`.\n\nПример запуска функции:\n```javascript\nonlyNegative([1, 2, 3, -1, -2, -3]); // [-1, -2, -3];\nonlyNegative([1, 2, 3]); // [];\n```"
  },
  "initialSolution": "function Negative(arr) {\n  let onlyNegative = [];\n  for (let i = 0, i < arr.length, i++) {\n    if (arr[i] < 0) {\n      continue;\n    }\n    result arr[i];\n  }\n  return onlyNegative;\n}",
  "completedSolution": "function onlyNegative(arr) {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      continue;\n    }\n    result.push(arr[i]);\n  }\n  return result;\n}",
  "openTest": "it('Created function onlyNegative', () => {\n  expect(onlyNegative).to.be.a('function');\n});\n\nit('onlyNegative([1, 2, 3, -1, -2, -3]) should return [-1, -2, -3]', () => {\n  expect(onlyNegative([1, 2, 3, -1, -2, -3])).to.deep.equal([-1, -2, -3]);\n});\n\nit('onlyNegative([1, 2, 3]) should return []', () => {\n  expect(onlyNegative([1, 2, 3])).to.deep.equal([]);\n});\n\nit('onlyNegative([-1, -2, 3]) should return [-1, -2]', () => {\n  expect(onlyNegative([-1, -2, 3])).to.deep.equal([-1, -2]);\n});\n\nit('onlyNegative([1, 2, -1, 5, -5, 3, 9, -21) should return [-1, -5, -21]', () => {\n  expect(onlyNegative([1, 2, -1, 5, -5, 3, 9, -21])).to.deep.equal([-1, -5, -21]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}