{
  "_id": "6696c2ca763f0712c198e993",
  "content": {
    "ru": "# Пропуск итерации. continue\nМы уже разобрались как работает `break`: он используется в том случае, если мы хотим прервать выполнение цикла\nи выйти из него, не дожидаясь, когда проработают остальные итерации.\n\nЕсть еще другая директива, которая также используется в циклах.\n\nЭто директива `continue`.\n\nВ каких случаях она используется? `continue` используется, если при выполнении каких-то условий, мы хотели бы прервать\nтекущую итерации и перейти к следующей.\n\n```javascript\nconst str = 'He1ll650 JS8 !';\n\nfor (let i = 0; i < str.length; i++) {\n  if ('0123456789'.includes(str[i])) break   //как только мы наткнемся на цифру, то цикл прервется\n  console.log(i);\n}\n\n// 0 1  мы получили индексы первых двух символов, так как третий символ это цифра\n```\n```javascript\nconst str = 'He1ll65o  JS8 !';\n\nfor (let i = 0; i < str.length; i++) {\n  if ('0123456789'.includes(str[i])) continue   //если условие истино, то пропускаем итерацию и переходим к следующей\n  console.log(i);\n}\n\n// 0 1 3 4 7 8 9 10 11 13 14  \n```\nМы получили индексы всех символов, кроме цифр.\n\nДавайте посмотрим какие символы мы получили в консоли.\n```javascript\nconst str = 'He1ll65o  JS8 !';\n\nfor (let i = 0; i < str.length; i++) {\n  if ('0123456789'.includes(str[i])) continue   \n  console.log(str[i]);\n}\n\n// \"Hello JS !\"\n```\nЕсли нам необходимо очистить строку от цифр, то мы можем использовать данный способ.\n\nСоздадим дополнительную строку-аккумулятор\n```javascript\nconst str = 'He1ll65o  JS8 !';\n\nlet acc = '';\n\nfor (let i = 0; i < str.length; i++) {\n  if ('0123456789'.includes(str[i])) continue   \n  acc += str[i];\n}\nconsole.log(acc)\n// \"Hello JS !\"\n```\n\nРассмотрим пример, когда мы хотим собрать все большие буквы из строки в отдельный аккумулятор.\n```javascript\nconst str = 'hi, JavaScript Here!';\n\nlet acc = '';\n\nfor (let i = 0; i < str.length; i++) {\n  if (str[i] === str[i].toUpperCase()) continue   \n  acc += str[i];\n}\nconsole.log(acc)\n//\"hiavacriptere\"\n```\nВ аккумулятор не попали большие буквы, а также пробелы и знаки препинания.\nПодумайте почему так произошло.\n\nЕсли убрать `continue`, то мы должны собрать все большие буквы в аккумулятор.\n```javascript\nconst str = 'hi, JavaScript Here!';\n\nlet acc = '';\n\nfor (let i = 0; i < str.length; i++) {\n  if (str[i] === str[i].toUpperCase())    \n  acc += str[i];\n}\nconsole.log(acc)\n//\", JS H!\"\n```\nПомимо больших букв в аккумулятор попали пробелы и знаки препинания.\n\nЧтобы собрать действительно большие буквы, давайте попробуем исправить код,\nведь знаки препинания и пробелы при переводе в другой регистр остаются такими же.\nПоэтому сравнение, что символ равен символу в верхнем регистре не подходит.\n\n```javascript\nconst str = 'hi, JavaScript Here!';\n\nlet acc = '';\n\nfor (let i = 0; i < str.length; i++) {\n  if (str[i] !== str[i].toLowerCase())  \n  acc += str[i];\n}\nconsole.log(acc)\n//\"JSH\"\n```\nОбязательно читайте свой код, чтобы не допускать ошибок. и попытайтесь анализировать что должно получиться в результате.\n",
    "en": "# Skip iteration. continue\nWe have already figured out how `break` works: it is used when we want to abort the loop\nand exit without waiting for the rest of the iterations to run.\n\nThere is another directive that is also used in loops.\n\nThis is the `continue` directive.\n\nIn what cases is it used? `continue` is used if, if some conditions are met, we would like to interrupt\ncurrent iteration and move on to the next one.\n\n```javascript\nconst str = 'He1ll650 JS8 !';\n\nfor (let i = 0; i < str.length; i++) {\n  if ('0123456789'.includes(str[i])) break   //as soon as we hit a number, the loop is broken\n  console.log(i);\n}\n\n// 0 1  we got the indexes of the first two characters, as the third character is a digit\n```\n```javascript\nconst str = 'He1ll65o  JS8 !';\n\nfor (let i = 0; i < str.length; i++) {\n  if ('0123456789'.includes(str[i])) continue   //if the condition is true, skip the iteration and move on to the next\n  console.log(i);\n}\n\n// 0 1 3 4 7 8 9 10 11 13 14  \n```\nWe got the indexes of all characters except numbers.\n\nLet's see what characters we got in the console.\n```javascript\nconst str = 'He1ll65o  JS8 !';\n\nfor (let i = 0; i < str.length; i++) {\n  if ('0123456789'.includes(str[i])) continue   \n  console.log(str[i]);\n}\n\n// \"Hello JS !\"\n```\nIf we need to clear a string of numbers, we can use this method.\n\nLet's create an additional line-accumulator\n```javascript\nconst str = 'He1ll65o  JS8 !';\n\nlet acc = '';\n\nfor (let i = 0; i < str.length; i++) {\n  if ('0123456789'.includes(str[i])) continue   \n  acc += str[i];\n}\nconsole.log(acc)\n// \"Hello JS !\"\n```\n\nConsider the example where we want to collect all capital letters from a string into a separate accumulator.\n```javascript\nconst str = 'hi, JavaScript Here!';\n\nlet acc = '';\n\nfor (let i = 0; i < str.length; i++) {\n  if (str[i] === str[i].toUpperCase()) continue   \n  acc += str[i];\n}\nconsole.log(acc)\n//\"hiavacriptere\"\n```\nThe accumulator did not include capital letters, as well as spaces and punctuation marks.\nThink about why this happened.\n\nIf we remove `continue`, we must collect all the big letters in the accumulator.\n```javascript\nconst str = 'hi, JavaScript Here!';\n\nlet acc = '';\n\nfor (let i = 0; i < str.length; i++) {\n  if (str[i] === str[i].toUpperCase())    \n  acc += str[i];\n}\nconsole.log(acc)\n//\", JS H!\"\n```\nIn addition to capital letters, spaces and punctuation marks got into the accumulator.\n\nTo collect the really big letters, let's try to fix the code,\nbecause punctuation marks and spaces remain the same when converted to another case.\nTherefore, the comparison that a character is equal to an uppercase character is not appropriate.\n\n```javascript\nconst str = 'hi, JavaScript Here!';\n\nlet acc = '';\n\nfor (let i = 0; i < str.length; i++) {\n  if (str[i] !== str[i].toLowerCase())  \n  acc += str[i];\n}\nconsole.log(acc)\n//\"JSH\"\n```\nBe sure to read your code so you don't make mistakes and try to analyze what the result should be.\n",
    "es": "# Пропуск итерации. continue language: es"
  },
  "video": {
    "ru": "https://youtu.be/0MNFr_P7_G4",
    "en": "",
    "es": ""
  }
}