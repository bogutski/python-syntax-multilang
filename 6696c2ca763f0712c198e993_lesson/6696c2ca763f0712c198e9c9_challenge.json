{
  "_id": "6696c2ca763f0712c198e9c9",
  "name": {
    "en": "Clear array from boolean",
    "ru": "Очистить массив от boolean"
  },
  "instruction": {
    "en": "The `cleanFromBoolean` function takes the `arr` array as a parameter.\n\nThe array can contain the types: string, number, boolean...\n\nThe function should return a new array consisting only of strings and numbers. If the `arr` array contains only `boolean`, then the new array will be empty.\n\nUse the `continue` instruction to solve this problem.\n\nThe solution will be checked for the use of `continue`.\n\nAn example of running a function:\n``` javascript\ncleanFromBoolean([1, 2, 'a', 'b', false, 5]) // [1, 2, 'a', 'b', 5]\ncleanFromBoolean([1, 2, 3, 4]) // [1, 2, 3, 4]\ncleanFromBoolean([true, true]) // []\n```",
    "ru": "Функция `cleanFromBoolean` принимает массив `arr` в качестве параметра.\n\nМассив может содержать типы: string, number, boolean..\n\nФункция должна вернуть новый массив, состоящий только из строк и чисел. Если массив `arr` содержит только `boolean`, то новый массив будет пустым.\n\nИспользуйте инструкцию `continue` для решения этой задачи.\n\nРешение будет проверяться на использование `continue`.\n\nПример запуска функции:\n``` javascript\ncleanFromBoolean([1, 2, 'a', 'b', false, 5]) // [1, 2, 'a', 'b', 5]\ncleanFromBoolean([1, 2, 3, 4]) // [1, 2, 3, 4]\ncleanFromBoolean([true, true]) // []\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function cleanFromBoolean(arr){\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++){\n    if(typeof arr[i] === 'boolean') continue\n    arr2.push(arr[i])\n  }\n  return arr2\n}",
  "openTest": "it('Created function cleanFromBoolean', () => {\n  expect(cleanFromBoolean).to.be.a('function');\n});\n\nit('function cleanFromBoolean should include statement continue', () => {\n  expect(cleanFromBoolean.toString()).to.include('continue');\n});\n\nit('cleanFromBoolean([1, 2, \"a\", \"b\"]) should return [1, 2, \"a\", \"b\"]', () => {\n  expect(cleanFromBoolean([1, 2, \"a\", \"b\"])).to.eql([1, 2, \"a\", \"b\"]);\n});\n\nit('cleanFromBoolean([1, 2, 3, 4]) should return [1, 2, 3, 4]', () => {\n  expect(cleanFromBoolean([1, 2, 3, 4])).to.eql([1, 2, 3, 4]);\n});\n\nit('cleanFromBoolean([\"a\", \"b\", true, \"c\", \"d\"]) should return [\"a\", \"b\", \"c\", \"d\"]', () => {\n  expect(cleanFromBoolean([\"a\", \"b\", true, \"c\", \"d\"])).to.eql([\"a\", \"b\", \"c\", \"d\"]);\n});\n\nit('cleanFromBoolean([0, false, false, 0, \"zero\", \"zero\"]) should return [0, 0, \"zero\", \"zero\"]', () => {\n  expect(cleanFromBoolean([0, false, false, 0, \"zero\", \"zero\"])).to.eql([0, 0, \"zero\", \"zero\"]);\n});\n\nit('cleanFromBoolean([false, false, true, true]) should return []', () => {\n  expect (cleanFromBoolean([false, false, true, true])).to.eql([]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}