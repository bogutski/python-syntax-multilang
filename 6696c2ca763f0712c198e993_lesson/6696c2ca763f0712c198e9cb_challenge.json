{
  "_id": "6696c2ca763f0712c198e9cb",
  "name": {
    "en": "Output phone numbers from the array",
    "ru": "Вывести номера телефонов из массива"
  },
  "instruction": {
    "en": "Phone numbers contain 10 digits. Write a function `onlyPhoneNumbers` that takes an array of strings as a parameter.\n\nThe function should return a new array containing only phone numbers.\n\nStrings such as birthdates, which are also 10 characters, can come as elements of the array,\nbut are not phone numbers. They contain dots in the string. They do not need to be counted.\n\nIf a string consists of two words (and the length of this string is also 10), then such a string is not a phone number.\n\nExample of function launch:\n```javascript\nonlyPhoneNumbers(['1234567890', '123456789', '12345678901']); // ['1234567890']\nonlyPhoneNumbers(['1234567890', '14.04.1980', 'Address is', '1234567890']); // ['1234567890', '1234567890']\n```",
    "ru": "Номера телефонов содержат 10 цифр. Напишите функцию `onlyPhoneNumbers`, которая принимает массив строк в качестве параметра.\n\nФункция должна вернуть новый массив, содержащий только номера телефонов.\n\nПри этом в качестве элементов массива могут приходить строки, такие как даты рождения, которые тоже состоят из 10 символов,\nно не являются номерами телефонов. Они содержат точки в строке. Их не нужно учитывать.\n\nЕсли строка состоит из двух слов (и длина этой строки также равна 10), то такая строка не является номером телефона.\n\nПример запуска функции:\n```javascript\nonlyPhoneNumbers(['1234567890', '123456789', '12345678901']); // ['1234567890']\nonlyPhoneNumbers(['1234567890', '14.04.1980', 'Address is', '1234567890']); // ['1234567890', '1234567890']\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function onlyPhoneNumbers(arr){\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length !== 10) {continue;}\n    if (arr[i].includes('.')||arr[i].includes(' ')) {continue;}\n      newArr.push(arr[i]);\n  }\n  return newArr;\n}",
  "openTest": "it('Created function onlyPhoneNumbers', () => {\n  expect(onlyPhoneNumbers).to.be.a('function');\n});\n\nit('function onlyPhoneNumbers([\"1234567890\", \"123456789\", \"12345678901\"]) should return [\"1234567890\"]', () => {\n  expect(onlyPhoneNumbers([\"1234567890\", \"123456789\", \"12345678901\"])).to.deep.equal([\"1234567890\"]);\n});\n\nit('function onlyPhoneNumbers([\"1234567890\", \"14.04.1980\", Address is, \"1234567890\"]) should return [\"1234567890\", \"1234567890\"]', () => {\n  expect(onlyPhoneNumbers([\"1234567890\", '14.04.1980', 'Address is', \"1234567890\"])).to.deep.equal([\"1234567890\", \"1234567890\"]);\n});\n\nit('function onlyPhoneNumbers([\"1234567890\", \"7938469021\", \"Peter Smit\", \"12890\"]) should return [\"1234567890\", \"7938469021\"]', () => {\n  expect(onlyPhoneNumbers([\"1234567890\", \"7938469021\", \"Peter Smit\", \"12890\"])).to.deep.equal([\"1234567890\", \"7938469021\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}