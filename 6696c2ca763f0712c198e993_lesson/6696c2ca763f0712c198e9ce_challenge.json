{
  "_id": "6696c2ca763f0712c198e9ce",
  "name": {
    "en": "Array of squares",
    "ru": "Массив квадратов"
  },
  "instruction": {
    "en": "The function `powerOfTwo` takes an array of positive numbers greater than 0.\n\nYou need to return a new array with only those numbers that are squares of other numbers.\n\nFor example, 4 is the square of number 2, 9 is the square of number 3, etc.\n\nTo determine if a number is the square of some other number, you must take the square root of that number and check if the result is an integer.\n\nAn example of running a function:\n```javascript\npowerOfTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) // [1, 4, 9]\npowerOfTwo([1, 3, 9, 27]) // [1, 9]\n```",
    "ru": "Функция `powerOfTwo` принимает массив положительных чисел больше 0.\n\nНеобходимо вернуть новый массив, в которой будут входить только те числа, которые являются квадратами других чисел.\n\nНапример, 4 является квадратом числа 2, 9 является квадратом числа 3 и т.д.\n\nДля того чтобы определить является ли число квадратом, какого-то другого числа необходимо взять квадратный корень из этого числа и проверить является ли результат целым числом.\n\nПример запуска функции:\n```javascript\npowerOfTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) // [1, 4, 9]\npowerOfTwo([1, 3, 9, 27]) // [1, 9]\n```"
  },
  "initialSolution": "function",
  "completedSolution": "function powerOfTwo(arr) {\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] ** 0.5 % 1 === 0) {\n      newArr.push(arr[i])\n    }\n  }\n  return newArr\n}",
  "openTest": "it('Created function powerOfTwo', () => {\n  expect(powerOfTwo).to.be.a('function');\n});\n\nit('powerOfTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) should return [1, 4, 9]', () => {\n  expect(powerOfTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])).to.eql([1, 4, 9]);\n});\n\nit('powerOfTwo([1, 3, 9, 27]) should return [1, 9]', () => {\n  expect(powerOfTwo([1, 3, 9, 27])).to.eql([1, 9]);\n});\n\nit('powerOfTwo([2, 3, 4, 5, 6, 7, 8, 9]) should return [4, 9]', () => {\n  expect(powerOfTwo([2, 3, 4, 5, 6, 7, 8, 9])).to.eql([4, 9]);\n});\n\nit('powerOfTwo([1, 2, 4, 8, 16, 32, 64, 128, 256]) should return [1, 4, 16, 64, 256]', () => {\n  expect(powerOfTwo([1, 2, 4, 8, 16, 32, 64, 128, 256])).to.eql([1, 4, 16, 64, 256]);\n});\n\nit('powerOfTwo([2, 3, 5, 6, 7, 8]) should return []', () => {\n  expect(powerOfTwo([2, 3, 5, 6, 7, 8])).to.eql([]);\n});\n\nit('powerOfTwo([]) should return []', () => {\n  expect(powerOfTwo([])).to.eql([]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}