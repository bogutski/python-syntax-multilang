{
  "_id": "6696c2cb763f0712c198f34c",
  "name": {
    "en": "/*",
    "ru": "Разделение чисел на четные и нечетные"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `separateNumbersByParity`, которая принимает массив чисел.\n\nФункция должна вернуть новый массив с двумя подмассивами: первый с четными числами, второй - с нечетными.\n\nПри добавлении четных чисел используйте метод `push`, при добавлении нечетных чисел используйте метод `unshift`.\n\nПример запуска функции:\n```javascript\nseparateNumbersByParity([3, 2, 4, 1, 5]); /// [ [2, 4], [5, 1, 3] ]\nseparateNumbersByParity([2, 8, 22, 46, 88]) // [ [2, 8, 22, 46, 88], [] ]\nseparateNumbersByParity([27, 1, 99, 67, 13, 21]) // [ [], [21, 13, 67, 99, 1, 27] ]\nseparateNumbersByParity([55, 10, 47, 7, 0, 68, 100]) // [ [10, 0, 68, 100], [7, 47, 55] ]\n```"
  },
  "initialSolution": "function separateNumbersByParity(){\n\n}",
  "completedSolution": "function separateNumbersByParity(arr) {\n  const even = [];\n  const odd = [];\n\n  for(let num of arr){\n    if(num % 2 === 0) even.push(num)\n    else odd.unshift(num)\n  }\n\n  return [even, odd];\n}",
  "openTest": "it('Created function separateNumbersByParity', () => {\n  expect(separateNumbersByParity).to.be.a('function');\n});\n\nit(\"separateNumbersByParity([3, 2, 4, 1, 5]) should return [[2, 4], [5, 1, 3]]\", () => {\n  expect(separateNumbersByParity([3, 2, 4, 1, 5])).to.deep.equal([[2, 4], [5, 1, 3]]);\n});\n\nit(\"separateNumbersByParity([1, 3, 5]) should return [[], [5, 3, 1]]\", () => {\n  expect(separateNumbersByParity([1, 3, 5])).to.deep.equal([[], [5, 3, 1]]);\n});\n\nit(\"separateNumbersByParity([2, 4, 6]) should return [[2, 4, 6], []]\", () => {\n  expect(separateNumbersByParity([2, 4, 6])).to.deep.equal([[2, 4, 6], []]);\n});\n\nit(\"separateNumbersByParity([]) should return [[], []]\", () => {\n  expect(separateNumbersByParity([])).to.deep.equal([[], []]);\n});\n\nit(\"separateNumbersByParity([0]) should return [[0], []]\", () => {\n  expect(separateNumbersByParity([0])).to.deep.equal([[0], []]);\n});\n\nit(\"should verify that separateNumbersByParity function is defined and is a function\", () => {\n  expect(separateNumbersByParity).to.be.a('function');\n});\n\nit(\"separateNumbersByParity([0, 1, 2, 3, 4, 5]) should place even numbers in the first array and odd numbers in reverse order in the second array\", () => {\n  expect(separateNumbersByParity([0, 1, 2, 3, 4, 5])).to.deep.equal([[0, 2, 4], [5, 3, 1]]);\n});\n\nit(\"separateNumbersByParity([7, -2, -3, 4, -1, 6]) should correctly handle negative numbers\", () => {\n  expect(separateNumbersByParity([7, -2, -3, 4, -1, 6])).to.deep.equal([[-2, 4, 6], [-1, -3, 7]]);\n});\n\nit(\"separateNumbersByParity([11, 22, 33, 44, 55, 66]) should group all even and odd numbers correctly\", () => {\n  expect(separateNumbersByParity([11, 22, 33, 44, 55, 66])).to.deep.equal([[22, 44, 66], [55, 33, 11]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}