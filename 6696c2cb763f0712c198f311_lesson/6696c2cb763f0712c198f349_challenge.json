{
  "_id": "6696c2cb763f0712c198f349",
  "name": {
    "en": "/*",
    "ru": "Планирование дня с приоритетами"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `organizeTasks`, которая принимает массив дневных задач.\n\nКаждая задача описывается объектом, содержащим два свойства: `task` (название задачи) и `priority` (приоритет задачи, который может быть 'high' или 'low').\n\nФункция должна создать новый массив и расположить задачи (task) высокого приоритета в начале массива, а задачи низкого приоритета — в конце.\n\nВерните новый массив задач.\n\n\nПример запуска функции:\n```javascript\norganizeTasks([\n  { task: \"Eat breakfast\", priority: \"low\" },\n  { task: \"Walk the dog\", priority: \"low\" },\n  { task: \"Work\", priority: \"high\" },\n  { task: \"Meditate\", priority: \"high\" }\n]);\n//  [ 'Meditate', 'Work', 'Eat breakfast', 'Walk the dog' ]\n```"
  },
  "initialSolution": "function organizeTasks(){\n\n}",
  "completedSolution": "function organizeTasks(arr){\n  const result = [];\n\n  for(let {task, priority} of arr){\n    if(priority === 'high') result.unshift(task)\n    else result.push(task)\n  }\n\n  return result;\n}",
  "openTest": "it('Created function organizeTasks', () => {\n  expect(organizeTasks).to.be.a('function');\n});\n\nit(\"should place high priority tasks before low priority tasks\", () => {\n  const tasks = [\n    { task: \"Eat breakfast\", priority: \"low\" },\n    { task: \"Meditate\", priority: \"high\" },\n    { task: \"Work\", priority: \"high\" },\n    { task: \"Walk the dog\", priority: \"low\" }\n  ];\n  expect(organizeTasks(tasks)).to.deep.equal([ 'Work', 'Meditate', 'Eat breakfast', 'Walk the dog' ]);\n});\n\nit(\"should return all tasks if they are all high priority, in reverse order of input\", () => {\n  const tasks = [\n    { task: \"Exercise\", priority: \"high\" },\n    { task: \"Read a book\", priority: \"high\" }\n  ];\n  expect(organizeTasks(tasks)).to.deep.equal([\"Read a book\", \"Exercise\"]);\n});\n\nit(\"should return all tasks in the same order if they are all low priority\", () => {\n  const tasks = [\n    { task: \"Watch a series\", priority: \"low\" },\n    { task: \"Play video games\", priority: \"low\" }\n  ];\n  expect(organizeTasks(tasks)).to.deep.equal([\"Watch a series\", \"Play video games\"]);\n});\n\nit(\"should correctly handle an empty array\", () => {\n  expect(organizeTasks([])).to.deep.equal([]);\n});\n\nit(\"should handle tasks with undefined priority by treating them as low priority\", () => {\n  const tasks = [\n    { task: \"Morning jog\", priority: \"high\" },\n    { task: \"Read news\" } // Undefined priority\n  ];\n  expect(organizeTasks(tasks)).to.deep.equal([\"Morning jog\", \"Read news\"]);\n});\n\nit(\"should handle tasks with null priority by treating them as low priority\", () => {\n  const tasks = [\n    { task: \"Finish project documentation\", priority: \"high\" },\n    { task: \"Water plants\", priority: null }\n  ];\n  expect(organizeTasks(tasks)).to.deep.equal([\"Finish project documentation\", \"Water plants\"]);\n});\n\nit(\"should correctly place a single task with high priority\", () => {\n  const tasks = [{ task: \"Check-in with mentor\", priority: \"high\" }];\n  expect(organizeTasks(tasks)).to.deep.equal([\"Check-in with mentor\"]);\n});\n\nit(\"should place high priority tasks first even when mixed with non-standard priority values\", () => {\n  const tasks = [\n    { task: \"Update project roadmap\", priority: \"urgent\" }, // Treated as low due to unrecognized priority\n    { task: \"Coffee break\", priority: \"when possible\" }, // Treated as low\n    { task: \"Client call\", priority: \"high\" }\n  ];\n  expect(organizeTasks(tasks)).to.deep.equal([\"Client call\", \"Update project roadmap\", \"Coffee break\"]);\n});\n\nit(\"should not alter the relative order of low priority tasks\", () => {\n  const tasks = [\n    { task: \"Reply to emails\", priority: \"low\" },\n    { task: \"Lunch break\", priority: \"low\" }\n  ];\n  expect(organizeTasks(tasks)).to.deep.equal([\"Reply to emails\", \"Lunch break\"]);\n});\n\nit(\"should correctly handle a list containing a mix of high and low priority tasks\", () => {\n  const tasks = [\n    { task: \"Prepare meeting agenda\", priority: \"high\" },\n    { task: \"Set up conference call\", priority: \"low\" },\n    { task: \"Review project proposal\", priority: \"high\" }\n  ];\n  expect(organizeTasks(tasks)).to.deep.equal([\"Review project proposal\", \"Prepare meeting agenda\", \"Set up conference call\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}