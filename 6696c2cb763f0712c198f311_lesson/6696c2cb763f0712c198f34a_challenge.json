{
  "_id": "6696c2cb763f0712c198f34a",
  "name": {
    "en": "/*",
    "ru": "Добавление утренних и вечерних задач"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `addMorningEveningTasks`, которая принимает три аргумента: массив существующих задач, строку с утренней задачей и строку с вечерней задачей.\n\nВторой и третий аргументы не всегда будут передаваться в функцию.\n\nЕсли какого-то из аргументов нет, добавьте следующую строку: 'Empty slot'.\n\nФункция должна добавить утреннюю задачу в начало массива задач и вечернюю задачу в его конец.\n\nВозвращаемое значение — обновленный массив задач.\n\nПример запуска функции:\n```javascript\naddMorningEveningTasks(['Check email', 'Lunch'], 'Workout', 'Reading before sleep');\n// ['Workout', 'Check email', 'Lunch', 'Reading before sleep']\n\naddMorningEveningTasks(['Work'], 'Morning yoga', 'Evening relaxation');\n// ['Morning yoga', 'Work', 'Evening relaxation']\n\naddMorningEveningTasks(['Hiking']);\n// ['Empty slot', 'Work', 'Empty slot']\n```"
  },
  "initialSolution": "function addMorningEveningTasks(){\n\n}",
  "completedSolution": "function addMorningEveningTasks(arr, morning= 'Empty slot', evening = 'Empty slot'){\n  arr.unshift(morning);\n  arr.push(evening);\n  return arr;\n}",
  "openTest": "it(\"Created function addMorningEveningTasks\", () => {\n  expect(addMorningEveningTasks).to.be.a('function');\n});\n\nit(\"addMorningEveningTasks(['Check emails'], 'Morning exercise', 'Read before bed') should return ['Morning exercise', 'Check emails', 'Read before bed']\", () => {\n  expect(addMorningEveningTasks(['Check emails'], 'Morning exercise', 'Read before bed')).to.deep.equal(['Morning exercise', 'Check emails', 'Read before bed']);\n});\n\nit(\"addMorningEveningTasks(['Work on project']) should return ['Empty slot', 'Work on project', 'Empty slot']\", () => {\n  expect(addMorningEveningTasks(['Work on project'])).to.deep.equal(['Empty slot', 'Work on project', 'Empty slot']);\n});\n\nit(\"addMorningEveningTasks(['Review day's work'], undefined, 'Plan next day') should return ['Empty slot', 'Review day's work', 'Plan next day']\", () => {\n  expect(addMorningEveningTasks(['Review day\\'s work'], undefined, 'Plan next day')).to.deep.equal(['Empty slot', 'Review day\\'s work', 'Plan next day']);\n});\n\nit(\"addMorningEveningTasks(['Attend meeting'], 'Prepare presentation') should return ['Prepare presentation', 'Attend meeting', 'Empty slot']\", () => {\n  expect(addMorningEveningTasks(['Attend meeting'], 'Prepare presentation')).to.deep.equal(['Prepare presentation', 'Attend meeting', 'Empty slot']);\n});\n\nit(\"addMorningEveningTasks([]) should return ['Empty slot', 'Empty slot']\", () => {\n  expect(addMorningEveningTasks([])).to.deep.equal(['Empty slot', 'Empty slot']);\n});\n\nit(\"addMorningEveningTasks(['Midday task'], 123, true) should return [123, 'Midday task', true]\", () => {\n  expect(addMorningEveningTasks(['Midday task'], 123, true)).to.deep.equal([123, 'Midday task', true]);\n});\n\nit(\"addMorningEveningTasks(['Lunch break'], undefined, 'Watch TV') should return ['Empty slot', 'Lunch break', 'Watch TV']\", () => {\n  expect(addMorningEveningTasks(['Lunch break'], undefined, 'Watch TV')).to.deep.equal(['Empty slot', 'Lunch break', 'Watch TV']);\n});\n\nit(\"addMorningEveningTasks(['Afternoon work'], '', '') should return ['', 'Afternoon work', '']\", () => {\n  expect(addMorningEveningTasks(['Afternoon work'], '', '')).to.deep.equal(['', 'Afternoon work', '']);\n});\n\nit(\"addMorningEveningTasks(['Evening jog'], undefined, undefined) should return ['Empty slot', 'Evening jog', 'Empty slot']\", () => {\n  expect(addMorningEveningTasks(['Evening jog'], undefined, undefined)).to.deep.equal(['Empty slot', 'Evening jog', 'Empty slot']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}