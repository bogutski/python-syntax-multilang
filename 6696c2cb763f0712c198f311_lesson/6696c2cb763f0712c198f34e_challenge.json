{
  "_id": "6696c2cb763f0712c198f34e",
  "name": {
    "en": "/*",
    "ru": "Динамическое добавление элементов в начало массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `prependItemsDynamic`, которая принимает исходный массив и произвольное количество дополнительных элементов.\n\nФункция должна добавлять все переданные элементы в начало исходного массива и возвращать новую длину исходного массива.\n\nИспользование метода `.length` запрещено.\n\n\nПример запуска функции:\n```javascript\nprependItemsDynamic([1, 2, 3, 4, 5], 0); // 6\nprependItemsDynamic([4, 5], 1, 2, 3); // 5\nprependItemsDynamic([], 'a', 'b'); // 2\nprependItemsDynamic([]); // 0\n```"
  },
  "initialSolution": "function prependItemsDynamic(){\n\n}",
  "completedSolution": "function prependItemsDynamic(arr, ...items){\n  return arr.unshift(...items)\n}",
  "openTest": "it('Created function prependItemsDynamic', () => {\n  expect(prependItemsDynamic).to.be.a('function');\n});\n\nit('Function prependItemsDynamic does not include \"length\"', () => {\n  const result = prependItemsDynamic.toString()\n  expect(result).to.not.include('.length');\n});\n\nit(\"prependItemsDynamic([4, 5], 1, 2, 3) should return 5 without using .length\", () => {\n  expect(prependItemsDynamic([4, 5], 1, 2, 3)).to.equal(5);\n});\n\nit(\"prependItemsDynamic([], 1, 2, 3) should return 3 without using .length\", () => {\n  expect(prependItemsDynamic([], 1, 2, 3)).to.equal(3);\n});\n\nit(\"prependItemsDynamic([1], 'a', 'b', 'c') should return 4 without using .length\", () => {\n  expect(prependItemsDynamic([1], 'a', 'b', 'c')).to.equal(4);\n});\n\nit(\"prependItemsDynamic(['start'], 1, true, 'text') should return 4\", () => {\n  expect(prependItemsDynamic(['start'], 1, true, 'text')).to.equal(4);\n});\n\nit(\"prependItemsDynamic([true, false]) should return 2\", () => {\n  expect(prependItemsDynamic([true, false])).to.equal(2);\n});\n\nit(\"prependItemsDynamic([], 'a', 'b') should return 2\", () => {\n  expect(prependItemsDynamic([], 'a', 'b')).to.equal(2);\n});\n\nit(\"prependItemsDynamic(['existing'], [1, 2], ['a', 'b']) should return 3\", () => {\n  expect(prependItemsDynamic(['existing'], [1, 2], ['a', 'b'])).to.equal(3);\n});\n\nit(\"prependItemsDynamic([1], undefined) should return 2\", () => {\n  expect(prependItemsDynamic([1], undefined)).to.equal(2);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}