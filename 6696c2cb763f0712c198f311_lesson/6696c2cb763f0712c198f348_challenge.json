{
  "_id": "6696c2cb763f0712c198f348",
  "name": {
    "en": "/*",
    "ru": "Расширение списка увлечений"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `expandHobbiesList`, которая принимает первым аргументом массив существующих увлечений и последующими аргументами неопределенное количество новых хобби.\n\nФункция должна возвращать обновленный список увлечений, где все новые хобби добавлены в начало.\n\nПример запуска функции:\n```javascript\nexpandHobbiesList(['Cycling'], 'Photography', 'Traveling', 'Swimming'); // ['Photography', 'Traveling', 'Swimming', 'Cycling']\nexpandHobbiesList(['Reading', 'Cooking'], 'Hiking', 'Painting'); // ['Hiking', 'Painting', 'Reading', 'Cooking']\nexpandHobbiesList([], 'Gardening'); // ['Gardening']\n```"
  },
  "initialSolution": "function expandHobbiesList(){\n\n}",
  "completedSolution": "function expandHobbiesList(arr, ...list){\n  arr.unshift(...list);\n  return arr;\n}",
  "openTest": "it('Created function expandHobbiesList', () => {\n  expect(expandHobbiesList).to.be.a('function');\n});\n\nit(\"expandHobbiesList(['Reading', 'Cooking'], 'Hiking', 'Painting') should return ['Hiking', 'Painting', 'Reading', 'Cooking']\", () => {\n  expect(expandHobbiesList(['Reading', 'Cooking'], 'Hiking', 'Painting')).to.deep.equal(['Hiking', 'Painting', 'Reading', 'Cooking']);\n});\n\nit(\"expandHobbiesList(['Cycling'], 'Photography', 'Traveling') should return ['Photography', 'Traveling', 'Cycling']\", () => {\n  expect(expandHobbiesList(['Cycling'], 'Photography', 'Traveling')).to.deep.equal(['Photography', 'Traveling', 'Cycling']);\n});\n\nit(\"expandHobbiesList([], 'Gardening') should return ['Gardening']\", () => {\n  expect(expandHobbiesList([], 'Gardening')).to.deep.equal(['Gardening']);\n});\n\nit(\"expandHobbiesList(['Knitting'], 'Woodworking') should start with 'Woodworking'\", () => {\n  const result = expandHobbiesList(['Knitting'], 'Woodworking');\n  expect(result[0]).to.equal('Woodworking');\n});\n\nit(\"expandHobbiesList(['Jogging', 'Swimming'], 'Skiing') should have 'Skiing' as the first hobby\", () => {\n  expect(expandHobbiesList(['Jogging', 'Swimming'], 'Skiing')[0]).to.equal('Skiing');\n});\n\nit(\"expandHobbiesList(['Baking'], 'Drawing', 'Singing') should have a length of 3\", () => {\n  expect(expandHobbiesList(['Baking'], 'Drawing', 'Singing').length).to.equal(3);\n});\n\nit(\"expandHobbiesList(['Chess'], []) should return ['Chess'] without changes\", () => {\n  expect(expandHobbiesList(['Chess'])).to.deep.equal(['Chess']);\n});\n\nit(\"expandHobbiesList(['Guitar Playing'], 'Video Games', 'Piano Playing') should include 'Piano Playing'\", () => {\n  expect(expandHobbiesList(['Guitar Playing'], 'Video Games', 'Piano Playing')).to.include('Piano Playing');\n});\n\nit(\"expandHobbiesList(['Dancing'], 'Acting') should not include 'Cooking'\", () => {\n  expect(expandHobbiesList(['Dancing'], 'Acting')).to.not.include('Cooking');\n});\n\nit(\"expandHobbiesList(['Running'], 'Yoga', 'Meditation') should return array with 'Yoga' as the first element\", () => {\n  const result = expandHobbiesList(['Running'], 'Yoga', 'Meditation');\n  expect(result[0]).to.equal('Yoga');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}