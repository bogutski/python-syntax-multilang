{
  "_id": "6696c2cb763f0712c198f311",
  "content": {
    "ru": "Метод `unshift()` является частью прототипа массива в JavaScript и предназначен для добавления одного или нескольких элементов в начало массива. \n\nПосле добавления метод изменяет длину массива и возвращает новую длину. \n\nЭто мощный инструмент для управления данными в массивах, позволяя легко и эффективно модифицировать их содержимое.\n\n#### Синтаксис:\n\n```javascript\narr.unshift(element1[, ...[, elementN]])\n```\n\n- `element1, ..., elementN` – элементы для добавления в начало массива.\n- Возвращает новую длину массива после добавления элементов.\n\n#### Пример использования:\n\n```javascript\nlet fruits = [\"Apple\", \"Banana\"];\nconsole.log(fruits); // [\"Apple\", \"Banana\"]\n\nlet newLength = fruits.unshift(\"Orange\");\nconsole.log(fruits); // [\"Orange\", \"Apple\", \"Banana\"]\nconsole.log(newLength); // 3\n```\n\nВ этом примере мы видим, как метод `unshift` добавил элемент `\"Orange\"` в начало массива `fruits`, изменяя исходный массив и возвращая его новую длину.\n\n\n#### Особенности и преимущества метода `unshift`:\n\n1. **Изменение Исходного Массива**: В отличие от некоторых других методов для работы с массивами, `unshift` модифицирует массив, на котором он был вызван.\n2. **Гибкость**: Метод может добавить любое количество элементов за один вызов.\n3. **Возвращаемое значение**: `unshift` возвращает новую длину массива, что может быть полезно для дальнейшего использования в коде.\n\n\nМетод `unshift` является важным инструментом для работы с массивами в JavaScript, обеспечивая простой и эффективный способ добавления элементов в начало массива.\n",
    "en": "# Array.prototype.unshift() – добавляет элемент в начала массива language: en",
    "es": "# Array.prototype.unshift() – добавляет элемент в начала массива language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}