{
  "_id": "6696c2cb763f0712c198f480",
  "name": {
    "en": "/*",
    "ru": "Перевод оценок в буквенный формат"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `convertGrades`, которая принимает массив численных оценок и возвращает новый массив, содержащий эквивалент этих оценок в буквенном формате по следующей схеме:\n\n* 90 и выше: \"A\"\n* 80 - 89: \"B\"\n* 70 - 79: \"C\"\n* 60 - 69: \"D\"\n* Ниже 60: \"F\"\n\nИспользуйте метод `map()` для этого преобразования.\n\n\nПример запуска функции:\n```javascript\nconvertGrades([95, 82, 75, 63, 55]); // [ 'A', 'B', 'C', 'D', 'F' ]\nconvertGrades([59, 69, 79, 89, 90]); // [ 'F', 'D', 'C', 'B', 'A' ]\n```"
  },
  "initialSolution": "function convertGrades(){\n\n}",
  "completedSolution": "function convertGrades(arr) {\n  return arr.map(score => {\n    if(score >= 90) return 'A'\n    else if(score >= 80 && score < 90) return 'B'\n    else if(score >= 70 && score < 80) return 'C'\n    else if(score >= 60 && score < 70) return 'D'\n    else return 'F'\n  });\n}",
  "openTest": "it('Created function convertGrades', () => {\n  expect(convertGrades).to.be.a('function');\n});\n\nit('Function convertGrades should include method map()', () => {\n  const res = convertGrades.toString()\n  expect(res).to.include('.map(')\n});\n\nit(\"convertGrades([95, 82, 75, 63, 55]) should return ['A', 'B', 'C', 'D', 'F']\", () => {\n  expect(convertGrades([95, 82, 75, 63, 55])).to.deep.equal(['A', 'B', 'C', 'D', 'F']);\n});\n\nit(\"convertGrades([100, 88, 92, 70, 60]) should return ['A', 'B', 'A', 'C', 'D']\", () => {\n  expect(convertGrades([100, 88, 92, 70, 60])).to.deep.equal(['A', 'B', 'A', 'C', 'D']);\n});\n\nit(\"convertGrades([59, 49, 89, 72, 100]) should return ['F', 'F', 'B', 'C', 'A']\", () => {\n  expect(convertGrades([59, 49, 89, 72, 100])).to.deep.equal(['F', 'F', 'B', 'C', 'A']);\n});\n\nit(\"convertGrades([]) should return []\", () => {\n  expect(convertGrades([])).to.deep.equal([]);\n});\n\nit(\"convertGrades([81, 77, 90, 95, 99]) should return ['B', 'C', 'A', 'A', 'A']\", () => {\n  expect(convertGrades([81, 77, 90, 95, 99])).to.deep.equal(['B', 'C', 'A', 'A', 'A']);\n});\n\nit(\"convertGrades([90, 80, 70, 60, 59]) should return ['A', 'B', 'C', 'D', 'F']\", () => {\n  expect(convertGrades([90, 80, 70, 60, 59])).to.deep.equal(['A', 'B', 'C', 'D', 'F']);\n});\n\nit(\"convertGrades([89, 79, 69, 59, 0]) should return ['B', 'C', 'D', 'F', 'F']\", () => {\n  expect(convertGrades([89, 79, 69, 59, 0])).to.deep.equal(['B', 'C', 'D', 'F', 'F']);\n});\n\nit(\"convertGrades([100]) should return ['A']\", () => {\n  expect(convertGrades([100])).to.deep.equal(['A']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}