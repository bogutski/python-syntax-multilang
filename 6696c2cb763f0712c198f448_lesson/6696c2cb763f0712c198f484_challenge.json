{
  "_id": "6696c2cb763f0712c198f484",
  "name": {
    "en": "/*",
    "ru": "Добавление порядкового номера"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `addOrdinalIndicator`, которая принимает массив целых чисел и возвращает новый массив, содержащий эти числа с добавленным порядковым индикатором ('st' для 1, 'nd' для 2, 'rd' для 3 и 'th' для 4 и т.д.).\n\nИспользуйте метод `map()` для этого преобразования.\n\nПроверка будет от 0 до 110.\n\n\nПример запуска функции:\n```javascript\naddOrdinalIndicator([1, 2, 3, 4, 11, 12, 13, 21]); // ['1st', '2nd', '3rd', '4th', '11th', '12th', '13th', '21st']\naddOrdinalIndicator([0, 21, 32, 81, 95]); // [0th, '21st', '32nd', '81st', '95th']\n```"
  },
  "initialSolution": "function addOrdinalIndicator(){\n\n}",
  "completedSolution": "function addOrdinalIndicator(arr) {\n  return arr.map(n => {\n    const str = n.toString()\n\n    if(str[str.length - 1] === '1' && str !== '11') return str + 'st'\n    else if(str[str.length - 1] === '2' && str !== '12') return str + 'nd'\n    else if(str[str.length - 1] === '3' && str !== '13') return str + 'rd'\n    else return str + 'th'\n  });\n}",
  "openTest": "it('Created function addOrdinalIndicator', () => {\n  expect(addOrdinalIndicator).to.be.a('function');\n});\n\nit('Function addOrdinalIndicator should include method map()', () => {\n  const res = addOrdinalIndicator.toString()\n  expect(res).to.include('.map(')\n});\n\nit(\"addOrdinalIndicator([1, 2, 3, 4, 11, 12, 13, 21]) should return ['1st', '2nd', '3rd', '4th', '11th', '12th', '13th', '21st']\", () => {\n  expect(addOrdinalIndicator([1, 2, 3, 4, 11, 12, 13, 21])).to.deep.equal([\"1st\", \"2nd\", \"3rd\", \"4th\", \"11th\", \"12th\", \"13th\", \"21st\"]);\n});\n\nit(\"addOrdinalIndicator([99, 77, 55, 22]) should return ['99th', '77th', '55th', '22nd']\", () => {\n  expect(addOrdinalIndicator([99, 77, 55, 22])).to.deep.equal(['99th', '77th', '55th', '22nd']);\n});\n\nit(\"addOrdinalIndicator([20, 30, 40]) should return ['20th', '30th', '40th']\", () => {\n  expect(addOrdinalIndicator([20, 30, 40])).to.deep.equal([\"20th\", \"30th\", \"40th\"]);\n});\n\nit(\"addOrdinalIndicator([5, 6, 7, 8, 9, 10]) should return ['5th', '6th', '7th', '8th', '9th', '10th']\", () => {\n  expect(addOrdinalIndicator([5, 6, 7, 8, 9, 10])).to.deep.equal(['5th', '6th', '7th', '8th', '9th', '10th']);\n});\n\nit(\"addOrdinalIndicator([]) should return []\", () => {\n  expect(addOrdinalIndicator([])).to.deep.equal([]);\n});\n\nit(\"addOrdinalIndicator([0]) should return ['0th']\", () => {\n  expect(addOrdinalIndicator([0])).to.deep.equal(['0th']);\n});\n\nit(\"addOrdinalIndicator([110, 105, 101]) should return ['110th', '105th', '101st']\", () => {\n  expect(addOrdinalIndicator([110, 105, 101])).to.deep.equal(['110th', '105th', '101st']);\n});\n\nit(\"addOrdinalIndicator([22, 23, 24]) should return ['22nd', '23rd', '24th']\", () => {\n  expect(addOrdinalIndicator([22, 23, 24])).to.deep.equal(['22nd', '23rd', '24th']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}