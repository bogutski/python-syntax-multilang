{
  "_id": "6696c2cb763f0712c198f47f",
  "name": {
    "en": "/*",
    "ru": "Преобразование объектов в массив строк"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `objectsToStrings`, которая принимает массив объектов и возвращает новый массив, содержащий строки, сформированные из значений объектов.\n\nКаждый объект имеет одинаковые ключи: `{firstName: \"John\", lastName: \"Doe\", age: 30}`.\n\nИспользуйте метод `map()` для создания массива строк, где каждая строка содержит значения объекта, разделенные пробелом.\n\n\nПример запуска функции:\n```javascript\nconst people = [\n  { firstName: \"John\", lastName: \"Doe\", age: 30 },\n  { firstName: \"Jane\", lastName: \"Doe\", age: 25 },\n  { firstName: \"Emily\", lastName: \"Smith\", age: 27 }\n];\nobjectsToStrings(people); // [ 'John Doe 30', 'Jane Doe 25', 'Emily Smith 27' ]\n```"
  },
  "initialSolution": "function objectsToStrings(){\n\n}",
  "completedSolution": "function objectsToStrings(arr) {\n  return arr.map(({firstName, lastName, age}) => firstName + ' ' + lastName + ' ' + age);\n}",
  "openTest": "it('Created function objectsToStrings', () => {\n  expect(objectsToStrings).to.be.a('function');\n});\n\nit('Function objectsToStrings should include method map()', () => {\n  const res = objectsToStrings.toString()\n  expect(res).to.include('.map(')\n});\n\nit(\"objectsToStrings([{ firstName: 'John', lastName: 'Doe', age: 30 }, { firstName: 'Jane', lastName: 'Doe', age: 25 }, { firstName: 'Emily', lastName: 'Smith', age: 27 }]) should return ['John Doe 30', 'Jane Doe 25', 'Emily Smith 27']\", () => {\n  const people = [\n    { firstName: \"John\", lastName: \"Doe\", age: 30 },\n    { firstName: \"Jane\", lastName: \"Doe\", age: 25 },\n    { firstName: \"Emily\", lastName: \"Smith\", age: 27 }\n  ];\n  expect(objectsToStrings(people)).to.deep.equal([\"John Doe 30\", \"Jane Doe 25\", \"Emily Smith 27\"]);\n});\n\nit(\"objectsToStrings([]) should return []\", () => {\n  expect(objectsToStrings([])).to.deep.equal([]);\n});\n\nit(\"objectsToStrings([{ firstName: 'Single', lastName: 'Person', age: 40 }]) should return ['Single Person 40']\", () => {\n  expect(objectsToStrings([{ firstName: 'Single', lastName: 'Person', age: 40 }])).to.deep.equal([\"Single Person 40\"]);\n});\n\nit(\"objectsToStrings([{ firstName: 'No', lastName: 'Name', age: 0 }]) should return ['No Name 0']\", () => {\n  expect(objectsToStrings([{ firstName: 'No', lastName: 'Name', age: 0 }])).to.deep.equal([\"No Name 0\"]);\n});\n\nit(\"objectsToStrings([{ firstName: 'Alice', lastName: 'Wonderland', age: 28 }, { firstName: 'Bob', lastName: 'Marley', age: 32 }]) should return ['Alice Wonderland 28', 'Bob Marley 32']\", () => {\n  const people = [\n    { firstName: \"Alice\", lastName: \"Wonderland\", age: 28 },\n    { firstName: \"Bob\", lastName: \"Marley\", age: 32 }\n  ];\n  expect(objectsToStrings(people)).to.deep.equal([\"Alice Wonderland 28\", \"Bob Marley 32\"]);\n});\n\nit(\"objectsToStrings([{ firstName: 'Charlie', lastName: 'Brown', age: 10 }]) should return ['Charlie Brown 10']\", () => {\n  const kids = [{ firstName: \"Charlie\", lastName: \"Brown\", age: 10 }];\n  expect(objectsToStrings(kids)).to.deep.equal([\"Charlie Brown 10\"]);\n});\n\nit(\"objectsToStrings([{ firstName: 'Dorothy', lastName: 'Gale', age: 16 }, { firstName: 'Toto', lastName: 'Dog', age: 4 }]) should return ['Dorothy Gale 16', 'Toto Dog 4']\", () => {\n  const characters = [\n    { firstName: \"Dorothy\", lastName: \"Gale\", age: 16 },\n    { firstName: \"Toto\", lastName: \"Dog\", age: 4 }\n  ];\n  expect(objectsToStrings(characters)).to.deep.equal([\"Dorothy Gale 16\", \"Toto Dog 4\"]);\n});\n\nit(\"objectsToStrings([{ firstName: 'Elsa', lastName: 'Snow', age: 21 }]) should return ['Elsa Snow 21']\", () => {\n  const princesses = [{ firstName: \"Elsa\", lastName: \"Snow\", age: 21 }];\n  expect(objectsToStrings(princesses)).to.deep.equal([\"Elsa Snow 21\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}