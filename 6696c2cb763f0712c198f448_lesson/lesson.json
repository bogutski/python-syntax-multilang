{
  "_id": "6696c2cb763f0712c198f448",
  "content": {
    "ru": "Метод `map()` является одним из наиболее полезных и часто используемых методов в JavaScript для работы с массивами. \n\nЭтот метод позволяет вам преобразовать каждый элемент массива, применяя к нему указанную функцию, и возвращает новый массив с результатами преобразования, не изменяя исходный массив.\n\n\n### Основы метода `map()`\n\nМетод `map()` вызывается на массиве и принимает в качестве аргумента функцию обратного вызова (callback), которая выполняется для каждого элемента массива. \n\nФункция обратного вызова может принимать три параметра:\n\n* `currentValue` - текущий обрабатываемый элемент массива.\n* `index` (необязательно) - индекс текущего обрабатываемого элемента в массиве.\n* `array` (необязательно) - массив, на котором был вызван метод map().\n\n\n### Синтаксис\n\n```javascript\nlet newArray = arr.map(function(currentValue, index, array) {\n// Элемент преобразования\n}, thisArg);\n```\n\n* `newArray` - новый массив, содержащий результаты вызова функции обратного вызова для каждого элемента arr.\n* `thisArg` (необязательно) - значение, используемое в качестве `this` при выполнении функции обратного вызова.\n\n\nПример использования:\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst squaredNumbers = numbers.map(number => number * number);\n\nconsole.log(numbers); // Вывод: [1, 2, 3, 4, 5]\nconsole.log(squaredNumbers); // Вывод: [1, 4, 9, 16, 25]\n```\n\n\nРассмотрим другой пример с использованием всех параметров:\n```javascript\nconst numbers = [5, 10, 15, 20];\nconst obj = {name: 'John', lastName: 'Smith' }; // Определяем объект, который будет использоваться как thisArg\n\n\nconst numbersWithIndex = numbers.map(function(currentValue, index, arr) {\n\n    return `Index ${index}: ${currentValue}, Array: ${arr.toString()}, Full name: ${this.name} ${this.lastName}`;\n\n}, obj); // Передаем obj как thisArg\n\n\nconsole.log(numbersWithIndex);\n// [\n//   'Index 0: 5, Array: 5,10,15,20, Full name: John Smith',\n//   'Index 1: 10, Array: 5,10,15,20, Full name: John Smith',\n//   'Index 2: 15, Array: 5,10,15,20, Full name: John Smith',\n//   'Index 3: 20, Array: 5,10,15,20, Full name: John Smith'\n// ]\n```\n\n\nВажно помнить, что при использовании параметра `thisArg` в методах массивов, таких как `map()`, `filter()`, `forEach()` и других, необходимо использовать обычные функции в качестве функций обратного вызова, а не стрелочные функции.\n\n```javascript\nconst array = [1, 2, 3];\nconst context = { multiplier: 2 };\n\nconst doubled = array.map(function(element) {\n  return element * this.multiplier;\n}, context); // передаем context как thisArg\n\nconsole.log(doubled); // Вывод: [2, 4, 6]\n```\n\nВ этом примере `this` внутри функции обратного вызова ссылается на объект `context`, потому что мы использовали обычную функцию и передали `context` как `thisArg`. \n\nТаким образом, `this.multiplier` успешно обращается к свойству `multiplier` объекта `context`.\n\n\n### Преимущества использования `map()`\n\n* **Неизменность исходного массива**: `map()` создаёт новый массив и не изменяет исходный, что соответствует принципам функционального программирования.\n* **Цепочка вызовов**: `map()` может быть частью цепочки вызовов методов, таких как `filter()` и `reduce()`, что позволяет строить сложные запросы обработки данных.\n* **Улучшение читаемости кода**: использование `map()` делает код более декларативным и легким для понимания.\n\n\n\nМетод `map()` предоставляет мощный инструмент для преобразования данных в массивах. Благодаря его простоте и гибкости, этот метод нашёл широкое применение в разработке на JavaScript, от обработки данных до управления состоянием в приложениях.\n",
    "en": "# Array.prototype.map() – преобразует каждый элемент массива по условию language: en",
    "es": "# Array.prototype.map() – преобразует каждый элемент массива по условию language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}