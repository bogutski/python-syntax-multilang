{
  "_id": "6696c2cb763f0712c198f485",
  "name": {
    "en": "/*",
    "ru": "Генерация HTML списка"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `generateHTMLList`, которая принимает массив строк и возвращает строку, представляющую собой HTML-разметку неупорядоченного списка (<ul>).\n\nКаждый элемент массива должен стать элементом списка (<li>).\n\nИспользуйте метод `map()` для создания элементов списка и метод `join()` для формирования итоговой строки HTML-разметки.\n\n\nПример запуска функции:\n```javascript\ngenerateHTMLList(['Apple', 'Banana', 'Cherry']);// '<ul><li>Apple</li><li>Banana</li><li>Cherry</li></ul>'\ngenerateHTMLList(['1', '2', '3']);// '<ul><li>1</li><li>2</li><li>3</li></ul>'\n```"
  },
  "initialSolution": "function generateHTMLList(){\n\n}",
  "completedSolution": "function generateHTMLList(arr) {\n  const res = arr.map(str => `<li>${str}</li>`)\n  return '<ul>' + res.join('') + '</ul>';\n}",
  "openTest": "it('Created function generateHTMLList', () => {\n  expect(generateHTMLList).to.be.a('function');\n});\n\nit('Function generateHTMLList should include method map()', () => {\n  const res = generateHTMLList.toString()\n  expect(res).to.include('.map(')\n});\n\nit(\"generateHTMLList(['Apple', 'Banana', 'Cherry']) should return '<ul><li>Apple</li><li>Banana</li><li>Cherry</li></ul>'\", () => {\n  expect(generateHTMLList([\"Apple\", \"Banana\", \"Cherry\"])).to.equal(\"<ul><li>Apple</li><li>Banana</li><li>Cherry</li></ul>\");\n});\n\nit(\"generateHTMLList([]) should return '<ul></ul>'\", () => {\n  expect(generateHTMLList([])).to.equal(\"<ul></ul>\");\n});\n\nit(\"generateHTMLList(['Single Item']) should return '<ul><li>Single Item</li></ul>'\", () => {\n  expect(generateHTMLList([\"Single Item\"])).to.equal(\"<ul><li>Single Item</li></ul>\");\n});\n\nit(\"generateHTMLList(['First', 'Second']) should return '<ul><li>First</li><li>Second</li></ul>'\", () => {\n  expect(generateHTMLList([\"First\", \"Second\"])).to.equal(\"<ul><li>First</li><li>Second</li></ul>\");\n});\n\nit(\"generateHTMLList(['Item 1', 'Item 2', 'Item 3', 'Item 4']) should return '<ul><li>Item 1</li><li>Item 2</li><li>Item 3</li><li>Item 4</li></ul>'\", () => {\n  expect(generateHTMLList([\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"])).to.equal(\"<ul><li>Item 1</li><li>Item 2</li><li>Item 3</li><li>Item 4</li></ul>\");\n});\n\nit(\"generateHTMLList(['Hello', 'World']) should return '<ul><li>Hello</li><li>World</li></ul>'\", () => {\n  expect(generateHTMLList([\"Hello\", \"World\"])).to.equal(\"<ul><li>Hello</li><li>World</li></ul>\");\n});\n\nit(\"generateHTMLList(['HTML', 'CSS', 'JavaScript']) should return '<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul>'\", () => {\n  expect(generateHTMLList([\"HTML\", \"CSS\", \"JavaScript\"])).to.equal(\"<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul>\");\n});\n\nit(\"generateHTMLList(['React', 'Vue', 'Angular']) should return '<ul><li>React</li><li>Vue</li><li>Angular</li></ul>'\", () => {\n  expect(generateHTMLList([\"React\", \"Vue\", \"Angular\"])).to.equal(\"<ul><li>React</li><li>Vue</li><li>Angular</li></ul>\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}