{
  "_id": "6696c2cb763f0712c198f4fb",
  "name": {
    "en": "/*",
    "ru": "Добавление или обновление элемента с проверкой на уникальность"
  },
  "instruction": {
    "en": "",
    "ru": "Разработайте функцию `addOrUpdateElement`, которая принимает три аргумента: массив `array`, индекс `index` для вставки или обновления элемента, и новое значение `newValue`.\n\nФункция должна проверить, присутствует ли `newValue` уже в массиве:\n\n* Если `newValue` не присутствует в массиве, функция должна заменить элемент на позиции `index` новым значением `newValue`, используя метод `with()`.\n* Если `newValue` уже есть в массиве, функция должна добавить к `newValue` префикс `Copy - ` и заменить элемент на позиции `index` этим новым составным значением.\n\nФункция должна возвращать новый массив с внесенными изменениями, не изменяя исходный массив.\n\n\nПримеры использования функции:\n```javascript\nconst originalArray = ['January', 'March', 'April', 'May'];\nconst newArray1 = addOrUpdateElement(originalArray, 1, 'February');\nconsole.log(newArray1); // Вывод: ['January', 'February', 'April', 'May']\n\nconst newArray2 = addOrUpdateElement(originalArray, 2, 'March');\nconsole.log(newArray2); // Вывод: ['January', 'March', 'copy - March', 'May']\n\nconst newArray3 = addOrUpdateElement(originalArray, 0, 'December');\nconsole.log(newArray3); // Вывод: ['December', 'March', 'April', 'May']\n```"
  },
  "initialSolution": "function addOrUpdateElement(){\n\n}",
  "completedSolution": "function addOrUpdateElement(arr, i, newEl) {\n  const elToAdd = arr.includes(newEl) ? 'Copy - ' + newEl : newEl\n  return arr.with(i, elToAdd);\n}",
  "openTest": "Array.prototype.with = function(index, value){\n  const newArray = this.slice();\n  newArray.splice(index, 1, value);\n  return newArray;\n}\n\nit('Created function addOrUpdateElement', () => {\n  expect(addOrUpdateElement).to.be.a('function');\n});\n\nit('Function addOrUpdateElement should include method with()', () => {\n  const res = addOrUpdateElement.toString()\n  expect(res).to.include('.with(')\n});\n\nit('updates element at index when newValue is not in the array', () => {\n  const originalArray = ['January', 'March', 'April', 'May'];\n  const result = addOrUpdateElement(originalArray, 1, 'February');\n  expect(result).to.deep.equal(['January', 'February', 'April', 'May']);\n});\n\nit('adds prefix and updates element at index when newValue is in the array', () => {\n  const originalArray = ['January', 'March', 'April', 'May'];\n  const result = addOrUpdateElement(originalArray, 2, 'March');\n  expect(result).to.deep.equal(['January', 'March', 'Copy - March', 'May']);\n});\n\nit('updates first element when index is 0 and newValue is new', () => {\n  const originalArray = ['January', 'March', 'April', 'May'];\n  const result = addOrUpdateElement(originalArray, 0, 'December');\n  expect(result).to.deep.equal(['December', 'March', 'April', 'May']);\n});\n\nit('adds prefix and updates the last element when newValue is in the array', () => {\n  const originalArray = ['January', 'February', 'March', 'April'];\n  const result = addOrUpdateElement(originalArray, 3, 'January');\n  expect(result).to.deep.equal(['January', 'February', 'March', 'Copy - January']);\n});\n\nit('correctly handles negative index to update element from the end', () => {\n  const originalArray = ['Spring', 'Summer', 'Autumn', 'Winter'];\n  const result = addOrUpdateElement(originalArray, -2, 'Monsoon');\n  expect(result).to.deep.equal(['Spring', 'Summer', 'Monsoon', 'Winter']);\n});\n\nit('updates element at index 0 with a prefix when newValue is the first element', () => {\n  const originalArray = ['Red', 'Green', 'Blue'];\n  const result = addOrUpdateElement(originalArray, 0, 'Red');\n  expect(result).to.deep.equal(['Copy - Red', 'Green', 'Blue']);\n});\n\nit('returns a new array with negative index', () => {\n  const originalArray = ['Cat', 'Dog', 'Fish'];\n  const result = addOrUpdateElement(originalArray, -3, 'Bird');\n  expect(result).to.deep.equal(['Bird', 'Dog', 'Fish']);\n});\n\nit('does not modify the original array', () => {\n  const originalArray = ['One', 'Two', 'Three'];\n  addOrUpdateElement(originalArray, 1, 'Four');\n  expect(originalArray).to.deep.equal(['One', 'Two', 'Three']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}