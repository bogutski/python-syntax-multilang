{
  "_id": "6696c2cb763f0712c198f501",
  "name": {
    "en": "/*",
    "ru": "Модификация массива с помощью объекта действий"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `modifyArray`, которая принимает массив `arr` и объект действий `obj`.\n\nОбъект действий может содержать ключи `add`, `delete`, и `update` для выполнения различных операций над массивом:\n\n* `add`: Массив элементов, которые нужно добавить в конец массива: `{add: ['add1', 'add2', 'add3']}`.\n* `delete`: Индекс (число) элемента в `arr`, который нужно удалить: `{delete: 1}`.\n* `update`: Массив из двух массивов - индексов элементов, которые нужно обновить, и соответствующих им новых значений: `{update: [[1, 3], ['update1', 'update2']]}`.\n\n\nФункция должна возвращать новый массив, полученный в результате применения всех указанных в объекте действий к исходному массиву, не изменяя его.\n\n\nПримеры Запуска Функции:\n```javascript\nconst modifier1 = {\n  add: ['add1', 'add2', 'add3'],\n  delete: 0,\n  update: [[2, 3], ['update1', 'update2']]\n}\nconsole.log(modifyArray(['q', 'w', 'e', 'r', 't', 'y'], modifier1))\n// ['w', 'e', 'update1', 'update2', 'y', 'add1', 'add2', 'add3']\n\n\nconst modifier2 = {\n  delete: 2,\n  update: [[0, 1, 3], ['update1', 'update2', 'update3']]\n}\nconsole.log(modifyArray([1, 2, 3, 4, 5], modifier2))\n// ['update1', 'update2', 4, 'update3']\n```"
  },
  "initialSolution": "function modifyArray(){\n\n}",
  "completedSolution": "function modifyArray(arr, obj){\n  let result = [...arr]\n\n  if('add' in obj) result.push(...obj.add)\n  if('delete' in obj) result.splice(obj.delete, 1)\n  if('update' in obj) obj.update[0].forEach((el, index) => result = result.with(el, obj.update[1][index]))\n\n  return result\n}",
  "openTest": "Array.prototype.with = function(index, value){\n  const newArray = this.slice();\n  newArray.splice(index, 1, value);\n  return newArray;\n}\n\nit('Created function modifyArray', () => {\n  expect(modifyArray).to.be.a('function');\n});\n\nit(\"Adding ['add1', 'add2', 'add3'] to ['q', 'w', 'e', 'r', 't', 'y'] should result in ['q', 'w', 'e', 'r', 't', 'y', 'add1', 'add2', 'add3']\", function() {\n  const modifier = { add: ['add1', 'add2', 'add3'] };\n  expect(modifyArray(['q', 'w', 'e', 'r', 't', 'y'], modifier)).to.deep.equal(['q', 'w', 'e', 'r', 't', 'y', 'add1', 'add2', 'add3']);\n});\n\nit(\"Deleting index 0 from ['q', 'w', 'e', 'r', 't', 'y'] should result in ['w', 'e', 'r', 't', 'y']\", function() {\n  const modifier = { delete: 0 };\n  expect(modifyArray(['q', 'w', 'e', 'r', 't', 'y'], modifier)).to.deep.equal(['w', 'e', 'r', 't', 'y']);\n});\n\nit(\"Updating indices [2, 3] in ['q', 'w', 'e', 'r', 't', 'y'] with ['update1', 'update2'] should result in ['q', 'w', 'update1', 'update2', 't', 'y']\", function() {\n  const modifier = { update: [[2, 3], ['update1', 'update2']] };\n  expect(modifyArray(['q', 'w', 'e', 'r', 't', 'y'], modifier)).to.deep.equal(['q', 'w', 'update1', 'update2', 't', 'y']);\n});\n\nit(\"Combining add, delete, and update actions on ['q', 'w', 'e', 'r', 't', 'y'] should result in ['w', 'e', 'update1', 'update2', 'y', 'add1', 'add2', 'add3']\", function() {\n  const modifier = {\n    add: ['add1', 'add2', 'add3'],\n    delete: 0,\n    update: [[2, 3], ['update1', 'update2']]\n  };\n  expect(modifyArray(['q', 'w', 'e', 'r', 't', 'y'], modifier)).to.deep.equal(['w', 'e', 'update1', 'update2', 'y', 'add1', 'add2', 'add3']);\n});\n\nit(\"Applying an empty modifier object to ['a', 'b', 'c'] should result in ['a', 'b', 'c']\", function() {\n  const modifier = {};\n  expect(modifyArray(['a', 'b', 'c'], modifier)).to.deep.equal(['a', 'b', 'c']);\n});\n\nit(\"Adding ['new1'] and deleting index 1 in ['first', 'second', 'third'] should result in ['first', 'third', 'new1']\", function() {\n  const modifier = { add: ['new1'], delete: 1 };\n  expect(modifyArray(['first', 'second', 'third'], modifier)).to.deep.equal(['first', 'third', 'new1']);\n});\n\nit(\"Updating index 1 in ['start', 'middle', 'end'] with ['center'] without adding or deleting should result in ['start', 'center', 'end']\", function() {\n  const modifier = { update: [[1], ['center']] };\n  expect(modifyArray(['start', 'middle', 'end'], modifier)).to.deep.equal(['start', 'center', 'end']);\n});\n\nit(\"Deleting index 2 in ['one', 'two', 'three', 'four'] and adding ['five'] should result in ['one', 'two', 'four', 'five']\", function() {\n  const modifier = { add: ['five'], delete: 2 };\n  expect(modifyArray(['one', 'two', 'three', 'four'], modifier)).to.deep.equal(['one', 'two', 'four', 'five']);\n});\n\nit(\"modifyArray(['a', 'b', 'c'], { update: [[0], ['w']] })should return ['w', 'b', 'c']\", function() {\n  const modifier = { update: [[0], ['w']] };\n  expect(modifyArray(['a', 'b', 'c'], modifier)).to.deep.equal(['w', 'b', 'c']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}