{
  "_id": "6696c2cb763f0712c198f4f9",
  "name": {
    "en": "/*",
    "ru": "Обновление рейтинга книги"
  },
  "instruction": {
    "en": "",
    "ru": "Вы работаете над приложением для библиотеки, и вам нужно обновить рейтинг одной из книг в списке.\n\nСоздайте функцию `updateBookRating`, которая принимает три аргумента:\n\n* массив книг `books`,\n* индекс книги `index`, которой нужно обновить рейтинг,\n* новый рейтинг `newRating`.\n\nИспользуйте метод `with()` для обновления рейтинга книги, гарантируя, что исходный массив остается неизменным.\n\nКаждая книга в массиве представлена объектом с полями `title` и `rating`.\n\nФункция должна возвращать новый массив книг с обновленным рейтингом указанной книги.\n\n\nПример запуска функции:\n```javascript\nconst books = [\n  { title: \"The Hobbit\", rating: 8.2 },\n  { title: \"1984\", rating: 9.1 },\n  { title: \"The Great Gatsby\", rating: 7.8 }\n];\n\nconst updatedBooks = updateBookRating(books, 1, 9.5);\nconsole.log(updatedBooks);\n// [\n//   { title: 'The Hobbit', rating: 8.2 },\n//   { title: '1984', rating: 9.5 },\n//   { title: 'The Great Gatsby', rating: 7.8 }\n// ]\n```"
  },
  "initialSolution": "function updateBookRating(){\n\n}",
  "completedSolution": "function updateBookRating(arr, i, newEl) {\n  const updatedObj = {...arr[i], rating: newEl}\n  return arr.with(i, updatedObj);\n}",
  "openTest": "Array.prototype.with = function(index, value){\n  const newArray = this.slice();\n  newArray.splice(index, 1, value);\n  return newArray;\n}\n\nit('Created function updateBookRating', () => {\n  expect(updateBookRating).to.be.a('function');\n});\n\nit('Function updateBookRating should include method with()', () => {\n  const res = updateBookRating.toString()\n  expect(res).to.include('.with(')\n});\n\nit(\"updateBookRating updates the rating of the second book to 9.5\", () => {\n  const books = [\n    { title: \"The Hobbit\", rating: 8.2 },\n    { title: \"1984\", rating: 9.1 },\n    { title: \"The Great Gatsby\", rating: 7.8 }\n  ];\n  const updatedBooks = updateBookRating(books, 1, 9.5);\n  expect(updatedBooks[1].rating).to.equal(9.5);\n});\n\nit(\"updateBookRating does not alter the original books array\", () => {\n  const books = [\n    { title: \"The Hobbit\", rating: 8.2 },\n    { title: \"1984\", rating: 9.1 },\n    { title: \"The Great Gatsby\", rating: 7.8 }\n  ];\n  updateBookRating(books, 1, 9.5);\n  expect(books[1].rating).to.equal(9.1);\n});\n\nit(\"updateBookRating returns a new array with the updated book\", () => {\n  const books = [\n    { title: \"The Hobbit\", rating: 8.2 },\n    { title: \"1984\", rating: 9.1 },\n    { title: \"The Great Gatsby\", rating: 7.8 }\n  ];\n  const updatedBooks = updateBookRating(books, 0, 8.5);\n  expect(updatedBooks[0].rating).to.not.equal(books[0].rating);\n  expect(updatedBooks).to.not.equal(books);\n});\n\nit(\"updateBookRating correctly updates the rating when index is negative\", () => {\n  const books = [\n    { title: \"The Hobbit\", rating: 8.2 },\n    { title: \"1984\", rating: 9.1 },\n    { title: \"The Great Gatsby\", rating: 7.8 }\n  ];\n  const updatedBooks = updateBookRating(books, -1, 8.0);\n  expect(updatedBooks[2].rating).to.equal(8.0);\n});\n\nit(\"updateBookRating returns a new array and matches expected array\", () => {\n  const books = [\n    { title: \"The Hobbit\", rating: 8.2 },\n    { title: \"1984\", rating: 9.1 },\n    { title: \"The Great Gatsby\", rating: 7.8 }\n  ];\n  const res = [\n    { title: \"The Hobbit\", rating: 9.9 },\n    { title: \"1984\", rating: 9.1 },\n    { title: \"The Great Gatsby\", rating: 7.8 }\n  ];\n  const updatedBooks = updateBookRating(books, 0, 9.9);\n  expect(updatedBooks).to.deep.equal(res);\n});\n\nit(\"updateBookRating maintains other properties of the book unchanged\", () => {\n  const books = [\n    { title: \"The Hobbit\", rating: 8.2, author: \"J.R.R. Tolkien\" },\n    { title: \"1984\", rating: 9.1, author: \"George Orwell\" },\n    { title: \"The Great Gatsby\", rating: 7.8, author: \"F. Scott Fitzgerald\" }\n  ];\n  const updatedBooks = updateBookRating(books, 0, 8.5);\n  expect(updatedBooks[0].author).to.equal(\"J.R.R. Tolkien\");\n});\n\nit(\"updateBookRating returns a new array even if the new rating is the same as the old\", () => {\n  const books = [\n    { title: \"The Hobbit\", rating: 8.2 },\n    { title: \"1984\", rating: 9.1 },\n    { title: \"The Great Gatsby\", rating: 7.8 }\n  ];\n  const updatedBooks = updateBookRating(books, 1, 9.1);\n  expect(updatedBooks).to.not.equal(books);\n  expect(updatedBooks[1].rating).to.equal(9.1);\n});\n\nit(\"updateBookRating allows updating a book to have no rating\", () => {\n  const books = [\n    { title: \"The Hobbit\", rating: 8.2 },\n    { title: \"1984\", rating: 9.1 },\n    { title: \"The Great Gatsby\", rating: 7.8 }\n  ];\n  const updatedBooks = updateBookRating(books, 2, null);\n  expect(updatedBooks[2].rating).to.equal(null);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}