{
  "_id": "6696c2cb763f0712c198f4f8",
  "name": {
    "en": "/*",
    "ru": "Замена элемента в массиве"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `replaceElement`, которая принимает три аргумента:\n\n* массив,\n* индекс элемента (который нужно заменить),\n* новое значение для этой позиции.\n\nФункция должна возвращать новый массив, в котором элемент на указанной позиции заменен на новое значение, при этом исходный массив должен остаться неизменным.\n\nДля обновления элемента используйте метод `with()`, чтобы гарантировать неизменяемость исходного массива.\n\n\nПример запуска функции:\n```javascript\nreplaceElement(['apple', 'banana', 'cherry'], 1, 'orange'); // ['apple', 'orange', 'cherry']\n```"
  },
  "initialSolution": "function replaceElement(){\n\n}",
  "completedSolution": "function replaceElement(arr, i, newValue) {\n  return arr.with(i, newValue);\n}",
  "openTest": "Array.prototype.with = function(index, value){\n  const newArray = this.slice();\n  newArray.splice(index, 1, value);\n  return newArray;\n}\n\nit('Created function replaceElement', () => {\n  expect(replaceElement).to.be.a('function');\n});\n\nit('Function replaceElement should include method with()', () => {\n  const res = replaceElement.toString()\n  expect(res).to.include('.with(')\n});\n\nit(\"replaceElement(['apple', 'banana', 'cherry'], 1, 'orange') should return ['apple', 'orange', 'cherry']\", () => {\n  const originalArray = ['apple', 'banana', 'cherry'];\n  const result = replaceElement(originalArray, 1, 'orange');\n  expect(result).to.deep.equal(['apple', 'orange', 'cherry']);\n});\n\nit(\"replaceElement(['dog', 'cat', 'bird'], 0, 'fish') should return ['fish', 'cat', 'bird']\", () => {\n  const originalArray = ['dog', 'cat', 'bird'];\n  const result = replaceElement(originalArray, 0, 'fish');\n  expect(result).to.deep.equal(['fish', 'cat', 'bird']);\n});\n\nit(\"replaceElement([1, 2, 3], 2, 4) should return [1, 2, 4]\", () => {\n  const originalArray = [1, 2, 3];\n  const result = replaceElement(originalArray, 2, 4);\n  expect(result).to.deep.equal([1, 2, 4]);\n});\n\nit(\"replaceElement(['old'], 0, 'new') should return ['new']\", () => {\n  const originalArray = ['old'];\n  const result = replaceElement(originalArray, 0, 'new');\n  expect(result).to.deep.equal(['new']);\n});\n\nit(\"replaceElement(['single'], 0, 'replaced') should not alter the original array\", () => {\n  const originalArray = ['single'];\n  replaceElement(originalArray, 0, 'replaced');\n  expect(originalArray).to.deep.equal(['single']);\n});\n\nit(\"replaceElement(['first', 'second', 'third'], 2, 'updated') should return ['first', 'second', 'updated']\", () => {\n  const originalArray = ['first', 'second', 'third'];\n  const result = replaceElement(originalArray, 2, 'updated');\n  expect(result).to.deep.equal(['first', 'second', 'updated']);\n});\n\nit(\"replaceElement(['one', 'two', 'three', 'four'], -1, 'last') should return ['one', 'two', 'three', 'last']\", () => {\n  const originalArray = ['one', 'two', 'three', 'four'];\n  const result = replaceElement(originalArray, -1, 'last');\n  expect(result).to.deep.equal(['one', 'two', 'three', 'last']);\n});\n\nit(\"replaceElement([10, 20, 30, 35], 3, 40) should return [10, 20, 30, 40]\", () => {\n  const originalArray = [10, 20, 30, 35];\n  const result = replaceElement(originalArray, 3, 40);\n  expect(result).to.deep.equal([10, 20, 30, 40]);\n});\n\nit(\"The original array remains unchanged after the replaceElement operation\", () => {\n  const originalArray = [1, 2, 3];\n  replaceElement(originalArray, 1, 5);\n  expect(originalArray).to.deep.equal([1, 2, 3]);\n});\n\nit(\"replaceElement(['a', 'b', 'c'], -1, 'w') should return \", () => {\n  const originalArray = ['a', 'b', 'c'];\n  const result = replaceElement(originalArray, -1, 'w');\n  expect(result).to.deep.equal(['a', 'b', 'w']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}