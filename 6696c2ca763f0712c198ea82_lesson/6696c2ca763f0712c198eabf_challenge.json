{
  "_id": "6696c2ca763f0712c198eabf",
  "name": {
    "en": "The sum of odd numbers from the middle of the array to the end",
    "ru": "Сумма нечетных чисел от середины массива до конца"
  },
  "instruction": {
    "en": "Write a function `sumOddFromMiddleToEnd` that takes one parameter, an array.\n\nThe array is of arbitrary length and consists of positive and negative integers.\n\nThe function should return the sum of odd numbers from the middle of the array to the end.\n\nBefore creating the `for` loop, create a variable to which you assign the value of half the length of the array, rounded down.\n\nUse the method `Math.floor()` to round to the smaller side.\n\nAn example of running the function:\n```javascript\nsumOddFromMiddleToEnd([1, 3, 5, 7, 9, 11, 13])); // 7 + 9 + 11 + 13 = 40\nsumOddFromMiddleToEnd([1, 2, 3, 4, 5, 6, 7, 1])); // 5 + 7 + 1 = 13\nsumOddFromMiddleToEnd([-1, -3, -5, -7, -9, -11])); // (-7) + (-9) + (-11) = -27\n```",
    "ru": "Напишите функцию `sumOddFromMiddleToEnd`, которая принимает один параметр - массив.\n\nМассив произвольной длины и состоит из положительных и отрицательных целых чисел.\n\nФункция должна вернуть сумму нечетных чисел от середины массива до конца.\n\nПеред созданием цикла `for`, создайте переменную, которой присвойте значение половины длины массива, округленное в меньшую сторону.\n\nДля округления в меньшую сторону используйте метод `Math.floor()`.\n\nПример запуска функции:\n```javascript\nsumOddFromMiddleToEnd([1, 3, 5, 7, 9, 11, 13])); // 7 + 9 + 11 + 13 = 40\nsumOddFromMiddleToEnd([1, 2, 3, 4, 5, 6, 7, 1])); // 5 + 7 + 1 = 13\nsumOddFromMiddleToEnd([-1, -3, -5, -7, -9, -11])); // (-7) + (-9) + (-11) = -27\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function sumOddFromMiddleToEnd(arr) {\n  let length = Math.floor(arr.length / 2);\n  let sum = 0;\n  for (let i = length; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0)\n      sum += arr[i]\n  }\n  return sum\n}",
  "openTest": "it('Created function sumOddFromMiddleToEnd', () => {\n  expect(sumOddFromMiddleToEnd).to.be.a('function');\n});\n\nit('sumOddFromMiddleToEnd([1, 3, 5, 7, 9, 11, 13]) should return 40', () => {\n  expect(sumOddFromMiddleToEnd([1, 3, 5, 7, 9, 11, 13])).to.equal(40);\n});\n\nit('sumOddFromMiddleToEnd([1, 2, 3, 4, 5, 6, 7, 1]) should return 13', () => {\n  expect(sumOddFromMiddleToEnd([1, 2, 3, 4, 5, 6, 7, 1])).to.equal(13);\n});\n\nit('sumOddFromMiddleToEnd([-1, -3, -5, -7, -9, -11]) should return -27', () => {\n  expect(sumOddFromMiddleToEnd([-1, -3, -5, -7, -9, -11])).to.equal(-27);\n});\n\nit('sumOddFromMiddleToEnd([1, 3, -5, 7, -9, 11, 13]) should return 22', () => {\n  expect(sumOddFromMiddleToEnd([1, 3, -5, 7, -9, 11, 13])).to.equal(22);\n});\n\nit('sumOddFromMiddleToEnd([2, 4, 6, 8, 10, 12, 14, 16, 18]) should return 0', () => {\n  expect(sumOddFromMiddleToEnd([2, 4, 6, 8, 10, 12, 14, 16, 18])).to.equal(0);\n});\n\nit('sumOddFromMiddleToEnd([11, 31, 33]) should return 64', () => {\n  expect(sumOddFromMiddleToEnd([11, 31, 33])).to.equal(64);\n});\n\nit('sumOddFromMiddleToEnd([1, 3]) should return 3', () => {\n  expect(sumOddFromMiddleToEnd([1, 3])).to.equal(3);\n});\n\nit('sumOddFromMiddleToEnd([5]) should return 5', () => {\n  expect(sumOddFromMiddleToEnd([5])).to.equal(5);\n});\n\nit('sumOddFromMiddleToEnd([]) should return 0', () => {\n  expect(sumOddFromMiddleToEnd([])).to.equal(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}