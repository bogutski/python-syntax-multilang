{
  "_id": "6696c2ca763f0712c198eabc",
  "name": {
    "en": "The sum of even numbers of the array from the 5th to the 10th element inclusive",
    "ru": "Сумма четных чисел массива с 5-го по 10-й элемент включительно"
  },
  "instruction": {
    "en": "Write a function `from5ElTo10El` that takes one parametre - an array.\n\nThe array is of arbitrary length and consists of positive and negative integers.\n\nThe function should return the sum of even numbers from the 5th to the 10th element of the array inclusive.\n\nBefore executing the for loop, check the length of the array.\n\nIf the length of the array is less than 9, use the length of the array in the loop condition.\n\nIf the length of the array is greater than 9, use 9 in the loop condition.\n\nNote: remember that the numbering of array elements starts with 0.\n\nIf you want to get the 4th element of the array, its index will be 3.\n\nAn example of running the function:\n```javascript\nfrom5ElTo10El([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) // 6 + 8 + 10 = 24\nfrom5ElTo10El([2, 3, 4, 5, 6, 7, 8, 9]) // 6 + 8 = 14\nfrom5ElTo10El([2, 40, 6, 80]) // 0\nfrom5ElTo10El([2, 4, 6, 8, -10, 12, 14, -16, 18, 20, 22, 24]) // (-10) + 12 + 14 + (-16) + 18 + 20 = 38\n```",
    "ru": "Напишите функцию `from5ElTo10El`, которая принимает один парамерт - массив.\n\nМассив произвольной длины и состоит из положительных и отрицательных целых чисел.\n\nФункция должна вернуть сумму четных чисел с 5-го по 10-й элемент массива включительно.\n\nПеред выполнением цикла for, проверьте длину массива.\n\nЕсли длина массива меньше 9, то в условии цикла используйте длину массива.\n\nЕсли длина массива больше 9, то в условии цикла используйте 9.\n\nПримечание: помните, что нумерация элементов массива начинается с 0.\n\nЕсли надо получить 4-й элемент массива, то его индекс будет равен 3.\n\nПример запуска функции:\n```javascript\nfrom5ElTo10El([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) // 6 + 8 + 10 = 24\nfrom5ElTo10El([2, 3, 4, 5, 6, 7, 8, 9]) // 6 + 8 = 14\nfrom5ElTo10El([2, 40, 6, 80]) // 0\nfrom5ElTo10El([2, 4, 6, 8, -10, 12, 14, -16, 18, 20, 22, 24]) // (-10) + 12 + 14 + (-16) + 18 + 20 = 38\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function from5ElTo10El(arr) {\n  let length = arr.length -1 < 9 ? arr.length - 1 : 9;\n  let sum = 0;\n  for (let i = 4; i <= length; i++) {\n    if (arr[i] % 2 === 0)\n      sum += arr[i];\n  }\n  return sum\n}",
  "openTest": "it('Created function from5ElTo10El', () => {\n  expect(from5ElTo10El).to.be.a('function');\n});\n\nit('from5ElTo10El([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) should return 24', () => {\n  expect(from5ElTo10El([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])).to.equal(24);\n});\n\nit('from5ElTo10El([2, 3, 4, 5, 6, 7, 8, 9]) should return 14', () => {\n  expect(from5ElTo10El([2, 3, 4, 5, 6, 7, 8, 9])).to.equal(14);\n});\n\nit('from5ElTo10El([2, 40, 6, 80]) should return 0', () => {\n  expect(from5ElTo10El([2, 40, 6, 80])).to.equal(0);\n});\n\nit('from5ElTo10El([2, 4, 6, 8, -10, 12, 14, -16, 18, 20, 22, 24]) should return 38', () => {\n  expect(from5ElTo10El([2, 4, 6, 8, -10, 12, 14, -16, 18, 20, 22, 24])).to.equal(38);\n});\n\nit('from5ElTo10El([0, 1, 2, 3, 4, 5, 6, 7, 8, 21, 11]) should return 18', () => {\n  expect(from5ElTo10El([0, 1, 2, 3, 4, 5, 6, 7, 8, 21, 11])).to.equal(18);\n});\n\nit('from5ElTo10El([4, 1, 20, 3, 24, 5, 28, 7, 22, 26, 11]) should return 100', () => {\n  expect(from5ElTo10El([4, 1, 20, 3, 24, 5, 28, 7, 22, 26, 11])).to.equal(100);\n});\n\nit('from5ElTo10El([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) should return 0', () => {\n  expect(from5ElTo10El([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21])).to.equal(0);\n});\n\nit('from5ElTo10El([2, 3, 4, 5, 3, 7, 11, 9, 13, 17, 18]) should return 0', () => {\n  expect(from5ElTo10El([2, 3, 4, 5, 3, 7, 11, 9, 13, 17, 18])).to.equal(0);\n});\n\nit('from5ElTo10El([]) should return 0', () => {\n  expect(from5ElTo10El([])).to.equal(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}