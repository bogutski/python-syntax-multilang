{
  "_id": "6696c2ca763f0712c198eabd",
  "name": {
    "en": "The sum of odd two-digit positive integers of the array from the 2nd to the 6th indexes inclusive",
    "ru": "Сумма нечетных двузначных положительных чисел массива со 2-го по 6-й индексы включительно"
  },
  "instruction": {
    "en": "The `from2IndTo6Ind` function takes one parameter, an array.\n\nThe array is of arbitrary length and consists of positive and negative integers.\n\nThe function returns the sum of odd positive two-digit numbers from the 2nd to the 6th `indices` of the array inclusive.\n\nCorrect the errors in the code so that the function works correctly.\n\nAn example of running the function:\n```javascript\nfrom2IndTo6Ind([0, 1, 21, 31, 41, 51, 61, 71]) // 21 + 31 + 41 + 51 + 61 = 205\nfrom2IndTo6Ind([0, 1, 2, 3, 4, 5, 6, 7]) // 0\nfrom2IndTo6Ind([0, 1, 21, 31, -41, 51, 61, 71]) // 21 + 31 + 51 + 61 = 164\n```",
    "ru": "Функция `from2IndTo6Ind` принимает один параметр - массив.\n\nМассив произвольной длины и состоит из положительных и отрицательных целых чисел.\n\nФункция возвращает сумму нечетных положительных двузначных чисел со 2-го по 6-й `индексы` массива включительно.\n\nИсправьте ошибки в коде, чтобы функция работала правильно.\n\nПример запуска функции:\n```javascript\nfrom2IndTo6Ind([0, 1, 21, 31, 41, 51, 61, 71]) // 21 + 31 + 41 + 51 + 61 = 205\nfrom2IndTo6Ind([0, 1, 2, 3, 4, 5, 6, 7]) // 0\nfrom2IndTo6Ind([0, 1, 21, 31, -41, 51, 61, 71]) // 21 + 31 + 51 + 61 = 164\n```"
  },
  "initialSolution": "function From2IndTo6Ind(arr) {\n  let length;\n  if (arr.length < 6) {\n    length = arr.length;\n  } else {\n    length = 6;\n  }\n  let sum = 0;\n  for (let i = 2; i <= 7; i+-) {\n    if (arr[i] % 2 !== 0 || arr[i] > 9 || arr[i] > 100)\n      sum += arr(i);\n  }\n  return sum\n}",
  "completedSolution": "function from2IndTo6Ind(arr) {\n  let length;\n  if (arr.length -1 < 6) {\n    length = arr.length - 1;\n  } else {\n    length = 6;\n  }\n  let sum = 0;\n  for (let i = 2; i <= length; i++) {\n    if (arr[i] % 2 !== 0 && arr[i] > 9 && arr[i] < 100)\n      sum += arr[i];\n  }\n  return sum\n}",
  "openTest": "it('Created function from2IndTo6Ind', () => {\n  expect(from2IndTo6Ind).to.be.a('function');\n});\n\nit('from2IndTo6Ind([0, 1, 21, 31, 41, 51, 61, 71]) should return 205', () => {\n  expect(from2IndTo6Ind([0, 1, 21, 31, 41, 51, 61, 71])).to.equal(205);\n});\n\nit('from2IndTo6Ind([0, 1, 2, 3, 4, 5, 6, 7]) should return 0', () => {\n  expect(from2IndTo6Ind([0, 1, 2, 3, 4, 5, 6, 7])).to.equal(0);\n});\n\nit('from2IndTo6Ind([0, 1, 21, 31, -41, 51, 61, 71]) should return 164', () => {\n  expect(from2IndTo6Ind([0, 1, 21, 31, -41, 51, 61, 71])).to.equal(164);\n});\n\nit('from2IndTo6Ind([0, 1, 11, 3, 1, 51]) should return 62', () => {\n  expect(from2IndTo6Ind([0, 1, 11, 3, 1, 51])).to.equal(62);\n});\n\nit('from2IndTo6Ind([0, 1, 21, 31, 1, 13, 4, 11, 3]) should return 65', () => {\n  expect(from2IndTo6Ind([0, 1, 21, 31, 1, 13, 4, 11, 3])).to.equal(65);\n});\n\nit('from2IndTo6Ind([0, 1, 21, 31, 41]) should return 93', () => {\n  expect(from2IndTo6Ind([0, 1, 21, 31, 41])).to.equal(93);\n});\n\nit('from2IndTo6Ind([0, 1, -21, -31, 41, -51, -61, 71]) should return 41', () => {\n  expect(from2IndTo6Ind([0, 1, -21, -31, 41, -51, -61, 71])).to.equal(41);\n});\n\nit('from2IndTo6Ind([0, 1, 213, 311, 410, 51, 617, 71]) should return 51', () => {\n  expect(from2IndTo6Ind([0, 1, 213, 311, 410, 51, 617, 71])).to.equal(51);\n});\n\nit('from2IndTo6Ind([]) should return 0', () => {\n  expect(from2IndTo6Ind([])).to.equal(0);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}