{
  "_id": "6696c2ca763f0712c198ea82",
  "content": {
    "ru": "Разберем как находить и суммировать четные и нечетные числа. \n\nНайти четные и нечетные числа `от 1 до 10`:\n\n```javascript\nlet min = 1;\nlet max = 10;\nconst arrEven = [];  // массив четных чисел\nconst arrOdd = [];   // массив нечетных чисел\n\nfor (let i = min; i <= max; i++) {    // цикл от 1 до 10\n  if (i % 2 === 0) {                  // если остаток от деления на 2 равен 0, то число четное\n    arrEven.push(i);                  // добавляем в массив четных чисел\n  } else {                            // иначе число нечетное\n    arrOdd.push(i);                   // добавляем в массив нечетных чисел\n  }\n}\nconsole.log(arrEven);   // [2, 4, 6, 8, 10]\nconsole.log(arrOdd);    // [1, 3, 5, 7, 9]\n```\n\nТеперь найдем сумму четных чисел от `5 до 25`:\n\n```javascript\nlet min = 5;\nlet max = 25;\nlet sum = 0;\n\nfor (let i = min; i <= max; i++) {    // цикл от 5 до 25\n  if (i % 2 === 0) {                  // если остаток от деления на 2 равен 0, то число четное\n    sum += i;                         // добавляем в сумму четных чисел\n  }\n}\nconsole.log(sum);    // 150\n```\n\n\nВ следующем примере будем использовать негативные значения и найдем сумму нечетных, отрицательных чисел `от -10 до 10`:\n\n```javascript\nlet min = -10;\nlet max = 10;\nlet sum = 0;\n\nfor (let i = min; i <= max; i++) {    // цикл от -10 до 10\n  if (i % 2 !== 0 && i < 0) {         // если остаток от деления на 2 не равен 0 и число меньше 0, то число нечетное и отрицательное\n    sum += i;                         // суммируем нечетные, отрицательные числа\n  }\n}\nconsole.log(sum);    // (-9) + (-7) + (-5) + (-3) + (-1) = -25\n```\n\nТеперь разберем как определить, является ли число `простым`. \n\n`Простое число` - это натуральное число, больше 1, которое делится без остатка только на 1 и на себя. \n\nЕдиница `1` не считается простым числом. Это связано с тем, что определение простого числа требует, чтобы число имело `ровно два различных делителя`, а у числа `1` только один делитель - `единица`.\n\nПример простых чисел: `2, 3, 5, 7, 11, 13, 17, 19, 23, 29`.    \n\n```javascript\nfunction isPrime(n){\n    if (n < 2) {                      // если число меньше 2, то оно не простое\n        return false;\n    }\n    \n    for (let i = 2; i < n; i++) {       // цикл от 2 до n\n        if (n % i === 0) {              // если остаток от деления на `i` равен `0`, то число не простое\n        return false;\n        }\n    }\n    return true;                      // иначе число простое\n}\nconsole.log(isPrime(5));    // true\nconsole.log(isPrime(10));   // false\n```\n\n\nВ следующем примере мы добавим цикл по нахождению всех простых чисел `от 2 и до 100`.\n\nМы запишем все простые числа в массив `arrPrime` и отдельно суммируем их в переменную `sumPrime`.\n\n```javascript\nconst min = 2;\nconst max = 100;\nconst arrPrime = [];    // массив простых чисел\nlet sumPrime = 0;       // сумма простых чисел\n\nfor (let i = min; i <= max; i++){\n  if (isPrime(i)) {                 // здесь мы используем нашу функцию isPrime(), которая написана выше\n    arrPrime.push(i);\n    sumPrime = sumPrime + i;\n  }\n}\nconsole.log(arrPrime);    // [ 2,  3,  5,  7, 11, 13, 17, 19,\n                          // 23, 29, 31, 37, 41, 43, 47, 53,\n                          // 59, 61, 67, 71, 73, 79, 83, 89, \n                          // 97 ]\nconsole.log(sumPrime);    // 3167\n```",
    "en": "Let's look at how to find and sum up even and odd numbers. \n\nFind even and odd numbers `from 1 to 10`:\n\n```javascript\nlet min = 1;\nlet max = 10;\nconst arrEven = []; // array of even numbers\nconst arrOdd = []; // array of odd numbers\n\nfor (let i = min; i <= max; i++) { // loop from 1 to 10\n  if (i % 2 === 0) { // if the remainder of the division by 2 is 0, then the number is even\n    arrEven.push(i); // add even numbers to the array\n  } else { // otherwise the number is odd\n    arrOdd.push(i); // add to the array of odd numbers\n  }\n}\nconsole.log(arrEven); // [2, 4, 6, 8, 10]\nconsole.log(arrOdd); // [1, 3, 5, 7, 9]\n```\n\nNow find the sum of even numbers from `5 to 25`:\n\n```javascript\nlet min = 5;\nlet max = 25;\nlet sum = 0;\n\nfor (let i = min; i <= max; i++) { // loop from 5 to 25\n  if (i % 2 === 0) { // if the remainder of the division by 2 is 0, then the number is even\n    sum += i; // add to the sum of even numbers\n  }\n}\nconsole.log(sum); // 150\n```\n\n\nIn the following example we will use negative values and find the sum of odd, negative numbers `from -10 to 10`:\n\n```javascript\nlet min = -10;\nlet max = 10;\nlet sum = 0;\n\nfor (let i = min; i <= max; i++) { // loop from -10 to 10\n  if (i % 2 !== 0 &&i < 0) { // if the remainder of the division by 2 is not 0 and the number is below 0, then the number is odd and negative\n    sum += i; // sum odd, negative numbers\n  }\n}\nconsole.log(sum); // (-9) + (-7) + (-5) + (-3) + (-1) = -25\n```\n\nNow let's see how to determine whether a number is `simple`. \n\nA `Simple Number` is a natural number greater than 1 that is divisible without a remainder by 1 and by itself only. \n\nThe number `1` is not considered a prime number. This is because the definition of a prime number requires that the number must have `exactly two distinct divisors`, and the number `1` has only one divisor, `1`.\n\nAn example of prime numbers: `2, 3, 5, 7, 11, 13, 17, 19, 23, 29`.    \n\n```javascript\nfunction isPrime(n){\n    if (n < 2) { // if the number is less than 2, then it is not prime\n        return false;\n    }\n\n    for (let i = 2; i < n; i++) { // loop from 2 to n\n        if (n % i === 0) { // if the remainder of the division by `i` is `0`, then the number is not prime\n        return false;\n        }\n    }\n    return true; // otherwise the number is prime\n}\nconsole.log(isPrime(5)); // true\nconsole.log(isPrime(10)); // false\n```\n\n\nIn the following example we will add a loop to find all prime numbers `from 2 to 100`.\n\nWe write all prime numbers in the `arrPrime` array and sum them separately in the `sumPrime` variable.\n\n```javascript\nconst min = 2;\nconst max = 100;\nconst arrPrime = []; // array of prime numbers\nlet sumPrime = 0; // sum of prime numbers\n\nfor (let i = min; i <= max; i++){\n  if (isPrime(i)) { // here we use our isPrime() function written above\n    arrPrime.push(i);\n    sumPrime = sumPrime + i;\n  }\n}\nconsole.log(arrPrime); // [ 2, 3, 5, 7, 11, 13, 17, 19,\n                          // 23, 29, 31, 37, 41, 43, 47, 53,\n                          // 59, 61, 67, 71, 73, 79, 83, 89, \n                          // 97 ]\nconsole.log(sumPrime); // 3167\n```",
    "es": "# Сумма четных/нечетных чисел от и до language: es"
  },
  "video": {
    "ru": "https://youtu.be/JDG8HHOu3WE",
    "en": "",
    "es": ""
  }
}