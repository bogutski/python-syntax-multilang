{
  "_id": "6696c2cb763f0712c198f95a",
  "name": {
    "en": "/*",
    "ru": "Извлечение и модификация элементов массива объектов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `getModifiedObjects`, которая принимает массив объектов и два числа.\n\nФункция должна возвращать новый массив, содержащий объекты, извлеченные между указанными индексами (включительно для начала и не включительно для конца).\n\nКаждый объект должен быть модифицирован: значения всех строковых свойств преобразуются в верхний регистр, числовые значения умножаются на `2`.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(getModifiedObjects(\n    [{name: 'apple', count: 10},\n     {name: 'banana', count: 20},\n     {name: 'cherry', count: 30},\n     {name: 'date', count: 40}\n    ], 1, 3));\n// [{name: 'BANANA', count: 40}, {name: 'CHERRY', count: 60}]\n\nconsole.log(getModifiedObjects(\n    [{type: 'dog', age: 5},\n     {type: 'cat', age: 7},\n     {type: 'rabbit', age: 3},\n     {type: 'hamster', age: 2}\n    ], 0, 2));\n// [{type: 'DOG', age: 10}, {type: 'CAT', age: 14}]\n```"
  },
  "initialSolution": "function getModifiedObjects(){\n\n}",
  "completedSolution": "function getModifiedObjects(arr, start, end) {\n  return arr.slice(start, end).map(obj => {\n\n    for(let key in obj) {\n      if(typeof obj[key] === 'number') obj[key] *= 2;\n      else if(typeof obj[key] === 'string') obj[key] = obj[key].toUpperCase();\n    }\n\n    return obj\n  });\n}",
  "openTest": "it('Created function getModifiedObjects', () => {\n  expect(getModifiedObjects).to.be.a('function');\n});\n\nit('getModifiedObjects([{name: \"apple\", count: 10}, {name: \"banana\", count: 20}, {name: \"cherry\", count: 30}, {name: \"date\", count: 40}], 1, 3) should return [{name: \"BANANA\", count: 40}, {name: \"CHERRY\", count: 60}]', function() {\n  expect(getModifiedObjects([{name: \"apple\", count: 10}, {name: \"banana\", count: 20}, {name: \"cherry\", count: 30}, {name: \"date\", count: 40}], 1, 3)).to.eql([{name: \"BANANA\", count: 40}, {name: \"CHERRY\", count: 60}]);\n});\n\nit('getModifiedObjects([{type: \"dog\", age: 5}, {type: \"cat\", age: 7}, {type: \"rabbit\", age: 3}, {type: \"hamster\", age: 2}], 0, 2) should return [{type: \"DOG\", age: 10}, {type: \"CAT\", age: 14}]', function() {\n  expect(getModifiedObjects([{type: \"dog\", age: 5}, {type: \"cat\", age: 7}, {type: \"rabbit\", age: 3}, {type: \"hamster\", age: 2}], 0, 2)).to.eql([{type: \"DOG\", age: 10}, {type: \"CAT\", age: 14}]);\n});\n\nit('getModifiedObjects([{color: \"red\", value: 100}, {color: \"green\", value: 200}, {color: \"blue\", value: 300}], 1, 3) should return [{color: \"GREEN\", value: 400}, {color: \"BLUE\", value: 600}]', function() {\n  expect(getModifiedObjects([{color: \"red\", value: 100}, {color: \"green\", value: 200}, {color: \"blue\", value: 300}], 1, 3)).to.eql([{color: \"GREEN\", value: 400}, {color: \"BLUE\", value: 600}]);\n});\n\nit('getModifiedObjects([{brand: \"Toyota\", price: 15000}, {brand: \"Honda\", price: 20000}, {brand: \"Ford\", price: 25000}], 0, 2) should return [{brand: \"TOYOTA\", price: 30000}, {brand: \"HONDA\", price: 40000}]', function() {\n  expect(getModifiedObjects([{brand: \"Toyota\", price: 15000}, {brand: \"Honda\", price: 20000}, {brand: \"Ford\", price: 25000}], 0, 2)).to.eql([{brand: \"TOYOTA\", price: 30000}, {brand: \"HONDA\", price: 40000}]);\n});\n\nit('getModifiedObjects([{title: \"Book\", pages: 300}, {title: \"Magazine\", pages: 100}, {title: \"Newspaper\", pages: 50}], 1, 3) should return [{title: \"MAGAZINE\", pages: 200}, {title: \"NEWSPAPER\", pages: 100}]', function() {\n  expect(getModifiedObjects([{title: \"Book\", pages: 300}, {title: \"Magazine\", pages: 100}, {title: \"Newspaper\", pages: 50}], 1, 3)).to.eql([{title: \"MAGAZINE\", pages: 200}, {title: \"NEWSPAPER\", pages: 100}]);\n});\n\nit('getModifiedObjects([{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}, {name: \"Charlie\", age: 35}], 1, 2) should return [{name: \"BOB\", age: 60}]', function() {\n  expect(getModifiedObjects([{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}, {name: \"Charlie\", age: 35}], 1, 2)).to.eql([{name: \"BOB\", age: 60}]);\n});\n\nit('getModifiedObjects([{product: \"Laptop\", price: 1000}, {product: \"Tablet\", price: 500}, {product: \"Phone\", price: 800}], 0, 1) should return [{product: \"LAPTOP\", price: 2000}]', function() {\n  expect(getModifiedObjects([{product: \"Laptop\", price: 1000}, {product: \"Tablet\", price: 500}, {product: \"Phone\", price: 800}], 0, 1)).to.eql([{product: \"LAPTOP\", price: 2000}]);\n});\n\nit('getModifiedObjects([{model: \"A\", value: 10}, {model: \"B\", value: 20}, {model: \"C\", value: 30}], 1, 3) should return [{model: \"B\", value: 40}, {model: \"C\", value: 60}]', function() {\n  expect(getModifiedObjects([{model: \"A\", value: 10}, {model: \"B\", value: 20}, {model: \"C\", value: 30}], 1, 3)).to.eql([{model: \"B\", value: 40}, {model: \"C\", value: 60}]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}