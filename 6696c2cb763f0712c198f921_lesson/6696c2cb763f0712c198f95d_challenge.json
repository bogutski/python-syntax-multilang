{
  "_id": "6696c2cb763f0712c198f95d",
  "name": {
    "en": "/*",
    "ru": "Извлечение, модификация и сортировка элементов массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `getSortedModifiedArray`, которая принимает массив строк и два числа.\n\nФункция должна возвращать новый массив, содержащий строки, извлеченные между указанными индексами (включительно для начала и не включительно для конца).\n\nКаждая строка должна быть модифицирована: удаляются все символы, кроме буквенных.\n\nЗатем полученные строки сортируются в обратном алфавитном порядке.\n\n\nПримеры запуска функции:\n```javascript\ngetSortedModifiedArray([' Ap@ /pL*e ', ' Ban #|$?anA ', '%  chEr Ry ', 'Da &()te  ', '  f_-=  +ig '], 1, 4);\n// ['Date', 'chErRy', 'BananA']\n\ngetSortedModifiedArray([' Do@G ', ' c!a#t ', 'RAb%^bIt', ' HamS*&TER'], 0, 3);\n// ['RAbbIt', 'DoG', 'cat']\n```"
  },
  "initialSolution": "function sum(num1, num2){\n\n}",
  "completedSolution": "function getSortedModifiedArray(arr, start, end) {\n  return arr.slice(start, end)\n      .map(str => str.replace(/[^A-Za-z]/g, ''))\n      .sort((a, b) => b.localeCompare(a));\n}",
  "openTest": "it('Created function getSortedModifiedArray', () => {\n  expect(getSortedModifiedArray).to.be.a('function');\n});\n\nit('getSortedModifiedArray([\" Ap@ pL*/e \", \" Ban #|$?anA \", \"%  chEr Ry \", \"Da &()te  \", \"  f_-=  +ig \"], 1, 4) should return [\"Date\", \"chErRy\", \"BananA\"]', function() {\n  expect(getSortedModifiedArray([\" Ap@ pL*/e \", \" Ban #|$?anA \", \"%  chEr Ry \", \"Da &()te  \", \"  f_-=  +ig \"], 1, 4)).to.deep.equal([\"Date\", \"chErRy\", \"BananA\"]);\n});\n\nit('getSortedModifiedArray([\" Do@G \", \" c!a#t \", \"RAb%^bIt\", \" HamS*&TER\"], 0, 3) should return [\"RAbbIt\", \"DoG\", \"cat\"]', function() {\n  expect(getSortedModifiedArray([\" Do@G \", \" c!a#t \", \"RAb%^bIt\", \" HamS*&TER\"], 0, 3)).to.deep.equal([\"RAbbIt\", \"DoG\", \"cat\"]);\n});\n\nit('getSortedModifiedArray([\" sun \", \"  MOON  \", \" s#tars\", \" GA&LAXY  \"], 0, 4) should return [\"sun\", \"stars\", \"MOON\", \"GALAXY\"]', function() {\n  expect(getSortedModifiedArray([\" sun \", \"  MOON  \", \" s#tars\", \" GA&LAXY  \"], 0, 4)).to.deep.equal([\"sun\", \"stars\", \"MOON\", \"GALAXY\"]);\n});\n\nit('getSortedModifiedArray([\"b!lue \", \"  GREE&N\", \" R%e^d\", \"y&el*LOW\"], 1, 4) should return [\"yelLOW\", \"Red\", \"GREEN\"]', function() {\n  expect(getSortedModifiedArray([\"b!lue \", \"  GREE&N\", \" R%e^d\", \"y&el*LOW\"], 1, 4)).to.deep.equal([\"yelLOW\", \"Red\", \"GREEN\"]);\n});\n\nit('getSortedModifiedArray([\" o$ne\", \" t%wo \", \"th&ree  \", \" f@our \"], 2, 4) should return [\"three\", \"four\"]', function() {\n  expect(getSortedModifiedArray([\" o$ne\", \" t%wo \", \"th&ree  \", \" f@our \"], 2, 4)).to.deep.equal([\"three\", \"four\"]);\n});\n\nit('getSortedModifiedArray([\" a%\", \" B @\", \" c*\", \" D #\"], 0, 2) should return [\"B\", \"a\"]', function() {\n  expect(getSortedModifiedArray([\" a%\", \" B @\", \" c*\", \" D #\"], 0, 2)).to.deep.equal([\"B\", \"a\"]);\n});\n\nit('getSortedModifiedArray([\" A%B\", \" C* D \", \" E!F\", \"G&H \"], 1, 4) should return [\"GH\", \"EF\", \"CD\"]', function() {\n  expect(getSortedModifiedArray([\" A%B\", \" C* D \", \" E!F\", \"G&H \"], 1, 4)).to.deep.equal([\"GH\", \"EF\", \"CD\"]);\n});\n\nit('getSortedModifiedArray([\" I#J \", \" k! L\", \" m% n\", \" o@ P \"], 0, 3) should return [\"mn\", \"kL\", \"IJ\"]', function() {\n  expect(getSortedModifiedArray([\" I#J \", \" k! L\", \" m% n\", \" o@ P \"], 0, 3)).to.deep.equal([\"mn\", \"kL\", \"IJ\"]);\n});\n\nit('getSortedModifiedArray([\"123 ABC\", \"DE&*FG\", \"HI  JKL\", \"M NO P\"], 1, 4) should return [\"MNOP\", \"HIJKL\", \"DEFG\"]', function() {\n  expect(getSortedModifiedArray([\"123 ABC\", \"DE&*FG\", \"HI  JKL\", \"M NO P\"], 1, 4)).to.deep.equal([\"MNOP\", \"HIJKL\", \"DEFG\"]);\n});\n\nit('getSortedModifiedArray([\" w2o3rLd\", \" $pLa@NeT \", \"sTa^R\", \" sUn\"], 1, 4) should return [\"sUn\", \"sTaR\", \"pLaNeT\"]', function() {\n  expect(getSortedModifiedArray([\" w2o3rLd\", \" $pLa@NeT \", \"sTa^R\", \" sUn\"], 1, 4)).to.deep.equal([\"sUn\", \"sTaR\", \"pLaNeT\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}