{
  "_id": "6696c2cb763f0712c198f95e",
  "name": {
    "en": "/*",
    "ru": "Извлечение, модификация и сортировка объектов"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `getSortedModifiedObjects`, которая принимает массив объектов, два числа и строку.\n\nФункция должна возвращать новый массив, содержащий объекты, извлеченные между указанными индексами (включительно для начала и не включительно для конца).\n\nКаждый объект должен быть модифицирован:\n * числовые значения заменяются на их целые корни (находим корень числа и округляем к большему),\n * строковые значения преобразуются в нижний регистр и удаляются все пробелы.\n\nЗатем полученные объекты сортируются по указанному строковому свойству в порядке возрастания.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(getSortedModifiedObjects(\n    [{name: 'A pp le', count: 50},\n     {name: ' BanANA ', count: 20},\n     {name: 'C he rr y ', count: 75},\n     {name: 'Dat E  ', count: 40}], 1, 4, 'name'));\n// [{name: 'banana', count: 5}, {name: 'cherry', count: 9}, {name: 'date', count: 7}]\n\nconsole.log(getSortedModifiedObjects(\n    [{type: 'Dog', age: 5},\n     {type: 'Cat', age: 7},\n     {type: 'Ra bbit', age: 3},\n     {type: 'Hamster', age: 2}], 0, 3, 'type'));\n// [{type: 'cat', age: 3}, {type: 'dog', age: 3}, {type: 'rabbit', age: 2}]\n```"
  },
  "initialSolution": "function getSortedModifiedObjects(){\n\n}",
  "completedSolution": "function getSortedModifiedObjects(arr, start, end, sortName) {\n  const noSpacesAndLowerCase = string => {\n    let newStr = ''\n    for(let char of string){\n      if(char !== ' ') newStr += char.toLowerCase()\n    }\n    return newStr\n  }\n\n  return arr.slice(start, end)\n      .map(obj => {\n        for(let key in obj){\n          if(typeof obj[key] === 'number') obj[key] = Math.ceil(obj[key] ** 0.5);\n          else if(typeof obj[key] === 'string') obj[key] = noSpacesAndLowerCase(obj[key]);\n        }\n        return obj\n      })\n      .sort((a, b) => a[sortName].localeCompare(b[sortName]));\n}",
  "openTest": "it('Created function getSortedModifiedObjects', () => {\n  expect(getSortedModifiedObjects).to.be.a('function');\n});\n\nit('getSortedModifiedObjects([{name: \"A pp le\", count: 50}, {name: \" BanANA \", count: 20}, {name: \"C he rr y \", count: 75}, {name: \"Dat E  \", count: 40}], 1, 4, \"name\") should return [{name: \"banana\", count: 5}, {name: \"cherry\", count: 9}, {name: \"date\", count: 7}]', function() {\n  expect(getSortedModifiedObjects([{name: \"A pp le\", count: 50}, {name: \" BanANA \", count: 20}, {name: \"C he rr y \", count: 75}, {name: \"Dat E  \", count: 40}], 1, 4, \"name\")).to.deep.equal([{name: \"banana\", count: 5}, {name: \"cherry\", count: 9}, {name: \"date\", count: 7}]);\n});\n\nit('getSortedModifiedObjects([{type: \"Dog\", age: 5}, {type: \"Cat\", age: 7}, {type: \"Ra bbit\", age: 3}, {type: \"Hamster\", age: 2}], 0, 3, \"type\") should return [{type: \"cat\", age: 3}, {type: \"dog\", age: 3}, {type: \"rabbit\", age: 2}]', function() {\n  expect(getSortedModifiedObjects([{type: \"Dog\", age: 5}, {type: \"Cat\", age: 7}, {type: \"Ra bbit\", age: 3}, {type: \"Hamster\", age: 2}], 0, 3, \"type\")).to.deep.equal([{type: \"cat\", age: 3}, {type: \"dog\", age: 3}, {type: \"rabbit\", age: 2}]);\n});\n\nit('getSortedModifiedObjects([{brand: \"Toyo ta\", value: 60}, {brand: \" Hon da\", value: 45}, {brand: \"Fo rd\", value: 70}, {brand: \"BMW\", value: 50}], 1, 4, \"brand\") should return [{brand: \"bmw\", value: 8}, {brand: \"ford\", value: 9}, {brand: \"honda\", value: 7}]', function() {\n  expect(getSortedModifiedObjects([{brand: \"Toyo ta\", value: 60}, {brand: \" Hon da\", value: 45}, {brand: \"Fo rd\", value: 70}, {brand: \"BMW\", value: 50}], 1, 4, \"brand\")).to.deep.equal([{brand: \"bmw\", value: 8}, {brand: \"ford\", value: 9}, {brand: \"honda\", value: 7}]);\n});\n\nit('getSortedModifiedObjects([{color: \" R ed\", value: 30}, {color: \"Gre en\", value: 80}, {color: \" Blue\", value: 90}, {color: \"Y ellow\", value: 20}], 0, 2, \"color\") should return [{color: \"green\", value: 9}, {color: \"red\", value: 6}]', function() {\n  expect(getSortedModifiedObjects([{color: \" R ed\", value: 30}, {color: \"Gre en\", value: 80}, {color: \" Blue\", value: 90}, {color: \"Y ellow\", value: 20}], 0, 2, \"color\")).to.deep.equal([{color: \"green\", value: 9}, {color: \"red\", value: 6}]);\n});\n\nit('getSortedModifiedObjects([{title: \" Book \", value: 20}, {title: \"M aga zine\", value: 60}, {title: \"Newspa per\", value: 70}], 1, 3, \"title\") should return [{title: \"magazine\", value: 8}, {title: \"newspaper\", value: 9}]', function() {\n  expect(getSortedModifiedObjects([{title: \" Book \", value: 20}, {title: \"M aga zine\", value: 60}, {title: \"Newspa per\", value: 70}], 1, 3, \"title\")).to.deep.equal([{title: \"magazine\", value: 8}, {title: \"newspaper\", value: 9}]);\n});\n\nit('getSortedModifiedObjects([{product: \"L aptop\", value: 40}, {product: \" Tablet\", value: 30}, {product: \" Phone\", value: 60}], 0, 3, \"product\") should return [{product: \"laptop\", value: 7}, {product: \"phone\", value: 8}, {product: \"tablet\", value: 6}]', function() {\n  expect(getSortedModifiedObjects([{product: \"L aptop\", value: 40}, {product: \" Tablet\", value: 30}, {product: \" Phone\", value: 60}], 0, 3, \"product\")).to.deep.equal([{product: \"laptop\", value: 7}, {product: \"phone\", value: 8}, {product: \"tablet\", value: 6}]);\n});\n\nit('getSortedModifiedObjects([{model: \" A\", value: 100}, {model: \"B \", value: 10}, {model: \" C\", value: 20}], 1, 3, \"model\") should return [{model: \"b\", value: 4}, {model: \"c\", value: 5}]', function() {\n  expect(getSortedModifiedObjects([{model: \" A\", value: 100}, {model: \"B \", value: 10}, {model: \" C\", value: 20}], 1, 3, \"model\")).to.deep.equal([{model: \"b\", value: 4}, {model: \"c\", value: 5}]);\n});\n\nit('getSortedModifiedObjects([{name: \" Al ice\", value: 45}, {name: \" Bo b\", value: 55}, {name: \"Ch arlie\", value: 65}], 1, 3, \"name\") should return [{name: \"bob\", value: 8}, {name: \"charlie\", value: 9}]', function() {\n  expect(getSortedModifiedObjects([{name: \" Al ice\", value: 45}, {name: \" Bo b\", value: 55}, {name: \"Ch arlie\", value: 65}], 1, 3, \"name\")).to.deep.equal([{name: \"bob\", value: 8}, {name: \"charlie\", value: 9}]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}