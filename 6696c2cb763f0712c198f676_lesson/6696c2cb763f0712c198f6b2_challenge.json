{
  "_id": "6696c2cb763f0712c198f6b2",
  "name": {
    "en": "/*",
    "ru": "Комплексная обработка данных и инверсия массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `complexDataProcessing`, которая принимает массив чисел и выполняет следующие операции:\n\n* Фильтрует все числа больше 10.\n* Каждое число умножает на 2.\n* Исключает из массива все числа, которые теперь стали больше или равны 50.\n* Возвращает новый массив с элементами в обратном порядке.\n\nИспользуйте метод `toReversed()` для инвертирования массива.\n\n\nПримеры запуска функции:\n```javascript\ncomplexDataProcessing([1, 2, 3, 11, 21, 31]); // [42, 22]\ncomplexDataProcessing([5, 10, 15, 20, 25]); // [40, 30]\ncomplexDataProcessing([12, 22, 32, 42]); // [44, 24]\ncomplexDataProcessing([50, 60, 70]); // []\n```"
  },
  "initialSolution": "function complexDataProcessing(){\n\n}",
  "completedSolution": "function complexDataProcessing(arr) {\n  const result = []\n\n  arr.forEach(n => {\n    if(n > 10){\n      n *= 2\n      if(n < 50) result.push(n)\n    }\n  })\n\n  return result.toReversed();\n}",
  "openTest": "Array.prototype.toReversed = function(){\n  return this.slice().reverse()\n}\n\nit('Created function complexDataProcessing', () => {\n  expect(complexDataProcessing).to.be.a('function');\n});\n\nit(\"Function complexDataProcessing() should include toReversed method\", () => {\n  const result = complexDataProcessing.toString();\n  expect(result).to.include('.toReversed()');\n});\n\nit(\"Function complexDataProcessing() should not include comments\", () => {\n  const result = complexDataProcessing.toString();\n  expect(result).to.not.include('//');\n  expect(result).to.not.include('/*');\n});\n\nit(\"Function complexDataProcessing() should not modify the original array\", () => {\n  let originalArray = [1, 2, 3, 4];\n  complexDataProcessing(originalArray);\n  expect(originalArray).to.deep.equal([1, 2, 3, 4]);\n});\n\nit(\"complexDataProcessing([5, 10, 15, 20, 25]) should return [40, 30]\", () => {\n  expect(complexDataProcessing([5, 10, 15, 20, 25])).to.deep.equal([40, 30]);\n});\n\nit(\"complexDataProcessing([12, 22, 32, 42]) should return [44, 24]\", () => {\n  expect(complexDataProcessing([12, 22, 32, 42])).to.deep.equal([44, 24]);\n});\n\nit(\"complexDataProcessing([50, 60, 70]) should return []\", () => {\n  expect(complexDataProcessing([50, 60, 70])).to.deep.equal([]);\n});\n\nit(\"complexDataProcessing([1, 2, 3, 11, 21, 31]) should return [42, 22]\", () => {\n  expect(complexDataProcessing([1, 2, 3, 11, 21, 31])).to.deep.equal([42, 22]);\n});\n\nit(\"complexDataProcessing([13, 23, 33]) should return [46, 26]\", () => {\n  expect(complexDataProcessing([13, 23, 33])).to.deep.equal([46, 26]);\n});\n\nit(\"complexDataProcessing([15, 25, 35]) should return [30]\", () => {\n  expect(complexDataProcessing([15, 25, 35])).to.deep.equal([30]);\n});\n\nit(\"complexDataProcessing([10, 20, 30, 40, 50]) should return [40]\", () => {\n  expect(complexDataProcessing([10, 20, 30, 40, 50])).to.deep.equal([40]);\n});\n\nit(\"complexDataProcessing([10, 22, 11, 21]) should return [42, 22, 44]\", () => {\n  expect(complexDataProcessing([10, 22, 11, 21])).to.deep.equal([42, 22, 44]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}