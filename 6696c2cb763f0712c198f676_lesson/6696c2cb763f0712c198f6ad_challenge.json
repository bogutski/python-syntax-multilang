{
  "_id": "6696c2cb763f0712c198f6ad",
  "name": {
    "en": "/*",
    "ru": "Отбор и инверсия элементов массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `selectAndReverse`, которая принимает массив и функцию условия `condition`.\n\nФункция должна возвращать новый массив, содержащий только те элементы исходного массива, которые удовлетворяют условию, переданному в `condition`, с элементами, расположенными в обратном порядке.\n\nИспользуйте методы `toReversed()` для инвертирования элементов массива.\n\n\nПримеры запуска функции:\n```javascript\nselectAndReverse([1, 2, 3, 4, 5, 6], x => x % 2 === 0); // [6, 4, 2]\nselectAndReverse([true, false, true, false], x => x === false); // [false, false]\nselectAndReverse(['apple', 'banana', 'cherry'], word => word.length > 5); // ['cherry', 'banana']\n```"
  },
  "initialSolution": "function selectAndReverse(){\n\n}",
  "completedSolution": "function selectAndReverse(array, condition) {\n  let res = []\n  array.forEach(el => {if(condition(el)) res.push(el)})\n\n  return res.toReversed();\n}",
  "openTest": "Array.prototype.toReversed = function(){\n  return this.slice().reverse()\n}\n\nit('Created function selectAndReverse', () => {\n  expect(selectAndReverse).to.be.a('function');\n});\n\nit(\"Function selectAndReverse() should include toReversed method\", () => {\n  const result = selectAndReverse.toString();\n  expect(result).to.include('.toReversed()');\n});\n\nit(\"Function selectAndReverse() should not modify the original array\", () => {\n  let originalArray = ['a', 'b', 'c'];\n  selectAndReverse(originalArray, item => typeof item === 'string');\n  expect(originalArray).to.deep.equal(['a', 'b', 'c']);\n});\n\nit(\"selectAndReverse([1, 2, 3, 4, 5, 6], x => x % 2 === 0) should return [6, 4, 2]\", () => {\n  expect(selectAndReverse([1, 2, 3, 4, 5, 6], x => x % 2 === 0)).to.deep.equal([6, 4, 2]);\n});\n\nit(\"selectAndReverse(['apple', 'banana', 'cherry'], word => word.length > 5) should return ['cherry', 'banana']\", () => {\n  expect(selectAndReverse(['apple', 'banana', 'cherry'], word => word.length > 5)).to.deep.equal(['cherry', 'banana']);\n});\n\nit(\"selectAndReverse([true, false, true, false], x => x === false) should return [false, false]\", () => {\n  expect(selectAndReverse([true, false, true, false], x => x === false)).to.deep.equal([false, false]);\n});\n\nit(\"selectAndReverse(['one', 'two', 'three', 'four', 'five'], x => x.includes('o')) should return ['four', 'two', 'one']\", () => {\n  expect(selectAndReverse(['one', 'two', 'three', 'four', 'five'], x => x.includes('o'))).to.deep.equal(['four', 'two', 'one']);\n});\n\nit(\"selectAndReverse([10, 20, 30, 40, 50], x => x > 25) should return [50, 40, 30]\", () => {\n  expect(selectAndReverse([10, 20, 30, 40, 50], x => x > 25)).to.deep.equal([50, 40, 30]);\n});\n\nit(\"selectAndReverse([100, 200, 300], x => x < 150) should return [100]\", () => {\n  expect(selectAndReverse([100, 200, 300], x => x < 150)).to.deep.equal([100]);\n});\n\nit(\"selectAndReverse([1, 2, 3, 4, 5], x => x > 5) should return []\", () => {\n  expect(selectAndReverse([1, 2, 3, 4, 5], x => x > 5)).to.deep.equal([]);\n});\n\nit(\"selectAndReverse(['react', 'angular', 'vue'], x => x.startsWith('a')) should return ['angular']\", () => {\n  expect(selectAndReverse(['react', 'angular', 'vue'], x => x.startsWith('a'))).to.deep.equal(['angular']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}