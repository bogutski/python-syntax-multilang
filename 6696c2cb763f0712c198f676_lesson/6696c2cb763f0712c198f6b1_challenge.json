{
  "_id": "6696c2cb763f0712c198f6b1",
  "name": {
    "en": "/*",
    "ru": "Вычисление среднего и инверсия массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `averageAndReverse`, которая принимает массив чисел.\n\nФункция должна найти среднее значение этих чисел, и вернуть массив, в котором каждый элемент является разностью между средним значением и соответствующим элементом массива, расположенными в обратном порядке.\n\nИспользуйте метод `toReversed()` для инверсии массива после выполнения вычислений.\n\n\nПримеры запуска функции:\n```javascript\naverageAndReverse([10, 20, 30, 40, 50]); // [20, 10, 0, -10, -20]\naverageAndReverse([1, 2, 3, 4, 5]); // [2, 1, 0, -1, -2]\naverageAndReverse([100, 200]); // [50, -50]\naverageAndReverse([]); // []\n```"
  },
  "initialSolution": "function averageAndReverse(){\n\n}",
  "completedSolution": "function averageAndReverse(array) {\n  const average = array.reduce((acc, n) => acc + n, 0) / array.length\n  return array.map(n => n - average).toReversed()\n}",
  "openTest": "Array.prototype.toReversed = function(){\n  return this.slice().reverse()\n}\n\nit('Created function averageAndReverse', () => {\n  expect(averageAndReverse).to.be.a('function');\n});\n\nit(\"Function averageAndReverse() should include toReversed method\", () => {\n  const result = averageAndReverse.toString();\n  expect(result).to.include('.toReversed()');\n});\n\nit(\"Function averageAndReverse() should not include comments\", () => {\n  const result = averageAndReverse.toString();\n  expect(result).to.not.include('//');\n  expect(result).to.not.include('/*');\n});\n\nit(\"Function averageAndReverse() should not modify the original array\", () => {\n  let originalArray = [1, 2, 3, 4];\n  averageAndReverse(originalArray);\n  expect(originalArray).to.deep.equal([1, 2, 3, 4]);\n});\n\nit(\"averageAndReverse([1, 2, 3, 4, 5]) should return [2, 1, 0, -1, -2]\", () => {\n  expect(averageAndReverse([1, 2, 3, 4, 5])).to.deep.equal([2, 1, 0, -1, -2]);\n});\n\nit(\"averageAndReverse([10, 20, 30, 40, 50]) should return [20, 10, 0, -10, -20]\", () => {\n  expect(averageAndReverse([10, 20, 30, 40, 50])).to.deep.equal([20, 10, 0, -10, -20]);\n});\n\nit(\"averageAndReverse([100, 200]) should return [50, -50]\", () => {\n  expect(averageAndReverse([100, 200])).to.deep.equal([50, -50]);\n});\n\nit(\"averageAndReverse([]) should return []\", () => {\n  expect(averageAndReverse([])).to.deep.equal([]);\n});\n\nit(\"averageAndReverse([-10, 0, 10, 20]) should return [15, 5, -5, -15]\", () => {\n  expect(averageAndReverse([-10, 0, 10, 20])).to.deep.equal([15, 5, -5, -15]);\n});\n\nit(\"averageAndReverse([5]) should return [0]\", () => {\n  expect(averageAndReverse([5])).to.deep.equal([0]);\n});\n\nit(\"averageAndReverse([1, 1, 1, 1, 1]) should return [0, 0, 0, 0, 0]\", () => {\n  expect(averageAndReverse([1, 1, 1, 1, 1])).to.deep.equal([0, 0, 0, 0, 0]);\n});\n\nit(\"averageAndReverse([15, -15, 0]) should return [0, -15, 15]\", () => {\n  expect(averageAndReverse([15, -15, 0])).to.deep.equal([0, -15, 15]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}