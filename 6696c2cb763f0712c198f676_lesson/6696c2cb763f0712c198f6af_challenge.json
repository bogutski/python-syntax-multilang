{
  "_id": "6696c2cb763f0712c198f6af",
  "name": {
    "en": "/*",
    "ru": "Применение действий и инверсия массива"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `applyAndReverse`, которая принимает массив и функцию `action`.\n\nФункция должна применять переданное действие к каждому элементу массива, а затем возвращать новый массив с измененными элементами в обратном порядке.\n\nИспользуйте метод `toReversed()` для их инвертирования.\n\n\nПримеры запуска функции:\n```javascript\napplyAndReverse([1, 2, 3], x => x * 2); // [6, 4, 2]\napplyAndReverse(['a', 'b', 'c'], char => char.toUpperCase()); // ['C', 'B', 'A']\napplyAndReverse([true, false, true], bool => !bool); // [false, true, false]\n```"
  },
  "initialSolution": "function applyAndReverse(){\n\n}",
  "completedSolution": "function applyAndReverse(arr, action) {\n  const res = arr.map(action)\n  return res.toReversed();\n}",
  "openTest": "Array.prototype.toReversed = function(){\n  return this.slice().reverse()\n}\n\nit('Created function applyAndReverse', () => {\n  expect(applyAndReverse).to.be.a('function');\n});\n\nit(\"Function applyAndReverse() should include toReversed method\", () => {\n  const result = applyAndReverse.toString();\n  expect(result).to.include('.toReversed()');\n});\n\nit(\"Function applyAndReverse() should not include comments\", () => {\n  const result = applyAndReverse.toString();\n  expect(result).to.not.include('//');\n  expect(result).to.not.include('/*');\n});\n\nit(\"Function applyAndReverse() should not modify the original array\", () => {\n  let originalArray = [1, 2, 3];\n  applyAndReverse(originalArray, x => x * 2);\n  expect(originalArray).to.deep.equal([1, 2, 3]);\n});\n\nit(\"applyAndReverse([1, 2, 3], x => x * 2) should return [6, 4, 2]\", () => {\n  expect(applyAndReverse([1, 2, 3], x => x * 2)).to.deep.equal([6, 4, 2]);\n});\n\nit(\"applyAndReverse(['a', 'b', 'c'], char => char.toUpperCase()) should return ['C', 'B', 'A']\", () => {\n  expect(applyAndReverse(['a', 'b', 'c'], char => char.toUpperCase())).to.deep.equal(['C', 'B', 'A']);\n});\n\nit(\"applyAndReverse([true, false, true], bool => !bool) should return [false, true, false]\", () => {\n  expect(applyAndReverse([true, false, true], bool => !bool)).to.deep.equal([false, true, false]);\n});\n\nit(\"applyAndReverse([0, 1, 2, 3], x => x + 1) should return [4, 3, 2, 1]\", () => {\n  expect(applyAndReverse([0, 1, 2, 3], x => x + 1)).to.deep.equal([4, 3, 2, 1]);\n});\n\nit(\"applyAndReverse(['red', 'green', 'blue'], color => color.slice(0, -1)) should return ['blu', 'gree', 're']\", () => {\n  expect(applyAndReverse(['red', 'green', 'blue'], color => color.slice(0, -1))).to.deep.equal(['blu', 'gree', 're']);\n});\n\nit(\"applyAndReverse([10, 20, 30], num => num / 2) should return [15, 10, 5]\", () => {\n  expect(applyAndReverse([10, 20, 30], num => num / 2)).to.deep.equal([15, 10, 5]);\n});\n\nit(\"applyAndReverse(['single'], word => word.repeat(2)) should return ['singlesingle']\", () => {\n  expect(applyAndReverse(['single'], word => word.repeat(2))).to.deep.equal(['singlesingle']);\n});\n\nit(\"applyAndReverse([3, 6, 9], x => x % 3) should return [0, 0, 0]\", () => {\n  expect(applyAndReverse([3, 6, 9], x => x % 3)).to.deep.equal([0, 0, 0]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}