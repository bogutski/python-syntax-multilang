{
  "_id": "6696c2cb763f0712c198f6b3",
  "name": {
    "en": "/*",
    "ru": "Коррекция и анализ пиковой активности"
  },
  "instruction": {
    "en": "",
    "ru": "Данные о посещаемости магазина по часам за один день записаны в массиве в обратном порядке (24 значения), что делает первый элемент массива соответствующим последнему часу дня, а последний — первому часу.\n\nНапишите функцию `correctAndAnalyzePeaks`, которая выполняет следующие действия:\n\n* Использует метод `toReversed()` для инвертирования массива, чтобы часы совпадали с правильным временем дня (индексам).\n* Определяет три часа с максимальным количеством посетителей.\n* Возвращает массив объектов с этими тремя часами и количеством посетителей: `[{hour: 5, visitors: 45}, ...]`.\n* Массив должен быть отсортированный в порядке возрастания количества посетителей.\n\n\nПримеры запуска функции:\n```javascript\nconsole.log(correctAndAnalyzePeaks([10, 12, 5, 3, 15, 18, 45, 30]));\n// Вывод: [\n//   { hour: 2, visitors: 18 },\n//   { hour: 0, visitors: 30 },\n//   { hour: 1, visitors: 45 }\n// ]\n\nconsole.log(correctAndAnalyzePeaks([50, 10]));\n// Вывод: [\n//   { hour: 1, visitors: 10 },\n//   { hour: 0, visitors: 50 }\n// ]\n```"
  },
  "initialSolution": "function correctAndAnalyzePeaks(){\n\n}",
  "completedSolution": "function correctAndAnalyzePeaks(arr) {\n  const reversed = arr.toReversed()\n\n  let peakTime = []\n  let loops\n\n  if(arr.length >= 3) loops = 3\n  else loops = arr.length\n\n  while(peakTime.length < loops){\n    const maxN = Math.max(...reversed)\n    const maxIndex = reversed.indexOf(maxN)\n    peakTime.push({hour:maxIndex, visitors: maxN})\n    reversed.splice(maxIndex, 1, null)\n  }\n\n  return peakTime.sort((a, b) => a.visitors - b.visitors);\n}",
  "openTest": "Array.prototype.toReversed = function(){\n  return this.slice().reverse()\n}\n\nit('Created function correctAndAnalyzePeaks', () => {\n  expect(correctAndAnalyzePeaks).to.be.a('function');\n});\n\nit(\"Function correctAndAnalyzePeaks() should include toReversed method\", () => {\n  const result = correctAndAnalyzePeaks.toString();\n  expect(result).to.include('.toReversed()');\n});\n\nit(\"Function correctAndAnalyzePeaks() should not include comments\", () => {\n  const result = correctAndAnalyzePeaks.toString();\n  expect(result).to.not.include('//');\n  expect(result).to.not.include('/*');\n});\n\nit(\"Function correctAndAnalyzePeaks() should not modify the original array\", () => {\n  let originalArray = [1, 2, 3, 4];\n  correctAndAnalyzePeaks(originalArray);\n  expect(originalArray).to.deep.equal([1, 2, 3, 4]);\n});\n\nit(\"correctAndAnalyzePeaks([10, 12, 5, 3, 15, 18, 45, 30]) should return [{ hour: 2, visitors: 18 }, { hour: 0, visitors: 30 }, { hour: 1, visitors: 45 }]\", () => {\n  expect(correctAndAnalyzePeaks([10, 12, 5, 3, 15, 18, 45, 30])).to.deep.equal([{ hour: 2, visitors: 18 }, { hour: 0, visitors: 30 }, { hour: 1, visitors: 45 }]);\n});\n\nit(\"correctAndAnalyzePeaks([50, 10]) should return [{ hour: 0, visitors: 10 }, { hour: 1, visitors: 50 }]\", () => {\n  expect(correctAndAnalyzePeaks([50, 10])).to.deep.equal([{ hour: 0, visitors: 10 }, { hour: 1, visitors: 50 }]);\n});\n\nit(\"correctAndAnalyzePeaks([1, 2, 3, 100, 90, 80]) should return [{ hour: 0, visitors: 80 }, { hour: 1, visitors: 90 }, { hour: 2, visitors: 100 }]\", () => {\n  expect(correctAndAnalyzePeaks([1, 2, 3, 100, 90, 80])).to.deep.equal([{ hour: 0, visitors: 80 }, { hour: 1, visitors: 90 }, { hour: 2, visitors: 100 }]);\n});\n\nit(\"correctAndAnalyzePeaks([]) should return []\", () => {\n  expect(correctAndAnalyzePeaks([])).to.deep.equal([]);\n});\n\nit(\"correctAndAnalyzePeaks([100, 50]) should return [{ hour: 0, visitors: 50 }, { hour: 1, visitors: 100 }]\", () => {\n  expect(correctAndAnalyzePeaks([100, 50])).to.deep.equal([{ hour: 0, visitors: 50 }, { hour: 1, visitors: 100 }]);\n});\n\nit(\"correctAndAnalyzePeaks([100]) should return [{ hour: 0, visitors: 100 }]\", () => {\n  expect(correctAndAnalyzePeaks([100])).to.deep.equal([{ hour: 0, visitors: 100 }]);\n});\n\nit(\"correctAndAnalyzePeaks([100, 50, 50, 50, 50, 50, 50, 50]) should return [{ hour: 0, visitors: 50 }, { hour: 1, visitors: 50 }, { hour: 7, visitors: 100 }]\", () => {\n  expect(correctAndAnalyzePeaks([100, 50, 50, 50, 50, 50, 50, 50])).to.deep.equal([{ hour: 0, visitors: 50 }, { hour: 1, visitors: 50 }, { hour: 7, visitors: 100 }]);\n});\n\nit(\"correctAndAnalyzePeaks([30, 20, 10, 40, 50, 60, 70, 80]) should return [{ hour: 2, visitors: 60 }, { hour: 1, visitors: 70 }, { hour: 0, visitors: 80 }]\", () => {\n  expect(correctAndAnalyzePeaks([30, 20, 10, 40, 50, 60, 70, 80])).to.deep.equal([{ hour: 2, visitors: 60 }, { hour: 1, visitors: 70 }, { hour: 0, visitors: 80 }]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}