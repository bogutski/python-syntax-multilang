{
  "_id": "6696c2cb763f0712c198f6aa",
  "name": {
    "en": "/*",
    "ru": "Использование метода toReversed"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `demonstrateToReversed`, которая принимает массив как аргумент и возвращает новый массив, в котором элементы расположены в обратном порядке.\n\nВаша задача — использовать метод `toReversed()` для достижения этой цели.\n\n\nПримеры запуска функции:\n```javascript\ndemonstrateToReversed([1, 2, 3]); // [3, 2, 1]\ndemonstrateToReversed(['a', 'b', 'c']); // ['c', 'b', 'a']\ndemonstrateToReversed([]); // []\n```"
  },
  "initialSolution": "function demonstrateToReversed(){\n\n}",
  "completedSolution": "function demonstrateToReversed(array) {\n  return array.toReversed();\n}",
  "openTest": "Array.prototype.toReversed = function(){\n  return this.slice().reverse()\n}\n\nit('Created function demonstrateToReversed', () => {\n  expect(demonstrateToReversed).to.be.a('function');\n});\n\nit(\"Function demonstrateToReversed() should include toReversed method\", () => {\n  const result = demonstrateToReversed.toString();\n  expect(result).to.include('.toReversed()');\n});\n\nit(\"Function demonstrateToReversed() should not modify the original array\", () => {\n  let originalArray = [1, 2, 3, 4, 5];\n  demonstrateToReversed(originalArray);\n  expect(originalArray).to.deep.equal([1, 2, 3, 4, 5]);\n});\n\nit(\"demonstrateToReversed([1, 2, 3]) should return [3, 2, 1]\", () => {\n  expect(demonstrateToReversed([1, 2, 3])).to.deep.equal([3, 2, 1]);\n});\n\nit(\"demonstrateToReversed(['a', 'b', 'c']) should return ['c', 'b', 'a']\", () => {\n  expect(demonstrateToReversed(['a', 'b', 'c'])).to.deep.equal(['c', 'b', 'a']);\n});\n\nit(\"demonstrateToReversed([]) should return []\", () => {\n  expect(demonstrateToReversed([])).to.deep.equal([]);\n});\n\nit(\"demonstrateToReversed([true, false]) should return [false, true]\", () => {\n  expect(demonstrateToReversed([true, false])).to.deep.equal([false, true]);\n});\n\nit(\"demonstrateToReversed([1]) should return [1]\", () => {\n  expect(demonstrateToReversed([1])).to.deep.equal([1]);\n});\n\nit(\"demonstrateToReversed([1, 2, 2, 3]) should return [3, 2, 2, 1]\", () => {\n  expect(demonstrateToReversed([1, 2, 2, 3])).to.deep.equal([3, 2, 2, 1]);\n});\n\nit(\"demonstrateToReversed(['apple', 'banana']) should return ['banana', 'apple']\", () => {\n  expect(demonstrateToReversed(['apple', 'banana'])).to.deep.equal(['banana', 'apple']);\n});\n\nit(\"demonstrateToReversed([null, undefined, null]) should return [null, undefined, null]\", () => {\n  expect(demonstrateToReversed([null, undefined, null])).to.deep.equal([null, undefined, null]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}