{
  "_id": "6696c2cb763f0712c198f6ac",
  "name": {
    "en": "/*",
    "ru": "Трансформация и инверсия данных"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `transformAndReverse`, которая принимает массив строк и возвращает новый массив, в котором каждая строка переведена в верхний регистр и массив расположен в обратном порядке.\n\nИспользуйте метод `map()` для трансформации строк и `toReversed()` для их инвертирования.\n\n\nПримеры запуска функции:\n```javascript\ntransformAndReverse([\"apple\", \"banana\", \"cherry\"]); // [\"CHERRY\", \"BANANA\", \"APPLE\"]\ntransformAndReverse([\"hello\", \"world\"]);            // [\"WORLD\", \"HELLO\"]\ntransformAndReverse([]);                           // []\n```"
  },
  "initialSolution": "function transformAndReverse(){\n\n}",
  "completedSolution": "function transformAndReverse(array) {\n  const res = array.map(el => el.toUpperCase())\n  return res.toReversed();\n}",
  "openTest": "Array.prototype.toReversed = function(){\n  return this.slice().reverse()\n}\n\nit('Created function transformAndReverse', () => {\n  expect(transformAndReverse).to.be.a('function');\n});\n\nit(\"Function transformAndReverse() should include toReversed method\", () => {\n  const result = transformAndReverse.toString();\n  expect(result).to.include('.toReversed()');\n});\n\nit(\"Function transformAndReverse() should not modify the original array\", () => {\n  let originalArray = ['a', 'b', 'c'];\n  transformAndReverse(originalArray);\n  expect(originalArray).to.deep.equal(['a', 'b', 'c']);\n});\n\nit(\"transformAndReverse(['apple', 'banana', 'cherry']) should return ['CHERRY', 'BANANA', 'APPLE']\", () => {\n  expect(transformAndReverse(['apple', 'banana', 'cherry'])).to.deep.equal(['CHERRY', 'BANANA', 'APPLE']);\n});\n\nit(\"transformAndReverse(['hello', 'world']) should return ['WORLD', 'HELLO']\", () => {\n  expect(transformAndReverse(['hello', 'world'])).to.deep.equal(['WORLD', 'HELLO']);\n});\n\nit(\"transformAndReverse([]) should return []\", () => {\n  expect(transformAndReverse([])).to.deep.equal([]);\n});\n\nit(\"transformAndReverse(['one', 'two', 'three']) should return ['THREE', 'TWO', 'ONE']\", () => {\n  expect(transformAndReverse(['one', 'two', 'three'])).to.deep.equal(['THREE', 'TWO', 'ONE']);\n});\n\nit(\"transformAndReverse(['Java', 'C++', 'Python']) should return ['PYTHON', 'C++', 'JAVA']\", () => {\n  expect(transformAndReverse(['Java', 'C++', 'Python'])).to.deep.equal(['PYTHON', 'C++', 'JAVA']);\n});\n\nit(\"transformAndReverse(['single']) should return ['SINGLE']\", () => {\n  expect(transformAndReverse(['single'])).to.deep.equal(['SINGLE']);\n});\n\nit(\"transformAndReverse(['123', '456']) should return ['456', '123']\", () => {\n  expect(transformAndReverse(['123', '456'])).to.deep.equal(['456', '123']);\n});\n\nit(\"transformAndReverse(['UpperCase']) should return ['UPPERCASE']\", () => {\n  expect(transformAndReverse(['UpperCase'])).to.deep.equal(['UPPERCASE']);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}