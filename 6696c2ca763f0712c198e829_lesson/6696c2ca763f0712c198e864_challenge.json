{
  "_id": "6696c2ca763f0712c198e864",
  "name": {
    "en": "Correct the 'deepCopyOfArray' function",
    "ru": "Исправьте функцию 'deepCopyOfArray'"
  },
  "instruction": {
    "en": "Fix the 'deepCopyOfArray' function so that it returns a deep copy of the array.",
    "ru": "Исправьте функцию `deepCopyOfArray`, чтобы она возвращала глубокую копию массива."
  },
  "initialSolution": "function deepCopyOfArray(arr) {\n  return json.stringify(json.parse(arr))\n}",
  "completedSolution": "function deepCopyOfArray(arr) {\n  return JSON.parse(JSON.stringify(arr))\n}",
  "openTest": "it('Created function deepCopyOfArray', () => {\n  expect(deepCopyOfArray).to.be.a('function');\n});\n\nit(\"deepCopyOfArray([{name: 'Alice', age: 18}, {name: 'Bob', age: 20}, {name: 'John', age: 30}]) should return [{name: 'Alice', age: 18}, {name: 'Bob', age: 20}, {name: 'John', age: 30}]\", () => {\n  expect(deepCopyOfArray([{name: 'Alice', age: 18}, {name: 'Bob', age: 20}, {name: 'John', age: 30}])).to.deep.equal([{name: 'Alice', age: 18}, {name: 'Bob', age: 20}, {name: 'John', age: 30}]);\n});\n\nit(\"deepCopyOfArray([{car: 'BMW', year: 2018}]) should return [{car: 'BMW', year: 2018}]\", () => {\n  expect(deepCopyOfArray([{car: 'BMW', year: 2018}])).to.deep.equal([{car: 'BMW', year: 2018}]);\n});\n\nit(\"deepCopyOfArray([{car: 'Ford', year: 2021}]) should include JSON.stringify and JSON.parse()\", () => {\n  expect(deepCopyOfArray.toString()).to.include('JSON.parse(JSON.stringify(arr))');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}