{
  "_id": "6696c2ca763f0712c198e956",
  "name": {
    "en": "Is the string a palindrome?",
    "ru": "Является ли строка палиндромом?"
  },
  "instruction": {
    "en": "Write a function `palindrome` that takes a string and returns `true` if the string is a palindrome, and `false` if it is not.\n\nA `palindrome' is a string that reads equally from left to right and right to left.\n\nAn empty string will not be checked.\n\nExamples of palindromes:\n* `racecar\n* `kayak`\n* `level`.\n\nExamples of running a function:\n```javascript\npalindrome('racecar'); // true\npalindrome('kayak'); // true\npalindrome('hello'); // false\npalindrome('apple'); // false\n```",
    "ru": "Напишите функцию `palindrome`, которая принимает строку и возвращает `true`, если строка является палиндромом, и `false`, если нет.\n\n`Палиндром` - это строка, которая читается одинаково слева направо и справа налево.\n\nПустая строка проверятся не будет.\n\nПримеры палиндромов:\n* `racecar`\n* `kayak`\n* `level`\n\nПримеры запуска функции:\n```javascript\npalindrome('racecar'); // true\npalindrome('kayak'); // true\npalindrome('hello'); // false\npalindrome('apple'); // false\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function palindrome(str) {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed === str;\n}",
  "openTest": "it('Created function palindrome', () => {\n  expect(palindrome).to.be.a('function');\n});\n\nit(\"palindrome('racecar') should return true\", () => {\n  expect(palindrome('racecar')).to.be.true;\n});\n\nit(\"palindrome('kayak') should return true\", () => {\n  expect(palindrome('kayak')).to.be.true;\n});\n\nit(\"palindrome('hello') should return false\", () => {\n  expect(palindrome('hello')).to.be.false;\n});\n\nit(\"palindrome('orange') should return false\", () => {\n  expect(palindrome('orange')).to.be.false;\n});\n\nit(\"palindrome('LeVeL') should return true\", () => {\n  expect(palindrome('LeVeL')).to.be.true;\n});\n\nit(\"palindrome('KayAk') should return false\", () => {\n  expect(palindrome('KayAk')).to.be.false;\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}