{
  "_id": "6696c2cb763f0712c198f30a",
  "name": {
    "en": "/*",
    "ru": "Добавление задач в список с проверкой уникальности"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `addUniqueTasks`, которая принимает два аргумента: массив текущих задач и массив новых задач для добавления.\n\nИспользуя метод `push()`, функция должна добавить новые задачи в конец списка текущих задач, но только если эти задачи уникальны (т.е., их еще нет в списке текущих задач).\n\nФункция должна вернуть обновленный массив задач.\n\nПримеры запуска функции:\n```javascript\naddUniqueTasks([\"Read a book\", \"Learn JavaScript\"], [\"Learn JavaScript\", \"Go for a walk\"])\n// [\"Read a book\", \"Learn JavaScript\", \"Go for a walk\"]\n\naddUniqueTasks([\"Go to the store\", \"Cook dinner\"], [\"Cook dinner\", \"Do exercise\", \"Go to the store\"])\n// [\"Go to the store\", \"Cook dinner\", \"Do exercise\"]\n\naddUniqueTasks([], [\"Read an article\", \"Drink water\"]) // [\"Read an article\", \"Drink water\"]\naddUniqueTasks([\"Finish the project\"], []) // [\"Finish the project\"]\naddUniqueTasks([], []) // []\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function addUniqueTasks(currentTasks, newTasks) {\n  for (let task of newTasks){\n    if (!currentTasks.includes(task)) {\n      currentTasks.push(task);\n    }\n  }\n\n  return currentTasks;\n}",
  "openTest": "it('Created function addUniqueTasks', () => {\n  expect(addUniqueTasks).to.be.a('function');\n});\n\nit('Adds unique tasks correctly', () => {\n  expect(addUniqueTasks([\"Study\", \"Eat\"], [\"Eat\", \"Sleep\"])).to.deep.equal([\"Study\", \"Eat\", \"Sleep\"]);\n});\n\nit('Returns the original array if all new tasks are duplicates', () => {\n  expect(addUniqueTasks([\"Run\", \"Jump\"], [\"Run\", \"Jump\"])).to.deep.equal([\"Run\", \"Jump\"]);\n});\n\nit('Correctly adds tasks to an empty array', () => {\n  expect(addUniqueTasks([], [\"Read\", \"Write\"])).to.deep.equal([\"Read\", \"Write\"]);\n});\n\nit('Returns an empty array if no tasks are provided', () => {\n  expect(addUniqueTasks([], [])).to.deep.equal([]);\n});\n\nit('Handles adding a large number of tasks efficiently', () => {\n  const manyTasks = Array.from({ length: 100 }, (_, i) => `Task ${i}`);\n  const newTasks = [\"New task 1\", \"Task 99\", \"New task 2\"];\n  const result = addUniqueTasks(manyTasks, newTasks);\n  expect(result.length).to.equal(102);\n  expect(result).to.include.members([\"New task 1\", \"New task 2\"]);\n});\n\nit('Correctly processes when new tasks array contains duplicates', () => {\n  expect(addUniqueTasks([\"task1\"], [\"task2\", \"task2\", \"task3\"])).to.deep.equal([\"task1\", \"task2\", \"task3\"]);\n});\n\nit('Works correctly with tasks having special characters', () => {\n  expect(addUniqueTasks([\"Task #1\"], [\"Task #2\", \"Task #3\", \"Task #1\"])).to.deep.equal([\"Task #1\", \"Task #2\", \"Task #3\"]);\n});\n\nit('Preserves the order of tasks after adding new ones', () => {\n  const originalTasks = [\"Original task 1\", \"Original task 2\"];\n  const newTasks = [\"New task 1\", \"Original task 2\", \"New task 2\"];\n  const updatedTasks = addUniqueTasks(originalTasks, newTasks);\n  expect(updatedTasks[0]).to.equal(\"Original task 1\");\n  expect(updatedTasks[updatedTasks.length - 1]).to.equal(\"New task 2\");\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}