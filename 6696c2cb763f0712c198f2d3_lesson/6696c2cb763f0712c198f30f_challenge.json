{
  "_id": "6696c2cb763f0712c198f30f",
  "name": {
    "en": "/*",
    "ru": "Распределение новых задач по дням недели с учетом приоритета"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `distributeTasks`, которая принимает два аргумента:\n* объект, где ключами являются дни недели, а значениями массивы задач запланированных на эти дни,\n* массив объектов новых задач.\n\nКаждый объект новой задачи содержит свойства `task` (название задачи), `day` (день недели, на который запланирована задача) и `priority` (булево значение, где true означает высокий приоритет задачи).\n\nЕсли задача высокого приоритета, она должна быть добавлена в начало списка задач на соответствующий день, в противном случае — в конец.\n\nФункция должна возвращать обновленный объект расписания.\n\nПримеры запуска функции:\n```javascript\ndistributeTasks({\"Monday\": [\"Check emails\"], \"Wednesday\": [\"Write report\"]}, [\n    {task: \"Team meeting\", day: \"Monday\", priority: true},\n    {task: \"Code review\", day: \"Wednesday\", priority: false}\n])\n// {\"Monday\": [\"Team meeting\", \"Check emails\"], \"Wednesday\": [\"Write report\", \"Code review\"]}\n\ndistributeTasks({}, [\n    {task: \"Start new feature\", day: \"Tuesday\", priority: false},\n    {task: \"Fix bugs\", day: \"Tuesday\", priority: true}\n])\n// {\"Tuesday\": [\"Fix bugs\", \"Start new feature\"]}\n\ndistributeTasks({\"Friday\": [\"Deploy app\"]}, [{task: \"Prepare deployment\", day: \"Friday\", priority: true}])\n// returns {\"Friday\": [\"Prepare deployment\", \"Deploy app\"]}\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function distributeTasks(weeklyTasks, newTasks) {\n  for(let {task, day, priority} of newTasks){\n    if(!weeklyTasks[day]) weeklyTasks[day] = []\n\n    if(priority) weeklyTasks[day].unshift(task)\n    else weeklyTasks[day].push(task)\n  }\n\n  return weeklyTasks;\n}",
  "openTest": "it('Created function distributeTasks', () => {\n  expect(distributeTasks).to.be.a('function');\n});\n\nit('distributeTasks({\"Monday\": [\"Check emails\"], \"Wednesday\": [\"Write report\"]}, [{task: \"Team meeting\", day: \"Monday\", priority: true}, {task: \"Code review\", day: \"Wednesday\", priority: false}]) should return {\"Monday\": [\"Team meeting\", \"Check emails\"], \"Wednesday\": [\"Write report\", \"Code review\"]}', () => {\n  expect(distributeTasks({\n    \"Monday\": [\"Check emails\"],\n    \"Wednesday\": [\"Write report\"]\n  }, [\n    {task: \"Team meeting\", day: \"Monday\", priority: true},\n    {task: \"Code review\", day: \"Wednesday\", priority: false}\n  ])).to.deep.equal({\n    \"Monday\": [\"Team meeting\", \"Check emails\"],\n    \"Wednesday\": [\"Write report\", \"Code review\"]\n  });\n});\n\nit('distributeTasks({}, [{task: \"Start new feature\", day: \"Tuesday\", priority: false}, {task: \"Fix bugs\", day: \"Tuesday\", priority: true}]) should return {\"Tuesday\": [\"Fix bugs\", \"Start new feature\"]}', () => {\n  expect(distributeTasks({}, [\n    {task: \"Start new feature\", day: \"Tuesday\", priority: false},\n    {task: \"Fix bugs\", day: \"Tuesday\", priority: true}\n  ])).to.deep.equal({\"Tuesday\": [\"Fix bugs\", \"Start new feature\"]});\n});\n\nit('distributeTasks({\"Friday\": [\"Deploy app\"]}, [{task: \"Prepare deployment\", day: \"Friday\", priority: true}]) should return {\"Friday\": [\"Prepare deployment\", \"Deploy app\"]}', () => {\n  expect(distributeTasks({\n    \"Friday\": [\"Deploy app\"]\n  }, [\n    {task: \"Prepare deployment\", day: \"Friday\", priority: true}\n  ])).to.deep.equal({\"Friday\": [\"Prepare deployment\", \"Deploy app\"]});\n});\n\nit('distributeTasks({\"Thursday\": [\"Review metrics\"]}, [{task: \"Update dashboard\", day: \"Thursday\", priority: false}, {task: \"Sync with team\", day: \"Thursday\", priority: true}]) should return {\"Thursday\": [\"Sync with team\", \"Review metrics\", \"Update dashboard\"]}', () => {\n  expect(distributeTasks({\n    \"Thursday\": [\"Review metrics\"]\n  }, [\n    {task: \"Update dashboard\", day: \"Thursday\", priority: false},\n    {task: \"Sync with team\", day: \"Thursday\", priority: true}\n  ])).to.deep.equal({\"Thursday\": [\"Sync with team\", \"Review metrics\", \"Update dashboard\"]});\n});\n\nit('distributeTasks({\"Monday\": [\"Plan week\"], \"Wednesday\": [], \"Friday\": [\"Reflect on week\"]}, [{task: \"Design review\", day: \"Wednesday\", priority: true}, {task: \"Code cleanup\", day: \"Monday\", priority: false}, {task: \"Team outing\", day: \"Friday\", priority: true}]) should return {\"Monday\": [\"Plan week\", \"Code cleanup\"], \"Wednesday\": [\"Design review\"], \"Friday\": [\"Team outing\", \"Reflect on week\"]}', () => {\n  const schedule = {\n    \"Monday\": [\"Plan week\"],\n    \"Wednesday\": [],\n    \"Friday\": [\"Reflect on week\"]\n  };\n  const tasks = [\n    {task: \"Design review\", day: \"Wednesday\", priority: true},\n    {task: \"Code cleanup\", day: \"Monday\", priority: false},\n    {task: \"Team outing\", day: \"Friday\", priority: true}\n  ];\n  expect(distributeTasks(schedule, tasks)).to.deep.equal({\n    \"Monday\": [\"Plan week\", \"Code cleanup\"],\n    \"Wednesday\": [\"Design review\"],\n    \"Friday\": [\"Team outing\", \"Reflect on week\"]\n  });\n});\n\nit('distributeTasks({\"Tuesday\": []}, [{task: \"Documentation\", day: \"Tuesday\", priority: false}]) should return {\"Tuesday\": [\"Documentation\"]}', () => {\n  expect(distributeTasks({\n    \"Tuesday\": []\n  }, [\n    {task: \"Documentation\", day: \"Tuesday\", priority: false}\n  ])).to.deep.equal({\"Tuesday\": [\"Documentation\"]});\n});\n\nit('distributeTasks({\"Thursday\": [\"Check metrics\"]}, []) should return {\"Thursday\": [\"Check metrics\"]}', () => {\n  const originalSchedule = {\"Thursday\": [\"Check metrics\"]};\n  expect(distributeTasks(originalSchedule, [])).to.deep.equal({\"Thursday\": [\"Check metrics\"]});\n});\n\nit('distributeTasks({}, [{task: \"Client meeting\", day: \"Monday\", priority: true}, {task: \"Outreach emails\", day: \"Monday\", priority: false}]) should return {\"Monday\": [\"Client meeting\", \"Outreach emails\"]}', () => {\n  const newTasks = [\n    {task: \"Client meeting\", day: \"Monday\", priority: true},\n    {task: \"Outreach emails\", day: \"Monday\", priority: false}\n  ];\n  expect(distributeTasks({}, newTasks)).to.deep.equal({\"Monday\": [\"Client meeting\", \"Outreach emails\"]});\n});\n\nit('distributeTasks({\"Friday\": [\"End-of-week review\"]}, [{task: \"Client feedback session\", day: \"Friday\", priority: true}]) should return {\"Friday\": [\"Client feedback session\", \"End-of-week review\"]}', () => {\n  expect(distributeTasks({\n    \"Friday\": [\"End-of-week review\"]\n  }, [\n    {task: \"Client feedback session\", day: \"Friday\", priority: true}\n  ])).to.deep.equal({\"Friday\": [\"Client feedback session\", \"End-of-week review\"]});\n});\n\nit('distributeTasks({}, [{task: \"Learning hour\", day: \"Thursday\", priority: false}]) should return {\"Thursday\": [\"Learning hour\"]}', () => {\n  expect(distributeTasks({}, [\n    {task: \"Learning hour\", day: \"Thursday\", priority: false}\n  ])).to.deep.equal({\"Thursday\": [\"Learning hour\"]});\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}