{
  "_id": "6696c2cb763f0712c198f2d3",
  "content": {
    "ru": "Метод `Array.prototype.push()` является одним из наиболее часто используемых методов при работе с массивами в JavaScript. \n\nОн позволяет добавить один или несколько элементов в конец массива, изменяя его и возвращая новую длину массива.\n\n### Основы метода `push()`\n\nПрототип метода выглядит следующим образом:\n\n```javascript\narr.push(element1, element2, ..., elementN)\n```\n\n* `element1, element2, ..., elementN` – элементы, которые нужно добавить в массив. \n* Возвращает новую длину массива после добавления элементов.\n\nПример: Добавление одного элемента\n\n```javascript\nconst fruits = ['apple', 'banana'];      // Исходный массив\nconst newLength = fruits.push('orange'); // Добавляем 'orange' в конец массива\n\nconsole.log(fruits);    // Вывод: ['apple', 'banana', 'orange']\nconsole.log(newLength); // Вывод: 3\n```\n\nПример: Добавление нескольких элементов\n\n```javascript\nconst numbers = [1, 2, 3];            // Исходный массив\nconst newLength = numbers.push(4, 5); // Добавляем 4 и 5 в конец массива\n\nconsole.log(numbers);   // Вывод: [1, 2, 3, 4, 5]\nconsole.log(newLength); // Вывод: 5\n```\n\nВажные моменты:\n\n* Метод `push()` изменяет исходный массив. Если нужно сохранить исходный массив без изменений, следует использовать другие методы, например, оператор развертывания (spread operator).\n* Метод `push()` может быть использован для добавления элементов различных типов данных в массив.\n* Возвращает новую длину массива, что может быть полезно для проверок или в циклах.\n\n\nМетод `Array.prototype.push()` предоставляет простой и эффективный способ добавления элементов в конец массива. Он играет важную роль в обработке и манипуляции массивами в JavaScript, делая код более читабельным и упрощая добавление данных в массивы.\n\n\n### Альтернативы методу push() - `spread operator`\n\nВ сценариях, где необходимо избежать изменения исходного массива, можно использовать оператор развертывания (`spread operator`):\n\n```javascript\nconst initialArray = [1, 2, 3];\nconst newArray = [...initialArray, 4, 5]; // Создаем новый массив с элементами исходного массива и добавляем 4 и 5\n\nconsole.log(initialArray); // Вывод: [1, 2, 3]\nconsole.log(newArray);     // Вывод: [1, 2, 3, 4, 5]\n```\n\nЭтот подход позволяет сохранить неизменным исходный массив, создавая при этом новый массив с добавленными элементами.\n\n\n### Использование `spread operator` в функциях\n\n`Spread operator (...)` позволяет расширить итерируемые объекты, такие как массивы, в местах, где ожидается ноль или более аргументов (для вызовов функций) или элементов (для массивов). \n\nОдним из применений `spread operator` является его использование в параметрах функции для сбора всех переданных аргументов в один массив. Это особенно полезно, когда вы не знаете, сколько аргументов будет передано в вашу функцию.\n\nПример: Суммирование произвольного количества аргументов\n\nДопустим, у нас есть задача написать функцию, которая суммирует произвольное количество чисел. Мы не знаем заранее, сколько именно чисел будет передано. В этом случае мы можем использовать `spread operator` в качестве параметра функции:\n\n```javascript\nfunction sum(...numbers) {\n    let sum = 0;\n\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i]\n    }\n    \n    return sum;\n}\n\nconsole.log(sum()); // Вывод: 0\nconsole.log(sum(1, 2)); // Вывод: 3\nconsole.log(sum(1, 2, 3, 4, 5)); // Вывод: 15\n```\n\nИспользование `spread operator` в параметрах функции значительно увеличивает их гибкость и мощь, делая код более чистым и лаконичным.\n",
    "en": "# Array.prototype.push() – добавляет элемент в конец массива language: en",
    "es": "# Array.prototype.push() – добавляет элемент в конец массива language: es"
  },
  "video": {
    "ru": "",
    "en": "",
    "es": ""
  }
}