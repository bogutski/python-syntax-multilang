{
  "_id": "6696c2cb763f0712c198f308",
  "name": {
    "en": "/*",
    "ru": "Объединение массивов с добавлением уникальных элементов"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `mergeUnique` принимает два массива в качестве аргументов.\n\nФункция должна объединить эти массивы в один, используя метод `push` для добавления элементов из второго массива в первый, но только если они ещё не присутствуют в первом массиве.\n\nВерните модифицированный первый массив, который теперь должен включать любые уникальные элементы из второго массива.\n\nПримеры запуска функции:\n```javascript\nmergeUnique([null, undefined], [undefined, null, false]) // возвращает [null, undefined, false]\nmergeUnique(['a', 'b'], ['b', 'c', 'd']) // возвращает ['a', 'b', 'c', 'd']\nmergeUnique([], ['unique', 'elements']) // возвращает ['unique', 'elements']\nmergeUnique([1, 2, 3], [2, 3, 4, 5])   // возвращает [1, 2, 3, 4, 5]\nmergeUnique(['same', 'elements'], []) // возвращает ['same', 'elements']\nmergeUnique([], []) // возвращает []\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function mergeUnique(arr1, arr2) {\n  for(let element of arr2){\n    if (!arr1.includes(element)) arr1.push(element);\n  }\n\n  return arr1;\n}",
  "openTest": "it('Created function mergeUnique', () => {\n  expect(mergeUnique).to.be.a('function');\n});\n\nit('mergeUnique([1, 2, 3], [2, 3, 4, 5]) should return [1, 2, 3, 4, 5]', () => {\n  expect(mergeUnique([1, 2, 3], [2, 3, 4, 5])).to.deep.equal([1, 2, 3, 4, 5]);\n});\n\nit('mergeUnique([\"a\", \"b\"], [\"b\", \"c\", \"d\"]) should return [\"a\", \"b\", \"c\", \"d\"]', () => {\n  expect(mergeUnique(['a', 'b'], ['b', 'c', 'd'])).to.deep.equal(['a', 'b', 'c', 'd']);\n});\n\nit('mergeUnique([], [\"unique\", \"elements\"]) should return [\"unique\", \"elements\"]', () => {\n  expect(mergeUnique([], ['unique', 'elements'])).to.deep.equal(['unique', 'elements']);\n});\n\nit('mergeUnique([\"same\", \"elements\"], []) should return [\"same\", \"elements\"]', () => {\n  expect(mergeUnique(['same', 'elements'], [])).to.deep.equal(['same', 'elements']);\n});\n\nit('mergeUnique([], []) should return []', () => {\n  expect(mergeUnique([], [])).to.deep.equal([]);\n});\n\nit('mergeUnique([null, undefined], [undefined, null, false]) should return [null, undefined, false]', () => {\n  expect(mergeUnique([null, undefined], [undefined, null, false])).to.deep.equal([null, undefined, false]);\n});\n\nit('mergeUnique([true, 1], [1, \"1\", true]) should return [true, 1, \"1\"]', () => {\n  expect(mergeUnique([true, 1], [1, \"1\", true])).to.deep.equal([true, 1, \"1\"]);\n});\n\nit('mergeUnique([\"number\", 3], [3, \"3\", \"number\"]) should return [\"number\", 3, \"3\"]', () => {\n  expect(mergeUnique([\"number\", 3], [3, \"3\", \"number\"])).to.deep.equal([\"number\", 3, \"3\"]);\n});\n\nit('mergeUnique([\"empty\", \"\"], [\"\", \"filled\", \"empty\"]) should return [\"empty\", \"\", \"filled\"]', () => {\n  expect(mergeUnique([\"empty\", \"\"], [\"\", \"filled\", \"empty\"])).to.deep.equal([\"empty\", \"\", \"filled\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}