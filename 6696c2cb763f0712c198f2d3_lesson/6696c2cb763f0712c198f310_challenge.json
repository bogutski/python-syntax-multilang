{
  "_id": "6696c2cb763f0712c198f310",
  "name": {
    "en": "/*",
    "ru": "Автоматизация управления умными устройствами"
  },
  "instruction": {
    "en": "",
    "ru": "Напишите функцию `automateDeviceTasks`, которая принимает два аргумента: массив текущих задач умных устройств и массив новых задач для автоматизации.\n\nКаждая задача описывается объектом с тремя свойствами: `device` (название устройства), `task` (описание задачи), и `time` (время выполнения задачи).\n\nИспользуя метод `push()`, функция должна добавлять новые задачи в конец списка задач.\n\nЕсли в списке уже существует задача для устройства на то же время, новая задача должна заменить старую.\n\nФункция возвращает обновленный список задач.\n\nПримеры запуска функции:\n```javascript\nautomateDeviceTasks(\n    [{device: \"Coffee Maker\", task: \"Make coffee\", time: \"07:00\"}],\n    [{device: \"Coffee Maker\", task: \"Clean\", time: \"07:00\"}, {device: \"Thermostat\", task: \"Set temperature to 22C\", time: \"07:30\"}]\n)\n// returns [{device: \"Coffee Maker\", task: \"Clean\", time: \"07:00\"}, {device: \"Thermostat\", task: \"Set temperature to 22C\", time: \"07:30\"}]\n\nautomateDeviceTasks(\n    [{device: \"Light\", task: \"Turn on\", time: \"18:00\"}],\n    [{device: \"Light\", task: \"Adjust brightness\", time: \"18:00\"}]\n)\n// returns [{device: \"Light\", task: \"Adjust brightness\", time: \"18:00\"}]\n\nautomateDeviceTasks(\n    [],\n    [{device: \"Security Camera\", task: \"Activate\", time: \"22:00\"}]\n)\n// returns [{device: \"Security Camera\", task: \"Activate\", time: \"22:00\"}]\n\nautomateDeviceTasks(\n    [{device: \"Sprinkler\", task: \"Water the garden\", time: \"05:00\"}],\n    []\n)\n// returns [{device: \"Sprinkler\", task: \"Water the garden\", time: \"05:00\"}]\n\nautomateDeviceTasks(\n    [{device: \"Vacuum Cleaner\", task: \"Start cleaning\", time: \"09:00\"}],\n    [{device: \"Vacuum Cleaner\", task: \"Empty dustbin\", time: \"09:00\"}, {device: \"Vacuum Cleaner\", task: \"Charge battery\", time: \"21:00\"}]\n)\n// returns [{device: \"Vacuum Cleaner\", task: \"Empty dustbin\", time: \"09:00\"}, {device: \"Vacuum Cleaner\", task: \"Charge battery\", time: \"21:00\"}]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function automateDeviceTasks(curr, newTasks) {\n  for(let tasksToAdd of newTasks){\n    let needToAdd = true\n\n    for(let currTask of curr){\n      if(currTask.device === tasksToAdd.device && currTask.time === tasksToAdd.time) {\n        currTask.task = tasksToAdd.task\n        needToAdd = false\n      }\n    }\n\n    if(needToAdd) curr.push(tasksToAdd)\n\n  }\n  return curr;\n}",
  "openTest": "it('Created function automateDeviceTasks', () => {\n  expect(automateDeviceTasks).to.be.a('function');\n});\n\nit('automateDeviceTasks([{device: \"Coffee Maker\", task: \"Make coffee\", time: \"07:00\"}], [{device: \"Coffee Maker\", task: \"Clean\", time: \"07:00\"}, {device: \"Thermostat\", task: \"Set temperature to 22C\", time: \"07:30\"}]) should return updated tasks list with Coffee Maker cleaning and new Thermostat setting', () => {\n  const initialTasks = [{device: \"Coffee Maker\", task: \"Make coffee\", time: \"07:00\"}];\n  const newTasks = [{device: \"Coffee Maker\", task: \"Clean\", time: \"07:00\"}, {device: \"Thermostat\", task: \"Set temperature to 22C\", time: \"07:30\"}];\n  expect(automateDeviceTasks(initialTasks, newTasks)).to.deep.equal([{device: \"Coffee Maker\", task: \"Clean\", time: \"07:00\"}, {device: \"Thermostat\", task: \"Set temperature to 22C\", time: \"07:30\"}]);\n});\n\nit('automateDeviceTasks with an empty initial list should simply add the new device task', () => {\n  const newTasks = [{device: \"Security Camera\", task: \"Activate\", time: \"22:00\"}];\n  expect(automateDeviceTasks([], newTasks)).to.deep.equal([{device: \"Security Camera\", task: \"Activate\", time: \"22:00\"}]);\n});\n\nit('automateDeviceTasks should replace an existing task for a device at the same time with the new task', () => {\n  const initialTasks = [{device: \"Light\", task: \"Turn on\", time: \"18:00\"}];\n  const newTasks = [{device: \"Light\", task: \"Adjust brightness\", time: \"18:00\"}];\n  expect(automateDeviceTasks(initialTasks, newTasks)).to.deep.equal([{device: \"Light\", task: \"Adjust brightness\", time: \"18:00\"}]);\n});\n\nit('automateDeviceTasks should add all new tasks when no conflicts with time exist', () => {\n  const initialTasks = [{device: \"Vacuum Cleaner\", task: \"Start cleaning\", time: \"09:00\"}];\n  const newTasks = [{device: \"Vacuum Cleaner\", task: \"Empty dustbin\", time: \"09:00\"}, {device: \"Vacuum Cleaner\", task: \"Charge battery\", time: \"21:00\"}];\n  expect(automateDeviceTasks(initialTasks, newTasks)).to.deep.equal([{device: \"Vacuum Cleaner\", task: \"Empty dustbin\", time: \"09:00\"}, {device: \"Vacuum Cleaner\", task: \"Charge battery\", time: \"21:00\"}]);\n});\n\nit('automateDeviceTasks should handle multiple devices and tasks correctly', () => {\n  const initialTasks = [{device: \"Speaker\", task: \"Play music\", time: \"19:00\"}];\n  const newTasks = [{device: \"Speaker\", task: \"Adjust volume\", time: \"19:00\"}, {device: \"Thermostat\", task: \"Lower temperature\", time: \"23:00\"}];\n  expect(automateDeviceTasks(initialTasks, newTasks)).to.deep.equal([{device: \"Speaker\", task: \"Adjust volume\", time: \"19:00\"}, {device: \"Thermostat\", task: \"Lower temperature\", time: \"23:00\"}]);\n});\n\nit('automateDeviceTasks with no new tasks should return the initial task list unchanged', () => {\n  const initialTasks = [{device: \"Fridge\", task: \"Restock\", time: \"12:00\"}];\n  expect(automateDeviceTasks(initialTasks, [])).to.deep.equal([{device: \"Fridge\", task: \"Restock\", time: \"12:00\"}]);\n});\n\nit('automateDeviceTasks should ensure that if a device has multiple tasks at different times, they are all preserved', () => {\n  const initialTasks = [{device: \"Fridge\", task: \"Defrost\", time: \"10:00\"}];\n  const newTasks = [{device: \"Fridge\", task: \"Restock\", time: \"12:00\"}, {device: \"Fridge\", task: \"Clean\", time: \"15:00\"}];\n  expect(automateDeviceTasks(initialTasks, newTasks)).to.deep.equal([{device: \"Fridge\", task: \"Defrost\", time: \"10:00\"}, {device: \"Fridge\", task: \"Restock\", time: \"12:00\"}, {device: \"Fridge\", task: \"Clean\", time: \"15:00\"}]);\n});\n\nit('automateDeviceTasks should add a new task at a different time even if the device is the same', () => {\n  const initialTasks = [{device: \"AC Unit\", task: \"Turn on\", time: \"14:00\"}];\n  const newTasks = [{device: \"AC Unit\", task: \"Turn off\", time: \"22:00\"}];\n  expect(automateDeviceTasks(initialTasks, newTasks)).to.deep.equal([{device: \"AC Unit\", task: \"Turn on\", time: \"14:00\"}, {device: \"AC Unit\", task: \"Turn off\", time: \"22:00\"}]);\n});\n\nit('automateDeviceTasks should not duplicate a task for the same device and time', () => {\n  const initialTasks = [{device: \"Coffee Maker\", task: \"Brew coffee\", time: \"07:00\"}];\n  const newTasks = [{device: \"Coffee Maker\", task: \"Brew coffee\", time: \"07:00\"}];\n  expect(automateDeviceTasks(initialTasks, newTasks)).to.deep.equal([{device: \"Coffee Maker\", task: \"Brew coffee\", time: \"07:00\"}]);\n});\n\nit('automateDeviceTasks should correctly manage tasks when adding to an already full schedule', () => {\n  const initialTasks = [\n    {device: \"Humidifier\", task: \"Turn on\", time: \"20:00\"},\n    {device: \"Dehumidifier\", task: \"Turn on\", time: \"20:00\"}\n  ];\n  const newTasks = [\n    {device: \"Humidifier\", task: \"Turn off\", time: \"06:00\"},\n    {device: \"Dehumidifier\", task: \"Turn off\", time: \"06:00\"}\n  ];\n  expect(automateDeviceTasks(initialTasks, newTasks)).to.deep.equal([\n    {device: \"Humidifier\", task: \"Turn on\", time: \"20:00\"},\n    {device: \"Dehumidifier\", task: \"Turn on\", time: \"20:00\"},\n    {device: \"Humidifier\", task: \"Turn off\", time: \"06:00\"},\n    {device: \"Dehumidifier\", task: \"Turn off\", time: \"06:00\"}\n  ]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}