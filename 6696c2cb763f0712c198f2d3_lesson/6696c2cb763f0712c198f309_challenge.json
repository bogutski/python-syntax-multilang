{
  "_id": "6696c2cb763f0712c198f309",
  "name": {
    "en": "/*",
    "ru": "Создание и обновление рейтинга продуктов"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `updateProductRatings` принимает массив рейтингов продуктов и массив обновлений.\n\nКаждый элемент в массиве рейтингов — это объект со свойствами `product` и `rating`.\n\nПример: `[{product: \"Apple\", rating: 8}]`\n\nКаждое обновление — это объект со свойствами `product` и `newRating`.\n\nПример: `[{product: \"Apple\", newRating: 4}]`\n\nФункция должна обновить рейтинг продуктов на основе предоставленных обновлений. Если продукт в обновлениях не существует в рейтингах, его следует добавить.\n\nВерните обновленный массив рейтингов.\n\nПримеры запуска функции:\n```javascript\nupdateProductRatings(\n  [{product: \"Apple\", rating: 5}, {product: \"Banana\", rating: 3}],\n  [{product: \"Apple\", newRating: 4}, {product: \"Cherry\", newRating: 5}]\n)\n// возвращает [{product: \"Apple\", rating: 4}, {product: \"Banana\", rating: 3}, {product: \"Cherry\", rating: 5}]\n\nupdateProductRatings(\n  [{product: \"Watermelon\", rating: 2}],\n  [{product: \"Watermelon\", newRating: 5}, {product: \"Peach\", newRating: 4}]\n)\n// возвращает [{product: \"Watermelon\", rating: 5}, {product: \"Peach\", rating: 4}]\n\nupdateProductRatings(\n  [],\n  [{product: \"Grapes\", newRating: 5}]\n)\n// возвращает [{product: \"Grapes\", rating: 5}]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function updateProductRatings(ratings, updates) {\n  for(let newObj of updates){\n    let needToAdd = true\n\n    for(let originalObj of ratings){\n      if(newObj.product === originalObj.product){\n        originalObj.rating = newObj.newRating\n        needToAdd = false\n        break\n      }\n    }\n\n    if(needToAdd) {\n      const objToAdd = {product: newObj.product, rating: newObj.newRating}\n      ratings.push(objToAdd)\n    }\n\n  }\n\n  return ratings;\n}",
  "openTest": "it('Created function updateProductRatings', () => {\n  expect(updateProductRatings).to.be.a('function');\n});\n\nit('updateProductRatings updates existing product rating', () => {\n  expect(updateProductRatings([{product: \"Apple\", rating: 5}], [{product: \"Apple\", newRating: 4}])).to.deep.equal([{product: \"Apple\", rating: 4}]);\n});\n\nit('updateProductRatings adds new product with its rating', () => {\n  expect(updateProductRatings([{product: \"Apple\", rating: 5}], [{product: \"Banana\", newRating: 3}])).to.deep.equal([{product: \"Apple\", rating: 5}, {product: \"Banana\", rating: 3}]);\n});\n\nit('updateProductRatings handles multiple updates correctly', () => {\n  expect(updateProductRatings(\n      [{product: \"Apple\", rating: 5}, {product: \"Banana\", rating: 3}],\n      [{product: \"Apple\", newRating: 4}, {product: \"Cherry\", newRating: 5}]\n  )).to.deep.equal([{product: \"Apple\", rating: 4}, {product: \"Banana\", rating: 3}, {product: \"Cherry\", rating: 5}]);\n});\n\nit('updateProductRatings returns original ratings if no updates provided', () => {\n  expect(updateProductRatings([{product: \"Apple\", rating: 5}], [])).to.deep.equal([{product: \"Apple\", rating: 5}]);\n});\n\nit('updateProductRatings updates all products if all have updates', () => {\n  expect(updateProductRatings(\n      [{product: \"Apple\", rating: 5}, {product: \"Banana\", rating: 3}],\n      [{product: \"Apple\", newRating: 1}, {product: \"Banana\", newRating: 2}]\n  )).to.deep.equal([{product: \"Apple\", rating: 1}, {product: \"Banana\", rating: 2}]);\n});\n\nit('updateProductRatings correctly handles an empty initial ratings array', () => {\n  expect(updateProductRatings([], [{product: \"Grapes\", newRating: 5}])).to.deep.equal([{product: \"Grapes\", rating: 5}]);\n});\n\nit('updateProductRatings correctly updates a product to a lower rating', () => {\n  expect(updateProductRatings([{product: \"Mango\", rating: 5}], [{product: \"Mango\", newRating: 3}])).to.deep.equal([{product: \"Mango\", rating: 3}]);\n});\n\nit('updateProductRatings maintains the order of products after updates', () => {\n  const originalRatings = [{product: \"Apple\", rating: 5}, {product: \"Banana\", rating: 3}];\n  const updates = [{product: \"Banana\", newRating: 5}, {product: \"Apple\", newRating: 4}];\n  const updatedRatings = updateProductRatings(originalRatings, updates);\n  expect(updatedRatings[0].product).to.equal(\"Apple\");\n  expect(updatedRatings[1].product).to.equal(\"Banana\");\n  expect(updatedRatings).to.deep.equal([{product: \"Apple\", rating: 4}, {product: \"Banana\", rating: 5}]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}