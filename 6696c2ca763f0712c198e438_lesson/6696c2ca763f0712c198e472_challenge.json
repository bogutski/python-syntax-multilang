{
  "_id": "6696c2ca763f0712c198e472",
  "name": {
    "en": "Draw the arrow with the symbols",
    "ru": "Нарисуйте стрелу символами"
  },
  "instruction": {
    "en": "Write a function `arrowArt` that takes a string.\n\nLet the function take a string, convert it to uppercase, and return a string that is a\n an arrow consisting of the characters  `>`, `=` and the string we passed into the function.\n\nAn example of running the function:\n```javascript\narrowArt(''); // '>=>'\narrowArt('r'); // '>=R=>'\narrowArt('go'); // '>>==GO==>>'\narrowArt('abc'); // '>>>===ABC===>>>'\narrowArt('abcd'); // '>>>>====ABCD====>>>>'\narrowArt('pasv'); // '>>>>====PASV====>>>>'\narrowArt('coding'); // '>>>>>>======CODING======>>>>>>'\n```\n\nEach arrow element is repeated as many times as there are characters in the original string.\n\nIf the string is empty, the arrow should be: `'>=>'`.",
    "ru": "Напиши функцию `arrowArt`, которая принимает строку.\n\nПусть функция возьмет строку, переведет ее в верхний регистр и вернет строку, которая будет представлять собой\n стрелку, состоящую из символов `>`, `=` и строки, которую мы передали в функцию.\n\nПример запуска функции:\n```javascript\narrowArt(''); // '>=>'\narrowArt('r'); // '>=R=>'\narrowArt('go'); // '>>==GO==>>'\narrowArt('abc'); // '>>>===ABC===>>>'\narrowArt('abcd'); // '>>>>====ABCD====>>>>'\narrowArt('pasv'); // '>>>>====PASV====>>>>'\narrowArt('coding'); // '>>>>>>======CODING======>>>>>>'\n```\n\nКаждый элемент стрелки повторяется столько раз, сколько символов в исходной строке.\n\nЕсли строка пустая, то стрелка должна быть такая: `'>=>'`."
  },
  "initialSolution": "fun",
  "completedSolution": "function arrowArt(name) {\n  const l = name.length;\n  if (l === 0) return '>=>';\n  return (\n    '>'.repeat(l) + '='.repeat(l) + name.toUpperCase() + '='.repeat(l) + '>'.repeat(l)\n  );\n}",
  "openTest": "it('Created function arrowArt', () => {\n  expect(arrowArt).to.be.a('function');\n});\n\nit('arrowArt(\"\") should return \">=>\"', () => {\n  expect(arrowArt('')).to.be.equal('>=>');\n});\n\nit('arrowArt(\"r\") should return \">=R=>\"', () => {\n  expect(arrowArt('r')).to.be.equal('>=R=>');\n} );\n\nit('arrowArt(\"abc\") should return \">>>===ABC===>>>\"', () => {\n  expect(arrowArt('abc')).to.be.equal('>>>===ABC===>>>');\n});\n\nit('arrowArt(\"abcd\") should return \">>>>====ABCD====>>>>\"', () => {\n  expect(arrowArt('abcd')).to.be.equal('>>>>====ABCD====>>>>');\n});\n\nit('arrowArt(\"pasv\") should return \">>>>====PASV====>>>>\"', () => {\n  expect(arrowArt('pasv')).to.be.equal('>>>>====PASV====>>>>');\n});\n\nit('arrowArt(\"coding\") should return \">>>>>>======CODING======>>>>>>\"', () => {\n  expect(arrowArt('coding')).to.be.equal('>>>>>>======CODING======>>>>>>');\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}