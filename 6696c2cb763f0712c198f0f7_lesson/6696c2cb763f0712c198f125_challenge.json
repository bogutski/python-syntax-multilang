{
  "_id": "6696c2cb763f0712c198f125",
  "name": {
    "en": "",
    "ru": "Удалить дубликаты с использованием `indexOf` и `lastIndexOf`"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `deleteDuplicates` принимает массив в качестве параметра. Массив может состоять из разных типов элементов.\n\nНеобходимо удалить все дубликаты из массива и вернуть массив без дубликатов.\n\nДля решения этой задачи попробуйте использовать методы `indexOf` и `lastIndexOf`.\n\nПримеры запуска функции:\n```javascript\ndeleteDuplicates([1, 2, 3, 3, 4, 5, 5, 5, 6]);        // [1, 2, 3, 4, 5, 6]\ndeleteDuplicates([1, 1, 1, 1, 1, 1, 1, 1, 1]);        // [1]\ndeleteDuplicates(['test', 0, true, true, 1, 'test']); // [0, true, 1, 'test']\n```\n\nПодсказка решения:\n* Используйте цикл `for` для перебора элементов массива\n* Используйте сравнение: если индекс первого вхождения элемента в массиве не равен индексу последнего вхождения элемента в массиве,\nто это значит, что элемент повторяется в массиве и его необходимо удалить c помощью метода `splice`\n* Уменьшите итератор на 1, чтобы не пропустить элемент после удаления"
  },
  "initialSolution": "function",
  "completedSolution": "function deleteDuplicates(arr) {\n  for(let i = 0; i < arr.length; i++){\n    if(arr.indexOf(arr[i]) !== arr.lastIndexOf(arr[i])){\n      arr.splice(i, 1);\n      i--;\n    }\n  }\n  return arr;\n}",
  "openTest": "it('Created function deleteDuplicates', () => {\n  expect(deleteDuplicates).to.be.a('function');\n});\n\nit('deleteDuplicates([1, 2, 3, 3, 4, 5, 5, 5, 6]) should return [1, 2, 3, 4, 5, 6]', () => {\n  expect(deleteDuplicates([1, 2, 3, 3, 4, 5, 5, 5, 6])).to.deep.equal([1, 2, 3, 4, 5, 6]);\n});\n\n\nit('deleteDuplicates([1, 1, 1, 1, 1, 1, 1, 1, 1]) should return [1]', () => {\n  expect(deleteDuplicates([1, 1, 1, 1, 1, 1, 1, 1, 1])).to.deep.equal([1]);\n});\n\nit('deleteDuplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]) should return [1, 2, 3, 4, 5, 6, 7, 8, 9]', () => {\n  expect(deleteDuplicates([1, 2, 3, 4, 5, 6, 7, 8, 9])).to.deep.equal([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n});\n\nit('deleteDuplicates([true, true, false, false, \"true\", \"true\"]) should return [true, false, \"true\"]', () => {\n  expect(deleteDuplicates([true, true, false, false, \"true\", \"true\"])).to.deep.equal([true, false, \"true\"]);\n});\n\nit('deleteDuplicates([]) should return []', () => {\n  expect(deleteDuplicates([])).to.deep.equal([]);\n});\n\nit('deleteDuplicates([\"\", \"\", \"\"]) should return [\"\"]', () => {\n  expect(deleteDuplicates([\"\", \"\", \"\"])).to.deep.equal([\"\"]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}