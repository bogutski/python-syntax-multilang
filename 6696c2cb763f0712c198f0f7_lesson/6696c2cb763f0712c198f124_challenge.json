{
  "_id": "6696c2cb763f0712c198f124",
  "name": {
    "en": "",
    "ru": "Удалить только дубликаты чисел из массива"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `deleteDuplicateNumber` принимает массив в качестве параметра. Массив может содержать числа и строки.\n\nФункция должна вернуть новый массив, в котором удалены все дубликаты чисел. Дубликаты строк должны остаться неизменными.\n\nЕсли в массиве есть не только числа, то они должны остаться на своих местах.\n\nНе используйте метод `splice` для решения этой задачи.\n\nПример запуска функции:\n```javascript\ndeleteDuplicateNumber([1, 2, 1, 4, 2, \"hello\", \"hello\"]) // [1, 2, 4, \"hello\", \"hello\"]\ndeleteDuplicateNumber([1, 2, 1, 4, 2, \"hello\", \"hello\", 1, 2, 1, 4, 2, \"hello\", \"hello\"]) // [1, 2, 4, \"hello\", \"hello\", \"hello\", \"hello\"]\ndeleteDuplicateNumber([\"hello\", \"hello\"]) // [\"hello\", \"hello\"]\n```"
  },
  "initialSolution": "function deleteDuplicateNumber",
  "completedSolution": "function deleteDuplicateNumber(arr) {\n  const newArr = [];\n  const obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (!obj[arr[i]] && typeof arr[i] === 'number') {\n      obj[arr[i]] = 1;\n      newArr.push(arr[i]);\n    } else if (typeof arr[i] !== 'number') newArr.push(arr[i]);\n  }\n  return newArr;\n}",
  "openTest": "it('Created function deleteDuplicateNumber', () => {\n  expect(deleteDuplicateNumber).to.be.a('function');\n});\n\nit('deleteDuplicateNumber does not include statement splice', () => {\n  expect(deleteDuplicateNumber.toString().includes('splice')).to.equal(false);\n});\n\nit('deleteDuplicateNumber([1, 2, 1, 4, 2, \"hello\", \"hello\"]) should return [1, 2, 4, \"hello\", \"hello\"]', () => {\n  expect(deleteDuplicateNumber([1, 2, 1, 4, 2, 'hello', 'hello'])).to.deep.equal([1, 2, 4, \"hello\", \"hello\"]);\n});\n\nit('deleteDuplicateNumber([1, 2, 1, 4, 2, \"hello\", \"hello\", 1, 2, 1, 4, 2, \"hello\", \"hello\"]) should return [1, 2, 4, \"hello\", \"hello\", \"hello\", \"hello\"]', () => {\n  expect(deleteDuplicateNumber([1, 2, 1, 4, 2, 'hello', 'hello', 1, 2, 1, 4, 2, 'hello', 'hello'])).to.deep.equal([1, 2, 4, \"hello\", \"hello\", \"hello\", \"hello\"]);\n});\n\nit('deleteDuplicateNumber([\"hello\", \"hello\"]) should return [\"hello\", \"hello\"]', () => {\n  expect(deleteDuplicateNumber(['hello', 'hello'])).to.deep.equal([\"hello\", \"hello\"]);\n});\n\nit('deleteDuplicateNumber([1, 2, 3]) should return [1, 2, 3]', () => {\n  expect(deleteDuplicateNumber([1, 2, 3])).to.deep.equal([1, 2, 3]);\n});\n\nit('deleteDuplicateNumber([1, 2, 3, 1, 2, 3]) should return [1, 2, 3]', () => {\n  expect(deleteDuplicateNumber([1, 2, 3, 1, 2, 3])).to.deep.equal([1, 2, 3]);\n});\n\nit('deleteDuplicateNumber([1, 1]) should return [1]', () => {\n  expect(deleteDuplicateNumber([1, 1])).to.deep.equal([1]);\n});\n\nit('deleteDuplicateNumber([]) should return []', () => {\n  expect(deleteDuplicateNumber([])).to.deep.equal([]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}