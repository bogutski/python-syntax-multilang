{
  "_id": "6696c2cb763f0712c198f127",
  "name": {
    "en": "",
    "ru": "Удалить дубликаты второго массива из первого массива"
  },
  "instruction": {
    "en": "",
    "ru": "Функция `deleteDuplicates` принимает два массива `arr1` и `arr2`.\n\nНеобходимо удалить из массива `arr1` все элементы, которые встречаются в массиве `arr2`.\n\nФункция должна вернуть массив `[arr1, arr2]`\n\nПример запуска функции:\n```javascript\ndeleteDuplicates([1,2,3,4,5], [1,2,3,4,5]) // [[], [1, 2, 3, 4, 5]]\ndeleteDuplicates([1,2,3,4,5], [5,6,7,8,9]) // [[1, 2, 3, 4], [5, 6, 7, 8, 9]]\n```"
  },
  "initialSolution": "fun",
  "completedSolution": "function deleteDuplicates(arr1, arr2) {\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr1.includes(arr2[i])) {\n      arr1.splice(arr1.indexOf(arr2[i]), 1);\n      i--\n    }\n  }\n  return [arr1, arr2]\n}",
  "openTest": "it('Created function deleteDuplicates', () => {\n  expect(deleteDuplicates).to.be.a('function');\n});\n\nit('deleteDuplicates([1,2,3,4,5], [1,2,3,4,5]) should return [[],[1, 2, 3, 4, 5]]', () => {\n  expect(deleteDuplicates([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])).to.deep.equal([[], [1, 2, 3, 4, 5]]);\n});\n\nit('deleteDuplicates([1,2,3,4,5], [5,6,7,8,9]) should return [[1, 2, 3, 4], 5, 6, 7, 8, 9]]', () => {\n  expect(deleteDuplicates([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])).to.deep.equal([[1, 2, 3, 4], [5, 6, 7, 8, 9]]);\n});\n\nit('deleteDuplicates([\"hello\", \"world\"], [\"js\", \"world\"]) should return [[\"hello\"], [\"js\", \"world\"]]', () => {\n  expect(deleteDuplicates([\"hello\", \"world\"], [\"js\", \"world\"])).to.deep.equal([[\"hello\"], [\"js\", \"world\"]]);\n});\n\nit('deleteDuplicates([\"\", \"\"], [\"\"]) should return [[], [\"\"]]', () => {\n  expect(deleteDuplicates([\"\", \"\"], [\"\"])).to.deep.equal([[], [\"\"]]);\n});\n\nit('deleteDuplicates([], []) should return [[], []]', () => {\n  expect(deleteDuplicates([], [])).to.deep.equal([[], []]);\n});\n\nit('deleteDuplicates([1, 1, 1, 1], [1,2,3,4,5,6,7,8,9]) should return [[], [1, 2, 3, 4, 5, 6, 7, 8, 9]]', () => {\n  expect(deleteDuplicates([1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9])).to.deep.equal([[], [1, 2, 3, 4, 5, 6, 7, 8, 9]]);\n});",
  "hiddenTest": "",
  "programmingLang": "JavaScript",
  "status": "new",
  "level": "Easy",
  "showOpenTest": true,
  "active": false,
  "checker": "unit",
  "hint": {
    "en": "",
    "ru": ""
  }
}